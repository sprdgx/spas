"use strict";
(function() {

var $goVersion = "go1.19.13";
Error.stackTraceLimit = Infinity;

var $NaN = NaN;
var $global, $module;
if (typeof window !== "undefined") { /* web page */
    $global = window;
} else if (typeof self !== "undefined") { /* web worker */
    $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
    $global = global;
    $global.require = require;
} else { /* others (e.g. Nashorn) */
    $global = this;
}

if ($global === undefined || $global.Array === undefined) {
    throw new Error("no global object found");
}
if (typeof module !== "undefined") {
    $module = module;
}

if (!$global.fs && $global.require) {
    try {
        var fs = $global.require('fs');
        if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
            $global.fs = fs;
        }
    } catch (e) { /* Ignore if the module couldn't be loaded. */ }
}

if (!$global.fs) {
    var outputBuf = "";
    var decoder = new TextDecoder("utf-8");
    $global.fs = {
        constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
        writeSync: function writeSync(fd, buf) {
            outputBuf += decoder.decode(buf);
            var nl = outputBuf.lastIndexOf("\n");
            if (nl != -1) {
                console.log(outputBuf.substr(0, nl));
                outputBuf = outputBuf.substr(nl + 1);
            }
            return buf.length;
        },
        write: function write(fd, buf, offset, length, position, callback) {
            if (offset !== 0 || length !== buf.length || position !== null) {
                callback(enosys());
                return;
            }
            var n = this.writeSync(fd, buf);
            callback(null, n);
        }
    };
}

var $linknames = {} // Collection of functions referenced by a go:linkname directive.
var $packages = {}, $idCounter = 0;
var $keys = m => { return m ? Object.keys(m) : []; };
var $flushConsole = () => { };
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = () => { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = (fn, rcvr, args) => { return fn.apply(rcvr, args); };
var $makeFunc = fn => { return function(...args) { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(args, []))), $emptyInterface); }; };
var $unused = v => { };
var $print = console.log;
// Under Node we can emulate print() more closely by avoiding a newline.
if (($global.process !== undefined) && $global.require) {
    try {
        var util = $global.require('util');
        $print = function(...args) { $global.process.stderr.write(util.format.apply(this, args)); };
    } catch (e) {
        // Failed to require util module, keep using console.log().
    }
}
var $println = console.log

var $initAllLinknames = () => {
    var names = $keys($packages);
    for (var i = 0; i < names.length; i++) {
        var f = $packages[names[i]]["$initLinknames"];
        if (typeof f == 'function') {
            f();
        }
    }
}

var $mapArray = (array, f) => {
    var newArray = new array.constructor(array.length);
    for (var i = 0; i < array.length; i++) {
        newArray[i] = f(array[i]);
    }
    return newArray;
};

// $mapIndex returns the value of the given key in m, or undefined if m is nil/undefined or not a map
var $mapIndex = (m, key) => {
    return typeof m.get === "function" ? m.get(key) : undefined;
};
// $mapDelete deletes the key and associated value from m.  If m is nil/undefined or not a map, $mapDelete is a no-op
var $mapDelete = (m, key) => {
    typeof m.delete === "function" && m.delete(key)
};
// Returns a method bound to the receiver instance, safe to invoke as a 
// standalone function. Bound function is cached for later reuse.
var $methodVal = (recv, name) => {
    var vals = recv.$methodVals || {};
    recv.$methodVals = vals; /* noop for primitives */
    var f = vals[name];
    if (f !== undefined) {
        return f;
    }
    var method = recv[name];
    f = method.bind(recv);
    vals[name] = f;
    return f;
};

var $methodExpr = (typ, name) => {
    var method = typ.prototype[name];
    if (method.$expr === undefined) {
        method.$expr = (...args) => {
            $stackDepthOffset--;
            try {
                if (typ.wrapped) {
                    args[0] = new typ(args[0]);
                }
                return Function.call.apply(method, args);
            } finally {
                $stackDepthOffset++;
            }
        };
    }
    return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = name => {
    var expr = $ifaceMethodExprs["$" + name];
    if (expr === undefined) {
        expr = $ifaceMethodExprs["$" + name] = (...args) => {
            $stackDepthOffset--;
            try {
                return Function.call.apply(args[0][name], args);
            } finally {
                $stackDepthOffset++;
            }
        };
    }
    return expr;
};

var $subslice = (slice, low, high, max) => {
    if (high === undefined) {
        high = slice.$length;
    }
    if (max === undefined) {
        max = slice.$capacity;
    }
    if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
        $throwRuntimeError("slice bounds out of range");
    }
    if (slice === slice.constructor.nil) {
        return slice;
    }
    var s = new slice.constructor(slice.$array);
    s.$offset = slice.$offset + low;
    s.$length = high - low;
    s.$capacity = max - low;
    return s;
};

var $substring = (str, low, high) => {
    if (low < 0 || high < low || high > str.length) {
        $throwRuntimeError("slice bounds out of range");
    }
    return str.substring(low, high);
};

// Convert Go slice to an equivalent JS array type.
var $sliceToNativeArray = slice => {
    if (slice.$array.constructor !== Array) {
        return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
    }
    return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

// Convert Go slice to a pointer to an underlying Go array.
// 
// Note that an array pointer can be represented by an "unwrapped" native array
// type, and it will be wrapped back into its Go type when necessary.
var $sliceToGoArray = (slice, arrayPtrType) => {
    var arrayType = arrayPtrType.elem;
    if (arrayType !== undefined && slice.$length < arrayType.len) {
        $throwRuntimeError("cannot convert slice with length " + slice.$length + " to pointer to array with length " + arrayType.len);
    }
    if (slice == slice.constructor.nil) {
        return arrayPtrType.nil; // Nil slice converts to nil array pointer.
    }
    if (slice.$array.constructor !== Array) {
        return slice.$array.subarray(slice.$offset, slice.$offset + arrayType.len);
    }
    if (slice.$offset == 0 && slice.$length == slice.$capacity && slice.$length == arrayType.len) {
        return slice.$array;
    }
    if (arrayType.len == 0) {
        return new arrayType([]);
    }

    // Array.slice (unlike TypedArray.subarray) returns a copy of an array range,
    // which is not sharing memory with the original one, which violates the spec
    // for slice to array conversion. This is incompatible with the Go spec, in
    // particular that the assignments to the array elements would be visible in
    // the slice. Prefer to fail explicitly instead of creating subtle bugs.
    $throwRuntimeError("gopherjs: non-numeric slice to underlying array conversion is not supported for subslices");
};

// Convert between compatible slice types (e.g. native and names).
var $convertSliceType = (slice, desiredType) => {
    if (slice == slice.constructor.nil) {
        return desiredType.nil; // Preserve nil value.
    }

    return $subslice(new desiredType(slice.$array), slice.$offset, slice.$offset + slice.$length);
}

var $decodeRune = (str, pos) => {
    var c0 = str.charCodeAt(pos);

    if (c0 < 0x80) {
        return [c0, 1];
    }

    if (c0 !== c0 || c0 < 0xC0) {
        return [0xFFFD, 1];
    }

    var c1 = str.charCodeAt(pos + 1);
    if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xE0) {
        var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
        if (r <= 0x7F) {
            return [0xFFFD, 1];
        }
        return [r, 2];
    }

    var c2 = str.charCodeAt(pos + 2);
    if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xF0) {
        var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
        if (r <= 0x7FF) {
            return [0xFFFD, 1];
        }
        if (0xD800 <= r && r <= 0xDFFF) {
            return [0xFFFD, 1];
        }
        return [r, 3];
    }

    var c3 = str.charCodeAt(pos + 3);
    if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xF8) {
        var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
        if (r <= 0xFFFF || 0x10FFFF < r) {
            return [0xFFFD, 1];
        }
        return [r, 4];
    }

    return [0xFFFD, 1];
};

var $encodeRune = r => {
    if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
        r = 0xFFFD;
    }
    if (r <= 0x7F) {
        return String.fromCharCode(r);
    }
    if (r <= 0x7FF) {
        return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
    }
    if (r <= 0xFFFF) {
        return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
    }
    return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = str => {
    var array = new Uint8Array(str.length);
    for (var i = 0; i < str.length; i++) {
        array[i] = str.charCodeAt(i);
    }
    return array;
};

var $bytesToString = slice => {
    if (slice.$length === 0) {
        return "";
    }
    var str = "";
    for (var i = 0; i < slice.$length; i += 10000) {
        str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
    }
    return str;
};

var $stringToRunes = str => {
    var array = new Int32Array(str.length);
    var rune, j = 0;
    for (var i = 0; i < str.length; i += rune[1], j++) {
        rune = $decodeRune(str, i);
        array[j] = rune[0];
    }
    return array.subarray(0, j);
};

var $runesToString = slice => {
    if (slice.$length === 0) {
        return "";
    }
    var str = "";
    for (var i = 0; i < slice.$length; i++) {
        str += $encodeRune(slice.$array[slice.$offset + i]);
    }
    return str;
};

var $copyString = (dst, src) => {
    var n = Math.min(src.length, dst.$length);
    for (var i = 0; i < n; i++) {
        dst.$array[dst.$offset + i] = src.charCodeAt(i);
    }
    return n;
};

var $copySlice = (dst, src) => {
    var n = Math.min(src.$length, dst.$length);
    $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
    return n;
};

var $copyArray = (dst, src, dstOffset, srcOffset, n, elem) => {
    if (n === 0 || (dst === src && dstOffset === srcOffset)) {
        return;
    }

    if (src.subarray) {
        dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
        return;
    }

    switch (elem.kind) {
        case $kindArray:
        case $kindStruct:
            if (dst === src && dstOffset > srcOffset) {
                for (var i = n - 1; i >= 0; i--) {
                    elem.copy(dst[dstOffset + i], src[srcOffset + i]);
                }
                return;
            }
            for (var i = 0; i < n; i++) {
                elem.copy(dst[dstOffset + i], src[srcOffset + i]);
            }
            return;
    }

    if (dst === src && dstOffset > srcOffset) {
        for (var i = n - 1; i >= 0; i--) {
            dst[dstOffset + i] = src[srcOffset + i];
        }
        return;
    }
    for (var i = 0; i < n; i++) {
        dst[dstOffset + i] = src[srcOffset + i];
    }
};

var $clone = (src, type) => {
    var clone = type.zero();
    type.copy(clone, src);
    return clone;
};

var $pointerOfStructConversion = (obj, type) => {
    if (obj.$proxies === undefined) {
        obj.$proxies = {};
        obj.$proxies[obj.constructor.string] = obj;
    }
    var proxy = obj.$proxies[type.string];
    if (proxy === undefined) {
        var properties = {};
        for (var i = 0; i < type.elem.fields.length; i++) {
            (fieldProp => {
                properties[fieldProp] = {
                    get() { return obj[fieldProp]; },
                    set(value) { obj[fieldProp] = value; }
                };
            })(type.elem.fields[i].prop);
        }
        proxy = Object.create(type.prototype, properties);
        proxy.$val = proxy;
        obj.$proxies[type.string] = proxy;
        proxy.$proxies = obj.$proxies;
    }
    return proxy;
};

var $append = function (slice) {
    return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = (slice, toAppend) => {
    if (toAppend.constructor === String) {
        var bytes = $stringToBytes(toAppend);
        return $internalAppend(slice, bytes, 0, bytes.length);
    }
    return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = (slice, array, offset, length) => {
    if (length === 0) {
        return slice;
    }

    var newArray = slice.$array;
    var newOffset = slice.$offset;
    var newLength = slice.$length + length;
    var newCapacity = slice.$capacity;

    if (newLength > newCapacity) {
        newOffset = 0;
        newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

        if (slice.$array.constructor === Array) {
            newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
            newArray.length = newCapacity;
            var zero = slice.constructor.elem.zero;
            for (var i = slice.$length; i < newCapacity; i++) {
                newArray[i] = zero();
            }
        } else {
            newArray = new slice.$array.constructor(newCapacity);
            newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
        }
    }

    $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

    var newSlice = new slice.constructor(newArray);
    newSlice.$offset = newOffset;
    newSlice.$length = newLength;
    newSlice.$capacity = newCapacity;
    return newSlice;
};

var $equal = (a, b, type) => {
    if (type === $jsObjectPtr) {
        return a === b;
    }
    switch (type.kind) {
        case $kindComplex64:
        case $kindComplex128:
            return a.$real === b.$real && a.$imag === b.$imag;
        case $kindInt64:
        case $kindUint64:
            return a.$high === b.$high && a.$low === b.$low;
        case $kindArray:
            if (a.length !== b.length) {
                return false;
            }
            for (var i = 0; i < a.length; i++) {
                if (!$equal(a[i], b[i], type.elem)) {
                    return false;
                }
            }
            return true;
        case $kindStruct:
            for (var i = 0; i < type.fields.length; i++) {
                var f = type.fields[i];
                if (!$equal(a[f.prop], b[f.prop], f.typ)) {
                    return false;
                }
            }
            return true;
        case $kindInterface:
            return $interfaceIsEqual(a, b);
        default:
            return a === b;
    }
};

var $interfaceIsEqual = (a, b) => {
    if (a === $ifaceNil || b === $ifaceNil) {
        return a === b;
    }
    if (a.constructor !== b.constructor) {
        return false;
    }
    if (a.constructor === $jsObjectPtr) {
        return a.object === b.object;
    }
    if (!a.constructor.comparable) {
        $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
    }
    return $equal(a.$val, b.$val, a.constructor);
};

var $unsafeMethodToFunction = (typ, name, isPtr) => {
    if (isPtr) {
        return (r, ...args) => {
            var ptrType = $ptrType(typ);
            if (r.constructor != ptrType) {
                switch (typ.kind) {
                    case $kindStruct:
                        r = $pointerOfStructConversion(r, ptrType);
                        break;
                    case $kindArray:
                        r = new ptrType(r);
                        break;
                    default:
                        r = new ptrType(r.$get, r.$set, r.$target);
                }
            }
            return r[name](...args);
        };
    } else {
        return (r, ...args) => {
            var ptrType = $ptrType(typ);
            if (r.constructor != ptrType) {
                switch (typ.kind) {
                    case $kindStruct:
                        r = $clone(r, typ);
                        break;
                    case $kindSlice:
                        r = $convertSliceType(r, typ);
                        break;
                    case $kindComplex64:
                    case $kindComplex128:
                        r = new typ(r.$real, r.$imag);
                        break;
                    default:
                        r = new typ(r);
                }
            }
            return r[name](...args);
        };
    }
};

var $id = x => {
    return x;
};

var $instanceOf = (x, y) => {
    return x instanceof y;
};

var $typeOf = x => {
    return typeof (x);
};
var $min = Math.min;
var $mod = (x, y) => { return x % y; };
var $parseInt = parseInt;
var $parseFloat = f => {
    if (f !== undefined && f !== null && f.constructor === Number) {
        return f;
    }
    return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || (f => {
    $froundBuf[0] = f;
    return $froundBuf[0];
});

var $imul = Math.imul || ((a, b) => {
    var ah = (a >>> 16) & 0xffff;
    var al = a & 0xffff;
    var bh = (b >>> 16) & 0xffff;
    var bl = b & 0xffff;
    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
});

var $floatKey = f => {
    if (f !== f) {
        $idCounter++;
        return "NaN$" + $idCounter;
    }
    return String(f);
};

var $flatten64 = x => {
    return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(x.$low << (y - 32), 0);
    }
    return new x.constructor(0, 0);
};

var $shiftRightInt64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
    }
    if (x.$high < 0) {
        return new x.constructor(-1, 4294967295);
    }
    return new x.constructor(0, 0);
};

var $shiftRightUint64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(0, x.$high >>> (y - 32));
    }
    return new x.constructor(0, 0);
};

var $mul64 = (x, y) => {
    var x48 = x.$high >>> 16;
    var x32 = x.$high & 0xFFFF;
    var x16 = x.$low >>> 16;
    var x00 = x.$low & 0xFFFF;

    var y48 = y.$high >>> 16;
    var y32 = y.$high & 0xFFFF;
    var y16 = y.$low >>> 16;
    var y00 = y.$low & 0xFFFF;

    var z48 = 0, z32 = 0, z16 = 0, z00 = 0;
    z00 += x00 * y00;
    z16 += z00 >>> 16;
    z00 &= 0xFFFF;
    z16 += x16 * y00;
    z32 += z16 >>> 16;
    z16 &= 0xFFFF;
    z16 += x00 * y16;
    z32 += z16 >>> 16;
    z16 &= 0xFFFF;
    z32 += x32 * y00;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z32 += x16 * y16;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z32 += x00 * y32;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z48 += x48 * y00 + x32 * y16 + x16 * y32 + x00 * y48;
    z48 &= 0xFFFF;

    var hi = ((z48 << 16) | z32) >>> 0;
    var lo = ((z16 << 16) | z00) >>> 0;

    var r = new x.constructor(hi, lo);
    return r;
};

var $div64 = (x, y, returnRemainder) => {
    if (y.$high === 0 && y.$low === 0) {
        $throwRuntimeError("integer divide by zero");
    }

    var s = 1;
    var rs = 1;

    var xHigh = x.$high;
    var xLow = x.$low;
    if (xHigh < 0) {
        s = -1;
        rs = -1;
        xHigh = -xHigh;
        if (xLow !== 0) {
            xHigh--;
            xLow = 4294967296 - xLow;
        }
    }

    var yHigh = y.$high;
    var yLow = y.$low;
    if (y.$high < 0) {
        s *= -1;
        yHigh = -yHigh;
        if (yLow !== 0) {
            yHigh--;
            yLow = 4294967296 - yLow;
        }
    }

    var high = 0, low = 0, n = 0;
    while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
        yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
        yLow = (yLow << 1) >>> 0;
        n++;
    }
    for (var i = 0; i <= n; i++) {
        high = high << 1 | low >>> 31;
        low = (low << 1) >>> 0;
        if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
            xHigh = xHigh - yHigh;
            xLow = xLow - yLow;
            if (xLow < 0) {
                xHigh--;
                xLow += 4294967296;
            }
            low++;
            if (low === 4294967296) {
                high++;
                low = 0;
            }
        }
        yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
        yHigh = yHigh >>> 1;
    }

    if (returnRemainder) {
        return new x.constructor(xHigh * rs, xLow * rs);
    }
    return new x.constructor(high * s, low * s);
};

var $divComplex = (n, d) => {
    var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
    var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
    var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
    var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
    if (nnan || dnan) {
        return new n.constructor(NaN, NaN);
    }
    if (ninf && !dinf) {
        return new n.constructor(Infinity, Infinity);
    }
    if (!ninf && dinf) {
        return new n.constructor(0, 0);
    }
    if (d.$real === 0 && d.$imag === 0) {
        if (n.$real === 0 && n.$imag === 0) {
            return new n.constructor(NaN, NaN);
        }
        return new n.constructor(Infinity, Infinity);
    }
    var a = Math.abs(d.$real);
    var b = Math.abs(d.$imag);
    if (a <= b) {
        var ratio = d.$real / d.$imag;
        var denom = d.$real * ratio + d.$imag;
        return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
    }
    var ratio = d.$imag / d.$real;
    var denom = d.$imag * ratio + d.$real;
    return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};
var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = f => {
    if ($methodSynthesizers === null) {
        f();
        return;
    }
    $methodSynthesizers.push(f);
};
var $synthesizeMethods = () => {
    $methodSynthesizers.forEach(f => { f(); });
    $methodSynthesizers = null;
};

var $ifaceKeyFor = x => {
    if (x === $ifaceNil) {
        return 'nil';
    }
    var c = x.constructor;
    return c.string + '$' + c.keyFor(x.$val);
};

var $identity = x => { return x; };

var $typeIDCounter = 0;

var $idKey = x => {
    if (x.$id === undefined) {
        $idCounter++;
        x.$id = $idCounter;
    }
    return String(x.$id);
};

// Creates constructor functions for array pointer types. Returns a new function
// instace each time to make sure each type is independent of the other.
var $arrayPtrCtor = () => {
    return function (array) {
        this.$get = () => { return array; };
        this.$set = function (v) { typ.copy(this, v); };
        this.$val = array;
    };
}

var $newType = (size, kind, string, named, pkg, exported, constructor) => {
    var typ;
    switch (kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = $identity;
            break;

        case $kindString:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = x => { return "$" + x; };
            break;

        case $kindFloat32:
        case $kindFloat64:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = x => { return $floatKey(x); };
            break;

        case $kindInt64:
            typ = function (high, low) {
                this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
                this.$low = low >>> 0;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$high + "$" + x.$low; };
            break;

        case $kindUint64:
            typ = function (high, low) {
                this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
                this.$low = low >>> 0;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$high + "$" + x.$low; };
            break;

        case $kindComplex64:
            typ = function (real, imag) {
                this.$real = $fround(real);
                this.$imag = $fround(imag);
                this.$val = this;
            };
            typ.keyFor = x => { return x.$real + "$" + x.$imag; };
            break;

        case $kindComplex128:
            typ = function (real, imag) {
                this.$real = real;
                this.$imag = imag;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$real + "$" + x.$imag; };
            break;

        case $kindArray:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, $arrayPtrCtor());
            typ.init = (elem, len) => {
                typ.elem = elem;
                typ.len = len;
                typ.comparable = elem.comparable;
                typ.keyFor = x => {
                    return Array.prototype.join.call($mapArray(x, e => {
                        return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
                    }), "$");
                };
                typ.copy = (dst, src) => {
                    $copyArray(dst, src, 0, 0, src.length, elem);
                };
                typ.ptr.init(typ);
                Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
            };
            break;

        case $kindChan:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = $idKey;
            typ.init = (elem, sendOnly, recvOnly) => {
                typ.elem = elem;
                typ.sendOnly = sendOnly;
                typ.recvOnly = recvOnly;
            };
            break;

        case $kindFunc:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.init = (params, results, variadic) => {
                typ.params = params;
                typ.results = results;
                typ.variadic = variadic;
                typ.comparable = false;
            };
            break;

        case $kindInterface:
            typ = { implementedBy: {}, missingMethodFor: {} };
            typ.keyFor = $ifaceKeyFor;
            typ.init = methods => {
                typ.methods = methods;
                methods.forEach(m => {
                    $ifaceNil[m.prop] = $throwNilPointerError;
                });
            };
            break;

        case $kindMap:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.init = (key, elem) => {
                typ.key = key;
                typ.elem = elem;
                typ.comparable = false;
            };
            break;

        case $kindPtr:
            typ = constructor || function (getter, setter, target) {
                this.$get = getter;
                this.$set = setter;
                this.$target = target;
                this.$val = this;
            };
            typ.keyFor = $idKey;
            typ.init = elem => {
                typ.elem = elem;
                typ.wrapped = (elem.kind === $kindArray);
                typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
            };
            break;

        case $kindSlice:
            typ = function (array) {
                if (array.constructor !== typ.nativeArray) {
                    array = new typ.nativeArray(array);
                }
                this.$array = array;
                this.$offset = 0;
                this.$length = array.length;
                this.$capacity = array.length;
                this.$val = this;
            };
            typ.init = elem => {
                typ.elem = elem;
                typ.comparable = false;
                typ.nativeArray = $nativeArray(elem.kind);
                typ.nil = new typ([]);
            };
            break;

        case $kindStruct:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
            typ.ptr.elem = typ;
            typ.ptr.prototype.$get = function () { return this; };
            typ.ptr.prototype.$set = function (v) { typ.copy(this, v); };
            typ.init = (pkgPath, fields) => {
                typ.pkgPath = pkgPath;
                typ.fields = fields;
                fields.forEach(f => {
                    if (!f.typ.comparable) {
                        typ.comparable = false;
                    }
                });
                typ.keyFor = x => {
                    var val = x.$val;
                    return $mapArray(fields, f => {
                        return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
                    }).join("$");
                };
                typ.copy = (dst, src) => {
                    for (var i = 0; i < fields.length; i++) {
                        var f = fields[i];
                        switch (f.typ.kind) {
                            case $kindArray:
                            case $kindStruct:
                                f.typ.copy(dst[f.prop], src[f.prop]);
                                continue;
                            default:
                                dst[f.prop] = src[f.prop];
                                continue;
                        }
                    }
                };
                /* nil value */
                var properties = {};
                fields.forEach(f => {
                    properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
                });
                typ.ptr.nil = Object.create(constructor.prototype, properties);
                typ.ptr.nil.$val = typ.ptr.nil;
                /* methods for embedded fields */
                $addMethodSynthesizer(() => {
                    var synthesizeMethod = (target, m, f) => {
                        if (target.prototype[m.prop] !== undefined) { return; }
                        target.prototype[m.prop] = function(...args) {
                            var v = this.$val[f.prop];
                            if (f.typ === $jsObjectPtr) {
                                v = new $jsObjectPtr(v);
                            }
                            if (v.$val === undefined) {
                                v = new f.typ(v);
                            }
                            return v[m.prop](...args);
                        };
                    };
                    fields.forEach(f => {
                        if (f.embedded) {
                            $methodSet(f.typ).forEach(m => {
                                synthesizeMethod(typ, m, f);
                                synthesizeMethod(typ.ptr, m, f);
                            });
                            $methodSet($ptrType(f.typ)).forEach(m => {
                                synthesizeMethod(typ.ptr, m, f);
                            });
                        }
                    });
                });
            };
            break;

        default:
            $panic(new $String("invalid kind: " + kind));
    }

    switch (kind) {
        case $kindBool:
        case $kindMap:
            typ.zero = () => { return false; };
            break;

        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
        case $kindFloat32:
        case $kindFloat64:
            typ.zero = () => { return 0; };
            break;

        case $kindString:
            typ.zero = () => { return ""; };
            break;

        case $kindInt64:
        case $kindUint64:
        case $kindComplex64:
        case $kindComplex128:
            var zero = new typ(0, 0);
            typ.zero = () => { return zero; };
            break;

        case $kindPtr:
        case $kindSlice:
            typ.zero = () => { return typ.nil; };
            break;

        case $kindChan:
            typ.zero = () => { return $chanNil; };
            break;

        case $kindFunc:
            typ.zero = () => { return $throwNilPointerError; };
            break;

        case $kindInterface:
            typ.zero = () => { return $ifaceNil; };
            break;

        case $kindArray:
            typ.zero = () => {
                var arrayClass = $nativeArray(typ.elem.kind);
                if (arrayClass !== Array) {
                    return new arrayClass(typ.len);
                }
                var array = new Array(typ.len);
                for (var i = 0; i < typ.len; i++) {
                    array[i] = typ.elem.zero();
                }
                return array;
            };
            break;

        case $kindStruct:
            typ.zero = () => { return new typ.ptr(); };
            break;

        default:
            $panic(new $String("invalid kind: " + kind));
    }

    typ.id = $typeIDCounter;
    $typeIDCounter++;
    typ.size = size;
    typ.kind = kind;
    typ.string = string;
    typ.named = named;
    typ.pkg = pkg;
    typ.exported = exported;
    typ.methods = [];
    typ.methodSetCache = null;
    typ.comparable = true;
    return typ;
};

var $methodSet = typ => {
    if (typ.methodSetCache !== null) {
        return typ.methodSetCache;
    }
    var base = {};

    var isPtr = (typ.kind === $kindPtr);
    if (isPtr && typ.elem.kind === $kindInterface) {
        typ.methodSetCache = [];
        return [];
    }

    var current = [{ typ: isPtr ? typ.elem : typ, indirect: isPtr }];

    var seen = {};

    while (current.length > 0) {
        var next = [];
        var mset = [];

        current.forEach(e => {
            if (seen[e.typ.string]) {
                return;
            }
            seen[e.typ.string] = true;

            if (e.typ.named) {
                mset = mset.concat(e.typ.methods);
                if (e.indirect) {
                    mset = mset.concat($ptrType(e.typ).methods);
                }
            }

            switch (e.typ.kind) {
                case $kindStruct:
                    e.typ.fields.forEach(f => {
                        if (f.embedded) {
                            var fTyp = f.typ;
                            var fIsPtr = (fTyp.kind === $kindPtr);
                            next.push({ typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr });
                        }
                    });
                    break;

                case $kindInterface:
                    mset = mset.concat(e.typ.methods);
                    break;
            }
        });

        mset.forEach(m => {
            if (base[m.name] === undefined) {
                base[m.name] = m;
            }
        });

        current = next;
    }

    typ.methodSetCache = [];
    Object.keys(base).sort().forEach(name => {
        typ.methodSetCache.push(base[name]);
    });
    return typ.methodSetCache;
};

var $Bool = $newType(1, $kindBool, "bool", true, "", false, null);
var $Int = $newType(4, $kindInt, "int", true, "", false, null);
var $Int8 = $newType(1, $kindInt8, "int8", true, "", false, null);
var $Int16 = $newType(2, $kindInt16, "int16", true, "", false, null);
var $Int32 = $newType(4, $kindInt32, "int32", true, "", false, null);
var $Int64 = $newType(8, $kindInt64, "int64", true, "", false, null);
var $Uint = $newType(4, $kindUint, "uint", true, "", false, null);
var $Uint8 = $newType(1, $kindUint8, "uint8", true, "", false, null);
var $Uint16 = $newType(2, $kindUint16, "uint16", true, "", false, null);
var $Uint32 = $newType(4, $kindUint32, "uint32", true, "", false, null);
var $Uint64 = $newType(8, $kindUint64, "uint64", true, "", false, null);
var $Uintptr = $newType(4, $kindUintptr, "uintptr", true, "", false, null);
var $Float32 = $newType(4, $kindFloat32, "float32", true, "", false, null);
var $Float64 = $newType(8, $kindFloat64, "float64", true, "", false, null);
var $Complex64 = $newType(8, $kindComplex64, "complex64", true, "", false, null);
var $Complex128 = $newType(16, $kindComplex128, "complex128", true, "", false, null);
var $String = $newType(8, $kindString, "string", true, "", false, null);
var $UnsafePointer = $newType(4, $kindUnsafePointer, "unsafe.Pointer", true, "unsafe", false, null);

var $nativeArray = elemKind => {
    switch (elemKind) {
        case $kindInt:
            return Int32Array;
        case $kindInt8:
            return Int8Array;
        case $kindInt16:
            return Int16Array;
        case $kindInt32:
            return Int32Array;
        case $kindUint:
            return Uint32Array;
        case $kindUint8:
            return Uint8Array;
        case $kindUint16:
            return Uint16Array;
        case $kindUint32:
            return Uint32Array;
        case $kindUintptr:
            return Uint32Array;
        case $kindFloat32:
            return Float32Array;
        case $kindFloat64:
            return Float64Array;
        default:
            return Array;
    }
};
var $toNativeArray = (elemKind, array) => {
    var nativeArray = $nativeArray(elemKind);
    if (nativeArray === Array) {
        return array;
    }
    return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = (elem, len) => {
    var typeKey = elem.id + "$" + len;
    var typ = $arrayTypes[typeKey];
    if (typ === undefined) {
        typ = $newType(elem.size * len, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
        $arrayTypes[typeKey] = typ;
        typ.init(elem, len);
    }
    return typ;
};

var $chanType = (elem, sendOnly, recvOnly) => {
    var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ");
    if (!sendOnly && !recvOnly && (elem.string[0] == "<")) {
        string += "(" + elem.string + ")";
    } else {
        string += elem.string;
    }
    var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
    var typ = elem[field];
    if (typ === undefined) {
        typ = $newType(4, $kindChan, string, false, "", false, null);
        elem[field] = typ;
        typ.init(elem, sendOnly, recvOnly);
    }
    return typ;
};
var $Chan = function (elem, capacity) {
    if (capacity < 0 || capacity > 2147483647) {
        $throwRuntimeError("makechan: size out of range");
    }
    this.$elem = elem;
    this.$capacity = capacity;
    this.$buffer = [];
    this.$sendQueue = [];
    this.$recvQueue = [];
    this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push() { }, shift() { return undefined; }, indexOf() { return -1; } };

var $funcTypes = {};
var $funcType = (params, results, variadic) => {
    var typeKey = $mapArray(params, p => { return p.id; }).join(",") + "$" + $mapArray(results, r => { return r.id; }).join(",") + "$" + variadic;
    var typ = $funcTypes[typeKey];
    if (typ === undefined) {
        var paramTypes = $mapArray(params, p => { return p.string; });
        if (variadic) {
            paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
        }
        var string = "func(" + paramTypes.join(", ") + ")";
        if (results.length === 1) {
            string += " " + results[0].string;
        } else if (results.length > 1) {
            string += " (" + $mapArray(results, r => { return r.string; }).join(", ") + ")";
        }
        typ = $newType(4, $kindFunc, string, false, "", false, null);
        $funcTypes[typeKey] = typ;
        typ.init(params, results, variadic);
    }
    return typ;
};

var $interfaceTypes = {};
var $interfaceType = methods => {
    var typeKey = $mapArray(methods, m => { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
    var typ = $interfaceTypes[typeKey];
    if (typ === undefined) {
        var string = "interface {}";
        if (methods.length !== 0) {
            string = "interface { " + $mapArray(methods, m => {
                return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
            }).join("; ") + " }";
        }
        typ = $newType(8, $kindInterface, string, false, "", false, null);
        $interfaceTypes[typeKey] = typ;
        typ.init(methods);
    }
    return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{ prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false) }]);

var $mapTypes = {};
var $mapType = (key, elem) => {
    var typeKey = key.id + "$" + elem.id;
    var typ = $mapTypes[typeKey];
    if (typ === undefined) {
        typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
        $mapTypes[typeKey] = typ;
        typ.init(key, elem);
    }
    return typ;
};
var $makeMap = (keyForFunc, entries) => {
    var m = new Map();
    for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        m.set(keyForFunc(e.k), e);
    }
    return m;
};

var $ptrType = elem => {
    var typ = elem.ptr;
    if (typ === undefined) {
        typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
        elem.ptr = typ;
        typ.init(elem);
    }
    return typ;
};

var $newDataPointer = (data, constructor) => {
    if (constructor.elem.kind === $kindStruct) {
        return data;
    }
    return new constructor(() => { return data; }, v => { data = v; });
};

var $indexPtr = (array, index, constructor) => {
    if (array.buffer) {
        // Pointers to the same underlying ArrayBuffer share cache.
        var cache = array.buffer.$ptr = array.buffer.$ptr || {};
        // Pointers of different primitive types are non-comparable and stored in different caches.
        var typeCache = cache[array.name] = cache[array.name] || {};
        var cacheIdx = array.BYTES_PER_ELEMENT * index + array.byteOffset;
        return typeCache[cacheIdx] || (typeCache[cacheIdx] = new constructor(() => { return array[index]; }, v => { array[index] = v; }));
    } else {
        array.$ptr = array.$ptr || {};
        return array.$ptr[index] || (array.$ptr[index] = new constructor(() => { return array[index]; }, v => { array[index] = v; }));
    }
};

var $sliceType = elem => {
    var typ = elem.slice;
    if (typ === undefined) {
        typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
        elem.slice = typ;
        typ.init(elem);
    }
    return typ;
};
var $makeSlice = (typ, length, capacity = length) => {
    if (length < 0 || length > 2147483647) {
        $throwRuntimeError("makeslice: len out of range");
    }
    if (capacity < 0 || capacity < length || capacity > 2147483647) {
        $throwRuntimeError("makeslice: cap out of range");
    }
    var array = new typ.nativeArray(capacity);
    if (typ.nativeArray === Array) {
        for (var i = 0; i < capacity; i++) {
            array[i] = typ.elem.zero();
        }
    }
    var slice = new typ(array);
    slice.$length = length;
    return slice;
};

var $structTypes = {};
var $structType = (pkgPath, fields) => {
    var typeKey = $mapArray(fields, f => { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
    var typ = $structTypes[typeKey];
    if (typ === undefined) {
        var string = "struct { " + $mapArray(fields, f => {
            var str = f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
            if (f.embedded) {
                return str;
            }
            return f.name + " " + str;
        }).join("; ") + " }";
        if (fields.length === 0) {
            string = "struct {}";
        }
        typ = $newType(0, $kindStruct, string, false, "", false, function(...args) {
            this.$val = this;
            for (var i = 0; i < fields.length; i++) {
                var f = fields[i];
                if (f.name == '_') {
                    continue;
                }
                var arg = args[i];
                this[f.prop] = arg !== undefined ? arg : f.typ.zero();
            }
        });
        $structTypes[typeKey] = typ;
        typ.init(pkgPath, fields);
    }
    return typ;
};

var $assertType = (value, type, returnTuple) => {
    var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
    if (value === $ifaceNil) {
        ok = false;
    } else if (!isInterface) {
        ok = value.constructor === type;
    } else {
        var valueTypeString = value.constructor.string;
        ok = type.implementedBy[valueTypeString];
        if (ok === undefined) {
            ok = true;
            var valueMethodSet = $methodSet(value.constructor);
            var interfaceMethods = type.methods;
            for (var i = 0; i < interfaceMethods.length; i++) {
                var tm = interfaceMethods[i];
                var found = false;
                for (var j = 0; j < valueMethodSet.length; j++) {
                    var vm = valueMethodSet[j];
                    if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    ok = false;
                    type.missingMethodFor[valueTypeString] = tm.name;
                    break;
                }
            }
            type.implementedBy[valueTypeString] = ok;
        }
        if (!ok) {
            missingMethod = type.missingMethodFor[valueTypeString];
        }
    }

    if (!ok) {
        if (returnTuple) {
            return [type.zero(), false];
        }
        $panic(new $packages["runtime"].TypeAssertionError.ptr(
            $packages["runtime"]._type.ptr.nil,
            (value === $ifaceNil ? $packages["runtime"]._type.ptr.nil : new $packages["runtime"]._type.ptr(value.constructor.string)),
            new $packages["runtime"]._type.ptr(type.string),
            missingMethod));
    }

    if (!isInterface) {
        value = value.$val;
    }
    if (type === $jsObjectPtr) {
        value = value.object;
    }
    return returnTuple ? [value, true] : value;
};
var $stackDepthOffset = 0;
var $getStackDepth = () => {
    var err = new Error();
    if (err.stack === undefined) {
        return undefined;
    }
    return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = (deferred, jsErr, fromPanic) => {
    if (!fromPanic && deferred !== null && $curGoroutine.deferStack.indexOf(deferred) == -1) {
        throw jsErr;
    }
    if (jsErr !== null) {
        var newErr = null;
        try {
            $panic(new $jsErrorPtr(jsErr));
        } catch (err) {
            newErr = err;
        }
        $callDeferred(deferred, newErr);
        return;
    }
    if ($curGoroutine.asleep) {
        return;
    }

    $stackDepthOffset--;
    var outerPanicStackDepth = $panicStackDepth;
    var outerPanicValue = $panicValue;

    var localPanicValue = $curGoroutine.panicStack.pop();
    if (localPanicValue !== undefined) {
        $panicStackDepth = $getStackDepth();
        $panicValue = localPanicValue;
    }

    try {
        while (true) {
            if (deferred === null) {
                deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
                if (deferred === undefined) {
                    /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
                    $panicStackDepth = null;
                    if (localPanicValue.Object instanceof Error) {
                        throw localPanicValue.Object;
                    }
                    var msg;
                    if (localPanicValue.constructor === $String) {
                        msg = localPanicValue.$val;
                    } else if (localPanicValue.Error !== undefined) {
                        msg = localPanicValue.Error();
                    } else if (localPanicValue.String !== undefined) {
                        msg = localPanicValue.String();
                    } else {
                        msg = localPanicValue;
                    }
                    throw new Error(msg);
                }
            }
            var call = deferred.pop();
            if (call === undefined) {
                $curGoroutine.deferStack.pop();
                if (localPanicValue !== undefined) {
                    deferred = null;
                    continue;
                }
                return;
            }
            var r = call[0].apply(call[2], call[1]);
            if (r && r.$blk !== undefined) {
                deferred.push([r.$blk, [], r]);
                if (fromPanic) {
                    throw null;
                }
                return;
            }

            if (localPanicValue !== undefined && $panicStackDepth === null) {
                /* error was recovered */
                if (fromPanic) {
                    throw null;
                }
                return;
            }
        }
    } catch (e) {
        // Deferred function threw a JavaScript exception or tries to unwind stack
        // to the point where a panic was handled.
        if (fromPanic) {
            // Re-throw the exception to reach deferral execution call at the end
            // of the function.
            throw e;
        }
        // We are at the end of the function, handle the error or re-throw to
        // continue unwinding if necessary, or simply stop unwinding if we got far
        // enough.
        $callDeferred(deferred, e, fromPanic);
    } finally {
        if (localPanicValue !== undefined) {
            if ($panicStackDepth !== null) {
                $curGoroutine.panicStack.push(localPanicValue);
            }
            $panicStackDepth = outerPanicStackDepth;
            $panicValue = outerPanicValue;
        }
        $stackDepthOffset++;
    }
};

var $panic = value => {
    $curGoroutine.panicStack.push(value);
    $callDeferred(null, null, true);
};
var $recover = () => {
    if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
        return $ifaceNil;
    }
    $panicStackDepth = null;
    return $panicValue;
};
var $throw = err => { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true, $exportedFunctions = 0;
var $mainFinished = false;
var $go = (fun, args) => {
    $totalGoroutines++;
    $awakeGoroutines++;
    var $goroutine = () => {
        try {
            $curGoroutine = $goroutine;
            var r = fun(...args);
            if (r && r.$blk !== undefined) {
                fun = () => { return r.$blk(); };
                args = [];
                return;
            }
            $goroutine.exit = true;
        } catch (err) {
            if (!$goroutine.exit) {
                throw err;
            }
        } finally {
            $curGoroutine = $noGoroutine;
            if ($goroutine.exit) { /* also set by runtime.Goexit() */
                $totalGoroutines--;
                $goroutine.asleep = true;
            }
            if ($goroutine.asleep) {
                $awakeGoroutines--;
                if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock && $exportedFunctions === 0) {
                    console.error("fatal error: all goroutines are asleep - deadlock!");
                    if ($global.process !== undefined) {
                        $global.process.exit(2);
                    }
                }
            }
        }
    };
    $goroutine.asleep = false;
    $goroutine.exit = false;
    $goroutine.deferStack = [];
    $goroutine.panicStack = [];
    $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = () => {
    // For nested setTimeout calls browsers enforce 4ms minimum delay. We minimize
    // the effect of this penalty by queueing the timer preemptively before we run
    // the goroutines, and later cancelling it if it turns out unneeded. See:
    // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#nested_timeouts
    var nextRun = setTimeout($runScheduled);
    try {
        var start = Date.now();
        var r;
        while ((r = $scheduled.shift()) !== undefined) {
            r();
            // We need to interrupt this loop in order to allow the event loop to
            // process timers, IO, etc. However, invoking scheduling through
            // setTimeout is ~1000 times more expensive, so we amortize this cost by
            // looping until the 4ms minimal delay has elapsed (assuming there are
            // scheduled goroutines to run), and then yield to the event loop.
            var elapsed = Date.now() - start;
            if (elapsed > 4 || elapsed < 0) { break; }
        }
    } finally {
        if ($scheduled.length == 0) {
            // Cancel scheduling pass if there's nothing to run.
            clearTimeout(nextRun);
        }
    }
};

var $schedule = goroutine => {
    if (goroutine.asleep) {
        goroutine.asleep = false;
        $awakeGoroutines++;
    }
    $scheduled.push(goroutine);
    if ($curGoroutine === $noGoroutine) {
        $runScheduled();
    }
};

var $setTimeout = (f, t) => {
    $awakeGoroutines++;
    return setTimeout(() => {
        $awakeGoroutines--;
        f();
    }, t);
};

var $block = () => {
    if ($curGoroutine === $noGoroutine) {
        $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
    }
    $curGoroutine.asleep = true;
};

var $restore = (context, params) => {
    if (context !== undefined && context.$blk !== undefined) {
        return context;
    }
    return params;
}

var $send = (chan, value) => {
    if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
    }
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv !== undefined) {
        queuedRecv([value, true]);
        return;
    }
    if (chan.$buffer.length < chan.$capacity) {
        chan.$buffer.push(value);
        return;
    }

    var thisGoroutine = $curGoroutine;
    var closedDuringSend;
    chan.$sendQueue.push(closed => {
        closedDuringSend = closed;
        $schedule(thisGoroutine);
        return value;
    });
    $block();
    return {
        $blk() {
            if (closedDuringSend) {
                $throwRuntimeError("send on closed channel");
            }
        }
    };
};
var $recv = chan => {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend !== undefined) {
        chan.$buffer.push(queuedSend(false));
    }
    var bufferedValue = chan.$buffer.shift();
    if (bufferedValue !== undefined) {
        return [bufferedValue, true];
    }
    if (chan.$closed) {
        return [chan.$elem.zero(), false];
    }

    var thisGoroutine = $curGoroutine;
    var f = { $blk() { return this.value; } };
    var queueEntry = v => {
        f.value = v;
        $schedule(thisGoroutine);
    };
    chan.$recvQueue.push(queueEntry);
    $block();
    return f;
};
var $close = chan => {
    if (chan.$closed) {
        $throwRuntimeError("close of closed channel");
    }
    chan.$closed = true;
    while (true) {
        var queuedSend = chan.$sendQueue.shift();
        if (queuedSend === undefined) {
            break;
        }
        queuedSend(true); /* will panic */
    }
    while (true) {
        var queuedRecv = chan.$recvQueue.shift();
        if (queuedRecv === undefined) {
            break;
        }
        queuedRecv([chan.$elem.zero(), false]);
    }
};
var $select = comms => {
    var ready = [];
    var selection = -1;
    for (var i = 0; i < comms.length; i++) {
        var comm = comms[i];
        var chan = comm[0];
        switch (comm.length) {
            case 0: /* default */
                selection = i;
                break;
            case 1: /* recv */
                if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
                    ready.push(i);
                }
                break;
            case 2: /* send */
                if (chan.$closed) {
                    $throwRuntimeError("send on closed channel");
                }
                if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
                    ready.push(i);
                }
                break;
        }
    }

    if (ready.length !== 0) {
        selection = ready[Math.floor(Math.random() * ready.length)];
    }
    if (selection !== -1) {
        var comm = comms[selection];
        switch (comm.length) {
            case 0: /* default */
                return [selection];
            case 1: /* recv */
                return [selection, $recv(comm[0])];
            case 2: /* send */
                $send(comm[0], comm[1]);
                return [selection];
        }
    }

    var entries = [];
    var thisGoroutine = $curGoroutine;
    var f = { $blk() { return this.selection; } };
    var removeFromQueues = () => {
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            var queue = entry[0];
            var index = queue.indexOf(entry[1]);
            if (index !== -1) {
                queue.splice(index, 1);
            }
        }
    };
    for (var i = 0; i < comms.length; i++) {
        (i => {
            var comm = comms[i];
            switch (comm.length) {
                case 1: /* recv */
                    var queueEntry = value => {
                        f.selection = [i, value];
                        removeFromQueues();
                        $schedule(thisGoroutine);
                    };
                    entries.push([comm[0].$recvQueue, queueEntry]);
                    comm[0].$recvQueue.push(queueEntry);
                    break;
                case 2: /* send */
                    var queueEntry = () => {
                        if (comm[0].$closed) {
                            $throwRuntimeError("send on closed channel");
                        }
                        f.selection = [i];
                        removeFromQueues();
                        $schedule(thisGoroutine);
                        return comm[1];
                    };
                    entries.push([comm[0].$sendQueue, queueEntry]);
                    comm[0].$sendQueue.push(queueEntry);
                    break;
            }
        })(i);
    }
    $block();
    return f;
};
var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = t => {
    switch (t.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
            return false;
        default:
            return t !== $jsObjectPtr;
    }
};

var $externalize = (v, t, makeWrapper) => {
    if (t === $jsObjectPtr) {
        return v;
    }
    switch (t.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
            return v;
        case $kindInt64:
        case $kindUint64:
            return $flatten64(v);
        case $kindArray:
            if ($needsExternalization(t.elem)) {
                return $mapArray(v, e => { return $externalize(e, t.elem, makeWrapper); });
            }
            return v;
        case $kindFunc:
            return $externalizeFunction(v, t, false, makeWrapper);
        case $kindInterface:
            if (v === $ifaceNil) {
                return null;
            }
            if (v.constructor === $jsObjectPtr) {
                return v.$val.object;
            }
            return $externalize(v.$val, v.constructor, makeWrapper);
        case $kindMap:
            if (v.keys === undefined) {
                return null;
            }
            var m = {};
            var keys = Array.from(v.keys());
            for (var i = 0; i < keys.length; i++) {
                var entry = v.get(keys[i]);
                m[$externalize(entry.k, t.key, makeWrapper)] = $externalize(entry.v, t.elem, makeWrapper);
            }
            return m;
        case $kindPtr:
            if (v === t.nil) {
                return null;
            }
            return $externalize(v.$get(), t.elem, makeWrapper);
        case $kindSlice:
            if (v === v.constructor.nil) {
                return null;
            }
            if ($needsExternalization(t.elem)) {
                return $mapArray($sliceToNativeArray(v), e => { return $externalize(e, t.elem, makeWrapper); });
            }
            return $sliceToNativeArray(v);
        case $kindString:
            if ($isASCII(v)) {
                return v;
            }
            var s = "", r;
            for (var i = 0; i < v.length; i += r[1]) {
                r = $decodeRune(v, i);
                var c = r[0];
                if (c > 0xFFFF) {
                    var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
                    var l = (c - 0x10000) % 0x400 + 0xDC00;
                    s += String.fromCharCode(h, l);
                    continue;
                }
                s += String.fromCharCode(c);
            }
            return s;
        case $kindStruct:
            var timePkg = $packages["time"];
            if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
                var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
                return new Date($flatten64(milli));
            }

            var noJsObject = {};
            var searchJsObject = (v, t) => {
                if (t === $jsObjectPtr) {
                    return v;
                }
                switch (t.kind) {
                    case $kindPtr:
                        if (v === t.nil) {
                            return noJsObject;
                        }
                        return searchJsObject(v.$get(), t.elem);
                    case $kindStruct:
                        if (t.fields.length === 0) {
                            return noJsObject;
                        }
                        var f = t.fields[0];
                        return searchJsObject(v[f.prop], f.typ);
                    case $kindInterface:
                        return searchJsObject(v.$val, v.constructor);
                    default:
                        return noJsObject;
                }
            };
            var o = searchJsObject(v, t);
            if (o !== noJsObject) {
                return o;
            }

            if (makeWrapper !== undefined) {
                return makeWrapper(v);
            }

            o = {};
            for (var i = 0; i < t.fields.length; i++) {
                var f = t.fields[i];
                if (!f.exported) {
                    continue;
                }
                o[f.name] = $externalize(v[f.prop], f.typ, makeWrapper);
            }
            return o;
    }
    $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = (v, t, passThis, makeWrapper) => {
    if (v === $throwNilPointerError) {
        return null;
    }
    if (v.$externalizeWrapper === undefined) {
        $checkForDeadlock = false;
        v.$externalizeWrapper = function () {
            var args = [];
            for (var i = 0; i < t.params.length; i++) {
                if (t.variadic && i === t.params.length - 1) {
                    var vt = t.params[i].elem, varargs = [];
                    for (var j = i; j < arguments.length; j++) {
                        varargs.push($internalize(arguments[j], vt, makeWrapper));
                    }
                    args.push(new (t.params[i])(varargs));
                    break;
                }
                args.push($internalize(arguments[i], t.params[i], makeWrapper));
            }
            var result = v.apply(passThis ? this : undefined, args);
            switch (t.results.length) {
                case 0:
                    return;
                case 1:
                    return $externalize($copyIfRequired(result, t.results[0]), t.results[0], makeWrapper);
                default:
                    for (var i = 0; i < t.results.length; i++) {
                        result[i] = $externalize($copyIfRequired(result[i], t.results[i]), t.results[i], makeWrapper);
                    }
                    return result;
            }
        };
    }
    return v.$externalizeWrapper;
};

var $internalize = (v, t, recv, seen, makeWrapper) => {
    if (t === $jsObjectPtr) {
        return v;
    }
    if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
    }
    if (v && v.__internal_object__ !== undefined) {
        return $assertType(v.__internal_object__, t, false);
    }
    var timePkg = $packages["time"];
    if (timePkg !== undefined && t === timePkg.Time) {
        if (!(v !== null && v !== undefined && v.constructor === Date)) {
            $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
        }
        return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
    }

    // Cache for values we've already internalized in order to deal with circular
    // references.
    if (seen === undefined) { seen = new Map(); }
    if (!seen.has(t)) { seen.set(t, new Map()); }
    if (seen.get(t).has(v)) { return seen.get(t).get(v); }

    switch (t.kind) {
        case $kindBool:
            return !!v;
        case $kindInt:
            return parseInt(v);
        case $kindInt8:
            return parseInt(v) << 24 >> 24;
        case $kindInt16:
            return parseInt(v) << 16 >> 16;
        case $kindInt32:
            return parseInt(v) >> 0;
        case $kindUint:
            return parseInt(v);
        case $kindUint8:
            return parseInt(v) << 24 >>> 24;
        case $kindUint16:
            return parseInt(v) << 16 >>> 16;
        case $kindUint32:
        case $kindUintptr:
            return parseInt(v) >>> 0;
        case $kindInt64:
        case $kindUint64:
            return new t(0, v);
        case $kindFloat32:
        case $kindFloat64:
            return parseFloat(v);
        case $kindArray:
            if (v.length !== t.len) {
                $throwRuntimeError("got array with wrong size from JavaScript native");
            }
            return $mapArray(v, e => { return $internalize(e, t.elem, makeWrapper); });
        case $kindFunc:
            return function () {
                var args = [];
                for (var i = 0; i < t.params.length; i++) {
                    if (t.variadic && i === t.params.length - 1) {
                        var vt = t.params[i].elem, varargs = arguments[i];
                        for (var j = 0; j < varargs.$length; j++) {
                            args.push($externalize(varargs.$array[varargs.$offset + j], vt, makeWrapper));
                        }
                        break;
                    }
                    args.push($externalize(arguments[i], t.params[i], makeWrapper));
                }
                var result = v.apply(recv, args);
                switch (t.results.length) {
                    case 0:
                        return;
                    case 1:
                        return $internalize(result, t.results[0], makeWrapper);
                    default:
                        for (var i = 0; i < t.results.length; i++) {
                            result[i] = $internalize(result[i], t.results[i], makeWrapper);
                        }
                        return result;
                }
            };
        case $kindInterface:
            if (t.methods.length !== 0) {
                $throwRuntimeError("cannot internalize " + t.string);
            }
            if (v === null) {
                return $ifaceNil;
            }
            if (v === undefined) {
                return new $jsObjectPtr(undefined);
            }
            switch (v.constructor) {
                case Int8Array:
                    return new ($sliceType($Int8))(v);
                case Int16Array:
                    return new ($sliceType($Int16))(v);
                case Int32Array:
                    return new ($sliceType($Int))(v);
                case Uint8Array:
                    return new ($sliceType($Uint8))(v);
                case Uint16Array:
                    return new ($sliceType($Uint16))(v);
                case Uint32Array:
                    return new ($sliceType($Uint))(v);
                case Float32Array:
                    return new ($sliceType($Float32))(v);
                case Float64Array:
                    return new ($sliceType($Float64))(v);
                case Array:
                    return $internalize(v, $sliceType($emptyInterface), makeWrapper);
                case Boolean:
                    return new $Bool(!!v);
                case Date:
                    if (timePkg === undefined) {
                        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
                        return new $jsObjectPtr(v);
                    }
                    return new timePkg.Time($internalize(v, timePkg.Time, makeWrapper));
                case ((() => { })).constructor: // is usually Function, but in Chrome extensions it is something else
                    var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
                    return new funcType($internalize(v, funcType, makeWrapper));
                case Number:
                    return new $Float64(parseFloat(v));
                case String:
                    return new $String($internalize(v, $String, makeWrapper));
                default:
                    if ($global.Node && v instanceof $global.Node) {
                        return new $jsObjectPtr(v);
                    }
                    var mapType = $mapType($String, $emptyInterface);
                    return new mapType($internalize(v, mapType, recv, seen, makeWrapper));
            }
        case $kindMap:
            var m = new Map();
            seen.get(t).set(v, m);
            var keys = $keys(v);
            for (var i = 0; i < keys.length; i++) {
                var k = $internalize(keys[i], t.key, recv, seen, makeWrapper);
                m.set(t.key.keyFor(k), { k, v: $internalize(v[keys[i]], t.elem, recv, seen, makeWrapper) });
            }
            return m;
        case $kindPtr:
            if (t.elem.kind === $kindStruct) {
                return $internalize(v, t.elem, makeWrapper);
            }
        case $kindSlice:
            return new t($mapArray(v, e => { return $internalize(e, t.elem, makeWrapper); }));
        case $kindString:
            v = String(v);
            if ($isASCII(v)) {
                return v;
            }
            var s = "";
            var i = 0;
            while (i < v.length) {
                var h = v.charCodeAt(i);
                if (0xD800 <= h && h <= 0xDBFF) {
                    var l = v.charCodeAt(i + 1);
                    var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
                    s += $encodeRune(c);
                    i += 2;
                    continue;
                }
                s += $encodeRune(h);
                i++;
            }
            return s;
        case $kindStruct:
            var noJsObject = {};
            var searchJsObject = t => {
                if (t === $jsObjectPtr) {
                    return v;
                }
                if (t === $jsObjectPtr.elem) {
                    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
                }
                switch (t.kind) {
                    case $kindPtr:
                        return searchJsObject(t.elem);
                    case $kindStruct:
                        if (t.fields.length === 0) {
                            return noJsObject;
                        }
                        var f = t.fields[0];
                        var o = searchJsObject(f.typ);
                        if (o !== noJsObject) {
                            var n = new t.ptr();
                            n[f.prop] = o;
                            return n;
                        }
                        return noJsObject;
                    default:
                        return noJsObject;
                }
            };
            var o = searchJsObject(t);
            if (o !== noJsObject) {
                return o;
            }
            var n = new t.ptr();
            for (var i = 0; i < t.fields.length; i++) {
              var f = t.fields[i];
      
              if (!f.exported) {
                continue;
              }
              var jsProp = v[f.name];
      
              n[f.prop] = $internalize(jsProp, f.typ, recv, seen, makeWrapper);
            }
      
            return n;
    }
    $throwRuntimeError("cannot internalize " + t.string);
};

var $copyIfRequired = (v, typ) => {
    // interface values
    if (v && v.constructor && v.constructor.copy) {
        return new v.constructor($clone(v.$val, v.constructor))
    }
    // array and struct values
    if (typ.copy) {
        var clone = typ.zero();
        typ.copy(clone, v);
        return clone;
    }
    return v;
}

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = s => {
    for (var i = 0; i < s.length; i++) {
        if (s.charCodeAt(i) >= 128) {
            return false;
        }
    }
    return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", embedded: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, _type, TypeAssertionError, basicFrame, Frames, Frame, Func, errorString, ptrType, sliceType, ptrType$1, structType, sliceType$1, sliceType$2, ptrType$2, ptrType$3, knownPositions, positionCounters, hiddenFrames, knownFrames, buildVersion, init, GOROOT, registerPosition, itoa, callstack, parseCallstack, ParseCallFrame, Callers, CallersFrames, SetFinalizer, FuncForPC, KeepAlive, throw$1, nanotime, fastrand, fastrandu;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	_type = $pkg._type = $newType(0, $kindStruct, "runtime._type", true, "runtime", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(_interface_, concrete_, asserted_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._interface = ptrType$1.nil;
			this.concrete = ptrType$1.nil;
			this.asserted = ptrType$1.nil;
			this.missingMethod = "";
			return;
		}
		this._interface = _interface_;
		this.concrete = concrete_;
		this.asserted = asserted_;
		this.missingMethod = missingMethod_;
	});
	basicFrame = $pkg.basicFrame = $newType(0, $kindStruct, "runtime.basicFrame", true, "runtime", false, function(FuncName_, File_, Line_, Col_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FuncName = "";
			this.File = "";
			this.Line = 0;
			this.Col = 0;
			return;
		}
		this.FuncName = FuncName_;
		this.File = File_;
		this.Line = Line_;
		this.Col = Col_;
	});
	Frames = $pkg.Frames = $newType(0, $kindStruct, "runtime.Frames", true, "runtime", true, function(frames_, current_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.frames = sliceType$2.nil;
			this.current = 0;
			return;
		}
		this.frames = frames_;
		this.current = current_;
	});
	Frame = $pkg.Frame = $newType(0, $kindStruct, "runtime.Frame", true, "runtime", true, function(PC_, Func_, Function_, File_, Line_, Entry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PC = 0;
			this.Func = ptrType.nil;
			this.Function = "";
			this.File = "";
			this.Line = 0;
			this.Entry = 0;
			return;
		}
		this.PC = PC_;
		this.Func = Func_;
		this.Function = Function_;
		this.File = File_;
		this.Line = Line_;
		this.Entry = Entry_;
	});
	Func = $pkg.Func = $newType(0, $kindStruct, "runtime.Func", true, "runtime", true, function(name_, file_, line_, opaque_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.file = "";
			this.line = 0;
			this.opaque = new structType.ptr();
			return;
		}
		this.name = name_;
		this.file = file_;
		this.line = line_;
		this.opaque = opaque_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType = $ptrType(Func);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(_type);
	structType = $structType("", []);
	sliceType$1 = $sliceType(basicFrame);
	sliceType$2 = $sliceType(Frame);
	ptrType$2 = $ptrType(TypeAssertionError);
	ptrType$3 = $ptrType(Frames);
	_type.ptr.prototype.string = function() {
		var t;
		t = this;
		return t.str;
	};
	_type.prototype.string = function() { return this.$val.string(); };
	_type.ptr.prototype.pkgpath = function() {
		var t;
		t = this;
		return "";
	};
	_type.prototype.pkgpath = function() { return this.$val.pkgpath(); };
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var as, cs, e, inter, msg;
		e = this;
		inter = "interface";
		if (!(e._interface === ptrType$1.nil)) {
			inter = e._interface.string();
		}
		as = e.asserted.string();
		if (e.concrete === ptrType$1.nil) {
			return "interface conversion: " + inter + " is nil, not " + as;
		}
		cs = e.concrete.string();
		if (e.missingMethod === "") {
			msg = "interface conversion: " + inter + " is " + cs + ", not " + as;
			if (cs === as) {
				if (!(e.concrete.pkgpath() === e.asserted.pkgpath())) {
					msg = msg + (" (types from different packages)");
				} else {
					msg = msg + (" (types from different scopes)");
				}
			}
			return msg;
		}
		return "interface conversion: " + cs + " is not " + as + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		buildVersion = $internalize($goVersion, $String);
		e = $ifaceNil;
		e = new TypeAssertionError.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, "");
		$unused(e);
	};
	GOROOT = function() {
		var process, v, v$1;
		process = $global.process;
		if (process === undefined || process.env === undefined) {
			return "/";
		}
		v = process.env.GOPHERJS_GOROOT;
		if (!(v === undefined) && !($internalize(v, $String) === "")) {
			return $internalize(v, $String);
		} else {
			v$1 = process.env.GOROOT;
			if (!(v$1 === undefined) && !($internalize(v$1, $String) === "")) {
				return $internalize(v$1, $String);
			}
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	registerPosition = function(funcName, file, line, col) {
		var _entry, _key, _tuple, col, f, file, found, funcName, key, line, pc, pc$1;
		key = file + ":" + itoa(line) + ":" + itoa(col);
		_tuple = (_entry = $mapIndex(knownPositions,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		pc = _tuple[0];
		found = _tuple[1];
		if (found) {
			return pc;
		}
		f = new Func.ptr(funcName, file, line, new structType.ptr());
		pc$1 = ((positionCounters.$length >>> 0));
		positionCounters = $append(positionCounters, f);
		_key = key; (knownPositions || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: pc$1 });
		return pc$1;
	};
	itoa = function(i) {
		var i;
		return $internalize(new ($global.String)(i), $String);
	};
	callstack = function(skip, limit) {
		var limit, lines, skip;
		skip = (skip + 1 >> 0) + 1 >> 0;
		lines = new ($global.Error)().stack.split($externalize("\n", $String)).slice(skip, skip + limit >> 0);
		return parseCallstack(lines);
	};
	parseCallstack = function(lines) {
		var _entry, _entry$1, _tuple, alias, frame, frames, i, l, lines, ok;
		frames = new sliceType$1([]);
		l = $parseInt(lines.length);
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			frame = $clone(ParseCallFrame(lines[i]), basicFrame);
			if ((_entry = $mapIndex(hiddenFrames,$String.keyFor(frame.FuncName)), _entry !== undefined ? _entry.v : false)) {
				i = i + (1) >> 0;
				continue;
			}
			_tuple = (_entry$1 = $mapIndex(knownFrames,$String.keyFor(frame.FuncName)), _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
			alias = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				frame.FuncName = alias;
			}
			frames = $append(frames, frame);
			if (frame.FuncName === "runtime.goexit") {
				break;
			}
			i = i + (1) >> 0;
		}
		return frames;
	};
	ParseCallFrame = function(info) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, col, file, fn, funcName, idx, info, line, openIdx, parts, parts$1, parts$2, pos, split;
		if (($parseInt(info.indexOf($externalize("@", $String))) >> 0) >= 0) {
			split = new ($global.RegExp)($externalize("[@:]", $String));
			parts = info.split(split);
			return new basicFrame.ptr($internalize(parts[0], $String), $internalize(parts.slice(1, $parseInt(parts.length) - 2 >> 0).join($externalize(":", $String)), $String), $parseInt(parts[($parseInt(parts.length) - 2 >> 0)]) >> 0, $parseInt(parts[($parseInt(parts.length) - 1 >> 0)]) >> 0);
		}
		openIdx = $parseInt(info.lastIndexOf($externalize("(", $String))) >> 0;
		if (openIdx === -1) {
			parts$1 = info.split($externalize(":", $String));
			return new basicFrame.ptr("<none>", $internalize(parts$1.slice(0, $parseInt(parts$1.length) - 2 >> 0).join($externalize(":", $String)).replace(new ($global.RegExp)($externalize("^\\s*at ", $String)), $externalize("", $String)), $String), $parseInt(parts$1[($parseInt(parts$1.length) - 2 >> 0)]) >> 0, $parseInt(parts$1[($parseInt(parts$1.length) - 1 >> 0)]) >> 0);
		}
		_tmp = "";
		_tmp$1 = "";
		file = _tmp;
		funcName = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		line = _tmp$2;
		col = _tmp$3;
		pos = info.substring(openIdx + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0);
		parts$2 = pos.split($externalize(":", $String));
		if ($internalize(pos, $String) === "<anonymous>") {
			file = "<anonymous>";
		} else {
			file = $internalize(parts$2.slice(0, $parseInt(parts$2.length) - 2 >> 0).join($externalize(":", $String)), $String);
			line = $parseInt(parts$2[($parseInt(parts$2.length) - 2 >> 0)]) >> 0;
			col = $parseInt(parts$2[($parseInt(parts$2.length) - 1 >> 0)]) >> 0;
		}
		fn = info.substring(($parseInt(info.indexOf($externalize("at ", $String))) >> 0) + 3 >> 0, $parseInt(info.indexOf($externalize(" (", $String))) >> 0);
		idx = $parseInt(fn.indexOf($externalize("[as ", $String))) >> 0;
		if (idx > 0) {
			fn = fn.substring(idx + 4 >> 0, fn.indexOf($externalize("]", $String)));
		}
		funcName = $internalize(fn, $String);
		return new basicFrame.ptr(funcName, file, line, col);
	};
	$pkg.ParseCallFrame = ParseCallFrame;
	Callers = function(skip, pc) {
		var _i, _ref, frame, frames, i, pc, skip;
		frames = callstack(skip, pc.$length);
		_ref = frames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			frame = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), basicFrame);
			((i < 0 || i >= pc.$length) ? ($throwRuntimeError("index out of range"), undefined) : pc.$array[pc.$offset + i] = registerPosition(frame.FuncName, frame.File, frame.Line, frame.Col));
			_i++;
		}
		return frames.$length;
	};
	$pkg.Callers = Callers;
	CallersFrames = function(callers) {
		var _i, _ref, callers, fun, pc, result;
		result = new Frames.ptr(sliceType$2.nil, 0);
		_ref = callers;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pc = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			fun = FuncForPC(pc);
			result.frames = $append(result.frames, new Frame.ptr(pc, fun, fun.name, fun.file, fun.line, fun.Entry()));
			_i++;
		}
		return result;
	};
	$pkg.CallersFrames = CallersFrames;
	Frames.ptr.prototype.Next = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ci, f, frame, more, x, x$1;
		frame = new Frame.ptr(0, ptrType.nil, "", "", 0, 0);
		more = false;
		ci = this;
		if (ci.current >= ci.frames.$length) {
			_tmp = new Frame.ptr(0, ptrType.nil, "", "", 0, 0);
			_tmp$1 = false;
			Frame.copy(frame, _tmp);
			more = _tmp$1;
			return [frame, more];
		}
		f = $clone((x = ci.frames, x$1 = ci.current, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), Frame);
		ci.current = ci.current + (1) >> 0;
		_tmp$2 = $clone(f, Frame);
		_tmp$3 = ci.current < ci.frames.$length;
		Frame.copy(frame, _tmp$2);
		more = _tmp$3;
		return [frame, more];
	};
	Frames.prototype.Next = function() { return this.$val.Next(); };
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	Func.ptr.prototype.Entry = function() {
		return 0;
	};
	Func.prototype.Entry = function() { return this.$val.Entry(); };
	Func.ptr.prototype.FileLine = function(pc) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, f, file, line, pc;
		file = "";
		line = 0;
		f = this;
		if (f === ptrType.nil) {
			_tmp = "";
			_tmp$1 = 0;
			file = _tmp;
			line = _tmp$1;
			return [file, line];
		}
		_tmp$2 = f.file;
		_tmp$3 = f.line;
		file = _tmp$2;
		line = _tmp$3;
		return [file, line];
	};
	Func.prototype.FileLine = function(pc) { return this.$val.FileLine(pc); };
	Func.ptr.prototype.Name = function() {
		var f;
		f = this;
		if (f === ptrType.nil || f.name === "") {
			return "<unknown>";
		}
		return f.name;
	};
	Func.prototype.Name = function() { return this.$val.Name(); };
	FuncForPC = function(pc) {
		var ipc, pc;
		ipc = ((pc >> 0));
		if (ipc >= positionCounters.$length) {
			$panic(new $String("GopherJS: pc=" + itoa(ipc) + " is out of range of known position counters"));
		}
		return ((ipc < 0 || ipc >= positionCounters.$length) ? ($throwRuntimeError("index out of range"), undefined) : positionCounters.$array[positionCounters.$offset + ipc]);
	};
	$pkg.FuncForPC = FuncForPC;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	$linknames["runtime.nanotime"] = nanotime;
	fastrand = function() {
		return (($parseFloat($global.Math.random()) * 4.294967295e+09 >> 0));
	};
	$linknames["runtime.fastrand"] = fastrand;
	fastrandu = function() {
		return ((fastrand() >>> 0));
	};
	$linknames["runtime.fastrandu"] = fastrandu;
	ptrType$1.methods = [{prop: "string", name: "string", pkg: "runtime", typ: $funcType([], [$String], false)}, {prop: "pkgpath", name: "pkgpath", pkg: "runtime", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Next", name: "Next", pkg: "", typ: $funcType([], [Frame, $Bool], false)}];
	ptrType.methods = [{prop: "Entry", name: "Entry", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "FileLine", name: "FileLine", pkg: "", typ: $funcType([$Uintptr], [$String, $Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	_type.init("runtime", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	TypeAssertionError.init("runtime", [{prop: "_interface", name: "_interface", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "concrete", name: "concrete", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "asserted", name: "asserted", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "missingMethod", name: "missingMethod", embedded: false, exported: false, typ: $String, tag: ""}]);
	basicFrame.init("", [{prop: "FuncName", name: "FuncName", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "File", name: "File", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Col", name: "Col", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Frames.init("runtime", [{prop: "frames", name: "frames", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "current", name: "current", embedded: false, exported: false, typ: $Int, tag: ""}]);
	Frame.init("", [{prop: "PC", name: "PC", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "Function", name: "Function", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "File", name: "File", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Entry", name: "Entry", embedded: false, exported: true, typ: $Uintptr, tag: ""}]);
	Func.init("runtime", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "file", name: "file", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "line", name: "line", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "opaque", name: "opaque", embedded: false, exported: false, typ: structType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buildVersion = "";
		knownPositions = $makeMap($String.keyFor, []);
		positionCounters = new sliceType([]);
		hiddenFrames = $makeMap($String.keyFor, [{ k: "$callDeferred", v: true }]);
		knownFrames = $makeMap($String.keyFor, [{ k: "$panic", v: "runtime.gopanic" }, { k: "$goroutine", v: "runtime.goexit" }]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/goarch"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/reflectlite"] = (function() {
	var $pkg = {}, $init, js, goarch, Value, flag, ValueError, Type, Kind, tflag, rtype, method, chanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, nameOff, typeOff, textOff, errorString, Method, uncommonType, funcType, name, nameData, mapIter, TypeEx, ptrType$1, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$2, funcType$1, ptrType$4, sliceType$5, ptrType$5, sliceType$6, ptrType$6, ptrType$7, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$8, structType$2, ptrType$9, arrayType$2, sliceType$13, ptrType$10, funcType$2, ptrType$11, funcType$3, ptrType$12, ptrType$13, kindNames, callHelper, initialized, uint8Type, idJsType, idReflectType, idKindType, idRtype, uncommonTypeMap, nameMap, nameOffList, typeOffList, jsObjectPtr, selectHelper, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, unquote, Swapper, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, TypeOf, ValueOf, FuncOf, SliceOf, unsafe_New, typedmemmove, keyFor, mapaccess, mapiterinit, mapiterkey, mapiternext, maplen, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, PtrTo, copyVal;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	goarch = $packages["internal/goarch"];
	Value = $pkg.Value = $newType(0, $kindStruct, "reflectlite.Value", true, "internal/reflectlite", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflectlite.flag", true, "internal/reflectlite", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflectlite.ValueError", true, "internal/reflectlite", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflectlite.Type", true, "internal/reflectlite", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflectlite.Kind", true, "internal/reflectlite", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflectlite.tflag", true, "internal/reflectlite", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflectlite.rtype", true, "internal/reflectlite", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$6.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflectlite.method", true, "internal/reflectlite", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	chanDir = $pkg.chanDir = $newType(4, $kindInt, "reflectlite.chanDir", true, "internal/reflectlite", false, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflectlite.arrayType", true, "internal/reflectlite", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflectlite.chanType", true, "internal/reflectlite", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflectlite.imethod", true, "internal/reflectlite", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflectlite.interfaceType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$6.nil);
			this.methods = sliceType$9.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflectlite.mapType", true, "internal/reflectlite", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflectlite.ptrType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflectlite.sliceType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflectlite.structField", true, "internal/reflectlite", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$6.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflectlite.structType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$6.nil);
			this.fields = sliceType$10.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflectlite.nameOff", true, "internal/reflectlite", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflectlite.typeOff", true, "internal/reflectlite", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflectlite.textOff", true, "internal/reflectlite", false, null);
	errorString = $pkg.errorString = $newType(0, $kindStruct, "reflectlite.errorString", true, "internal/reflectlite", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflectlite.Method", true, "internal/reflectlite", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflectlite.uncommonType", true, "internal/reflectlite", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflectlite.funcType", true, "internal/reflectlite", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflectlite.name", true, "internal/reflectlite", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$6.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflectlite.nameData", true, "internal/reflectlite", false, function(name_, tag_, exported_, embedded_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			this.embedded = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
		this.embedded = embedded_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflectlite.mapIter", true, "internal/reflectlite", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	TypeEx = $pkg.TypeEx = $newType(8, $kindInterface, "reflectlite.TypeEx", true, "internal/reflectlite", true, null);
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(name);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$4], [ptrType$2], true);
	ptrType$4 = $ptrType(uncommonType);
	sliceType$5 = $sliceType(method);
	ptrType$5 = $ptrType(funcType);
	sliceType$6 = $sliceType(Value);
	ptrType$6 = $ptrType($Uint8);
	ptrType$7 = $ptrType($UnsafePointer);
	sliceType$7 = $sliceType(Type);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(imethod);
	sliceType$10 = $sliceType(structField);
	ptrType$8 = $ptrType(nameData);
	structType$2 = $structType("internal/reflectlite", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	ptrType$9 = $ptrType(mapIter);
	arrayType$2 = $arrayType($Uintptr, 2);
	sliceType$13 = $sliceType($Uint8);
	ptrType$10 = $ptrType(ValueError);
	funcType$2 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$11 = $ptrType(interfaceType);
	funcType$3 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$12 = $ptrType(structField);
	ptrType$13 = $ptrType(errorString);
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.Type = function() {
		var f, v;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflectlite.Value.Type", 0));
		}
		return v.typ;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return $clone(f.name, name).embedded();
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return (0 >= kindNames.$length ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + 0]);
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.pointers = function() {
		var t;
		t = this;
		return !((t.ptrdata === 0));
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var _1, i, s, sqBrackets, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		sqBrackets = 0;
		while (true) {
			if (!(i >= 0 && (!((s.charCodeAt(i) === 46)) || !((sqBrackets === 0))))) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (93)) {
				sqBrackets = sqBrackets + (1) >> 0;
			} else if (_1 === (91)) {
				sqBrackets = sqBrackets - (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.chanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: chanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.chanDir = function() { return this.$val.chanDir(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Implements = function(u) {
		var {_r, t, u, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Implements, $c: true, $r, _r, t, u, $s};return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.AssignableTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$4.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var {$24r, T, V, _r, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: directlyAssignable, $c: true, $r, $24r, T, V, _r, $s};return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var {$24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = _r$6;
		$s = 11; case 11: return $24r;
		/* */ } return; } var $f = {$blk: haveIdenticalType, $c: true, $r, $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s};return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var {$24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.chanDir() === 3)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 15:
				/* */ if (_v$1) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v$1) { */ case 13:
					$s = -1; return true;
				/* } */ case 14:
				if (!(V.chanDir() === T.chanDir())) { _v$2 = false; $s = 17; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 17:
				$24r$1 = _v$2;
				$s = 19; case 19: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 20:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 21; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!_r$3) { */ case 22:
						$s = -1; return false;
					/* } */ case 23:
					i = i + (1) >> 0;
				$s = 20; continue;
				case 21:
				i$1 = 0;
				/* while (true) { */ case 25:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 26; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!_r$4) { */ case 27:
						$s = -1; return false;
					/* } */ case 28:
					i$1 = i$1 + (1) >> 0;
				$s = 25; continue;
				case 26:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 30; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 30:
				$24r$2 = _v$3;
				$s = 33; case 33: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$3 = _r$7;
				$s = 35; case 35: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 36:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 37; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!_r$8) { */ case 38:
						$s = -1; return false;
					/* } */ case 39:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!(tf.embedded() === vf.embedded())) {
						$s = -1; return false;
					}
					_i++;
				$s = 36; continue;
				case 37:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: haveIdenticalUnderlyingType, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s};return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var {_r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r, $c} = $restore(this, {context, dst, target});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.assignTo, $c: true, $r, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s};return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.ptr.prototype.Index = function(i) {
		var {$24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Index, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s};return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(new $String("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($clone(v, Value).object().size) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var {_1, _r, _r$1, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(x, _r);
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Set, $c: true, $r, _1, _r, _r$1, v, x, $s};return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var {_r, _r$1, _v, slice, typedSlice, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetBytes, $c: true, $r, _r, _r$1, _v, slice, typedSlice, v, x, $s};return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var {$24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var {$24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r, $c} = $restore(this, {i, j, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice3, $c: true, $r, $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.ptr.prototype.Elem = function() {
		var {$24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Elem, $c: true, $r, $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s};return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.MapKeys = function() {
		var {_r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$6, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			Value.copy(((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]), copyVal(keyType, fl, key));
			mapiternext(it);
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapKeys, $c: true, $r, _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s};return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var {_r, e, fl, k, key, tt, typ, v, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(key, _r);
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$7(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapIndex, $c: true, $r, _r, e, fl, k, key, tt, typ, v, $s};return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.Field = function(i) {
		var {$24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					Value.copy(v, _r);
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						Value.copy(v, _r$1);
					/* } */ case 11:
				$s = 5; continue;
				case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Field, $c: true, $r, $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s};return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	unquote = function(s) {
		var s;
		if (s.length < 2) {
			return [s, $ifaceNil];
		}
		if ((s.charCodeAt(0) === 39) || (s.charCodeAt(0) === 34)) {
			if (s.charCodeAt((s.length - 1 >> 0)) === s.charCodeAt(0)) {
				return [$substring(s, 1, (s.length - 1 >> 0)), $ifaceNil];
			}
			return ["", $pkg.ErrSyntax];
		}
		return [s, $ifaceNil];
	};
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	rtype.ptr.prototype.Comparable = function() {
		var {$24r, _1, _r, _r$1, ft, i, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					ft = $clone(t.Field(i), structField);
					_r$1 = ft.typ.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				$s = 8; continue;
				case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Comparable, $c: true, $r, $24r, _1, _r, _r$1, ft, i, t, $s};return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		return (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.Method = function(i) {
		var {$24r, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		/* */ if (t.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Kind() === 20) { */ case 1:
			tt = (t.kindType);
			_r = tt.rtype.Method(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Method.copy(m, _r);
			$24r = m;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$7, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$7, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t[$externalize(idJsType, $String)])[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		Value.copy(m.Func, new Value.ptr($assertType(mt, ptrType$1), (fn), fl));
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Method, $c: true, $r, $24r, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s};return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Swapper = function(slice) {
		var {_1, _r, a, off, slice, v, vLen, $s, $r, $c} = $restore(this, {slice});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		off = [off];
		vLen = [vLen];
		_r = ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = $clone(_r, Value);
		if (!(($clone(v, Value).Kind() === 23))) {
			$panic(new ValueError.ptr("Swapper", $clone(v, Value).Kind()));
		}
		vLen[0] = (($clone(v, Value).Len() >>> 0));
		_1 = vLen[0];
		if (_1 === (0)) {
			$s = -1; return (function(a, off, vLen) { return function(i, j) {
				var i, j;
				$panic(new $String("reflect: slice index out of range"));
			}; })(a, off, vLen);
		} else if (_1 === (1)) {
			$s = -1; return (function(a, off, vLen) { return function(i, j) {
				var i, j;
				if (!((i === 0)) || !((j === 0))) {
					$panic(new $String("reflect: slice index out of range"));
				}
			}; })(a, off, vLen);
		}
		a[0] = slice.$array;
		off[0] = $parseInt(slice.$offset) >> 0;
		$s = -1; return (function(a, off, vLen) { return function(i, j) {
			var i, j, tmp;
			if (((i >>> 0)) >= vLen[0] || ((j >>> 0)) >= vLen[0]) {
				$panic(new $String("reflect: slice index out of range"));
			}
			i = i + (off[0]) >> 0;
			j = j + (off[0]) >> 0;
			tmp = a[0][i];
			a[0][i] = a[0][j];
			a[0][j] = tmp;
		}; })(a, off, vLen);
		/* */ } return; } var $f = {$blk: Swapper, $c: true, $r, _1, _r, a, off, slice, v, vLen, $s};return $f;
	};
	$pkg.Swapper = Swapper;
	init = function() {
		var {used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new name.ptr(ptrType$6.nil), sliceType$9.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new name.ptr(ptrType$6.nil), sliceType$10.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$6.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: init, $c: true, $r, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ[$externalize(idJsType, $String)];
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _key, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ[$externalize(idReflectType, $String)] === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$6.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported), false), name)), 0);
			rt[$externalize(idJsType, $String)] = typ;
			typ[$externalize(idReflectType, $String)] = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$5.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", exported, false), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", exported$1, false), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false, false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: ut });
				ut[$externalize(idJsType, $String)] = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$9, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$2.name), "", internalStr(m$2.pkg) === "", false), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false, false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$10, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported), !!(f.embedded)), name), reflectType(f.typ), ((i$5 >>> 0))));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false, false), name), reflectFields));
			}
		}
		return ((typ[$externalize(idReflectType, $String)]));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt[$externalize(idKindType, $String)] = kindType;
		kindType[$externalize(idRtype, $String)] = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = $mapIndex(uncommonTypeMap,ptrType$1.keyFor(t)), _entry !== undefined ? _entry.v : ptrType$4.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	name.ptr.prototype.embedded = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).embedded;
	};
	name.prototype.embedded = function() { return this.$val.embedded(); };
	newName = function(n, tag, exported, embedded) {
		var _key, b, embedded, exported, n, tag;
		b = $newDataPointer(0, ptrType$6);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$6.keyFor(_key), { k: _key, v: new nameData.ptr(n, tag, exported, embedded) });
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$2.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r, $c} = $restore(this, {t, v, fl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } var $f = {$blk: makeValue, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s};return $f;
	};
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var {$24r, _r, i, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ValueOf, $c: true, $r, $24r, _r, i, $s};return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var {_i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r, $c} = $restore(this, {in$1, out, variadic});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } var $f = {$blk: FuncOf, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s};return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m.get($externalize(k, $String));
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapIter.ptr.prototype.skipUntilValidKey = function() {
		var iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			if (!(iter.m.get(k) === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	mapIter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m) {
		var m, t;
		return (new mapIter.ptr(t, m, $global.Array.from(m.keys()), 0, null));
	};
	mapiterkey = function(it) {
		var {$24r, _r, _r$1, _r$2, it, iter, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = ($pointerOfStructConversion(it, ptrType$9));
		kv = null;
		if (!(iter.last === null)) {
			kv = iter.last;
		} else {
			iter.skipUntilValidKey();
			if (iter.i === $parseInt(iter.keys.length)) {
				$s = -1; return 0;
			}
			k = iter.keys[iter.i];
			kv = iter.m.get(k);
			iter.last = kv;
		}
		_r = $assertType(iter.t, TypeEx).Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterkey, $c: true, $r, $24r, _r, _r$1, _r$2, it, iter, k, kv, $s};return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ($pointerOfStructConversion(it, ptrType$9));
		iter.last = null;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt(m.size) >> 0;
	};
	methodReceiver = function(op, v, i) {
		var _, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_ = ptrType$1.nil;
		t = ptrType$5.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_, t, fn];
	};
	valueInterface = function(v) {
		var {_r, cv, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			if (!((((v.flag & 128) >>> 0) === 0)) && ($clone(v, Value).Kind() === 25)) {
				cv = jsType(v.typ).zero();
				copyStruct(cv, $clone(v, Value).object(), v.typ);
				$s = -1; return ((new (jsType(v.typ))(cv)));
			}
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } var $f = {$blk: valueInterface, $c: true, $r, _r, cv, v, $s};return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var {$24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r, $c} = $restore(this, {op, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: makeMethodValue, $c: true, $r, $24r, _r, _tuple, fn, fv, op, rcvr, v, $s};return $f;
	};
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	Value.methods = [{prop: "pointer", name: "pointer", pkg: "internal/reflectlite", typ: $funcType([], [$UnsafePointer], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "numMethod", name: "numMethod", pkg: "internal/reflectlite", typ: $funcType([], [$Int], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "object", name: "object", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "internal/reflectlite", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "internal/reflectlite", typ: $funcType([$String, sliceType$6], [sliceType$6], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$2], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "internal/reflectlite", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "internal/reflectlite", typ: $funcType([], [flag], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "internal/reflectlite", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "internal/reflectlite", typ: $funcType([], [], false)}, {prop: "mustBe", name: "mustBe", pkg: "internal/reflectlite", typ: $funcType([Kind], [], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "pointers", name: "pointers", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "chanDir", name: "chanDir", pkg: "internal/reflectlite", typ: $funcType([], [chanDir], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "kindType", name: "kindType", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [structField], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}, {prop: "nameOff", name: "nameOff", pkg: "internal/reflectlite", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "internal/reflectlite", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}];
	ptrType$11.methods = [{prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$12.methods = [{prop: "embedded", name: "embedded", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "methods", name: "methods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}];
	ptrType$5.methods = [{prop: "in$", name: "in", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "data", name: "data", pkg: "internal/reflectlite", typ: $funcType([$Int, $String], [ptrType$6], false)}, {prop: "hasTag", name: "hasTag", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "readVarint", name: "readVarint", pkg: "internal/reflectlite", typ: $funcType([$Int], [$Int, $Int], false)}, {prop: "name", name: "name", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "embedded", name: "embedded", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "internal/reflectlite", typ: $funcType([], [], false)}];
	Value.init("internal/reflectlite", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	Type.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	rtype.init("internal/reflectlite", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$2, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$9, tag: ""}]);
	mapType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$3, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$10, tag: ""}]);
	errorString.init("internal/reflectlite", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	uncommonType.init("internal/reflectlite", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("internal/reflectlite", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$6, tag: ""}]);
	nameData.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "embedded", name: "embedded", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("internal/reflectlite", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	TypeEx.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = goarch.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		uint8Type = ptrType$1.nil;
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		$pkg.ErrSyntax = new errorString.ptr("invalid syntax");
		initialized = false;
		idJsType = "_jsType";
		idReflectType = "_reflectType";
		idKindType = "kindType";
		idRtype = "_rtype";
		uncommonTypeMap = new $global.Map();
		nameMap = new $global.Map();
		jsObjectPtr = reflectType($jsObjectPtr);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		$r = init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, reflectlite, errorString, ptrType, ptrType$1, errorType, _r, New;
	reflectlite = $packages["internal/reflectlite"];
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType($error);
	ptrType$1 = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = reflectlite.TypeOf((ptrType.nil)).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType$5, CompareAndSwapInt32, CompareAndSwapUint64, AddInt32, LoadInt32, LoadUint32, LoadUint64, StoreInt32, StoreUint32, sameType;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType$5 = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadInt32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadInt32 = LoadInt32;
	LoadUint32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	StoreInt32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(new$1) {
		var new$1, v;
		v = this;
		v.checkNew("store", new$1);
		v.v = new$1;
	};
	Value.prototype.Store = function(new$1) { return this.$val.Store(new$1); };
	Value.ptr.prototype.Swap = function(new$1) {
		var _tmp, _tmp$1, new$1, old, v;
		old = $ifaceNil;
		v = this;
		v.checkNew("swap", new$1);
		_tmp = v.v;
		_tmp$1 = new$1;
		old = _tmp;
		v.v = _tmp$1;
		old = old;
		return old;
	};
	Value.prototype.Swap = function(new$1) { return this.$val.Swap(new$1); };
	Value.ptr.prototype.CompareAndSwap = function(old, new$1) {
		var new$1, old, swapped, v;
		swapped = false;
		v = this;
		v.checkNew("compare and swap", new$1);
		if (!($interfaceIsEqual(v.v, $ifaceNil) && $interfaceIsEqual(old, $ifaceNil)) && !sameType(old, new$1)) {
			$panic(new $String("sync/atomic: compare and swap of inconsistently typed values into Value"));
		}
		if (!($interfaceIsEqual(v.v, old))) {
			swapped = false;
			return swapped;
		}
		v.v = new$1;
		swapped = true;
		return swapped;
	};
	Value.prototype.CompareAndSwap = function(old, new$1) { return this.$val.CompareAndSwap(old, new$1); };
	Value.ptr.prototype.checkNew = function(op, new$1) {
		var new$1, op, v;
		v = this;
		if ($interfaceIsEqual(new$1, $ifaceNil)) {
			$panic(new $String("sync/atomic: " + op + " of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !sameType(new$1, v.v)) {
			$panic(new $String("sync/atomic: " + op + " of inconsistently typed value into Value"));
		}
	};
	Value.prototype.checkNew = function(op, new$1) { return this.$val.checkNew(op, new$1); };
	sameType = function(x, y) {
		var x, y;
		return x.constructor === y.constructor;
	};
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "CompareAndSwap", name: "CompareAndSwap", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$Bool], false)}, {prop: "checkNew", name: "checkNew", pkg: "sync/atomic", typ: $funcType([$String, $emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", embedded: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, atomic, RWMutex, rlocker, notifyList, Once, Mutex, Locker, Pool, ptrType$1, ptrType$2, ptrType$3, ptrType$4, chanType, sliceType$2, funcType, ptrType$14, ptrType$15, sliceType$3, ptrType$20, funcType$2, expunged, semWaiters, semAwoken, init, runtime_doSpin, fatal, runtime_Semacquire, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	atomic = $packages["sync/atomic"];
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(done_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.done = 0;
			this.m = new Mutex.ptr(0, 0);
			return;
		}
		this.done = done_;
		this.m = m_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	ptrType$1 = $ptrType($Uint32);
	ptrType$2 = $ptrType($Int32);
	ptrType$3 = $ptrType(rlocker);
	ptrType$4 = $ptrType(RWMutex);
	chanType = $chanType($Bool, false, false);
	sliceType$2 = $sliceType(chanType);
	funcType = $funcType([], [], false);
	ptrType$14 = $ptrType(Once);
	ptrType$15 = $ptrType(Mutex);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$20 = $ptrType(Pool);
	funcType$2 = $funcType([], [$emptyInterface], false);
	RWMutex.ptr.prototype.RLock = function() {
		var {rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_SemacquireMutex((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.RLock, $c: true, $r, rw, $s};return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.TryRLock = function() {
		var c, rw;
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		while (true) {
			c = atomic.LoadInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))));
			if (c < 0) {
				if (false) {
					race.Enable();
				}
				return false;
			}
			if (atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), c, c + 1 >> 0)) {
				if (false) {
					race.Enable();
					race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
				}
				return true;
			}
		}
	};
	RWMutex.prototype.TryRLock = function() { return this.$val.TryRLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var {r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			$r = rw.rUnlockSlow(r); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.RUnlock, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.rUnlockSlow = function(r) {
		var {r, rw, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		/* */ if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) { */ case 1:
			race.Enable();
			$r = fatal("sync: RUnlock of unlocked RWMutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 4:
			$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.rUnlockSlow, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.rUnlockSlow = function(r) { return this.$val.rUnlockSlow(r); };
	RWMutex.ptr.prototype.Lock = function() {
		var {r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_SemacquireMutex((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.Lock, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.TryLock = function() {
		var {rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		if (!rw.w.TryLock()) {
			if (false) {
				race.Enable();
			}
			$s = -1; return false;
		}
		/* */ if (!atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 0, -1073741824)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 0, -1073741824)) { */ case 1:
			$r = rw.w.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (false) {
				race.Enable();
			}
			$s = -1; return false;
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.TryLock, $c: true, $r, rw, $s};return $f;
	};
	RWMutex.prototype.TryLock = function() { return this.$val.TryLock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var {i, r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		/* */ if (r >= 1073741824) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r >= 1073741824) { */ case 1:
			race.Enable();
			$r = fatal("sync: Unlock of unlocked RWMutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 5; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		$s = 4; continue;
		case 5:
		$r = rw.w.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.Unlock, $c: true, $r, i, r, rw, $s};return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$3));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var {r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$4)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rlocker.ptr.prototype.Lock, $c: true, $r, r, $s};return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var {r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$4)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rlocker.ptr.prototype.Unlock, $c: true, $r, r, $s};return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	init = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	Once.ptr.prototype.Do = function(f) {
		var {f, o, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		o = this;
		/* */ if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 0) { */ case 1:
			$r = o.doSlow(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Once.ptr.prototype.Do, $c: true, $r, f, o, $s};return $f;
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	Once.ptr.prototype.doSlow = function(f) {
		var {f, o, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		o = this;
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Once.ptr.prototype.doSlow, $c: true, $r, f, o, $s, $deferred};return $f; } }
	};
	Once.prototype.doSlow = function(f) { return this.$val.doSlow(f); };
	fatal = function() {
		$throwRuntimeError("native function not implemented: sync.fatal");
	};
	Mutex.ptr.prototype.Lock = function() {
		var {m, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		$r = m.lockSlow(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.Lock, $c: true, $r, m, $s};return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.TryLock = function() {
		var m, old;
		m = this;
		old = m.state;
		if (!(((old & 5) === 0))) {
			return false;
		}
		if (!atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 1)) {
			return false;
		}
		if (false) {
			race.Acquire((m));
		}
		return true;
	};
	Mutex.prototype.TryLock = function() { return this.$val.TryLock(); };
	Mutex.ptr.prototype.lockSlow = function() {
		var {_r, _r$1, _v, awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				$r = runtime_doSpin(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				/* */ if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) { */ case 9:
					_r = runtime_nanotime(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					waitStartTime = _r;
				/* } */ case 10:
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo, 1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (starving) { _v = true; $s = 13; continue s; }
				_r$1 = runtime_nanotime(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = (x = (x$1 = _r$1, new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000))); case 13:
				starving = _v;
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 8; continue;
			/* } else { */ case 7:
				old = m.state;
			/* } */ case 8:
		$s = 1; continue;
		case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.lockSlow, $c: true, $r, _r, _r$1, _v, awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s};return $f;
	};
	Mutex.prototype.lockSlow = function() { return this.$val.lockSlow(); };
	Mutex.ptr.prototype.Unlock = function() {
		var {m, new$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		/* */ if (!((new$1 === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((new$1 === 0))) { */ case 1:
			$r = m.unlockSlow(new$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.Unlock, $c: true, $r, m, new$1, $s};return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Mutex.ptr.prototype.unlockSlow = function(new$1) {
		var {m, new$1, old, $s, $r, $c} = $restore(this, {new$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if ((((new$1 + 1 >> 0)) & 1) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((new$1 + 1 >> 0)) & 1) === 0) { */ case 1:
			$r = fatal("sync: unlock of unlocked mutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if ((new$1 & 4) === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((new$1 & 4) === 0) { */ case 4:
			old = new$1;
			/* while (true) { */ case 7:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 9:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false, 1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 10:
				old = m.state;
			$s = 7; continue;
			case 8:
			$s = 6; continue;
		/* } else { */ case 5:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true, 1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.unlockSlow, $c: true, $r, m, new$1, old, $s};return $f;
	};
	Mutex.prototype.unlockSlow = function(new$1) { return this.$val.unlockSlow(new$1); };
	runtime_Semacquire = function(s) {
		var {s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = runtime_SemacquireMutex(s, false, 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_Semacquire, $c: true, $r, s, $s};return $f;
	};
	$linknames["sync.runtime_Semacquire"] = runtime_Semacquire;
	runtime_SemacquireMutex = function(s, lifo, skipframes) {
		var {_entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, skipframes, $s, $r, $c} = $restore(this, {s, lifo, skipframes});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: $appendSlice(new sliceType$2([ch]), (_entry$1 = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil)) });
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$1), { k: _key$1, v: $append((_entry$2 = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry$2 !== undefined ? _entry$2.v : sliceType$2.nil), ch) });
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$2), { k: _key$2, v: (_entry$3 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 });
			if ((_entry$4 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				$mapDelete(semAwoken, ptrType$1.keyFor(s));
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_SemacquireMutex, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, skipframes, $s};return $f;
	};
	runtime_Semrelease = function(s, handoff, skipframes) {
		var {_entry, _entry$1, _key, _key$1, ch, handoff, s, skipframes, w, $s, $r, $c} = $restore(this, {s, handoff, skipframes});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : sliceType$2.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: w });
		if (w.$length === 0) {
			$mapDelete(semWaiters, ptrType$1.keyFor(s));
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$1), { k: _key$1, v: (_entry$1 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 });
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_Semrelease, $c: true, $r, _entry, _entry$1, _key, _key$1, ch, handoff, s, skipframes, w, $s};return $f;
	};
	$linknames["sync.runtime_Semrelease"] = runtime_Semrelease;
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_nanotime");
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	Pool.ptr.prototype.Get = function() {
		var {$24r, _r, p, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } var $f = {$blk: Pool.ptr.prototype.Get, $c: true, $r, $24r, _r, p, x, x$1, x$2, $s};return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	ptrType$4.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryRLock", name: "TryRLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "rUnlockSlow", name: "rUnlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryLock", name: "TryLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$3.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "doSlow", name: "doSlow", pkg: "sync", typ: $funcType([funcType], [], false)}];
	ptrType$15.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryLock", name: "TryLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "lockSlow", name: "lockSlow", pkg: "sync", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "unlockSlow", name: "unlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}];
	ptrType$20.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	RWMutex.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Once.init("sync", [{prop: "done", name: "done", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: Mutex, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Pool.init("sync", [{prop: "store", name: "store", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType$2, tag: ""}]);
	$pkg.$initLinknames = function() {
		runtime_nanotime = $linknames["runtime.nanotime"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		expunged = (new Uint8Array(8));
		semWaiters = new $global.Map();
		semAwoken = new $global.Map();
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, ByteScanner, RuneScanner, StringWriter, LimitedReader, sliceType, sliceType$1, ptrType$2, ptrType$3, errInvalidWrite, errWhence, errOffset, blackHolePool, WriteString, ReadAtLeast, ReadFull, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteScanner = $pkg.ByteScanner = $newType(8, $kindInterface, "io.ByteScanner", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	StringWriter = $pkg.StringWriter = $newType(8, $kindInterface, "io.StringWriter", true, "io", true, null);
	LimitedReader = $pkg.LimitedReader = $newType(0, $kindStruct, "io.LimitedReader", true, "io", true, function(R_, N_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = $ifaceNil;
			this.N = new $Int64(0, 0);
			return;
		}
		this.R = R_;
		this.N = N_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType(LimitedReader);
	WriteString = function(w, s) {
		var {$24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r, $c} = $restore(this, {w, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, StringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [n, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_r$1 = w.Write((new sliceType$1($stringToBytes(s)))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$24r$1 = [n, err];
		$s = 6; case 6: return $24r$1;
		/* */ } return; } var $f = {$blk: WriteString, $c: true, $r, $24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s};return $f;
	};
	$pkg.WriteString = WriteString;
	ReadAtLeast = function(r, buf, min) {
		var {_r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r, $c} = $restore(this, {r, buf, min});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		$s = 1; continue;
		case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: ReadAtLeast, $c: true, $r, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s};return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var {$24r, _r, _tuple, buf, err, n, r, $s, $r, $c} = $restore(this, {r, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ReadFull, $c: true, $r, $24r, _r, _tuple, buf, err, n, r, $s};return $f;
	};
	$pkg.ReadFull = ReadFull;
	Copy = function(dst, src) {
		var {$24r, _r, _tuple, dst, err, src, written, $s, $r, $c} = $restore(this, {dst, src});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$24r = [written, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Copy, $c: true, $r, $24r, _r, _tuple, dst, err, src, written, $s};return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {dst, src, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [written, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$1 = rt.ReadFrom(src); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$24r$1 = [written, err];
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		if (buf === sliceType$1.nil) {
			size = 32768;
			_tuple$4 = $assertType(src, ptrType$3, true);
			l = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2 && (x$2 = (new $Int64(0, size)), x$3 = l.N, (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low > x$3.$low)))) {
				if ((x$4 = l.N, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 1)))) {
					size = 1;
				} else {
					size = (((x$5 = l.N, x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0));
				}
			}
			buf = $makeSlice(sliceType$1, size);
		}
		/* while (true) { */ case 9:
			_r$2 = src.Read(buf); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$5 = _r$2;
			nr = _tuple$5[0];
			er = _tuple$5[1];
			/* */ if (nr > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (nr > 0) { */ case 12:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$6 = _r$3;
				nw = _tuple$6[0];
				ew = _tuple$6[1];
				if (nw < 0 || nr < nw) {
					nw = 0;
					if ($interfaceIsEqual(ew, $ifaceNil)) {
						ew = errInvalidWrite;
					}
				}
				written = (x$6 = (new $Int64(0, nw)), new $Int64(written.$high + x$6.$high, written.$low + x$6.$low));
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 10; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 10; continue;
				}
			/* } */ case 13:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 10; continue;
			}
		$s = 9; continue;
		case 10:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } var $f = {$blk: copyBuffer, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	LimitedReader.ptr.prototype.Read = function(p) {
		var {_r, _tmp, _tmp$1, _tuple, err, l, n, p, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((x$2 = l.N, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) {
			_tmp = 0;
			_tmp$1 = $pkg.EOF;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((x$3 = (new $Int64(0, p.$length)), x$4 = l.N, (x$3.$high > x$4.$high || (x$3.$high === x$4.$high && x$3.$low > x$4.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_r = l.R.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		l.N = (x$5 = l.N, x$6 = (new $Int64(0, n)), new $Int64(x$5.$high - x$6.$high, x$5.$low - x$6.$low));
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: LimitedReader.ptr.prototype.Read, $c: true, $r, _r, _tmp, _tmp$1, _tuple, err, l, n, p, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteScanner.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	StringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	LimitedReader.init("", [{prop: "R", name: "R", embedded: false, exported: true, typ: Reader, tag: ""}, {prop: "N", name: "N", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		$pkg.ErrShortWrite = errors.New("short write");
		errInvalidWrite = errors.New("invalid write result");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		blackHolePool = new sync.Pool.ptr(sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType$2(function() { return b; }, function($v) { b = $v; })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/randutil"] = (function() {
	var $pkg = {}, $init, io, sync, structType, arrayType, sliceType, closedChanOnce, closedChan, MaybeReadByte;
	io = $packages["io"];
	sync = $packages["sync"];
	structType = $structType("", []);
	arrayType = $arrayType($Uint8, 1);
	sliceType = $sliceType($Uint8);
	MaybeReadByte = function(r) {
		var {_r, _r$1, _selection, buf, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = closedChanOnce.Do((function() {
			closedChan = new $Chan(structType, 0);
			$close(closedChan);
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = $select([[closedChan], [closedChan]]); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_selection = _r;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			$s = -1; return;
		/* } else if (_selection[0] === 1) { */ case 4:
			buf = arrayType.zero();
			_r$1 = r.Read(new sliceType(buf)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: MaybeReadByte, $c: true, $r, _r, _r$1, _selection, buf, r, $s};return $f;
	};
	$pkg.MaybeReadByte = MaybeReadByte;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		closedChanOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		closedChan = $chanNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/cpu"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/bytealg"] = (function() {
	var $pkg = {}, $init, cpu, Index, IndexString, Cutover, HashStrBytes, IndexRabinKarpBytes, Equal, IndexByteString;
	cpu = $packages["internal/cpu"];
	Index = function(a, b) {
		var a, b;
		$panic(new $String("unimplemented"));
	};
	$pkg.Index = Index;
	IndexString = function(a, b) {
		var a, b;
		$panic(new $String("unimplemented"));
	};
	$pkg.IndexString = IndexString;
	Cutover = function(n) {
		var n;
		$panic(new $String("unimplemented"));
	};
	$pkg.Cutover = Cutover;
	HashStrBytes = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sep, sq;
		hash = 0;
		i = 0;
		while (true) {
			if (!(i < sep.$length)) { break; }
			hash = ($imul(hash, 16777619) >>> 0) + ((((i < 0 || i >= sep.$length) ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + i]) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1;
		_tmp$1 = 16777619;
		pow = _tmp;
		sq = _tmp$1;
		i$1 = sep.$length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = $imul(pow, (sq)) >>> 0;
			}
			sq = $imul(sq, (sq)) >>> 0;
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	$pkg.HashStrBytes = HashStrBytes;
	IndexRabinKarpBytes = function(s, sep) {
		var _tuple, h, hashsep, i, i$1, n, pow, s, sep, x;
		_tuple = HashStrBytes(sep);
		hashsep = _tuple[0];
		pow = _tuple[1];
		n = sep.$length;
		h = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			h = ($imul(h, 16777619) >>> 0) + ((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && Equal($subslice(s, 0, n), sep)) {
			return 0;
		}
		i$1 = n;
		while (true) {
			if (!(i$1 < s.$length)) { break; }
			h = $imul(h, (16777619)) >>> 0;
			h = h + (((((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1]) >>> 0))) >>> 0;
			h = h - (($imul(pow, (((x = i$1 - n >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >>> 0))) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && Equal($subslice(s, (i$1 - n >> 0), i$1), sep)) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	$pkg.IndexRabinKarpBytes = IndexRabinKarpBytes;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	IndexByteString = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.IndexByteString = IndexByteString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cpu.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.MaxLen = 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, _White_Space, _CaseRanges, asciiFold, caseOrbit, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold, IsSpace, to;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$2 = $sliceType(foldPair);
	sliceType$3 = $sliceType(CaseRange);
	arrayType = $arrayType($Int32, 3);
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && ((r >>> 0)) <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >>> 0))) {
			return is16($subslice(r16, off), ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	To = function(_case, r) {
		var _case, _tuple, r;
		_tuple = to(_case, r, $pkg.CaseRanges);
		r = _tuple[0];
		return r;
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var _q, hi, l, lo, m, r;
		if (r < 0 || r > 1114111) {
			return r;
		}
		if (((r >> 0)) < 128) {
			return ((((r < 0 || r >= asciiFold.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiFold[r]) >> 0));
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((((m < 0 || m >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0)) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && (((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0)) === r)) {
			return ((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0));
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	IsSpace = function(r) {
		var _1, r;
		if (((r >>> 0)) <= 255) {
			_1 = r;
			if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	to = function(_case, r, caseRange) {
		var _case, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, caseRange, cr, delta, foundMapping, hi, lo, m, mappedRune, r, x;
		mappedRune = 0;
		foundMapping = false;
		if (_case < 0 || 3 <= _case) {
			_tmp = 65533;
			_tmp$1 = false;
			mappedRune = _tmp;
			foundMapping = _tmp$1;
			return [mappedRune, foundMapping];
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
				delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
				if (delta > 1114111) {
					_tmp$2 = ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
					_tmp$3 = true;
					mappedRune = _tmp$2;
					foundMapping = _tmp$3;
					return [mappedRune, foundMapping];
				}
				_tmp$4 = r + delta >> 0;
				_tmp$5 = true;
				mappedRune = _tmp$4;
				foundMapping = _tmp$5;
				return [mappedRune, foundMapping];
			}
			if (r < ((cr.Lo >> 0))) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		_tmp$6 = r;
		_tmp$7 = false;
		mappedRune = _tmp$6;
		foundMapping = _tmp$7;
		return [mappedRune, foundMapping];
	};
	RangeTable.init("", [{prop: "R16", name: "R16", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", embedded: false, exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_White_Space = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(9, 13, 1), Range16), $clone(new Range16.ptr(32, 133, 101), Range16), $clone(new Range16.ptr(160, 5760, 5600), Range16), $clone(new Range16.ptr(8192, 8202, 1), Range16), $clone(new Range16.ptr(8232, 8233, 1), Range16), $clone(new Range16.ptr(8239, 8287, 48), Range16), $clone(new Range16.ptr(12288, 12288, 1), Range16)]), sliceType$1.nil, 2);
		$pkg.White_Space = _White_Space;
		caseOrbit = new sliceType$2([$clone(new foldPair.ptr(75, 107), foldPair), $clone(new foldPair.ptr(83, 115), foldPair), $clone(new foldPair.ptr(107, 8490), foldPair), $clone(new foldPair.ptr(115, 383), foldPair), $clone(new foldPair.ptr(181, 924), foldPair), $clone(new foldPair.ptr(197, 229), foldPair), $clone(new foldPair.ptr(223, 7838), foldPair), $clone(new foldPair.ptr(229, 8491), foldPair), $clone(new foldPair.ptr(304, 304), foldPair), $clone(new foldPair.ptr(305, 305), foldPair), $clone(new foldPair.ptr(383, 83), foldPair), $clone(new foldPair.ptr(452, 453), foldPair), $clone(new foldPair.ptr(453, 454), foldPair), $clone(new foldPair.ptr(454, 452), foldPair), $clone(new foldPair.ptr(455, 456), foldPair), $clone(new foldPair.ptr(456, 457), foldPair), $clone(new foldPair.ptr(457, 455), foldPair), $clone(new foldPair.ptr(458, 459), foldPair), $clone(new foldPair.ptr(459, 460), foldPair), $clone(new foldPair.ptr(460, 458), foldPair), $clone(new foldPair.ptr(497, 498), foldPair), $clone(new foldPair.ptr(498, 499), foldPair), $clone(new foldPair.ptr(499, 497), foldPair), $clone(new foldPair.ptr(837, 921), foldPair), $clone(new foldPair.ptr(914, 946), foldPair), $clone(new foldPair.ptr(917, 949), foldPair), $clone(new foldPair.ptr(920, 952), foldPair), $clone(new foldPair.ptr(921, 953), foldPair), $clone(new foldPair.ptr(922, 954), foldPair), $clone(new foldPair.ptr(924, 956), foldPair), $clone(new foldPair.ptr(928, 960), foldPair), $clone(new foldPair.ptr(929, 961), foldPair), $clone(new foldPair.ptr(931, 962), foldPair), $clone(new foldPair.ptr(934, 966), foldPair), $clone(new foldPair.ptr(937, 969), foldPair), $clone(new foldPair.ptr(946, 976), foldPair), $clone(new foldPair.ptr(949, 1013), foldPair), $clone(new foldPair.ptr(952, 977), foldPair), $clone(new foldPair.ptr(953, 8126), foldPair), $clone(new foldPair.ptr(954, 1008), foldPair), $clone(new foldPair.ptr(956, 181), foldPair), $clone(new foldPair.ptr(960, 982), foldPair), $clone(new foldPair.ptr(961, 1009), foldPair), $clone(new foldPair.ptr(962, 963), foldPair), $clone(new foldPair.ptr(963, 931), foldPair), $clone(new foldPair.ptr(966, 981), foldPair), $clone(new foldPair.ptr(969, 8486), foldPair), $clone(new foldPair.ptr(976, 914), foldPair), $clone(new foldPair.ptr(977, 1012), foldPair), $clone(new foldPair.ptr(981, 934), foldPair), $clone(new foldPair.ptr(982, 928), foldPair), $clone(new foldPair.ptr(1008, 922), foldPair), $clone(new foldPair.ptr(1009, 929), foldPair), $clone(new foldPair.ptr(1012, 920), foldPair), $clone(new foldPair.ptr(1013, 917), foldPair), $clone(new foldPair.ptr(1042, 1074), foldPair), $clone(new foldPair.ptr(1044, 1076), foldPair), $clone(new foldPair.ptr(1054, 1086), foldPair), $clone(new foldPair.ptr(1057, 1089), foldPair), $clone(new foldPair.ptr(1058, 1090), foldPair), $clone(new foldPair.ptr(1066, 1098), foldPair), $clone(new foldPair.ptr(1074, 7296), foldPair), $clone(new foldPair.ptr(1076, 7297), foldPair), $clone(new foldPair.ptr(1086, 7298), foldPair), $clone(new foldPair.ptr(1089, 7299), foldPair), $clone(new foldPair.ptr(1090, 7300), foldPair), $clone(new foldPair.ptr(1098, 7302), foldPair), $clone(new foldPair.ptr(1122, 1123), foldPair), $clone(new foldPair.ptr(1123, 7303), foldPair), $clone(new foldPair.ptr(7296, 1042), foldPair), $clone(new foldPair.ptr(7297, 1044), foldPair), $clone(new foldPair.ptr(7298, 1054), foldPair), $clone(new foldPair.ptr(7299, 1057), foldPair), $clone(new foldPair.ptr(7300, 7301), foldPair), $clone(new foldPair.ptr(7301, 1058), foldPair), $clone(new foldPair.ptr(7302, 1066), foldPair), $clone(new foldPair.ptr(7303, 1122), foldPair), $clone(new foldPair.ptr(7304, 42570), foldPair), $clone(new foldPair.ptr(7776, 7777), foldPair), $clone(new foldPair.ptr(7777, 7835), foldPair), $clone(new foldPair.ptr(7835, 7776), foldPair), $clone(new foldPair.ptr(7838, 223), foldPair), $clone(new foldPair.ptr(8126, 837), foldPair), $clone(new foldPair.ptr(8486, 937), foldPair), $clone(new foldPair.ptr(8490, 75), foldPair), $clone(new foldPair.ptr(8491, 197), foldPair), $clone(new foldPair.ptr(42570, 42571), foldPair), $clone(new foldPair.ptr(42571, 7304), foldPair)]);
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		_CaseRanges = new sliceType$3([$clone(new CaseRange.ptr(65, 90, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(97, 122, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(181, 181, $clone($toNativeArray($kindInt32, [743, 0, 743]), d)), CaseRange), $clone(new CaseRange.ptr(192, 214, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(216, 222, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(224, 246, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(248, 254, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(255, 255, $clone($toNativeArray($kindInt32, [121, 0, 121]), d)), CaseRange), $clone(new CaseRange.ptr(256, 303, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(304, 304, $clone($toNativeArray($kindInt32, [0, -199, 0]), d)), CaseRange), $clone(new CaseRange.ptr(305, 305, $clone($toNativeArray($kindInt32, [-232, 0, -232]), d)), CaseRange), $clone(new CaseRange.ptr(306, 311, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(313, 328, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(330, 375, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(376, 376, $clone($toNativeArray($kindInt32, [0, -121, 0]), d)), CaseRange), $clone(new CaseRange.ptr(377, 382, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(383, 383, $clone($toNativeArray($kindInt32, [-300, 0, -300]), d)), CaseRange), $clone(new CaseRange.ptr(384, 384, $clone($toNativeArray($kindInt32, [195, 0, 195]), d)), CaseRange), $clone(new CaseRange.ptr(385, 385, $clone($toNativeArray($kindInt32, [0, 210, 0]), d)), CaseRange), $clone(new CaseRange.ptr(386, 389, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(390, 390, $clone($toNativeArray($kindInt32, [0, 206, 0]), d)), CaseRange), $clone(new CaseRange.ptr(391, 392, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(393, 394, $clone($toNativeArray($kindInt32, [0, 205, 0]), d)), CaseRange), $clone(new CaseRange.ptr(395, 396, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(398, 398, $clone($toNativeArray($kindInt32, [0, 79, 0]), d)), CaseRange), $clone(new CaseRange.ptr(399, 399, $clone($toNativeArray($kindInt32, [0, 202, 0]), d)), CaseRange), $clone(new CaseRange.ptr(400, 400, $clone($toNativeArray($kindInt32, [0, 203, 0]), d)), CaseRange), $clone(new CaseRange.ptr(401, 402, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(403, 403, $clone($toNativeArray($kindInt32, [0, 205, 0]), d)), CaseRange), $clone(new CaseRange.ptr(404, 404, $clone($toNativeArray($kindInt32, [0, 207, 0]), d)), CaseRange), $clone(new CaseRange.ptr(405, 405, $clone($toNativeArray($kindInt32, [97, 0, 97]), d)), CaseRange), $clone(new CaseRange.ptr(406, 406, $clone($toNativeArray($kindInt32, [0, 211, 0]), d)), CaseRange), $clone(new CaseRange.ptr(407, 407, $clone($toNativeArray($kindInt32, [0, 209, 0]), d)), CaseRange), $clone(new CaseRange.ptr(408, 409, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(410, 410, $clone($toNativeArray($kindInt32, [163, 0, 163]), d)), CaseRange), $clone(new CaseRange.ptr(412, 412, $clone($toNativeArray($kindInt32, [0, 211, 0]), d)), CaseRange), $clone(new CaseRange.ptr(413, 413, $clone($toNativeArray($kindInt32, [0, 213, 0]), d)), CaseRange), $clone(new CaseRange.ptr(414, 414, $clone($toNativeArray($kindInt32, [130, 0, 130]), d)), CaseRange), $clone(new CaseRange.ptr(415, 415, $clone($toNativeArray($kindInt32, [0, 214, 0]), d)), CaseRange), $clone(new CaseRange.ptr(416, 421, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(422, 422, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(423, 424, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(425, 425, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(428, 429, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(430, 430, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(431, 432, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(433, 434, $clone($toNativeArray($kindInt32, [0, 217, 0]), d)), CaseRange), $clone(new CaseRange.ptr(435, 438, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(439, 439, $clone($toNativeArray($kindInt32, [0, 219, 0]), d)), CaseRange), $clone(new CaseRange.ptr(440, 441, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(444, 445, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(447, 447, $clone($toNativeArray($kindInt32, [56, 0, 56]), d)), CaseRange), $clone(new CaseRange.ptr(452, 452, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(453, 453, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(454, 454, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(455, 455, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(456, 456, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(457, 457, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(458, 458, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(459, 459, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(460, 460, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(461, 476, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(477, 477, $clone($toNativeArray($kindInt32, [-79, 0, -79]), d)), CaseRange), $clone(new CaseRange.ptr(478, 495, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(497, 497, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(498, 498, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(499, 499, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(500, 501, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(502, 502, $clone($toNativeArray($kindInt32, [0, -97, 0]), d)), CaseRange), $clone(new CaseRange.ptr(503, 503, $clone($toNativeArray($kindInt32, [0, -56, 0]), d)), CaseRange), $clone(new CaseRange.ptr(504, 543, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(544, 544, $clone($toNativeArray($kindInt32, [0, -130, 0]), d)), CaseRange), $clone(new CaseRange.ptr(546, 563, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(570, 570, $clone($toNativeArray($kindInt32, [0, 10795, 0]), d)), CaseRange), $clone(new CaseRange.ptr(571, 572, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(573, 573, $clone($toNativeArray($kindInt32, [0, -163, 0]), d)), CaseRange), $clone(new CaseRange.ptr(574, 574, $clone($toNativeArray($kindInt32, [0, 10792, 0]), d)), CaseRange), $clone(new CaseRange.ptr(575, 576, $clone($toNativeArray($kindInt32, [10815, 0, 10815]), d)), CaseRange), $clone(new CaseRange.ptr(577, 578, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(579, 579, $clone($toNativeArray($kindInt32, [0, -195, 0]), d)), CaseRange), $clone(new CaseRange.ptr(580, 580, $clone($toNativeArray($kindInt32, [0, 69, 0]), d)), CaseRange), $clone(new CaseRange.ptr(581, 581, $clone($toNativeArray($kindInt32, [0, 71, 0]), d)), CaseRange), $clone(new CaseRange.ptr(582, 591, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(592, 592, $clone($toNativeArray($kindInt32, [10783, 0, 10783]), d)), CaseRange), $clone(new CaseRange.ptr(593, 593, $clone($toNativeArray($kindInt32, [10780, 0, 10780]), d)), CaseRange), $clone(new CaseRange.ptr(594, 594, $clone($toNativeArray($kindInt32, [10782, 0, 10782]), d)), CaseRange), $clone(new CaseRange.ptr(595, 595, $clone($toNativeArray($kindInt32, [-210, 0, -210]), d)), CaseRange), $clone(new CaseRange.ptr(596, 596, $clone($toNativeArray($kindInt32, [-206, 0, -206]), d)), CaseRange), $clone(new CaseRange.ptr(598, 599, $clone($toNativeArray($kindInt32, [-205, 0, -205]), d)), CaseRange), $clone(new CaseRange.ptr(601, 601, $clone($toNativeArray($kindInt32, [-202, 0, -202]), d)), CaseRange), $clone(new CaseRange.ptr(603, 603, $clone($toNativeArray($kindInt32, [-203, 0, -203]), d)), CaseRange), $clone(new CaseRange.ptr(604, 604, $clone($toNativeArray($kindInt32, [42319, 0, 42319]), d)), CaseRange), $clone(new CaseRange.ptr(608, 608, $clone($toNativeArray($kindInt32, [-205, 0, -205]), d)), CaseRange), $clone(new CaseRange.ptr(609, 609, $clone($toNativeArray($kindInt32, [42315, 0, 42315]), d)), CaseRange), $clone(new CaseRange.ptr(611, 611, $clone($toNativeArray($kindInt32, [-207, 0, -207]), d)), CaseRange), $clone(new CaseRange.ptr(613, 613, $clone($toNativeArray($kindInt32, [42280, 0, 42280]), d)), CaseRange), $clone(new CaseRange.ptr(614, 614, $clone($toNativeArray($kindInt32, [42308, 0, 42308]), d)), CaseRange), $clone(new CaseRange.ptr(616, 616, $clone($toNativeArray($kindInt32, [-209, 0, -209]), d)), CaseRange), $clone(new CaseRange.ptr(617, 617, $clone($toNativeArray($kindInt32, [-211, 0, -211]), d)), CaseRange), $clone(new CaseRange.ptr(618, 618, $clone($toNativeArray($kindInt32, [42308, 0, 42308]), d)), CaseRange), $clone(new CaseRange.ptr(619, 619, $clone($toNativeArray($kindInt32, [10743, 0, 10743]), d)), CaseRange), $clone(new CaseRange.ptr(620, 620, $clone($toNativeArray($kindInt32, [42305, 0, 42305]), d)), CaseRange), $clone(new CaseRange.ptr(623, 623, $clone($toNativeArray($kindInt32, [-211, 0, -211]), d)), CaseRange), $clone(new CaseRange.ptr(625, 625, $clone($toNativeArray($kindInt32, [10749, 0, 10749]), d)), CaseRange), $clone(new CaseRange.ptr(626, 626, $clone($toNativeArray($kindInt32, [-213, 0, -213]), d)), CaseRange), $clone(new CaseRange.ptr(629, 629, $clone($toNativeArray($kindInt32, [-214, 0, -214]), d)), CaseRange), $clone(new CaseRange.ptr(637, 637, $clone($toNativeArray($kindInt32, [10727, 0, 10727]), d)), CaseRange), $clone(new CaseRange.ptr(640, 640, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(642, 642, $clone($toNativeArray($kindInt32, [42307, 0, 42307]), d)), CaseRange), $clone(new CaseRange.ptr(643, 643, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(647, 647, $clone($toNativeArray($kindInt32, [42282, 0, 42282]), d)), CaseRange), $clone(new CaseRange.ptr(648, 648, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(649, 649, $clone($toNativeArray($kindInt32, [-69, 0, -69]), d)), CaseRange), $clone(new CaseRange.ptr(650, 651, $clone($toNativeArray($kindInt32, [-217, 0, -217]), d)), CaseRange), $clone(new CaseRange.ptr(652, 652, $clone($toNativeArray($kindInt32, [-71, 0, -71]), d)), CaseRange), $clone(new CaseRange.ptr(658, 658, $clone($toNativeArray($kindInt32, [-219, 0, -219]), d)), CaseRange), $clone(new CaseRange.ptr(669, 669, $clone($toNativeArray($kindInt32, [42261, 0, 42261]), d)), CaseRange), $clone(new CaseRange.ptr(670, 670, $clone($toNativeArray($kindInt32, [42258, 0, 42258]), d)), CaseRange), $clone(new CaseRange.ptr(837, 837, $clone($toNativeArray($kindInt32, [84, 0, 84]), d)), CaseRange), $clone(new CaseRange.ptr(880, 883, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(886, 887, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(891, 893, $clone($toNativeArray($kindInt32, [130, 0, 130]), d)), CaseRange), $clone(new CaseRange.ptr(895, 895, $clone($toNativeArray($kindInt32, [0, 116, 0]), d)), CaseRange), $clone(new CaseRange.ptr(902, 902, $clone($toNativeArray($kindInt32, [0, 38, 0]), d)), CaseRange), $clone(new CaseRange.ptr(904, 906, $clone($toNativeArray($kindInt32, [0, 37, 0]), d)), CaseRange), $clone(new CaseRange.ptr(908, 908, $clone($toNativeArray($kindInt32, [0, 64, 0]), d)), CaseRange), $clone(new CaseRange.ptr(910, 911, $clone($toNativeArray($kindInt32, [0, 63, 0]), d)), CaseRange), $clone(new CaseRange.ptr(913, 929, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(931, 939, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(940, 940, $clone($toNativeArray($kindInt32, [-38, 0, -38]), d)), CaseRange), $clone(new CaseRange.ptr(941, 943, $clone($toNativeArray($kindInt32, [-37, 0, -37]), d)), CaseRange), $clone(new CaseRange.ptr(945, 961, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(962, 962, $clone($toNativeArray($kindInt32, [-31, 0, -31]), d)), CaseRange), $clone(new CaseRange.ptr(963, 971, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(972, 972, $clone($toNativeArray($kindInt32, [-64, 0, -64]), d)), CaseRange), $clone(new CaseRange.ptr(973, 974, $clone($toNativeArray($kindInt32, [-63, 0, -63]), d)), CaseRange), $clone(new CaseRange.ptr(975, 975, $clone($toNativeArray($kindInt32, [0, 8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(976, 976, $clone($toNativeArray($kindInt32, [-62, 0, -62]), d)), CaseRange), $clone(new CaseRange.ptr(977, 977, $clone($toNativeArray($kindInt32, [-57, 0, -57]), d)), CaseRange), $clone(new CaseRange.ptr(981, 981, $clone($toNativeArray($kindInt32, [-47, 0, -47]), d)), CaseRange), $clone(new CaseRange.ptr(982, 982, $clone($toNativeArray($kindInt32, [-54, 0, -54]), d)), CaseRange), $clone(new CaseRange.ptr(983, 983, $clone($toNativeArray($kindInt32, [-8, 0, -8]), d)), CaseRange), $clone(new CaseRange.ptr(984, 1007, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1008, 1008, $clone($toNativeArray($kindInt32, [-86, 0, -86]), d)), CaseRange), $clone(new CaseRange.ptr(1009, 1009, $clone($toNativeArray($kindInt32, [-80, 0, -80]), d)), CaseRange), $clone(new CaseRange.ptr(1010, 1010, $clone($toNativeArray($kindInt32, [7, 0, 7]), d)), CaseRange), $clone(new CaseRange.ptr(1011, 1011, $clone($toNativeArray($kindInt32, [-116, 0, -116]), d)), CaseRange), $clone(new CaseRange.ptr(1012, 1012, $clone($toNativeArray($kindInt32, [0, -60, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1013, 1013, $clone($toNativeArray($kindInt32, [-96, 0, -96]), d)), CaseRange), $clone(new CaseRange.ptr(1015, 1016, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1017, 1017, $clone($toNativeArray($kindInt32, [0, -7, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1018, 1019, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1021, 1023, $clone($toNativeArray($kindInt32, [0, -130, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1024, 1039, $clone($toNativeArray($kindInt32, [0, 80, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1040, 1071, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1072, 1103, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(1104, 1119, $clone($toNativeArray($kindInt32, [-80, 0, -80]), d)), CaseRange), $clone(new CaseRange.ptr(1120, 1153, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1162, 1215, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1216, 1216, $clone($toNativeArray($kindInt32, [0, 15, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1217, 1230, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1231, 1231, $clone($toNativeArray($kindInt32, [-15, 0, -15]), d)), CaseRange), $clone(new CaseRange.ptr(1232, 1327, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1329, 1366, $clone($toNativeArray($kindInt32, [0, 48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1377, 1414, $clone($toNativeArray($kindInt32, [-48, 0, -48]), d)), CaseRange), $clone(new CaseRange.ptr(4256, 4293, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4295, 4295, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4301, 4301, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4304, 4346, $clone($toNativeArray($kindInt32, [3008, 0, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4349, 4351, $clone($toNativeArray($kindInt32, [3008, 0, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5024, 5103, $clone($toNativeArray($kindInt32, [0, 38864, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5104, 5109, $clone($toNativeArray($kindInt32, [0, 8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5112, 5117, $clone($toNativeArray($kindInt32, [-8, 0, -8]), d)), CaseRange), $clone(new CaseRange.ptr(7296, 7296, $clone($toNativeArray($kindInt32, [-6254, 0, -6254]), d)), CaseRange), $clone(new CaseRange.ptr(7297, 7297, $clone($toNativeArray($kindInt32, [-6253, 0, -6253]), d)), CaseRange), $clone(new CaseRange.ptr(7298, 7298, $clone($toNativeArray($kindInt32, [-6244, 0, -6244]), d)), CaseRange), $clone(new CaseRange.ptr(7299, 7300, $clone($toNativeArray($kindInt32, [-6242, 0, -6242]), d)), CaseRange), $clone(new CaseRange.ptr(7301, 7301, $clone($toNativeArray($kindInt32, [-6243, 0, -6243]), d)), CaseRange), $clone(new CaseRange.ptr(7302, 7302, $clone($toNativeArray($kindInt32, [-6236, 0, -6236]), d)), CaseRange), $clone(new CaseRange.ptr(7303, 7303, $clone($toNativeArray($kindInt32, [-6181, 0, -6181]), d)), CaseRange), $clone(new CaseRange.ptr(7304, 7304, $clone($toNativeArray($kindInt32, [35266, 0, 35266]), d)), CaseRange), $clone(new CaseRange.ptr(7312, 7354, $clone($toNativeArray($kindInt32, [0, -3008, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7357, 7359, $clone($toNativeArray($kindInt32, [0, -3008, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7545, 7545, $clone($toNativeArray($kindInt32, [35332, 0, 35332]), d)), CaseRange), $clone(new CaseRange.ptr(7549, 7549, $clone($toNativeArray($kindInt32, [3814, 0, 3814]), d)), CaseRange), $clone(new CaseRange.ptr(7566, 7566, $clone($toNativeArray($kindInt32, [35384, 0, 35384]), d)), CaseRange), $clone(new CaseRange.ptr(7680, 7829, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(7835, 7835, $clone($toNativeArray($kindInt32, [-59, 0, -59]), d)), CaseRange), $clone(new CaseRange.ptr(7838, 7838, $clone($toNativeArray($kindInt32, [0, -7615, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7840, 7935, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(7936, 7943, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7944, 7951, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7952, 7957, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7960, 7965, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7968, 7975, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7976, 7983, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7984, 7991, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7992, 7999, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8000, 8005, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8008, 8013, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8017, 8017, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8019, 8019, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8021, 8021, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8023, 8023, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8025, 8025, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8027, 8027, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8029, 8029, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8031, 8031, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8032, 8039, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8040, 8047, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8048, 8049, $clone($toNativeArray($kindInt32, [74, 0, 74]), d)), CaseRange), $clone(new CaseRange.ptr(8050, 8053, $clone($toNativeArray($kindInt32, [86, 0, 86]), d)), CaseRange), $clone(new CaseRange.ptr(8054, 8055, $clone($toNativeArray($kindInt32, [100, 0, 100]), d)), CaseRange), $clone(new CaseRange.ptr(8056, 8057, $clone($toNativeArray($kindInt32, [128, 0, 128]), d)), CaseRange), $clone(new CaseRange.ptr(8058, 8059, $clone($toNativeArray($kindInt32, [112, 0, 112]), d)), CaseRange), $clone(new CaseRange.ptr(8060, 8061, $clone($toNativeArray($kindInt32, [126, 0, 126]), d)), CaseRange), $clone(new CaseRange.ptr(8064, 8071, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8072, 8079, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8080, 8087, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8088, 8095, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8096, 8103, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8104, 8111, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8112, 8113, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8115, 8115, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8120, 8121, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8122, 8123, $clone($toNativeArray($kindInt32, [0, -74, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8124, 8124, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8126, 8126, $clone($toNativeArray($kindInt32, [-7205, 0, -7205]), d)), CaseRange), $clone(new CaseRange.ptr(8131, 8131, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8136, 8139, $clone($toNativeArray($kindInt32, [0, -86, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8140, 8140, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8144, 8145, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8152, 8153, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8154, 8155, $clone($toNativeArray($kindInt32, [0, -100, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8160, 8161, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8165, 8165, $clone($toNativeArray($kindInt32, [7, 0, 7]), d)), CaseRange), $clone(new CaseRange.ptr(8168, 8169, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8170, 8171, $clone($toNativeArray($kindInt32, [0, -112, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8172, 8172, $clone($toNativeArray($kindInt32, [0, -7, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8179, 8179, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8184, 8185, $clone($toNativeArray($kindInt32, [0, -128, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8186, 8187, $clone($toNativeArray($kindInt32, [0, -126, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8188, 8188, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8486, 8486, $clone($toNativeArray($kindInt32, [0, -7517, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8490, 8490, $clone($toNativeArray($kindInt32, [0, -8383, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8491, 8491, $clone($toNativeArray($kindInt32, [0, -8262, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8498, 8498, $clone($toNativeArray($kindInt32, [0, 28, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8526, 8526, $clone($toNativeArray($kindInt32, [-28, 0, -28]), d)), CaseRange), $clone(new CaseRange.ptr(8544, 8559, $clone($toNativeArray($kindInt32, [0, 16, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8560, 8575, $clone($toNativeArray($kindInt32, [-16, 0, -16]), d)), CaseRange), $clone(new CaseRange.ptr(8579, 8580, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(9398, 9423, $clone($toNativeArray($kindInt32, [0, 26, 0]), d)), CaseRange), $clone(new CaseRange.ptr(9424, 9449, $clone($toNativeArray($kindInt32, [-26, 0, -26]), d)), CaseRange), $clone(new CaseRange.ptr(11264, 11310, $clone($toNativeArray($kindInt32, [0, 48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11312, 11358, $clone($toNativeArray($kindInt32, [-48, 0, -48]), d)), CaseRange), $clone(new CaseRange.ptr(11360, 11361, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11362, 11362, $clone($toNativeArray($kindInt32, [0, -10743, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11363, 11363, $clone($toNativeArray($kindInt32, [0, -3814, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11364, 11364, $clone($toNativeArray($kindInt32, [0, -10727, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11365, 11365, $clone($toNativeArray($kindInt32, [-10795, 0, -10795]), d)), CaseRange), $clone(new CaseRange.ptr(11366, 11366, $clone($toNativeArray($kindInt32, [-10792, 0, -10792]), d)), CaseRange), $clone(new CaseRange.ptr(11367, 11372, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11373, 11373, $clone($toNativeArray($kindInt32, [0, -10780, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11374, 11374, $clone($toNativeArray($kindInt32, [0, -10749, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11375, 11375, $clone($toNativeArray($kindInt32, [0, -10783, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11376, 11376, $clone($toNativeArray($kindInt32, [0, -10782, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11378, 11379, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11381, 11382, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11390, 11391, $clone($toNativeArray($kindInt32, [0, -10815, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11392, 11491, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11499, 11502, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11506, 11507, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11520, 11557, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(11559, 11559, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(11565, 11565, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(42560, 42605, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42624, 42651, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42786, 42799, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42802, 42863, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42873, 42876, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42877, 42877, $clone($toNativeArray($kindInt32, [0, -35332, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42878, 42887, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42891, 42892, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42893, 42893, $clone($toNativeArray($kindInt32, [0, -42280, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42896, 42899, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42900, 42900, $clone($toNativeArray($kindInt32, [48, 0, 48]), d)), CaseRange), $clone(new CaseRange.ptr(42902, 42921, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42922, 42922, $clone($toNativeArray($kindInt32, [0, -42308, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42923, 42923, $clone($toNativeArray($kindInt32, [0, -42319, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42924, 42924, $clone($toNativeArray($kindInt32, [0, -42315, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42925, 42925, $clone($toNativeArray($kindInt32, [0, -42305, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42926, 42926, $clone($toNativeArray($kindInt32, [0, -42308, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42928, 42928, $clone($toNativeArray($kindInt32, [0, -42258, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42929, 42929, $clone($toNativeArray($kindInt32, [0, -42282, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42930, 42930, $clone($toNativeArray($kindInt32, [0, -42261, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42931, 42931, $clone($toNativeArray($kindInt32, [0, 928, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42932, 42943, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42946, 42947, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42948, 42948, $clone($toNativeArray($kindInt32, [0, -48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42949, 42949, $clone($toNativeArray($kindInt32, [0, -42307, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42950, 42950, $clone($toNativeArray($kindInt32, [0, -35384, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42951, 42954, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42997, 42998, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(43859, 43859, $clone($toNativeArray($kindInt32, [-928, 0, -928]), d)), CaseRange), $clone(new CaseRange.ptr(43888, 43967, $clone($toNativeArray($kindInt32, [-38864, 0, -38864]), d)), CaseRange), $clone(new CaseRange.ptr(65313, 65338, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(65345, 65370, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(66560, 66599, $clone($toNativeArray($kindInt32, [0, 40, 0]), d)), CaseRange), $clone(new CaseRange.ptr(66600, 66639, $clone($toNativeArray($kindInt32, [-40, 0, -40]), d)), CaseRange), $clone(new CaseRange.ptr(66736, 66771, $clone($toNativeArray($kindInt32, [0, 40, 0]), d)), CaseRange), $clone(new CaseRange.ptr(66776, 66811, $clone($toNativeArray($kindInt32, [-40, 0, -40]), d)), CaseRange), $clone(new CaseRange.ptr(68736, 68786, $clone($toNativeArray($kindInt32, [0, 64, 0]), d)), CaseRange), $clone(new CaseRange.ptr(68800, 68850, $clone($toNativeArray($kindInt32, [-64, 0, -64]), d)), CaseRange), $clone(new CaseRange.ptr(71840, 71871, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(71872, 71903, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(93760, 93791, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(93792, 93823, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(125184, 125217, $clone($toNativeArray($kindInt32, [0, 34, 0]), d)), CaseRange), $clone(new CaseRange.ptr(125218, 125251, $clone($toNativeArray($kindInt32, [-34, 0, -34]), d)), CaseRange)]);
		$pkg.CaseRanges = _CaseRanges;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, Valid, ValidString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	Valid = function(p) {
		var accept, c, c$1, c$2, first32, i, n, p, pi, second32, size, x, x$1, x$2, x$3, x$4;
		p = $subslice(p, 0, p.$length, p.$length);
		while (true) {
			if (!(p.$length >= 8)) { break; }
			first32 = ((((((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0)) | ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
			second32 = ((((((((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]) >>> 0)) | ((((5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((7 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 7]) >>> 0)) << 24 >>> 0)) >>> 0;
			if (!(((((((first32 | second32) >>> 0)) & 2155905152) >>> 0) === 0))) {
				break;
			}
			p = $subslice(p, 8);
		}
		n = p.$length;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			pi = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (pi < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((pi < 0 || pi >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[pi]);
			if (x === 241) {
				return false;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > n) {
				return false;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c < accept.lo || accept.hi < c) {
				return false;
			} else if (size === 2) {
			} else {
				c$1 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$1 < 128 || 191 < c$1) {
					return false;
				} else if (size === 3) {
				} else {
					c$2 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$2 < 128 || 191 < c$2) {
						return false;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return true;
	};
	$pkg.Valid = Valid;
	ValidString = function(s) {
		var accept, c, c$1, c$2, first32, i, n, s, second32, si, size, x, x$1;
		while (true) {
			if (!(s.length >= 8)) { break; }
			first32 = (((((((s.charCodeAt(0) >>> 0)) | (((s.charCodeAt(1) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(2) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(3) >>> 0)) << 24 >>> 0)) >>> 0;
			second32 = (((((((s.charCodeAt(4) >>> 0)) | (((s.charCodeAt(5) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(6) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(7) >>> 0)) << 24 >>> 0)) >>> 0;
			if (!(((((((first32 | second32) >>> 0)) & 2155905152) >>> 0) === 0))) {
				break;
			}
			s = $substring(s, 8);
		}
		n = s.length;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			si = s.charCodeAt(i);
			if (si < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((si < 0 || si >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[si]);
			if (x === 241) {
				return false;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > n) {
				return false;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c = s.charCodeAt((i + 1 >> 0));
			if (c < accept.lo || accept.hi < c) {
				return false;
			} else if (size === 2) {
			} else {
				c$1 = s.charCodeAt((i + 2 >> 0));
				if (c$1 < 128 || 191 < c$1) {
					return false;
				} else if (size === 3) {
				} else {
					c$2 = s.charCodeAt((i + 3 >> 0));
					if (c$2 < 128 || 191 < c$2) {
						return false;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return true;
	};
	$pkg.ValidString = ValidString;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", embedded: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [$clone(new acceptRange.ptr(128, 191), acceptRange), $clone(new acceptRange.ptr(160, 191), acceptRange), $clone(new acceptRange.ptr(128, 159), acceptRange), $clone(new acceptRange.ptr(144, 191), acceptRange), $clone(new acceptRange.ptr(128, 143), acceptRange), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, bytealg, io, unicode, utf8, Reader, asciiSet, Buffer, readOp, sliceType, arrayType, ptrType, arrayType$1, ptrType$1, ptrType$2, asciiSpace, errNegativeRead, errUnreadByte, NewReader, Contains, ContainsAny, IndexRune, IndexAny, HasPrefix, HasSuffix, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeASCIISet, containsRune, TrimRight, trimRightByte, trimRightASCII, trimRightUnicode, TrimSpace, Index, Cut, growSlice, IndexByte, Equal, Compare;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "bytes.asciiSet", true, "bytes", false, null);
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(1, $kindInt8, "bytes.readOp", true, "bytes", false, null);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	ptrType = $ptrType(asciiSet);
	arrayType$1 = $arrayType($Uint32, 8);
	ptrType$1 = $ptrType(Buffer);
	ptrType$2 = $ptrType(Reader);
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.prevRune = -1;
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r, x;
		r = this;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadRune: at beginning of slice");
		}
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var {_r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {w});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Reader.ptr.prototype.WriteTo, $c: true, $r, _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s};return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	Contains = function(b, subslice) {
		var b, subslice;
		return !((Index(b, subslice) === -1));
	};
	$pkg.Contains = Contains;
	ContainsAny = function(b, chars) {
		var b, chars;
		return IndexAny(b, chars) >= 0;
	};
	$pkg.ContainsAny = ContainsAny;
	IndexRune = function(s, r) {
		var _tuple, b, i, n, n$1, r, r1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			i = 0;
			while (true) {
				if (!(i < s.$length)) { break; }
				_tuple = utf8.DecodeRune($subslice(s, i));
				r1 = _tuple[0];
				n = _tuple[1];
				if (r1 === 65533) {
					return i;
				}
				i = i + (n) >> 0;
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			b = arrayType.zero();
			n$1 = utf8.EncodeRune(new sliceType(b), r);
			return Index(s, $subslice(new sliceType(b), 0, n$1));
		}
	};
	$pkg.IndexRune = IndexRune;
	IndexAny = function(s, chars) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _rune, _rune$1, _tuple, _tuple$1, as, c, ch, chars, i, i$1, isASCII, r, r$1, r$2, s, width;
		if (chars === "") {
			return -1;
		}
		if (s.$length === 1) {
			r = (((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) >> 0));
			if (r >= 128) {
				_ref = chars;
				_i = 0;
				while (true) {
					if (!(_i < _ref.length)) { break; }
					_rune = $decodeRune(_ref, _i);
					r = _rune[0];
					if (r === 65533) {
						return 0;
					}
					_i += _rune[1];
				}
				return -1;
			}
			if (bytealg.IndexByteString(chars, (0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0])) >= 0) {
				return 0;
			}
			return -1;
		}
		if (chars.length === 1) {
			r$1 = ((chars.charCodeAt(0) >> 0));
			if (r$1 >= 128) {
				r$1 = 65533;
			}
			return IndexRune(s, r$1);
		}
		if (s.$length > 8) {
			_tuple = makeASCIISet(chars);
			as = $clone(_tuple[0], asciiSet);
			isASCII = _tuple[1];
			if (isASCII) {
				_ref$1 = s;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i = _i$1;
					c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (new ptrType(as).contains(c)) {
						return i;
					}
					_i$1++;
				}
				return -1;
			}
		}
		width = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.$length)) { break; }
			r$2 = ((((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1]) >> 0));
			if (r$2 < 128) {
				if (bytealg.IndexByteString(chars, ((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1])) >= 0) {
					return i$1;
				}
				width = 1;
				i$1 = i$1 + (width) >> 0;
				continue;
			}
			_tuple$1 = utf8.DecodeRune($subslice(s, i$1));
			r$2 = _tuple$1[0];
			width = _tuple$1[1];
			if (!((r$2 === 65533))) {
				if (chars.length === width) {
					if (chars === ($encodeRune(r$2))) {
						return i$1;
					}
					i$1 = i$1 + (width) >> 0;
					continue;
				}
				if (bytealg.MaxLen >= width) {
					if (bytealg.IndexString(chars, ($encodeRune(r$2))) >= 0) {
						return i$1;
					}
					i$1 = i$1 + (width) >> 0;
					continue;
				}
			}
			_ref$2 = chars;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.length)) { break; }
				_rune$1 = $decodeRune(_ref$2, _i$2);
				ch = _rune$1[0];
				if (r$2 === ch) {
					return i$1;
				}
				_i$2 += _rune$1[1];
			}
			i$1 = i$1 + (width) >> 0;
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var s, suffix;
		return s.$length >= suffix.$length && Equal($subslice(s, (s.$length - suffix.$length >> 0)), suffix);
	};
	$pkg.HasSuffix = HasSuffix;
	TrimLeftFunc = function(s, f) {
		var {_r, f, i, s, $s, $r, $c} = $restore(this, {s, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return sliceType.nil;
		}
		$s = -1; return $subslice(s, i);
		/* */ } return; } var $f = {$blk: TrimLeftFunc, $c: true, $r, _r, f, i, s, $s};return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var {_r, _tuple, f, i, s, wid, $s, $r, $c} = $restore(this, {s, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $subslice(s, 0, i);
		/* */ } return; } var $f = {$blk: TrimRightFunc, $c: true, $r, _r, _tuple, f, i, s, wid, $s};return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var {$24r, _r, _r$1, f, s, $s, $r, $c} = $restore(this, {s, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: TrimFunc, $c: true, $r, $24r, _r, _r$1, f, s, $s};return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var {_r, _tuple, f, r, s, start, truth, wid, $s, $r, $c} = $restore(this, {s, f, truth});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = ((((start < 0 || start >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + start]) >> 0));
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return -1;
		/* */ } return; } var $f = {$blk: indexFunc, $c: true, $r, _r, _tuple, f, r, s, start, truth, wid, $s};return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var {_r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r, $c} = $restore(this, {s, f, truth});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = (((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return -1;
		/* */ } return; } var $f = {$blk: lastIndexFunc, $c: true, $r, _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s};return $f;
	};
	makeASCIISet = function(chars) {
		var _index, _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$1.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = (_q = c / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((_r = c % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var _q, _r, as, c, x, x$1, y;
		as = this.$val;
		return !((((((x = as, x$1 = (_q = c / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) & (((y = ((_r = c % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	containsRune = function(s, r) {
		var _i, _ref, _rune, c, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === r) {
				return true;
			}
			_i += _rune[1];
		}
		return false;
	};
	TrimRight = function(s, cutset) {
		var _tuple, as, cutset, ok, s;
		if ((s.$length === 0) || cutset === "") {
			return s;
		}
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return trimRightByte(s, cutset.charCodeAt(0));
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		ok = _tuple[1];
		if (ok) {
			return trimRightASCII(s, as);
		}
		return trimRightUnicode(s, cutset);
	};
	$pkg.TrimRight = TrimRight;
	trimRightByte = function(s, c) {
		var c, s, x;
		while (true) {
			if (!(s.$length > 0 && ((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === c))) { break; }
			s = $subslice(s, 0, (s.$length - 1 >> 0));
		}
		return s;
	};
	trimRightASCII = function(s, as) {
		var as, s, x;
		while (true) {
			if (!(s.$length > 0)) { break; }
			if (!new ptrType(as).contains((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])))) {
				break;
			}
			s = $subslice(s, 0, (s.$length - 1 >> 0));
		}
		return s;
	};
	trimRightUnicode = function(s, cutset) {
		var _tmp, _tmp$1, _tuple, cutset, n, r, s, x;
		while (true) {
			if (!(s.$length > 0)) { break; }
			_tmp = (((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			n = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune(s);
				r = _tuple[0];
				n = _tuple[1];
			}
			if (!containsRune(cutset, r)) {
				break;
			}
			s = $subslice(s, 0, (s.$length - n >> 0));
		}
		return s;
	};
	TrimSpace = function(s) {
		var {$24r, $24r$1, _r, _r$1, c, c$1, s, start, stop, x, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			c = ((start < 0 || start >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + start]);
			/* */ if (c >= 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (c >= 128) { */ case 3:
				_r = TrimFunc($subslice(s, start), unicode.IsSpace); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			if (((c < 0 || c >= asciiSpace.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiSpace[c]) === 0) {
				/* break; */ $s = 2; continue;
			}
			start = start + (1) >> 0;
		$s = 1; continue;
		case 2:
		stop = s.$length;
		/* while (true) { */ case 7:
			/* if (!(stop > start)) { break; } */ if(!(stop > start)) { $s = 8; continue; }
			c$1 = (x = stop - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x]));
			/* */ if (c$1 >= 128) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (c$1 >= 128) { */ case 9:
				_r$1 = TrimFunc($subslice(s, start, stop), unicode.IsSpace); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 12; case 12: return $24r$1;
			/* } */ case 10:
			if (((c$1 < 0 || c$1 >= asciiSpace.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiSpace[c$1]) === 0) {
				/* break; */ $s = 8; continue;
			}
			stop = stop - (1) >> 0;
		$s = 7; continue;
		case 8:
		if (start === stop) {
			$s = -1; return sliceType.nil;
		}
		$s = -1; return $subslice(s, start, stop);
		/* */ } return; } var $f = {$blk: TrimSpace, $c: true, $r, $24r, $24r$1, _r, _r$1, c, c$1, s, start, stop, x, $s};return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	Index = function(s, sep) {
		var c0, c0$1, c1, c1$1, fails, fails$1, i, i$1, j, n, o, o$1, r, s, sep, t, t$1, x, x$1;
		n = sep.$length;
		if ((n === 0)) {
			return 0;
		} else if ((n === 1)) {
			return IndexByte(s, (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]));
		} else if ((n === s.$length)) {
			if (Equal(sep, s)) {
				return 0;
			}
			return -1;
		} else if (n > s.$length) {
			return -1;
		} else if (n <= bytealg.MaxLen) {
			if (s.$length <= 0) {
				return bytealg.Index(s, sep);
			}
			c0 = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
			c1 = (1 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 1]);
			i = 0;
			t = (s.$length - n >> 0) + 1 >> 0;
			fails = 0;
			while (true) {
				if (!(i < t)) { break; }
				if (!((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === c0))) {
					o = IndexByte($subslice(s, (i + 1 >> 0), t), c0);
					if (o < 0) {
						return -1;
					}
					i = i + ((o + 1 >> 0)) >> 0;
				}
				if (((x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === c1) && Equal($subslice(s, i, (i + n >> 0)), sep)) {
					return i;
				}
				fails = fails + (1) >> 0;
				i = i + (1) >> 0;
				if (fails > bytealg.Cutover(i)) {
					r = bytealg.Index($subslice(s, i), sep);
					if (r >= 0) {
						return r + i >> 0;
					}
					return -1;
				}
			}
			return -1;
		}
		c0$1 = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
		c1$1 = (1 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 1]);
		i$1 = 0;
		fails$1 = 0;
		t$1 = (s.$length - n >> 0) + 1 >> 0;
		while (true) {
			if (!(i$1 < t$1)) { break; }
			if (!((((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1]) === c0$1))) {
				o$1 = IndexByte($subslice(s, (i$1 + 1 >> 0), t$1), c0$1);
				if (o$1 < 0) {
					break;
				}
				i$1 = i$1 + ((o$1 + 1 >> 0)) >> 0;
			}
			if (((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) === c1$1) && Equal($subslice(s, i$1, (i$1 + n >> 0)), sep)) {
				return i$1;
			}
			i$1 = i$1 + (1) >> 0;
			fails$1 = fails$1 + (1) >> 0;
			if (fails$1 >= (4 + (i$1 >> 4 >> 0) >> 0) && i$1 < t$1) {
				j = bytealg.IndexRabinKarpBytes($subslice(s, i$1), sep);
				if (j < 0) {
					return -1;
				}
				return i$1 + j >> 0;
			}
		}
		return -1;
	};
	$pkg.Index = Index;
	Cut = function(s, sep) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, after, before, found, i, s, sep;
		before = sliceType.nil;
		after = sliceType.nil;
		found = false;
		i = Index(s, sep);
		if (i >= 0) {
			_tmp = $subslice(s, 0, i);
			_tmp$1 = $subslice(s, (i + sep.$length >> 0));
			_tmp$2 = true;
			before = _tmp;
			after = _tmp$1;
			found = _tmp$2;
			return [before, after, found];
		}
		_tmp$3 = s;
		_tmp$4 = sliceType.nil;
		_tmp$5 = false;
		before = _tmp$3;
		after = _tmp$4;
		found = _tmp$5;
		return [before, after, found];
	};
	$pkg.Cut = Cut;
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType$1.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.empty = function() {
		var b;
		b = this;
		return b.buf.$length <= b.off;
	};
	Buffer.prototype.empty = function() { return this.$val.empty(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		if (n === 0) {
			b.Reset();
			return;
		}
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.buf = $subslice(b.buf, 0, 0);
		b.off = 0;
		b.lastRead = 0;
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.tryGrowByReslice = function(n) {
		var b, l, n;
		b = this;
		l = b.buf.$length;
		if (n <= (b.buf.$capacity - l >> 0)) {
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [l, true];
		}
		return [0, false];
	};
	Buffer.prototype.tryGrowByReslice = function(n) { return this.$val.tryGrowByReslice(n); };
	Buffer.ptr.prototype.grow = function(n) {
		var {_q, _r, _tuple, b, c, i, m, n, ok, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Reset();
		}
		_tuple = b.tryGrowByReslice(n);
		i = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return i;
		}
		if (b.buf === sliceType.nil && n <= 64) {
			b.buf = $makeSlice(sliceType, n, 64);
			$s = -1; return 0;
		}
		c = b.buf.$capacity;
		/* */ if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) { $s = 1; continue; }
		/* */ if (c > ((2147483647 - c >> 0) - n >> 0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) { */ case 1:
			$copySlice(b.buf, $subslice(b.buf, b.off));
			$s = 4; continue;
		/* } else if (c > ((2147483647 - c >> 0) - n >> 0)) { */ case 2:
			$panic($pkg.ErrTooLarge);
			$s = 4; continue;
		/* } else { */ case 3:
			_r = growSlice($subslice(b.buf, b.off), b.off + n >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			b.buf = _r;
		/* } */ case 4:
		b.off = 0;
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.grow, $c: true, $r, _q, _r, _tuple, b, c, i, m, n, ok, $s};return $f;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var {_r, b, m, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		_r = b.grow(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		b.buf = $subslice(b.buf, 0, m);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.Grow, $c: true, $r, _r, b, m, n, $s};return $f;
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var {_r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, p, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(p.$length);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(p.$length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.Write, $c: true, $r, _r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, p, $s};return $f;
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var {_r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(s.length);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(s.length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteString, $c: true, $r, _r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, s, $s};return $f;
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* while (true) { */ case 1:
			_r = b.grow(512); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			b.buf = $subslice(b.buf, 0, i);
			_r$1 = r.Read($subslice(b.buf, i, b.buf.$capacity)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			m = _tuple[0];
			e = _tuple[1];
			if (m < 0) {
				$panic(errNegativeRead);
			}
			b.buf = $subslice(b.buf, 0, (i + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.ReadFrom, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s};return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	growSlice = function(b, n) {
		var {$24r, b, b2, c, n, $s, $deferred, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		c = b.$length + n >> 0;
		if (c < ($imul(2, b.$capacity))) {
			c = $imul(2, b.$capacity);
		}
		b2 = $appendSlice((sliceType.nil), $makeSlice(sliceType, c));
		$copySlice(b2, b);
		$24r = $subslice(b2, 0, b.$length);
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return sliceType.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: growSlice, $c: true, $r, $24r, b, b2, c, n, $s, $deferred};return $f; } }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s, $r, $c} = $restore(this, {w});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		nBytes = b.Len();
		/* */ if (nBytes > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (nBytes > 0) { */ case 1:
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Reset();
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteTo, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s};return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var {_r, _tuple, b, c, m, ok, x, $s, $r, $c} = $restore(this, {c});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(1);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteByte, $c: true, $r, _r, _tuple, b, c, m, ok, x, $s};return $f;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (((r >>> 0)) < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((r >>> 0)) < 128) { */ case 1:
			_r = b.WriteByte(((r << 24 >>> 24))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 2:
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(4);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!ok) { */ case 4:
			_r$1 = b.grow(4); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			m = _r$1;
		/* } */ case 5:
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteRune, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r, $s};return $f;
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.empty()) {
			b.Reset();
			if (p.$length === 0) {
				_tmp = 0;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1;
		b = this;
		if (b.empty()) {
			b.Reset();
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		if (b.empty()) {
			b.Reset();
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n << 24 >> 24));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (b.lastRead === 0) {
			return errUnreadByte;
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Compare = function(a, b) {
		var _i, _ref, a, b, ca, cb, i;
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			ca = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i >= b.$length) {
				return 1;
			}
			cb = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			if (ca < cb) {
				return -1;
			}
			if (ca > cb) {
				return 1;
			}
			_i++;
		}
		if (a.$length < b.$length) {
			return -1;
		}
		return 0;
	};
	$pkg.Compare = Compare;
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	ptrType.methods = [{prop: "contains", name: "contains", pkg: "bytes", typ: $funcType([$Uint8], [$Bool], false)}];
	ptrType$1.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "empty", name: "empty", pkg: "bytes", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "tryGrowByReslice", name: "tryGrowByReslice", pkg: "bytes", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Reader.init("bytes", [{prop: "s", name: "s", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", embedded: false, exported: false, typ: $Int, tag: ""}]);
	asciiSet.init($Uint32, 8);
	Buffer.init("bytes", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRead", name: "lastRead", embedded: false, exported: false, typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		asciiSpace = $toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read");
		errUnreadByte = errors.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, _err, deBruijn32tab, deBruijn64tab, overflowError, divideError, LeadingZeros, LeadingZeros32, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, RotateLeft32, RotateLeft64, Len, Len32, Len64, Add, Add64, Sub, Sub32, Sub64, Mul, Mul64, Div, Div64, Mul32, Add32, Div32;
	_err = $pkg._err = $newType(8, $kindString, "bits._err", true, "math/bits", false, null);
	LeadingZeros = function(x) {
		var x;
		return 32 - Len(x) >> 0;
	};
	$pkg.LeadingZeros = LeadingZeros;
	LeadingZeros32 = function(x) {
		var x;
		return 32 - Len32(x) >> 0;
	};
	$pkg.LeadingZeros32 = LeadingZeros32;
	LeadingZeros64 = function(x) {
		var x;
		return 64 - Len64(x) >> 0;
	};
	$pkg.LeadingZeros64 = LeadingZeros64;
	TrailingZeros = function(x) {
		var x;
		if (true) {
			return TrailingZeros32(((x >>> 0)));
		}
		return TrailingZeros64((new $Uint64(0, x)));
	};
	$pkg.TrailingZeros = TrailingZeros;
	TrailingZeros32 = function(x) {
		var x, x$1;
		if (x === 0) {
			return 32;
		}
		return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
	};
	$pkg.TrailingZeros32 = TrailingZeros32;
	TrailingZeros64 = function(x) {
		var x, x$1, x$2;
		if ((x.$high === 0 && x.$low === 0)) {
			return 64;
		}
		return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
	};
	$pkg.TrailingZeros64 = TrailingZeros64;
	RotateLeft32 = function(x, k) {
		var k, s, x, y, y$1;
		s = (((k >>> 0)) & 31) >>> 0;
		return (((y = s, y < 32 ? (x << y) : 0) >>> 0) | ((y$1 = ((32 - s >>> 0)), y$1 < 32 ? (x >>> y$1) : 0) >>> 0)) >>> 0;
	};
	$pkg.RotateLeft32 = RotateLeft32;
	RotateLeft64 = function(x, k) {
		var k, s, x, x$1, x$2;
		s = (((k >>> 0)) & 63) >>> 0;
		return (x$1 = $shiftLeft64(x, s), x$2 = $shiftRightUint64(x, ((64 - s >>> 0))), new $Uint64(x$1.$high | x$2.$high, (x$1.$low | x$2.$low) >>> 0));
	};
	$pkg.RotateLeft64 = RotateLeft64;
	Len = function(x) {
		var x;
		if (true) {
			return Len32(((x >>> 0)));
		}
		return Len64((new $Uint64(0, x)));
	};
	$pkg.Len = Len;
	Len32 = function(x) {
		var n, x, y, y$1;
		n = 0;
		if (x >= 65536) {
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
			n = 16;
		}
		if (x >= 256) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		n = n + (("\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b".charCodeAt(x) >> 0)) >> 0;
		return n;
	};
	$pkg.Len32 = Len32;
	Len64 = function(x) {
		var n, x;
		n = 0;
		if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
			x = $shiftRightUint64(x, (32));
			n = 32;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
			x = $shiftRightUint64(x, (16));
			n = n + (16) >> 0;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
			x = $shiftRightUint64(x, (8));
			n = n + (8) >> 0;
		}
		n = n + (("\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b".charCodeAt($flatten64(x)) >> 0)) >> 0;
		return n;
	};
	$pkg.Len64 = Len64;
	Add = function(x, y, carry) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, c32, c64, carry, carryOut, s32, s64, sum, x, y;
		sum = 0;
		carryOut = 0;
		if (true) {
			_tuple = Add32(((x >>> 0)), ((y >>> 0)), ((carry >>> 0)));
			s32 = _tuple[0];
			c32 = _tuple[1];
			_tmp = ((s32 >>> 0));
			_tmp$1 = ((c32 >>> 0));
			sum = _tmp;
			carryOut = _tmp$1;
			return [sum, carryOut];
		}
		_tuple$1 = Add64((new $Uint64(0, x)), (new $Uint64(0, y)), (new $Uint64(0, carry)));
		s64 = _tuple$1[0];
		c64 = _tuple$1[1];
		_tmp$2 = ((s64.$low >>> 0));
		_tmp$3 = ((c64.$low >>> 0));
		sum = _tmp$2;
		carryOut = _tmp$3;
		return [sum, carryOut];
	};
	$pkg.Add = Add;
	Add64 = function(x, y, carry) {
		var carry, carryOut, sum, x, x$1, x$2, x$3, x$4, y;
		sum = new $Uint64(0, 0);
		carryOut = new $Uint64(0, 0);
		sum = (x$1 = new $Uint64(x.$high + y.$high, x.$low + y.$low), new $Uint64(x$1.$high + carry.$high, x$1.$low + carry.$low));
		carryOut = $shiftRightUint64(((x$2 = new $Uint64(x.$high & y.$high, (x.$low & y.$low) >>> 0), x$3 = (x$4 = new $Uint64(x.$high | y.$high, (x.$low | y.$low) >>> 0), new $Uint64(x$4.$high & ~sum.$high, (x$4.$low & ~sum.$low) >>> 0)), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0))), 63);
		return [sum, carryOut];
	};
	$pkg.Add64 = Add64;
	Sub = function(x, y, borrow) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b32, b64, borrow, borrowOut, d32, d64, diff, x, y;
		diff = 0;
		borrowOut = 0;
		if (true) {
			_tuple = Sub32(((x >>> 0)), ((y >>> 0)), ((borrow >>> 0)));
			d32 = _tuple[0];
			b32 = _tuple[1];
			_tmp = ((d32 >>> 0));
			_tmp$1 = ((b32 >>> 0));
			diff = _tmp;
			borrowOut = _tmp$1;
			return [diff, borrowOut];
		}
		_tuple$1 = Sub64((new $Uint64(0, x)), (new $Uint64(0, y)), (new $Uint64(0, borrow)));
		d64 = _tuple$1[0];
		b64 = _tuple$1[1];
		_tmp$2 = ((d64.$low >>> 0));
		_tmp$3 = ((b64.$low >>> 0));
		diff = _tmp$2;
		borrowOut = _tmp$3;
		return [diff, borrowOut];
	};
	$pkg.Sub = Sub;
	Sub32 = function(x, y, borrow) {
		var borrow, borrowOut, diff, x, y;
		diff = 0;
		borrowOut = 0;
		diff = (x - y >>> 0) - borrow >>> 0;
		borrowOut = (((((((~x >>> 0) & y) >>> 0)) | ((((~(((x ^ y) >>> 0)) >>> 0) & diff) >>> 0))) >>> 0)) >>> 31 >>> 0;
		return [diff, borrowOut];
	};
	$pkg.Sub32 = Sub32;
	Sub64 = function(x, y, borrow) {
		var borrow, borrowOut, diff, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		diff = new $Uint64(0, 0);
		borrowOut = new $Uint64(0, 0);
		diff = (x$1 = new $Uint64(x.$high - y.$high, x.$low - y.$low), new $Uint64(x$1.$high - borrow.$high, x$1.$low - borrow.$low));
		borrowOut = $shiftRightUint64(((x$2 = (x$3 = new $Uint64(~x.$high, ~x.$low >>> 0), new $Uint64(x$3.$high & y.$high, (x$3.$low & y.$low) >>> 0)), x$4 = (x$5 = (x$6 = new $Uint64(x.$high ^ y.$high, (x.$low ^ y.$low) >>> 0), new $Uint64(~x$6.$high, ~x$6.$low >>> 0)), new $Uint64(x$5.$high & diff.$high, (x$5.$low & diff.$low) >>> 0)), new $Uint64(x$2.$high | x$4.$high, (x$2.$low | x$4.$low) >>> 0))), 63);
		return [diff, borrowOut];
	};
	$pkg.Sub64 = Sub64;
	Mul = function(x, y) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, h, h$1, hi, l, l$1, lo, x, y;
		hi = 0;
		lo = 0;
		if (true) {
			_tuple = Mul32(((x >>> 0)), ((y >>> 0)));
			h = _tuple[0];
			l = _tuple[1];
			_tmp = ((h >>> 0));
			_tmp$1 = ((l >>> 0));
			hi = _tmp;
			lo = _tmp$1;
			return [hi, lo];
		}
		_tuple$1 = Mul64((new $Uint64(0, x)), (new $Uint64(0, y)));
		h$1 = _tuple$1[0];
		l$1 = _tuple$1[1];
		_tmp$2 = ((h$1.$low >>> 0));
		_tmp$3 = ((l$1.$low >>> 0));
		hi = _tmp$2;
		lo = _tmp$3;
		return [hi, lo];
	};
	$pkg.Mul = Mul;
	Mul64 = function(x, y) {
		var hi, lo, t, w0, w1, w2, x, x$1, x$2, x$3, x$4, x$5, x$6, x0, x1, y, y0, y1;
		hi = new $Uint64(0, 0);
		lo = new $Uint64(0, 0);
		x0 = new $Uint64(x.$high & 0, (x.$low & 4294967295) >>> 0);
		x1 = $shiftRightUint64(x, 32);
		y0 = new $Uint64(y.$high & 0, (y.$low & 4294967295) >>> 0);
		y1 = $shiftRightUint64(y, 32);
		w0 = $mul64(x0, y0);
		t = (x$1 = $mul64(x1, y0), x$2 = $shiftRightUint64(w0, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = $shiftRightUint64(t, 32);
		w1 = (x$3 = $mul64(x0, y1), new $Uint64(w1.$high + x$3.$high, w1.$low + x$3.$low));
		hi = (x$4 = (x$5 = $mul64(x1, y1), new $Uint64(x$5.$high + w2.$high, x$5.$low + w2.$low)), x$6 = $shiftRightUint64(w1, 32), new $Uint64(x$4.$high + x$6.$high, x$4.$low + x$6.$low));
		lo = $mul64(x, y);
		return [hi, lo];
	};
	$pkg.Mul64 = Mul64;
	Div = function(hi, lo, y) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, hi, lo, q, q$1, quo, r, r$1, rem, y;
		quo = 0;
		rem = 0;
		if (true) {
			_tuple = Div32(((hi >>> 0)), ((lo >>> 0)), ((y >>> 0)));
			q = _tuple[0];
			r = _tuple[1];
			_tmp = ((q >>> 0));
			_tmp$1 = ((r >>> 0));
			quo = _tmp;
			rem = _tmp$1;
			return [quo, rem];
		}
		_tuple$1 = Div64((new $Uint64(0, hi)), (new $Uint64(0, lo)), (new $Uint64(0, y)));
		q$1 = _tuple$1[0];
		r$1 = _tuple$1[1];
		_tmp$2 = ((q$1.$low >>> 0));
		_tmp$3 = ((r$1.$low >>> 0));
		quo = _tmp$2;
		rem = _tmp$3;
		return [quo, rem];
	};
	$pkg.Div = Div;
	Div64 = function(hi, lo, y) {
		var _tmp, _tmp$1, hi, lo, q0, q1, quo, rem, rhat, s, un0, un1, un10, un21, un32, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yn0, yn1;
		quo = new $Uint64(0, 0);
		rem = new $Uint64(0, 0);
		if ((y.$high === 0 && y.$low === 0)) {
			$panic(divideError);
		}
		if ((y.$high < hi.$high || (y.$high === hi.$high && y.$low <= hi.$low))) {
			$panic(overflowError);
		}
		s = ((LeadingZeros64(y) >>> 0));
		y = $shiftLeft64(y, (s));
		yn1 = $shiftRightUint64(y, 32);
		yn0 = new $Uint64(y.$high & 0, (y.$low & 4294967295) >>> 0);
		un32 = (x = $shiftLeft64(hi, s), x$1 = $shiftRightUint64(lo, ((64 - s >>> 0))), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		un10 = $shiftLeft64(lo, s);
		un1 = $shiftRightUint64(un10, 32);
		un0 = new $Uint64(un10.$high & 0, (un10.$low & 4294967295) >>> 0);
		q1 = $div64(un32, yn1, false);
		rhat = (x$2 = $mul64(q1, yn1), new $Uint64(un32.$high - x$2.$high, un32.$low - x$2.$low));
		while (true) {
			if (!((q1.$high > 1 || (q1.$high === 1 && q1.$low >= 0)) || (x$3 = $mul64(q1, yn0), x$4 = (x$5 = $mul64(new $Uint64(1, 0), rhat), new $Uint64(x$5.$high + un1.$high, x$5.$low + un1.$low)), (x$3.$high > x$4.$high || (x$3.$high === x$4.$high && x$3.$low > x$4.$low))))) { break; }
			q1 = (x$6 = new $Uint64(0, 1), new $Uint64(q1.$high - x$6.$high, q1.$low - x$6.$low));
			rhat = (x$7 = yn1, new $Uint64(rhat.$high + x$7.$high, rhat.$low + x$7.$low));
			if ((rhat.$high > 1 || (rhat.$high === 1 && rhat.$low >= 0))) {
				break;
			}
		}
		un21 = (x$8 = (x$9 = $mul64(un32, new $Uint64(1, 0)), new $Uint64(x$9.$high + un1.$high, x$9.$low + un1.$low)), x$10 = $mul64(q1, y), new $Uint64(x$8.$high - x$10.$high, x$8.$low - x$10.$low));
		q0 = $div64(un21, yn1, false);
		rhat = (x$11 = $mul64(q0, yn1), new $Uint64(un21.$high - x$11.$high, un21.$low - x$11.$low));
		while (true) {
			if (!((q0.$high > 1 || (q0.$high === 1 && q0.$low >= 0)) || (x$12 = $mul64(q0, yn0), x$13 = (x$14 = $mul64(new $Uint64(1, 0), rhat), new $Uint64(x$14.$high + un0.$high, x$14.$low + un0.$low)), (x$12.$high > x$13.$high || (x$12.$high === x$13.$high && x$12.$low > x$13.$low))))) { break; }
			q0 = (x$15 = new $Uint64(0, 1), new $Uint64(q0.$high - x$15.$high, q0.$low - x$15.$low));
			rhat = (x$16 = yn1, new $Uint64(rhat.$high + x$16.$high, rhat.$low + x$16.$low));
			if ((rhat.$high > 1 || (rhat.$high === 1 && rhat.$low >= 0))) {
				break;
			}
		}
		_tmp = (x$17 = $mul64(q1, new $Uint64(1, 0)), new $Uint64(x$17.$high + q0.$high, x$17.$low + q0.$low));
		_tmp$1 = $shiftRightUint64(((x$18 = (x$19 = $mul64(un21, new $Uint64(1, 0)), new $Uint64(x$19.$high + un0.$high, x$19.$low + un0.$low)), x$20 = $mul64(q0, y), new $Uint64(x$18.$high - x$20.$high, x$18.$low - x$20.$low))), s);
		quo = _tmp;
		rem = _tmp$1;
		return [quo, rem];
	};
	$pkg.Div64 = Div64;
	_err.prototype.Error = function() {
		var e;
		e = this.$val;
		return (e);
	};
	$ptrType(_err).prototype.Error = function() { return new _err(this.$get()).Error(); };
	_err.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(_err).prototype.RuntimeError = function() { return new _err(this.$get()).RuntimeError(); };
	Mul32 = function(x, y) {
		var hi, lo, t, w0, w1, w2, x, x0, x1, y, y0, y1;
		hi = 0;
		lo = 0;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = $imul(x0, y0) >>> 0;
		t = ($imul(x1, y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (($imul(x0, y1) >>> 0)) >>> 0;
		hi = (($imul(x1, y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		lo = $imul(x, y) >>> 0;
		return [hi, lo];
	};
	$pkg.Mul32 = Mul32;
	Add32 = function(x, y, carry) {
		var carry, carryOut, sum, x, y;
		sum = 0;
		carryOut = 0;
		sum = (x + y >>> 0) + carry >>> 0;
		carryOut = ((((((x & y) >>> 0)) | ((((((x | y) >>> 0)) & ~sum) >>> 0))) >>> 0)) >>> 31 >>> 0;
		return [sum, carryOut];
	};
	$pkg.Add32 = Add32;
	Div32 = function(hi, lo, y) {
		var _q, _q$1, _tmp, _tmp$1, hi, lo, q0, q1, quo, rem, rhat, s, un0, un1, un10, un16, un21, y, y$1, y$2, y$3, y$4, y$5, yn0, yn1;
		quo = 0;
		rem = 0;
		if (y === 0) {
			$panic(divideError);
		}
		if (y <= hi) {
			$panic(overflowError);
		}
		s = ((LeadingZeros32(y) >>> 0));
		y = (y$1 = (s), y$1 < 32 ? (y << y$1) : 0) >>> 0;
		yn1 = y >>> 16 >>> 0;
		yn0 = (y & 65535) >>> 0;
		un16 = (((y$2 = s, y$2 < 32 ? (hi << y$2) : 0) >>> 0) | ((y$3 = ((32 - s >>> 0)), y$3 < 32 ? (lo >>> y$3) : 0) >>> 0)) >>> 0;
		un10 = (y$4 = s, y$4 < 32 ? (lo << y$4) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un16 / yn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un16 - ($imul(q1, yn1) >>> 0) >>> 0;
		while (true) {
			if (!(q1 >= 65536 || ($imul(q1, yn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un1 >>> 0))) { break; }
			q1 = q1 - (1) >>> 0;
			rhat = rhat + (yn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (($imul(un16, 65536) >>> 0) + un1 >>> 0) - ($imul(q1, y) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / yn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un21 - ($imul(q0, yn1) >>> 0) >>> 0;
		while (true) {
			if (!(q0 >= 65536 || ($imul(q0, yn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un0 >>> 0))) { break; }
			q0 = q0 - (1) >>> 0;
			rhat = rhat + (yn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tmp = ($imul(q1, 65536) >>> 0) + q0 >>> 0;
		_tmp$1 = (y$5 = s, y$5 < 32 ? ((((($imul(un21, 65536) >>> 0) + un0 >>> 0) - ($imul(q0, y) >>> 0) >>> 0)) >>> y$5) : 0) >>> 0;
		quo = _tmp;
		rem = _tmp$1;
		return [quo, rem];
	};
	$pkg.Div32 = Div32;
	_err.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		overflowError = new _err("runtime error: integer overflow");
		divideError = new _err("runtime error: integer divide by zero");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, bits, arrayType, arrayType$1, arrayType$2, structType, math, _zero, posInf, negInf, nan, buf, log2, frexp, normalize, Abs, Exp, Frexp, IsInf, IsNaN, Log, Log2, init, Float32bits, Float64bits, Float64frombits;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bits = $packages["math/bits"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
	log2 = function(x) {
		var _tuple, exp$1, frac, x;
		_tuple = Frexp(x);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		if (frac === 0.5) {
			return ((exp$1 - 1 >> 0));
		}
		return Log(frac) * 1.4426950408889634 + (exp$1);
	};
	frexp = function(f) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, exp$1, f, frac, x, x$1, x$2, x$3;
		frac = 0;
		exp$1 = 0;
		if ((f === 0)) {
			_tmp = f;
			_tmp$1 = 0;
			frac = _tmp;
			exp$1 = _tmp$1;
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tmp$2 = f;
			_tmp$3 = 0;
			frac = _tmp$2;
			exp$1 = _tmp$3;
			return [frac, exp$1];
		}
		_tuple = normalize(f);
		f = _tuple[0];
		exp$1 = _tuple[1];
		x = Float64bits(f);
		exp$1 = exp$1 + ((((((x$1 = $shiftRightUint64(x, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0)).$low >> 0)) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = (x$2 = new $Uint64(2146435072, 0), new $Uint64(x.$high & ~x$2.$high, (x.$low & ~x$2.$low) >>> 0));
		x = (x$3 = new $Uint64(1071644672, 0), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	normalize = function(x) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp$1, x, y;
		y = 0;
		exp$1 = 0;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tmp = x * 4.503599627370496e+15;
			_tmp$1 = -52;
			y = _tmp;
			exp$1 = _tmp$1;
			return [y, exp$1];
		}
		_tmp$2 = x;
		_tmp$3 = 0;
		y = _tmp$2;
		exp$1 = _tmp$3;
		return [y, exp$1];
	};
	Abs = function(x) {
		var x, x$1;
		return Float64frombits((x$1 = Float64bits(x), new $Uint64(x$1.$high & ~2147483648, (x$1.$low & ~0) >>> 0)));
	};
	$pkg.Abs = Abs;
	Exp = function(x) {
		var x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Frexp = function(f) {
		var _tuple, exp$1, f, frac;
		frac = 0;
		exp$1 = 0;
		_tuple = frexp(f);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		return [frac, exp$1];
	};
	$pkg.Frexp = Frexp;
	IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Log2 = function(x) {
		var x;
		return log2(x);
	};
	$pkg.Log2 = Log2;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		_zero = 0;
		posInf = 1 / _zero;
		negInf = -1 / _zero;
		nan = $parseFloat($NaN);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/abi"] = (function() {
	var $pkg = {}, $init, goarch, FuncPCABI0;
	goarch = $packages["internal/goarch"];
	FuncPCABI0 = function() {
		$throwRuntimeError("native function not implemented: internal/abi.FuncPCABI0");
	};
	$pkg.FuncPCABI0 = FuncPCABI0;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = goarch.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/itoa"] = (function() {
	var $pkg = {}, $init, arrayType, sliceType, Itoa, Uitoa;
	arrayType = $arrayType($Uint8, 20);
	sliceType = $sliceType($Uint8);
	Itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + Uitoa(((-val >>> 0)));
		}
		return Uitoa(((val >>> 0)));
	};
	$pkg.Itoa = Itoa;
	Uitoa = function(val) {
		var _q, buf, i, q, val;
		if (val === 0) {
			return "0";
		}
		buf = arrayType.zero();
		i = 19;
		while (true) {
			if (!(val >= 10)) { break; }
			q = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + val >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = q;
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + val >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	$pkg.Uitoa = Uitoa;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/unsafeheader"] = (function() {
	var $pkg = {}, $init, Slice;
	Slice = $pkg.Slice = $newType(0, $kindStruct, "unsafeheader.Slice", true, "internal/unsafeheader", true, function(Data_, Len_, Cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Data = 0;
			this.Len = 0;
			this.Cap = 0;
			return;
		}
		this.Data = Data_;
		this.Len = Len_;
		this.Cap = Cap_;
	});
	Slice.init("", [{prop: "Data", name: "Data", embedded: false, exported: true, typ: $UnsafePointer, tag: ""}, {prop: "Len", name: "Len", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", embedded: false, exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, js, bytealg, math, bits, utf8, floatInfo, decimalSlice, decimal, leftCheat, NumError, sliceType, sliceType$1, arrayType, sliceType$2, sliceType$6, arrayType$1, arrayType$2, ptrType, arrayType$3, arrayType$4, arrayType$5, ptrType$1, ptrType$2, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, detailedPowersOfTen, leftcheats, optimize, contains, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, unquote, bsearch16, bsearch32, IsPrint, isInGraphicList, FormatInt, small, formatBits, isPowerOfTwo, ryuFtoaFixed32, ryuFtoaFixed64, formatDecimal, ryuFtoaShortest, mulByLog2Log10, mulByLog10Log2, computeBounds, ryuDigits, ryuDigits32, mult64bitPow10, mult128bitPow10, divisibleByPower5, divmod1e9, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, fmtX, min, max, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, index, lower, syntaxError, rangeError, baseError, bitSizeError, ParseUint, ParseInt, underscoreOK, Itoa, Atoi;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bytealg = $packages["internal/bytealg"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	utf8 = $packages["unicode/utf8"];
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType$5.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	sliceType = $sliceType($Uint16);
	sliceType$1 = $sliceType($Uint32);
	arrayType = $arrayType($Uint64, 2);
	sliceType$2 = $sliceType(leftCheat);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 65);
	ptrType = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 32);
	arrayType$4 = $arrayType($Uint8, 24);
	arrayType$5 = $arrayType($Uint8, 800);
	ptrType$1 = $ptrType(NumError);
	ptrType$2 = $ptrType(decimal);
	contains = function(s, c) {
		var c, s;
		return !((index(s, c) === -1));
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, nBuf, quote, r, s, width;
		if ((buf.$capacity - buf.$length >> 0) < s.length) {
			nBuf = $makeSlice(sliceType$6, buf.$length, (((buf.$length + 1 >> 0) + s.length >> 0) + 1 >> 0));
			$copySlice(nBuf, buf);
			buf = nBuf;
		}
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$1.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32 || (r === 127)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (!utf8.ValidRune(r)) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		if (s.length === 0) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (!utf8.ValidRune(v)) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _tuple, err, out, rem, s;
		_tuple = unquote(s, true);
		out = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (rem.length > 0) {
			return ["", $pkg.ErrSyntax];
		}
		return [out, err];
	};
	$pkg.Unquote = Unquote;
	unquote = function(in$1, unescape) {
		var _1, _2, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, arr, buf, buf$1, end, err, err$1, i, in$1, in0, multibyte, n, n$1, out, quote, r, r$1, rem, rem$1, unescape, valid;
		out = "";
		rem = "";
		err = $ifaceNil;
		if (in$1.length < 2) {
			_tmp = "";
			_tmp$1 = in$1;
			_tmp$2 = $pkg.ErrSyntax;
			out = _tmp;
			rem = _tmp$1;
			err = _tmp$2;
			return [out, rem, err];
		}
		quote = in$1.charCodeAt(0);
		end = index($substring(in$1, 1), quote);
		if (end < 0) {
			_tmp$3 = "";
			_tmp$4 = in$1;
			_tmp$5 = $pkg.ErrSyntax;
			out = _tmp$3;
			rem = _tmp$4;
			err = _tmp$5;
			return [out, rem, err];
		}
		end = end + (2) >> 0;
		_1 = quote;
		if (_1 === (96)) {
			if (!unescape) {
				out = $substring(in$1, 0, end);
			} else if (!contains($substring(in$1, 0, end), 13)) {
				out = $substring(in$1, 1, (end - 1 >> 0));
			} else {
				buf = $makeSlice(sliceType$6, 0, (((end - 1 >> 0) - 1 >> 0) - 1 >> 0));
				i = 1;
				while (true) {
					if (!(i < (end - 1 >> 0))) { break; }
					if (!((in$1.charCodeAt(i) === 13))) {
						buf = $append(buf, in$1.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				out = ($bytesToString(buf));
			}
			_tmp$6 = out;
			_tmp$7 = $substring(in$1, end);
			_tmp$8 = $ifaceNil;
			out = _tmp$6;
			rem = _tmp$7;
			err = _tmp$8;
			return [out, rem, err];
		} else if ((_1 === (34)) || (_1 === (39))) {
			if (!contains($substring(in$1, 0, end), 92) && !contains($substring(in$1, 0, end), 10)) {
				valid = false;
				_2 = quote;
				if (_2 === (34)) {
					valid = utf8.ValidString($substring(in$1, 1, (end - 1 >> 0)));
				} else if (_2 === (39)) {
					_tuple = utf8.DecodeRuneInString($substring(in$1, 1, (end - 1 >> 0)));
					r = _tuple[0];
					n = _tuple[1];
					valid = (((1 + n >> 0) + 1 >> 0) === end) && (!((r === 65533)) || !((n === 1)));
				}
				if (valid) {
					out = $substring(in$1, 0, end);
					if (unescape) {
						out = $substring(out, 1, (end - 1 >> 0));
					}
					_tmp$9 = out;
					_tmp$10 = $substring(in$1, end);
					_tmp$11 = $ifaceNil;
					out = _tmp$9;
					rem = _tmp$10;
					err = _tmp$11;
					return [out, rem, err];
				}
			}
			buf$1 = sliceType$6.nil;
			in0 = in$1;
			in$1 = $substring(in$1, 1);
			if (unescape) {
				buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, end)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			}
			while (true) {
				if (!(in$1.length > 0 && !((in$1.charCodeAt(0) === quote)))) { break; }
				_tuple$1 = UnquoteChar(in$1, quote);
				r$1 = _tuple$1[0];
				multibyte = _tuple$1[1];
				rem$1 = _tuple$1[2];
				err$1 = _tuple$1[3];
				if ((in$1.charCodeAt(0) === 10) || !($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$12 = "";
					_tmp$13 = in0;
					_tmp$14 = $pkg.ErrSyntax;
					out = _tmp$12;
					rem = _tmp$13;
					err = _tmp$14;
					return [out, rem, err];
				}
				in$1 = rem$1;
				if (unescape) {
					if (r$1 < 128 || !multibyte) {
						buf$1 = $append(buf$1, ((r$1 << 24 >>> 24)));
					} else {
						arr = arrayType$1.zero();
						n$1 = utf8.EncodeRune(new sliceType$6(arr), r$1);
						buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(arr), 0, n$1));
					}
				}
				if (quote === 39) {
					break;
				}
			}
			if (!(in$1.length > 0 && (in$1.charCodeAt(0) === quote))) {
				_tmp$15 = "";
				_tmp$16 = in0;
				_tmp$17 = $pkg.ErrSyntax;
				out = _tmp$15;
				rem = _tmp$16;
				err = _tmp$17;
				return [out, rem, err];
			}
			in$1 = $substring(in$1, 1);
			if (unescape) {
				_tmp$18 = ($bytesToString(buf$1));
				_tmp$19 = in$1;
				_tmp$20 = $ifaceNil;
				out = _tmp$18;
				rem = _tmp$19;
				err = _tmp$20;
				return [out, rem, err];
			}
			_tmp$21 = $substring(in0, 0, (in0.length - in$1.length >> 0));
			_tmp$22 = in$1;
			_tmp$23 = $ifaceNil;
			out = _tmp$21;
			rem = _tmp$22;
			err = _tmp$23;
			return [out, rem, err];
		} else {
			_tmp$24 = "";
			_tmp$25 = in$1;
			_tmp$26 = $pkg.ErrSyntax;
			out = _tmp$24;
			rem = _tmp$25;
			err = _tmp$26;
			return [out, rem, err];
		}
	};
	bsearch16 = function(a, x) {
		var _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (((j - i >> 0)) >> 1 >> 0) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (((j - i >> 0)) >> 1 >> 0) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	small = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789abcdefghijklmnopqrstuvwxyz", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, shift, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$2.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else if (isPowerOfTwo(base)) {
			shift = (((bits.TrailingZeros(((base >>> 0))) >>> 0)) & 7) >>> 0;
			b = (new $Uint64(0, base));
			m = ((base >>> 0)) - 1 >>> 0;
			while (true) {
				if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
				u = $shiftRightUint64(u, (shift));
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		} else {
			b$1 = (new $Uint64(0, base));
			while (true) {
				if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
				i = i - (1) >> 0;
				q$1 = $div64(u, b$1, false);
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
				u = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	isPowerOfTwo = function(x) {
		var x;
		return (x & ((x - 1 >> 0))) === 0;
	};
	ryuFtoaFixed32 = function(d, mant, exp, prec) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, d, d0, dexp2, dfrac, di, e2, exact, exp, extra, extraMask, mant, prec, q, roundUp, y, y$1, y$2, y$3, y$4, y$5, y$6;
		if (prec < 0) {
			$panic(new $String("ryuFtoaFixed32 called with negative prec"));
		}
		if (prec > 9) {
			$panic(new $String("ryuFtoaFixed32 called with prec > 9"));
		}
		if (mant === 0) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		e2 = exp;
		b = bits.Len32(mant);
		if (b < 25) {
			mant = (y = ((((25 - b >> 0) >>> 0))), y < 32 ? (mant << y) : 0) >>> 0;
			e2 = e2 + (((b) - 25 >> 0)) >> 0;
		}
		q = (-mulByLog2Log10(e2 + 24 >> 0) + prec >> 0) - 1 >> 0;
		exact = q <= 27 && q >= 0;
		_tuple = mult64bitPow10(mant, e2, q);
		di = _tuple[0];
		dexp2 = _tuple[1];
		d0 = _tuple[2];
		if (dexp2 >= 0) {
			$panic(new $String("not enough significant bits after mult64bitPow10"));
		}
		if (q < 0 && q >= -10 && divisibleByPower5((new $Uint64(0, mant)), -q)) {
			exact = true;
			d0 = true;
		}
		extra = ((-dexp2 >>> 0));
		extraMask = ((((y$1 = extra, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0));
		_tmp$2 = (y$2 = extra, y$2 < 32 ? (di >>> y$2) : 0) >>> 0;
		_tmp$3 = (di & extraMask) >>> 0;
		di = _tmp$2;
		dfrac = _tmp$3;
		roundUp = false;
		if (exact) {
			roundUp = dfrac > ((y$3 = ((extra - 1 >>> 0)), y$3 < 32 ? (1 << y$3) : 0) >>> 0) || ((dfrac === ((y$4 = ((extra - 1 >>> 0)), y$4 < 32 ? (1 << y$4) : 0) >>> 0)) && !d0) || ((dfrac === ((y$5 = ((extra - 1 >>> 0)), y$5 < 32 ? (1 << y$5) : 0) >>> 0)) && d0 && (((di & 1) >>> 0) === 1));
		} else {
			roundUp = ((y$6 = ((extra - 1 >>> 0)), y$6 < 32 ? (dfrac >>> y$6) : 0) >>> 0) === 1;
		}
		if (!((dfrac === 0))) {
			d0 = false;
		}
		formatDecimal(d, (new $Uint64(0, di)), !d0, roundUp, prec);
		d.dp = d.dp - (q) >> 0;
	};
	ryuFtoaFixed64 = function(d, mant, exp, prec) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, d, d0, dexp2, dfrac, di, e2, exact, exp, extra, extraMask, mant, prec, q, roundUp, x, x$1, x$2, x$3, x$4, x$5;
		if (prec > 18) {
			$panic(new $String("ryuFtoaFixed64 called with prec > 18"));
		}
		if ((mant.$high === 0 && mant.$low === 0)) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		e2 = exp;
		b = bits.Len64(mant);
		if (b < 55) {
			mant = $shiftLeft64(mant, (((55 - b >> 0) >>> 0)));
			e2 = e2 + (((b) - 55 >> 0)) >> 0;
		}
		q = (-mulByLog2Log10(e2 + 54 >> 0) + prec >> 0) - 1 >> 0;
		exact = q <= 55 && q >= 0;
		_tuple = mult128bitPow10(mant, e2, q);
		di = _tuple[0];
		dexp2 = _tuple[1];
		d0 = _tuple[2];
		if (dexp2 >= 0) {
			$panic(new $String("not enough significant bits after mult128bitPow10"));
		}
		if (q < 0 && q >= -22 && divisibleByPower5(mant, -q)) {
			exact = true;
			d0 = true;
		}
		extra = ((-dexp2 >>> 0));
		extraMask = ((x = $shiftLeft64(new $Uint64(0, 1), extra), new $Uint64(x.$high - 0, x.$low - 1)));
		_tmp$2 = $shiftRightUint64(di, extra);
		_tmp$3 = new $Uint64(di.$high & extraMask.$high, (di.$low & extraMask.$low) >>> 0);
		di = _tmp$2;
		dfrac = _tmp$3;
		roundUp = false;
		if (exact) {
			roundUp = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high > x$1.$high || (dfrac.$high === x$1.$high && dfrac.$low > x$1.$low))) || ((x$2 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high === x$2.$high && dfrac.$low === x$2.$low)) && !d0) || ((x$3 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high === x$3.$high && dfrac.$low === x$3.$low)) && d0 && (x$4 = new $Uint64(di.$high & 0, (di.$low & 1) >>> 0), (x$4.$high === 0 && x$4.$low === 1)));
		} else {
			roundUp = (x$5 = $shiftRightUint64(dfrac, ((extra - 1 >>> 0))), (x$5.$high === 0 && x$5.$low === 1));
		}
		if (!((dfrac.$high === 0 && dfrac.$low === 0))) {
			d0 = false;
		}
		formatDecimal(d, di, !d0, roundUp, prec);
		d.dp = d.dp - (q) >> 0;
	};
	formatDecimal = function(d, m, trunc, roundUp, prec) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, a, b, d, m, max$1, n, prec, roundUp, trimmed, trunc, v, v1, v2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		max$1 = ((prec < 0 || prec >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[prec]);
		trimmed = 0;
		while (true) {
			if (!((m.$high > max$1.$high || (m.$high === max$1.$high && m.$low >= max$1.$low)))) { break; }
			_tmp = $div64(m, new $Uint64(0, 10), false);
			_tmp$1 = $div64(m, new $Uint64(0, 10), true);
			a = _tmp;
			b = _tmp$1;
			m = a;
			trimmed = trimmed + (1) >> 0;
			if ((b.$high > 0 || (b.$high === 0 && b.$low > 5))) {
				roundUp = true;
			} else if ((b.$high < 0 || (b.$high === 0 && b.$low < 5))) {
				roundUp = false;
			} else {
				roundUp = trunc || (x = new $Uint64(m.$high & 0, (m.$low & 1) >>> 0), (x.$high === 0 && x.$low === 1));
			}
			if (!((b.$high === 0 && b.$low === 0))) {
				trunc = true;
			}
		}
		if (roundUp) {
			m = (x$1 = new $Uint64(0, 1), new $Uint64(m.$high + x$1.$high, m.$low + x$1.$low));
		}
		if ((m.$high > max$1.$high || (m.$high === max$1.$high && m.$low >= max$1.$low))) {
			m = $div64(m, (new $Uint64(0, 10)), false);
			trimmed = trimmed + (1) >> 0;
		}
		n = ((prec >>> 0));
		d.nd = (prec);
		v = m;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low >= 100)))) { break; }
			_tmp$2 = new $Uint64(0, 0);
			_tmp$3 = new $Uint64(0, 0);
			v1 = _tmp$2;
			v2 = _tmp$3;
			if ((x$2 = $shiftRightUint64(v, 32), (x$2.$high === 0 && x$2.$low === 0))) {
				_tmp$4 = (new $Uint64(0, (_q = ((v.$low >>> 0)) / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))));
				_tmp$5 = (new $Uint64(0, (_r = ((v.$low >>> 0)) % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
				v1 = _tmp$4;
				v2 = _tmp$5;
			} else {
				_tmp$6 = $div64(v, new $Uint64(0, 100), false);
				_tmp$7 = $div64(v, new $Uint64(0, 100), true);
				v1 = _tmp$6;
				v2 = _tmp$7;
			}
			n = n - (2) >>> 0;
			(x$4 = d.d, x$5 = n + 1 >>> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$3 = $mul64(new $Uint64(0, 2), v2), new $Uint64(x$3.$high + 0, x$3.$low + 1))))));
			(x$7 = d.d, x$8 = n + 0 >>> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$6 = $mul64(new $Uint64(0, 2), v2), new $Uint64(x$6.$high + 0, x$6.$low + 0))))));
			v = v1;
		}
		if ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
			n = n - (1) >>> 0;
			(x$10 = d.d, ((n < 0 || n >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$9 = $mul64(new $Uint64(0, 2), v), new $Uint64(x$9.$high + 0, x$9.$low + 1))))));
		}
		if ((v.$high > 0 || (v.$high === 0 && v.$low >= 10))) {
			n = n - (1) >>> 0;
			(x$11 = d.d, ((n < 0 || n >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64($mul64(new $Uint64(0, 2), v)))));
		}
		while (true) {
			if (!((x$12 = d.d, x$13 = d.nd - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13])) === 48)) { break; }
			d.nd = d.nd - (1) >> 0;
			trimmed = trimmed + (1) >> 0;
		}
		d.dp = d.nd + trimmed >> 0;
	};
	ryuFtoaShortest = function(d, mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, c0, cup, d, dc, dc0, dc32, dl, dl0, dl32, du, du0, du32, e2, exp, extra, extraMask, flt, fracc, fracl, fracu, lok, mant, mc, ml, mu, q, uok, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((mant.$high === 0 && mant.$low === 0)) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		if (exp <= 0 && bits.TrailingZeros64(mant) >= -exp) {
			mant = $shiftRightUint64(mant, (((-exp >>> 0))));
			ryuDigits(d, mant, mant, mant, true, false);
			return;
		}
		_tuple = computeBounds(mant, exp, flt);
		ml = _tuple[0];
		mc = _tuple[1];
		mu = _tuple[2];
		e2 = _tuple[3];
		if (e2 === 0) {
			ryuDigits(d, ml, mc, mu, true, false);
			return;
		}
		q = mulByLog2Log10(-e2) + 1 >> 0;
		_tmp$2 = new $Uint64(0, 0);
		_tmp$3 = new $Uint64(0, 0);
		_tmp$4 = new $Uint64(0, 0);
		dl = _tmp$2;
		dc = _tmp$3;
		du = _tmp$4;
		_tmp$5 = false;
		_tmp$6 = false;
		_tmp$7 = false;
		dl0 = _tmp$5;
		dc0 = _tmp$6;
		du0 = _tmp$7;
		if (flt === float32info) {
			_tmp$8 = 0;
			_tmp$9 = 0;
			_tmp$10 = 0;
			dl32 = _tmp$8;
			dc32 = _tmp$9;
			du32 = _tmp$10;
			_tuple$1 = mult64bitPow10(((ml.$low >>> 0)), e2, q);
			dl32 = _tuple$1[0];
			dl0 = _tuple$1[2];
			_tuple$2 = mult64bitPow10(((mc.$low >>> 0)), e2, q);
			dc32 = _tuple$2[0];
			dc0 = _tuple$2[2];
			_tuple$3 = mult64bitPow10(((mu.$low >>> 0)), e2, q);
			du32 = _tuple$3[0];
			e2 = _tuple$3[1];
			du0 = _tuple$3[2];
			_tmp$11 = (new $Uint64(0, dl32));
			_tmp$12 = (new $Uint64(0, dc32));
			_tmp$13 = (new $Uint64(0, du32));
			dl = _tmp$11;
			dc = _tmp$12;
			du = _tmp$13;
		} else {
			_tuple$4 = mult128bitPow10(ml, e2, q);
			dl = _tuple$4[0];
			dl0 = _tuple$4[2];
			_tuple$5 = mult128bitPow10(mc, e2, q);
			dc = _tuple$5[0];
			dc0 = _tuple$5[2];
			_tuple$6 = mult128bitPow10(mu, e2, q);
			du = _tuple$6[0];
			e2 = _tuple$6[1];
			du0 = _tuple$6[2];
		}
		if (e2 >= 0) {
			$panic(new $String("not enough significant bits after mult128bitPow10"));
		}
		if (q > 55) {
			_tmp$14 = false;
			_tmp$15 = false;
			_tmp$16 = false;
			dl0 = _tmp$14;
			dc0 = _tmp$15;
			du0 = _tmp$16;
		}
		if (q < 0 && q >= -24) {
			if (divisibleByPower5(ml, -q)) {
				dl0 = true;
			}
			if (divisibleByPower5(mc, -q)) {
				dc0 = true;
			}
			if (divisibleByPower5(mu, -q)) {
				du0 = true;
			}
		}
		extra = ((-e2 >>> 0));
		extraMask = ((x = $shiftLeft64(new $Uint64(0, 1), extra), new $Uint64(x.$high - 0, x.$low - 1)));
		_tmp$17 = $shiftRightUint64(dl, extra);
		_tmp$18 = new $Uint64(dl.$high & extraMask.$high, (dl.$low & extraMask.$low) >>> 0);
		dl = _tmp$17;
		fracl = _tmp$18;
		_tmp$19 = $shiftRightUint64(dc, extra);
		_tmp$20 = new $Uint64(dc.$high & extraMask.$high, (dc.$low & extraMask.$low) >>> 0);
		dc = _tmp$19;
		fracc = _tmp$20;
		_tmp$21 = $shiftRightUint64(du, extra);
		_tmp$22 = new $Uint64(du.$high & extraMask.$high, (du.$low & extraMask.$low) >>> 0);
		du = _tmp$21;
		fracu = _tmp$22;
		uok = !du0 || (fracu.$high > 0 || (fracu.$high === 0 && fracu.$low > 0));
		if (du0 && (fracu.$high === 0 && fracu.$low === 0)) {
			uok = (x$1 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0));
		}
		if (!uok) {
			du = (x$2 = new $Uint64(0, 1), new $Uint64(du.$high - x$2.$high, du.$low - x$2.$low));
		}
		cup = false;
		if (dc0) {
			cup = (x$3 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (fracc.$high > x$3.$high || (fracc.$high === x$3.$high && fracc.$low > x$3.$low))) || ((x$4 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (fracc.$high === x$4.$high && fracc.$low === x$4.$low)) && (x$5 = new $Uint64(dc.$high & 0, (dc.$low & 1) >>> 0), (x$5.$high === 0 && x$5.$low === 1)));
		} else {
			cup = (x$6 = $shiftRightUint64(fracc, ((extra - 1 >>> 0))), (x$6.$high === 0 && x$6.$low === 1));
		}
		lok = dl0 && (fracl.$high === 0 && fracl.$low === 0) && ((x$7 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), (x$7.$high === 0 && x$7.$low === 0)));
		if (!lok) {
			dl = (x$8 = new $Uint64(0, 1), new $Uint64(dl.$high + x$8.$high, dl.$low + x$8.$low));
		}
		c0 = dc0 && (fracc.$high === 0 && fracc.$low === 0);
		ryuDigits(d, dl, dc, du, c0, cup);
		d.dp = d.dp - (q) >> 0;
	};
	mulByLog2Log10 = function(x) {
		var x;
		return (($imul(x, 78913))) >> 18 >> 0;
	};
	mulByLog10Log2 = function(x) {
		var x;
		return (($imul(x, 108853))) >> 15 >> 0;
	};
	computeBounds = function(mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, central, e2, exp, flt, lower$1, mant, upper, x, x$1, x$2, x$3, x$4;
		lower$1 = new $Uint64(0, 0);
		central = new $Uint64(0, 0);
		upper = new $Uint64(0, 0);
		e2 = 0;
		if (!((x = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x.$high && mant.$low === x.$low))) || (exp === ((flt.bias + 1 >> 0) - ((flt.mantbits >> 0)) >> 0))) {
			_tmp = (x$1 = $mul64(new $Uint64(0, 2), mant), new $Uint64(x$1.$high - 0, x$1.$low - 1));
			_tmp$1 = $mul64(new $Uint64(0, 2), mant);
			_tmp$2 = (x$2 = $mul64(new $Uint64(0, 2), mant), new $Uint64(x$2.$high + 0, x$2.$low + 1));
			lower$1 = _tmp;
			central = _tmp$1;
			upper = _tmp$2;
			e2 = exp - 1 >> 0;
			return [lower$1, central, upper, e2];
		} else {
			_tmp$3 = (x$3 = $mul64(new $Uint64(0, 4), mant), new $Uint64(x$3.$high - 0, x$3.$low - 1));
			_tmp$4 = $mul64(new $Uint64(0, 4), mant);
			_tmp$5 = (x$4 = $mul64(new $Uint64(0, 4), mant), new $Uint64(x$4.$high + 0, x$4.$low + 2));
			lower$1 = _tmp$3;
			central = _tmp$4;
			upper = _tmp$5;
			e2 = exp - 2 >> 0;
			return [lower$1, central, upper, e2];
		}
	};
	ryuDigits = function(d, lower$1, central, upper, c0, cup) {
		var _q, _r, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c0, central, chi, clo, cup, d, lhi, llo, lower$1, n, uhi, ulo, upper, v, v1, v2, x, x$1, x$2, x$3;
		_tuple = divmod1e9(lower$1);
		lhi = _tuple[0];
		llo = _tuple[1];
		_tuple$1 = divmod1e9(central);
		chi = _tuple$1[0];
		clo = _tuple$1[1];
		_tuple$2 = divmod1e9(upper);
		uhi = _tuple$2[0];
		ulo = _tuple$2[1];
		if (uhi === 0) {
			ryuDigits32(d, llo, clo, ulo, c0, cup, 8);
		} else if (lhi < uhi) {
			if (!((llo === 0))) {
				lhi = lhi + (1) >>> 0;
			}
			c0 = c0 && (clo === 0);
			cup = (clo > 500000000) || ((clo === 500000000) && cup);
			ryuDigits32(d, lhi, chi, uhi, c0, cup, 8);
			d.dp = d.dp + (9) >> 0;
		} else {
			d.nd = 0;
			n = 9;
			v = chi;
			while (true) {
				if (!(v > 0)) { break; }
				_tmp = (_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$1 = (_r = v % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
				v1 = _tmp;
				v2 = _tmp$1;
				v = v1;
				n = n - (1) >>> 0;
				(x = d.d, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n] = (((v2 + 48 >>> 0) << 24 >>> 24))));
			}
			d.d = $subslice(d.d, n);
			d.nd = (((9 - n >>> 0) >> 0));
			ryuDigits32(d, llo, clo, ulo, c0, cup, d.nd + 8 >> 0);
		}
		while (true) {
			if (!(d.nd > 0 && ((x$1 = d.d, x$2 = d.nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 48))) { break; }
			d.nd = d.nd - (1) >> 0;
		}
		while (true) {
			if (!(d.nd > 0 && ((x$3 = d.d, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) === 48))) { break; }
			d.nd = d.nd - (1) >> 0;
			d.dp = d.dp - (1) >> 0;
			d.d = $subslice(d.d, 1);
		}
	};
	ryuDigits32 = function(d, lower$1, central, upper, c0, cup, endindex) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, c, c0, cNextDigit, cdigit, central, cup, d, endindex, l, lower$1, n, trimmed, u, upper, v, v1, v2, x, x$1, x$2, x$3;
		if (upper === 0) {
			d.dp = endindex + 1 >> 0;
			return;
		}
		trimmed = 0;
		cNextDigit = 0;
		while (true) {
			if (!(upper > 0)) { break; }
			l = (_q = ((lower$1 + 9 >>> 0)) / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp = (_q$1 = central / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$1 = (_r = central % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			c = _tmp;
			cdigit = _tmp$1;
			u = (_q$2 = upper / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
			if (l > u) {
				break;
			}
			if ((l === (c + 1 >>> 0)) && c < u) {
				c = c + (1) >>> 0;
				cdigit = 0;
				cup = false;
			}
			trimmed = trimmed + (1) >> 0;
			c0 = c0 && (cNextDigit === 0);
			cNextDigit = ((cdigit >> 0));
			_tmp$2 = l;
			_tmp$3 = c;
			_tmp$4 = u;
			lower$1 = _tmp$2;
			central = _tmp$3;
			upper = _tmp$4;
		}
		if (trimmed > 0) {
			cup = cNextDigit > 5 || ((cNextDigit === 5) && !c0) || ((cNextDigit === 5) && c0 && (((central & 1) >>> 0) === 1));
		}
		if (central < upper && cup) {
			central = central + (1) >>> 0;
		}
		endindex = endindex - (trimmed) >> 0;
		v = central;
		n = endindex;
		while (true) {
			if (!(n > d.nd)) { break; }
			_tmp$5 = (_q$3 = v / 100, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$6 = (_r$1 = v % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			v1 = _tmp$5;
			v2 = _tmp$6;
			(x = d.d, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((($imul(2, v2) >>> 0) + 1 >>> 0))));
			(x$1 = d.d, x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((($imul(2, v2) >>> 0) + 0 >>> 0))));
			n = n - (2) >> 0;
			v = v1;
		}
		if (n === d.nd) {
			(x$3 = d.d, ((n < 0 || n >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + n] = (((v + 48 >>> 0) << 24 >>> 24))));
		}
		d.nd = endindex + 1 >> 0;
		d.dp = d.nd + trimmed >> 0;
	};
	mult64bitPow10 = function(m, e2, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e2, exact, hi, lo, m, pow, q, resE, resM, x, x$1, x$2, x$3, x$4;
		resM = 0;
		resE = 0;
		exact = false;
		if (q === 0) {
			_tmp = m << 6 >>> 0;
			_tmp$1 = e2 - 6 >> 0;
			_tmp$2 = true;
			resM = _tmp;
			resE = _tmp$1;
			exact = _tmp$2;
			return [resM, resE, exact];
		}
		if (q < -348 || 347 < q) {
			$panic(new $String("mult64bitPow10: power of 10 is out of range"));
		}
		pow = (x = q - -348 >> 0, ((x < 0 || x >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x]))[1];
		if (q < 0) {
			pow = (x$1 = new $Uint64(0, 1), new $Uint64(pow.$high + x$1.$high, pow.$low + x$1.$low));
		}
		_tuple = bits.Mul64((new $Uint64(0, m)), pow);
		hi = _tuple[0];
		lo = _tuple[1];
		e2 = e2 + (((mulByLog10Log2(q) - 63 >> 0) + 57 >> 0)) >> 0;
		_tmp$3 = (((x$2 = $shiftLeft64(hi, 7), x$3 = $shiftRightUint64(lo, 57), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0)).$low >>> 0));
		_tmp$4 = e2;
		_tmp$5 = (x$4 = $shiftLeft64(lo, 7), (x$4.$high === 0 && x$4.$low === 0));
		resM = _tmp$3;
		resE = _tmp$4;
		exact = _tmp$5;
		return [resM, resE, exact];
	};
	mult128bitPow10 = function(m, e2, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, carry, e2, exact, h0, h1, l0, l1, m, mid, pow, q, resE, resM, x, x$1, x$2, x$3, x$4, x$5, x$6;
		resM = new $Uint64(0, 0);
		resE = 0;
		exact = false;
		if (q === 0) {
			_tmp = $shiftLeft64(m, 8);
			_tmp$1 = e2 - 8 >> 0;
			_tmp$2 = true;
			resM = _tmp;
			resE = _tmp$1;
			exact = _tmp$2;
			return [resM, resE, exact];
		}
		if (q < -348 || 347 < q) {
			$panic(new $String("mult128bitPow10: power of 10 is out of range"));
		}
		pow = $clone((x = q - -348 >> 0, ((x < 0 || x >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x])), arrayType);
		if (q < 0) {
			pow[0] = (x$1 = pow[0], x$2 = new $Uint64(0, 1), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		}
		e2 = e2 + (((mulByLog10Log2(q) - 127 >> 0) + 119 >> 0)) >> 0;
		_tuple = bits.Mul64(m, pow[0]);
		l1 = _tuple[0];
		l0 = _tuple[1];
		_tuple$1 = bits.Mul64(m, pow[1]);
		h1 = _tuple$1[0];
		h0 = _tuple$1[1];
		_tuple$2 = bits.Add64(l1, h0, new $Uint64(0, 0));
		mid = _tuple$2[0];
		carry = _tuple$2[1];
		h1 = (x$3 = carry, new $Uint64(h1.$high + x$3.$high, h1.$low + x$3.$low));
		_tmp$3 = (x$4 = $shiftLeft64(h1, 9), x$5 = $shiftRightUint64(mid, 55), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0));
		_tmp$4 = e2;
		_tmp$5 = (x$6 = $shiftLeft64(mid, 9), (x$6.$high === 0 && x$6.$low === 0)) && (l0.$high === 0 && l0.$low === 0);
		resM = _tmp$3;
		resE = _tmp$4;
		exact = _tmp$5;
		return [resM, resE, exact];
	};
	divisibleByPower5 = function(m, k) {
		var i, k, m, x;
		if ((m.$high === 0 && m.$low === 0)) {
			return true;
		}
		i = 0;
		while (true) {
			if (!(i < k)) { break; }
			if (!((x = $div64(m, new $Uint64(0, 5), true), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			m = $div64(m, (new $Uint64(0, 5)), false);
			i = i + (1) >> 0;
		}
		return true;
	};
	divmod1e9 = function(x) {
		var _tuple, hi, q, x, x$1;
		if (false) {
			return [(($div64(x, new $Uint64(0, 1000000000), false).$low >>> 0)), (($div64(x, new $Uint64(0, 1000000000), true).$low >>> 0))];
		}
		_tuple = bits.Mul64($shiftRightUint64(x, 1), new $Uint64(2305843009, 917808536));
		hi = _tuple[0];
		q = $shiftRightUint64(hi, 28);
		return [((q.$low >>> 0)), (((x$1 = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low >>> 0))];
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, bitSize, bits$1, buf, buf$1, digits, digs, dst, exp, flt, fmt, mant, neg, ok, prec, s, shortest, val, x, x$1, x$2, x$3, y, y$1;
		bits$1 = new $Uint64(0, 0);
		flt = ptrType.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits$1 = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits$1 = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits$1, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits$1, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits$1.$high & x$1.$high, (bits$1.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if ((fmt === 120) || (fmt === 88)) {
			return fmtX(dst, prec, fmt, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			buf = arrayType$3.zero();
			digs.d = new sliceType$6(buf);
			ryuFtoaShortest(digs, mant, exp - ((flt.mantbits >> 0)) >> 0, flt);
			ok = true;
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			} else {
				digits = 1;
			}
			buf$1 = arrayType$4.zero();
			if ((bitSize === 32) && digits <= 9) {
				digs.d = new sliceType$6(buf$1);
				ryuFtoaFixed32(digs, ((mant.$low >>> 0)), exp - ((flt.mantbits >> 0)) >> 0, digits);
				ok = true;
			} else if (digits <= 18) {
				digs.d = new sliceType$6(buf$1);
				ryuFtoaFixed64(digs, mant, exp - ((flt.mantbits >> 0)) >> 0, digits);
				ok = true;
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, inclusive, l, li, lower$1, m, mant, mantlo, mi, minexp, okdown, okup, u, ui, upper, upperdelta, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower$1 = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		lower$1.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower$1.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		upperdelta = 0;
		ui = 0;
		while (true) {
			mi = (ui - upper.dp >> 0) + d.dp >> 0;
			if (mi >= d.nd) {
				break;
			}
			li = (ui - upper.dp >> 0) + lower$1.dp >> 0;
			l = 48;
			if (li >= 0 && li < lower$1.nd) {
				l = (x$5 = lower$1.d, ((li < 0 || li >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[li]));
			}
			m = 48;
			if (mi >= 0) {
				m = (x$6 = d.d, ((mi < 0 || mi >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[mi]));
			}
			u = 48;
			if (ui < upper.nd) {
				u = (x$7 = upper.d, ((ui < 0 || ui >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[ui]));
			}
			okdown = !((l === m)) || inclusive && ((li + 1 >> 0) === lower$1.nd);
			if ((upperdelta === 0) && (m + 1 << 24 >>> 24) < u) {
				upperdelta = 2;
			} else if ((upperdelta === 0) && !((m === u))) {
				upperdelta = 1;
			} else if ((upperdelta === 1) && (!((m === 57)) || !((u === 48)))) {
				upperdelta = 2;
			}
			okup = upperdelta > 0 && (inclusive || upperdelta > 1 || (ui + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(mi + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(mi + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(mi + 1 >> 0);
				return;
			}
			ui = ui + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	fmtX = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, ch, dst, exp, extra, flt, fmt, hex, i, mant, neg, prec, shift, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((mant.$high === 0 && mant.$low === 0)) {
			exp = 0;
		}
		mant = $shiftLeft64(mant, ((60 - flt.mantbits >>> 0)));
		while (true) {
			if (!(!((mant.$high === 0 && mant.$low === 0)) && (x = new $Uint64(mant.$high & 268435456, (mant.$low & 0) >>> 0), (x.$high === 0 && x.$low === 0)))) { break; }
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		if (prec >= 0 && prec < 15) {
			shift = ((($imul(prec, 4)) >>> 0));
			extra = (x$1 = $shiftLeft64(mant, shift), new $Uint64(x$1.$high & 268435455, (x$1.$low & 4294967295) >>> 0));
			mant = $shiftRightUint64(mant, ((60 - shift >>> 0)));
			if ((x$2 = (x$3 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), new $Uint64(extra.$high | x$3.$high, (extra.$low | x$3.$low) >>> 0)), (x$2.$high > 134217728 || (x$2.$high === 134217728 && x$2.$low > 0)))) {
				mant = (x$4 = new $Uint64(0, 1), new $Uint64(mant.$high + x$4.$high, mant.$low + x$4.$low));
			}
			mant = $shiftLeft64(mant, ((60 - shift >>> 0)));
			if (!((x$5 = new $Uint64(mant.$high & 536870912, (mant.$low & 0) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
				mant = $shiftRightUint64(mant, (1));
				exp = exp + (1) >> 0;
			}
		}
		hex = "0123456789abcdef";
		if (fmt === 88) {
			hex = "0123456789ABCDEF";
		}
		if (neg) {
			dst = $append(dst, 45);
		}
		dst = $append(dst, 48, fmt, 48 + (((x$6 = $shiftRightUint64(mant, 60), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)).$low << 24 >>> 24)) << 24 >>> 24);
		mant = $shiftLeft64(mant, (4));
		if (prec < 0 && !((mant.$high === 0 && mant.$low === 0))) {
			dst = $append(dst, 46);
			while (true) {
				if (!(!((mant.$high === 0 && mant.$low === 0)))) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$7 = $shiftRightUint64(mant, 60), new $Uint64(x$7.$high & 0, (x$7.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
			}
		} else if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$8 = $shiftRightUint64(mant, 60), new $Uint64(x$8.$high & 0, (x$8.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
				i = i + (1) >> 0;
			}
		}
		ch = 80;
		if (fmt === lower(fmt)) {
			ch = 112;
		}
		dst = $append(dst, ch);
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 1000) {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$3 = exp / 1000, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$3 = (((_q$4 = exp / 100, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$4 = ((_q$5 = exp / 10, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$5 = exp % 10, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$4.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	index = function(s, c) {
		var c, s;
		return bytealg.IndexByteString(s, c);
	};
	lower = function(c) {
		var c;
		return (c | 32) >>> 0;
	};
	NumError.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: NumError.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	NumError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	NumError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	baseError = function(fn, str, base) {
		var base, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid base " + Itoa(base)));
	};
	bitSizeError = function(fn, str, bitSize) {
		var bitSize, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid bit size " + Itoa(bitSize)));
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _i, _ref, base, base0, bitSize, c, cutoff, d, maxVal, n, n1, s, s0, underscores, x, x$1, x$2;
		if (s === "") {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s)];
		}
		base0 = base === 0;
		s0 = s;
		if (2 <= base && base <= 36) {
		} else if ((base === 0)) {
			base = 10;
			if (s.charCodeAt(0) === 48) {
				if (s.length >= 3 && (lower(s.charCodeAt(1)) === 98)) {
					base = 2;
					s = $substring(s, 2);
				} else if (s.length >= 3 && (lower(s.charCodeAt(1)) === 111)) {
					base = 8;
					s = $substring(s, 2);
				} else if (s.length >= 3 && (lower(s.charCodeAt(1)) === 120)) {
					base = 16;
					s = $substring(s, 2);
				} else {
					base = 8;
					s = $substring(s, 1);
				}
			}
		} else {
			return [new $Uint64(0, 0), baseError("ParseUint", s0, base)];
		}
		if (bitSize === 0) {
			bitSize = 32;
		} else if (bitSize < 0 || bitSize > 64) {
			return [new $Uint64(0, 0), bitSizeError("ParseUint", s0, bitSize)];
		}
		cutoff = new $Uint64(0, 0);
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		underscores = false;
		n = new $Uint64(0, 0);
		_ref = (new sliceType$6($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			d = 0;
			if ((c === 95) && base0) {
				underscores = true;
				_i++;
				continue;
			} else if (48 <= c && c <= 57) {
				d = c - 48 << 24 >>> 24;
			} else if (97 <= lower(c) && lower(c) <= 122) {
				d = (lower(c) - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			} else {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if (d >= ((base << 24 >>> 24))) {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, d)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = n1;
			_i++;
		}
		if (underscores && !underscoreOK(s0)) {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
		}
		return [n, $ifaceNil];
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (s === "") {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType$1).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType$1).Func = "ParseInt";
			$assertType(err, ptrType$1).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		if (bitSize === 0) {
			bitSize = 32;
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	underscoreOK = function(s) {
		var hex, i, s, saw;
		saw = 94;
		i = 0;
		if (s.length >= 1 && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			s = $substring(s, 1);
		}
		hex = false;
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && ((lower(s.charCodeAt(1)) === 98) || (lower(s.charCodeAt(1)) === 111) || (lower(s.charCodeAt(1)) === 120))) {
			i = 2;
			saw = 48;
			hex = lower(s.charCodeAt(1)) === 120;
		}
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || hex && 97 <= lower(s.charCodeAt(i)) && lower(s.charCodeAt(i)) <= 102) {
				saw = 48;
				i = i + (1) >> 0;
				continue;
			}
			if (s.charCodeAt(i) === 95) {
				if (!((saw === 48))) {
					return false;
				}
				saw = 95;
				i = i + (1) >> 0;
				continue;
			}
			if (saw === 95) {
				return false;
			}
			saw = 33;
			i = i + (1) >> 0;
		}
		return !((saw === 95));
	};
	Itoa = function(i) {
		var i;
		return $internalize(i.toString(), $String);
	};
	$pkg.Itoa = Itoa;
	Atoi = function(s) {
		var floatval, i, jsValue, s, v;
		if (s.length === 0) {
			return [0, syntaxError("Atoi", s)];
		}
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			v = s.charCodeAt(i);
			if (v < 48 || v > 57) {
				if (!((v === 43)) && !((v === 45))) {
					return [0, syntaxError("Atoi", s)];
				}
			}
			i = i + (1) >> 0;
		}
		jsValue = $global.Number($externalize(s, $String), 10);
		if (!!!($global.isFinite(jsValue))) {
			return [0, syntaxError("Atoi", s)];
		}
		floatval = $parseFloat(jsValue);
		if (floatval > 2.147483647e+09) {
			return [2147483647, rangeError("Atoi", s)];
		} else if (floatval < -2.147483648e+09) {
			return [-2147483648, rangeError("Atoi", s)];
		}
		return [$parseInt(jsValue) >> 0, $ifaceNil];
	};
	$pkg.Atoi = Atoi;
	ptrType$2.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType], [$Uint64, $Bool], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", embedded: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", embedded: false, exported: false, typ: $String, tag: ""}]);
	NumError.init("", [{prop: "Func", name: "Func", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		isPrint16 = new sliceType([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1519, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2045, 2093, 2096, 2139, 2142, 2154, 2208, 2247, 2259, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2558, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2678, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2901, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3191, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6848, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7312, 7354, 7357, 7367, 7376, 7418, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11858, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12771, 12784, 40956, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42943, 42946, 42954, 42997, 43052, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43883, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType([173, 907, 909, 930, 1328, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3085, 3089, 3113, 3141, 3145, 3159, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3341, 3345, 3397, 3401, 3456, 3460, 3506, 3516, 3541, 3543, 3715, 3717, 3723, 3748, 3750, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11158, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12592, 12687, 12831, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$1([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65948, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68149, 68152, 68154, 68159, 68168, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68903, 68912, 68921, 69216, 69293, 69296, 69297, 69376, 69415, 69424, 69465, 69552, 69579, 69600, 69622, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69959, 69968, 70006, 70016, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70753, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71487, 71680, 71739, 71840, 71922, 71935, 71942, 71945, 71945, 71948, 71992, 71995, 72006, 72016, 72025, 72096, 72103, 72106, 72151, 72154, 72164, 72192, 72263, 72272, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73056, 73112, 73120, 73129, 73440, 73464, 73648, 73648, 73664, 73713, 73727, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93760, 93850, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94180, 94192, 94193, 94208, 100343, 100352, 101589, 101632, 101640, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119520, 119539, 119552, 119638, 119648, 119672, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123215, 123584, 123641, 123647, 123647, 124928, 125124, 125127, 125142, 125184, 125259, 125264, 125273, 125278, 125279, 126065, 126132, 126209, 126269, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127405, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128727, 128736, 128748, 128752, 128764, 128768, 128883, 128896, 128984, 128992, 129003, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129200, 129201, 129280, 129619, 129632, 129645, 129648, 129652, 129656, 129658, 129664, 129670, 129680, 129704, 129712, 129718, 129728, 129730, 129744, 129750, 129792, 129994, 130032, 130041, 131072, 173789, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 196608, 201546, 917760, 917999]);
		isNotPrint32 = new sliceType([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 3711, 3754, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 4922, 5212, 6420, 6423, 6454, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 7526, 7529, 7567, 7570, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 63865, 63948, 64403]);
		isGraphic = new sliceType([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		detailedPowersOfTen = $toNativeArray($kindArray, [$clone($toNativeArray($kindUint64, [new $Uint64(389204073, 3445679187), new $Uint64(4203730336, 136053384)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(243252546, 542936756), new $Uint64(2627331460, 85033365)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1377807506, 2826154593), new $Uint64(3284164325, 106291706)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3869743031, 1385209593), new $Uint64(4105205406, 1206606456)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2418589394, 2476368732), new $Uint64(2565753378, 3975354507)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1949494919, 947977267), new $Uint64(3207191723, 2821709486)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(289385001, 111229759), new $Uint64(4008989654, 2453395034)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1254607449, 2753873159), new $Uint64(2505618534, 459630072)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1568259312, 221115977), new $Uint64(3132023167, 2722021238)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4107807788, 276394972), new $Uint64(3915028959, 2328784723)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2030508955, 2320230505), new $Uint64(2446893099, 3066103188)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2538136194, 1826546308), new $Uint64(3058616374, 2758887161)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4246412067, 135699237), new $Uint64(3823270468, 1301125303)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4264620277, 3842908407), new $Uint64(2389544042, 2960686962)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3183291699, 1582410037), new $Uint64(2986930053, 1553375055)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2905372800, 904270722), new $Uint64(3733662566, 3015460643)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1278987088, 565169201), new $Uint64(2333539104, 810921078)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3746217508, 706461501), new $Uint64(2916923880, 1013651347)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3609030061, 883076877), new $Uint64(3646154850, 1267064184)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2255643788, 1088793960), new $Uint64(2278846781, 1865656939)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1745812911, 1360992450), new $Uint64(2848558476, 3405812998)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(34782491, 627498738), new $Uint64(3560698095, 4257266248)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(21739056, 4150283095), new $Uint64(2225436309, 4271404141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1100915645, 892886573), new $Uint64(2781795387, 2118029704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1376144556, 2189850041), new $Uint64(3477244234, 1573795306)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1933832171, 3516139923), new $Uint64(2173277646, 2057363890)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(269806566, 3321433080), new $Uint64(2716597058, 424221215)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3558483680, 2004307702), new $Uint64(3395746322, 2677760166)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2300620952, 2505384628), new $Uint64(4244682903, 1199716560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1437888095, 1565865392), new $Uint64(2652926814, 2360435586)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3944843767, 883589917), new $Uint64(3316158518, 803060834)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2783571061, 30745572), new $Uint64(4145198147, 3151309691)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1202861001, 556086894), new $Uint64(2590748842, 1432697645)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2577318075, 1768850442), new $Uint64(3238436052, 3938355704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3221647594, 1137321229), new $Uint64(4048045066, 627977334)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(939787922, 1784567592), new $Uint64(2530028166, 1466227658)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3322218551, 83225842), new $Uint64(3162535207, 3980268220)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4152773188, 3325257774), new $Uint64(3953169009, 3901593451)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2058612330, 4225769757), new $Uint64(2470730631, 827883171)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1499523589, 3134728548), new $Uint64(3088413288, 4256079436)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1874404487, 697185213), new $Uint64(3860516611, 1025131999)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2782115540, 2046353494), new $Uint64(2412822882, 103836587)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2403902601, 2557941868), new $Uint64(3016028602, 2277279382)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(857394603, 4271169159), new $Uint64(3770035753, 699115580)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2683355275, 2132609812), new $Uint64(2356272345, 3121301797)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(132968622, 1592020441), new $Uint64(2945340432, 680401775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3387436249, 4137509200), new $Uint64(3681675540, 850502218)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3190889480, 975330514), new $Uint64(2301047212, 2679047534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1841128202, 1219163142), new $Uint64(2876309015, 3348809418)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(153926604, 3671437576), new $Uint64(3595386269, 3112269949)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(633075040, 147164837), new $Uint64(2247116418, 2482039630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2938827448, 183956046), new $Uint64(2808895523, 955065889)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(452308838, 229945057), new $Uint64(3511119404, 120090538)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1356434847, 3364941133), new $Uint64(2194449627, 2222540234)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3843027207, 3132434592), new $Uint64(2743062034, 1704433468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(508816713, 2841801416), new $Uint64(3428827542, 4278025484)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(636020892, 331026298), new $Uint64(4286034428, 3200048207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2008125793, 2354375084), new $Uint64(2678771517, 4147513777)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3583899065, 4016710679), new $Uint64(3348464397, 1963166749)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1258648360, 1799662877), new $Uint64(4185580496, 3527700261)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1323526137, 1124789298), new $Uint64(2615987810, 2204812663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(580665847, 2479728447), new $Uint64(3269984763, 608532181)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1799574133, 2025918735), new $Uint64(4087480953, 3981890698)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2198475657, 1803070121), new $Uint64(2554675596, 878068950)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(600610923, 3327579475), new $Uint64(3193344495, 1097586188)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(750763654, 3085732520), new $Uint64(3991680619, 298240911)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2079840020, 854841001), new $Uint64(2494800386, 3944496953)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3673541849, 1068551251), new $Uint64(3118500483, 2783137543)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3518185487, 2409430888), new $Uint64(3898125604, 2405180105)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(588253193, 3116507041), new $Uint64(2436328502, 3650721214)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2882800140, 674408330), new $Uint64(3045410628, 2415917869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(382274703, 843010412), new $Uint64(3806763285, 3019897337)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2923276249, 2137494243), new $Uint64(2379227053, 2424306747)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2580353487, 3745609628), new $Uint64(2974033816, 4104125258)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1077958211, 3608270211), new $Uint64(3717542271, 835189277)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1210594794, 1718297970), new $Uint64(2323463919, 2132606034)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3660727141, 388815), new $Uint64(2904329899, 1592015718)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2428425278, 1074227842), new $Uint64(3630412374, 916277824)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1517765798, 3892617873), new $Uint64(2269007733, 3793899112)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1897207248, 2718288694), new $Uint64(2836259667, 1521148418)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(224025412, 3397860867), new $Uint64(3545324584, 827693699)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3898112266, 4271146690), new $Uint64(2215827865, 517308561)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1651414861, 3191449714), new $Uint64(2769784831, 1720377526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4211752225, 768086671), new $Uint64(3462231039, 1076730083)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2095474228, 3164408729), new $Uint64(2163894399, 2283569038)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(471859137, 3955510912), new $Uint64(2704867999, 1780719474)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2737307570, 1723163168), new $Uint64(3381084999, 1152157518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1274150815, 6470312), new $Uint64(4226356249, 366455074)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1870086083, 1614656681), new $Uint64(2641472655, 2913388981)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3411349428, 944579027), new $Uint64(3301840819, 2567994402)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2116703137, 1180723784), new $Uint64(4127301024, 2136251179)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(786068548, 3422306925), new $Uint64(2579563140, 1335156987)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4203811157, 4277883656), new $Uint64(3224453925, 1668946233)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2033538475, 2126129098), new $Uint64(4030567406, 3159924616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1270961547, 791959774), new $Uint64(2519104629, 901211061)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2662443757, 4211175190), new $Uint64(3148880786, 2200255650)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1180571049, 2042743516), new $Uint64(3936100983, 602835915)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(200985993, 3961069257), new $Uint64(2460063114, 1987385183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3472457964, 1730111099), new $Uint64(3075078893, 336747830)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193088807, 2162638874), new $Uint64(3843848616, 1494676612)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3518164152, 2962262032), new $Uint64(2402405385, 934172882)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2250221542, 3702827541), new $Uint64(3003006731, 2241457927)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1739035104, 2481050778), new $Uint64(3753758414, 1728080585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3771251500, 1550656736), new $Uint64(2346099009, 6308541)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1492838903, 1938320920), new $Uint64(2932623761, 1081627501)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2939790453, 1349159326), new $Uint64(3665779701, 2425776200)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1837369033, 1380095491), new $Uint64(2291112313, 2052981037)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3370453115, 2798861187), new $Uint64(2863890391, 3639968120)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4213066394, 2424834660), new $Uint64(3579862989, 3476218326)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1559424672, 2589263487), new $Uint64(2237414368, 2709507366)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4096764488, 3236579358), new $Uint64(2796767960, 3386884207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4047213786, 4045724198), new $Uint64(3495959950, 4233605259)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1992637704, 3602319448), new $Uint64(2184974969, 1572261463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1417055307, 207932014), new $Uint64(2731218711, 3039068653)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2845060957, 3481140489), new $Uint64(3414023389, 2725093992)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3556326197, 1130200140), new $Uint64(4267529237, 185142018)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3296445697, 1243245999), new $Uint64(2667205773, 652584673)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(899331649, 2627799323), new $Uint64(3334007216, 1889472666)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3271648210, 63523682), new $Uint64(4167509020, 2361840832)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2044780131, 1113444125), new $Uint64(2604693137, 3623634168)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2555975164, 318063332), new $Uint64(3255866422, 1308317238)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1047485307, 397579165), new $Uint64(4069833027, 3782880196)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2802161964, 4006583362), new $Uint64(2543645642, 1827429210)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1355218808, 713261907), new $Uint64(3179557053, 136802865)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2767765334, 891577384), new $Uint64(3974446316, 1244745405)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2266724245, 3778461337), new $Uint64(2484028947, 2925449526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(685921659, 1501851199), new $Uint64(3105036184, 2583070084)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(857402074, 803572175), new $Uint64(3881295230, 3228837605)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1072747208, 1575974433), new $Uint64(2425809519, 944281679)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(267192186, 1969968041), new $Uint64(3032261899, 106610275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3555215705, 314976404), new $Uint64(3790327373, 3354488315)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1685138903, 2881214812), new $Uint64(2368954608, 2633426109)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3180165453, 2527776691), new $Uint64(2961193260, 3291782636)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3975206816, 4233462688), new $Uint64(3701491575, 4114728295)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4095116996, 2645914180), new $Uint64(2313432234, 4182317920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(823928949, 3307392725), new $Uint64(2891790293, 3080413753)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2103653011, 913015435), new $Uint64(3614737867, 629291719)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2925395868, 33763735), new $Uint64(2259211166, 4151403708)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3656744835, 42204668), new $Uint64(2824013958, 3041770987)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3497189219, 3273981307), new $Uint64(3530017448, 1654730086)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1112001438, 1509367405), new $Uint64(2206260905, 1034206304)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1390001797, 4034192904), new $Uint64(2757826131, 2366499704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1737502247, 1821515659), new $Uint64(3447282664, 1884382806)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(12197080, 2749060022), new $Uint64(2154551665, 1177739254)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2162729998, 3436325028), new $Uint64(2693189581, 2545915891)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1629670674, 2147922637), new $Uint64(3366486976, 4256136688)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2037088343, 537419649), new $Uint64(4208108721, 1025203564)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3420663862, 1946500016), new $Uint64(2630067950, 3325106787)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3202088004, 285641372), new $Uint64(3287584938, 2008899836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4002610005, 357051716), new $Uint64(4109481173, 363641147)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1964760341, 760028234), new $Uint64(2568425733, 764146629)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3529692250, 2023777117), new $Uint64(3210532166, 2028925110)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2264631665, 382237748), new $Uint64(4013165208, 388672740)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3562878438, 2923253152), new $Uint64(2508228255, 242920462)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2306114400, 1506582793), new $Uint64(3135285318, 3524876050)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(735159352, 1883228491), new $Uint64(3919106648, 2258611415)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2070087331, 1177017807), new $Uint64(2449441655, 1411632134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(440125516, 397530434), new $Uint64(3061802069, 690798344)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(550156895, 496913043), new $Uint64(3827252586, 1937239754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1417589883, 1921183388), new $Uint64(2392032866, 2284516670)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3919471002, 1327737411), new $Uint64(2990041083, 708162189)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1678113280, 3807155412), new $Uint64(3737551353, 4106428209)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3733175360, 2379472132), new $Uint64(2335969596, 955904894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2518985552, 2974340165), new $Uint64(2919961995, 1194881118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1001248292, 3717925207), new $Uint64(3649952494, 419859574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3847005655, 176219606), new $Uint64(2281220308, 3483637705)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1587531596, 3441499980), new $Uint64(2851525386, 59579836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1984414496, 6907679), new $Uint64(3564406732, 2221958443)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(703388148, 4317299), new $Uint64(2227754207, 3536207675)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4100460657, 5396624), new $Uint64(2784692759, 3346517769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1904350349, 1080487604), new $Uint64(3480865949, 3109405388)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3337702616, 1212175664), new $Uint64(2175541218, 2480249279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3098386446, 1515219580), new $Uint64(2719426523, 952827951)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2799241233, 4041508124), new $Uint64(3399283154, 117293115)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2425309718, 1830659683), new $Uint64(4249103942, 2294100042)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2589560398, 70420478), new $Uint64(2655689964, 360070702)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1089466849, 2235509245), new $Uint64(3319612455, 450088378)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3509317209, 3868128380), new $Uint64(4149515568, 3783835944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193323256, 806967502), new $Uint64(2593447230, 2364897465)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3815395894, 1008709377), new $Uint64(3241809038, 808638183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3695503043, 3408370369), new $Uint64(4052261297, 3158281377)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(699076666, 1593360569), new $Uint64(2532663311, 363313125)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1947587656, 4139184359), new $Uint64(3165829138, 3675366878)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(287000923, 879013153), new $Uint64(3957286423, 2446724950)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3400601049, 12512308), new $Uint64(2473304014, 3139815829)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1029525839, 1089382210), new $Uint64(3091630018, 1777286139)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(213165475, 287985938), new $Uint64(3864537523, 74124026)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1206970245, 3938087595), new $Uint64(2415335951, 3804423900)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1508712807, 1701384022), new $Uint64(3019169939, 3681788051)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(812149185, 1052988204), new $Uint64(3773962424, 3528493240)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(507593240, 3342472187), new $Uint64(2358726515, 2205308275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3855717022, 4178090234), new $Uint64(2948408144, 1682893519)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3745904454, 3075129145), new $Uint64(3685510180, 2103616899)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1804319372, 848213891), new $Uint64(2303443862, 3462244210)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(107915567, 1060267364), new $Uint64(2879304828, 2180321615)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3356119931, 251592381), new $Uint64(3599131035, 2725402018)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3171316780, 3915341622), new $Uint64(2249456897, 1166505349)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(742920504, 599209732), new $Uint64(2811821121, 2531873511)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4149876102, 749012165), new $Uint64(3514776401, 4238583712)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2593672563, 3689358075), new $Uint64(2196735251, 1038502084)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3242090704, 3537955770), new $Uint64(2745919064, 224385781)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(831387909, 127477416), new $Uint64(3432398830, 280482227)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4260460358, 1233088594), new $Uint64(4290498537, 2498086431)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4273400459, 3991905843), new $Uint64(2681561585, 4245658579)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4268008750, 3916140480), new $Uint64(3351951982, 2085847752)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1040043642, 2747691952), new $Uint64(4189939978, 459826043)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(113156364, 2791049294), new $Uint64(2618712486, 1361133101)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1215187279, 3488811618), new $Uint64(3273390607, 3848900024)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1518984099, 3287272698), new $Uint64(4091738259, 3737383206)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4170590534, 1517674524), new $Uint64(2557336412, 1798993591)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4139496343, 4044576803), new $Uint64(3196670515, 2248741989)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1953144957, 3981979180), new $Uint64(3995838144, 1737185663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2831328334, 3025607900), new $Uint64(2497398840, 1085741039)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2465418594, 1634526227), new $Uint64(3121748550, 1357176299)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2008031418, 4190641431), new $Uint64(3902185687, 3843954022)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(181277812, 3692892718), new $Uint64(2438866054, 4013084000)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(226597266, 321148602), new $Uint64(3048582568, 2868871352)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(283246582, 2548919401), new $Uint64(3810728210, 3586089190)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3398254586, 519332801), new $Uint64(2381705131, 3315047567)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3174076408, 2796649650), new $Uint64(2977131414, 3070067635)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2893853686, 3495812062), new $Uint64(3721414268, 1690100896)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1808658554, 1111140715), new $Uint64(2325883917, 3203796708)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2260823192, 3536409542), new $Uint64(2907354897, 783520413)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3899770815, 125544631), new $Uint64(3634193621, 2053142340)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(289873111, 1689078130), new $Uint64(2271371013, 1820084875)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3583566861, 1037605839), new $Uint64(2839213766, 3348847917)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1258233104, 2370749123), new $Uint64(3549017208, 2038576249)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3470750250, 1481718202), new $Uint64(2218135755, 1274110155)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3264695988, 3999631400), new $Uint64(2772669694, 518895870)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1933386338, 704571954), new $Uint64(3465837117, 2796103486)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(134624637, 1514099295), new $Uint64(2166148198, 2284435591)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3389506268, 2966365943), new $Uint64(2707685248, 708060840)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4236882835, 3707957429), new $Uint64(3384606560, 885076050)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3148619896, 3561204962), new $Uint64(4230758200, 1106345063)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3578500171, 2225753101), new $Uint64(2644223875, 691465664)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(178157918, 1708449553), new $Uint64(3305279843, 4085557553)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1296439221, 4283045589), new $Uint64(4131599804, 4033205117)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1347145425, 3213774405), new $Uint64(2582249878, 373269550)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3831415430, 795992534), new $Uint64(3227812347, 2614070585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1568043815, 3142474316), new $Uint64(4034765434, 2193846408)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(980027384, 3574659183), new $Uint64(2521728396, 2444895829)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2298776055, 173356683), new $Uint64(3152160495, 3056119786)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(725986420, 3437921326), new $Uint64(3940200619, 2746407909)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(990612425, 1217181), new $Uint64(2462625387, 1179634031)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(164523707, 1075263300), new $Uint64(3078281734, 400800715)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3426880106, 270337301), new $Uint64(3847852167, 2648484541)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2678670978, 1242702637), new $Uint64(2404907604, 3265915574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1200855074, 3700861945), new $Uint64(3006134505, 4082394468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1501068843, 2478593783), new $Uint64(3757668132, 1881767613)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1475038939, 1012250202), new $Uint64(2348542582, 3323588406)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3991282322, 191570929), new $Uint64(2935678228, 2007001859)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3915361078, 2386947309), new $Uint64(3669597785, 2508752324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(299617026, 418100244), new $Uint64(2293498615, 4252324763)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3595746754, 2670108953), new $Uint64(2866873269, 4241664129)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1273457971, 1190152543), new $Uint64(3583591587, 2080854690)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1869653056, 206974427), new $Uint64(2239744742, 763663269)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3410808144, 258718034), new $Uint64(2799680927, 3102062734)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2116026532, 323397543), new $Uint64(3499601159, 2803836594)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2396258406, 2349607112), new $Uint64(2187250724, 3363010607)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1921581184, 789525242), new $Uint64(2734063405, 4203763259)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1328234656, 986906553), new $Uint64(3417579257, 2033478602)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3807776968, 1233633192), new $Uint64(4271974071, 3615590076)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(232376957, 771020745), new $Uint64(2669983794, 3870356534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2437954844, 2037517755), new $Uint64(3337479743, 2690462019)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1973701731, 2546897194), new $Uint64(4171849679, 2289335700)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3381047230, 1054939834), new $Uint64(2607406049, 3041447548)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4226309037, 3466158440), new $Uint64(3259257562, 580583963)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4209144473, 1111472579), new $Uint64(4074071952, 2873213602)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3704457119, 3379024922), new $Uint64(2546294970, 1795758501)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1409345927, 3150039328), new $Uint64(3182868713, 97214479)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(687940585, 2863807336), new $Uint64(3978585891, 1195259923)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4188059250, 179266849), new $Uint64(2486616182, 210166539)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4161332238, 2371567209), new $Uint64(3108270227, 2410191822)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3054181650, 816975364), new $Uint64(3885337784, 1938997954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2982605355, 1584351426), new $Uint64(2428336115, 1211873721)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(507031222, 906697459), new $Uint64(3035420144, 441100328)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(633789027, 3280855472), new $Uint64(3794275180, 551375410)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1469859966, 1513663758), new $Uint64(2371421987, 2492093279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(763583133, 4039563345), new $Uint64(2964277484, 2041374775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4175704389, 1828228709), new $Uint64(3705346855, 2551718468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(462331595, 1679513855), new $Uint64(2315841784, 3205436779)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3799139966, 1025650495), new $Uint64(2894802230, 4006795973)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1527699485, 3429546767), new $Uint64(3618502788, 2861011319)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2565424914, 2680337641), new $Uint64(2261564242, 3935615722)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1059297495, 1202938404), new $Uint64(2826955303, 2772036005)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2397863693, 429931181), new $Uint64(3533694129, 2391303182)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(424922984, 805577900), new $Uint64(2208558830, 4178919049)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1604895554, 1006972375), new $Uint64(2760698538, 3076165163)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(932377618, 3406199117), new $Uint64(3450873173, 1697722806)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3803961483, 3202616272), new $Uint64(2156795733, 1597947665)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1533726382, 2929528516), new $Uint64(2695994666, 3071176406)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4064641626, 1514426997), new $Uint64(3369993333, 1691486859)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4007060208, 4040517394), new $Uint64(4212491666, 3188100398)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1430670806, 2525323371), new $Uint64(2632807291, 3066304573)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2862080332, 1009170566), new $Uint64(3291009114, 2759138892)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3577600415, 1261463208), new $Uint64(4113761393, 1301439967)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3846612995, 2399027241), new $Uint64(2571100870, 3497754539)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3734524420, 1925042227), new $Uint64(3213876088, 2224709526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2520671877, 2406302784), new $Uint64(4017345110, 2780886908)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3722903571, 2040810152), new $Uint64(2510840694, 664312493)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1432403992, 1477270866), new $Uint64(3138550867, 2977874265)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2864246814, 1846588582), new $Uint64(3923188584, 2648601007)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3400766995, 80376040), new $Uint64(2451992865, 1655375629)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1029733271, 3321695522), new $Uint64(3064991081, 3142961361)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2360908413, 3078377578), new $Uint64(3831238852, 707476229)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2012438670, 2460856898), new $Uint64(2394524282, 2589656291)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1441806514, 928587475), new $Uint64(2993155353, 1089586716)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1802258142, 3308217992), new $Uint64(3741444191, 2435725219)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(589540427, 993894421), new $Uint64(2338402619, 3132940998)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2884409182, 168626202), new $Uint64(2923003274, 2842434423)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2531769653, 2358266401), new $Uint64(3653754093, 1405559381)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2119226945, 2010787412), new $Uint64(2283596308, 1415345525)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3722775505, 3587226089), new $Uint64(2854495385, 1769181906)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2505985734, 1262807140), new $Uint64(3568119231, 3285219207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3176853819, 4010479934), new $Uint64(2230074519, 3663874740)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3971067274, 3939358094), new $Uint64(2787593149, 3506101601)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1742608621, 2776713970), new $Uint64(3484491437, 1161401530)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2162872212, 2272317143), new $Uint64(2177807148, 1262746868)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2703590265, 2840396429), new $Uint64(2722258935, 1578433585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(158262360, 329270064), new $Uint64(3402823669, 899300158)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2345311598, 411587580), new $Uint64(4253529586, 2197867021)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2002690660, 3478467709), new $Uint64(2658455991, 2447408712)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2503363326, 53117341), new $Uint64(3323069989, 1985519066)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(981720509, 2213880324), new $Uint64(4153837486, 3555640657)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3297929878, 1920546114), new $Uint64(2596148429, 1148533586)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1974928700, 253198995), new $Uint64(3245185536, 2509408807)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1394919051, 316498744), new $Uint64(4056481920, 3136761009)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3556178966, 3955908099), new $Uint64(2535301200, 1960475630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2297740060, 2797401476), new $Uint64(3169126500, 2450594538)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(724691427, 3496751845), new $Uint64(3961408125, 3063243173)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(989803054, 1648598991), new $Uint64(2475880078, 2451397895)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(163511993, 4208232386), new $Uint64(3094850098, 916763721)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1278131816, 2039065011), new $Uint64(3868562622, 3293438299)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(261961473, 1274415632), new $Uint64(2417851639, 984657113)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1401193665, 2666761364), new $Uint64(3022314549, 157079567)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(677750258, 112226233), new $Uint64(3777893186, 1270091283)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4181690295, 1143883219), new $Uint64(2361183241, 1867548875)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4153371045, 356112200), new $Uint64(2951479051, 3408177918)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3044230158, 1518882075), new $Uint64(3689348814, 3186480574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(828902024, 4170526768), new $Uint64(2305843009, 917808535)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4257353003, 918191165), new $Uint64(2882303761, 2221002492)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1026723958, 73997132), new $Uint64(3602879701, 3849994940)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2789186121, 3267473679), new $Uint64(2251799813, 2943117749)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(265257180, 863116627), new $Uint64(2814749767, 457671715)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3552796947, 1078895784), new $Uint64(3518437208, 3793315115)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1683627180, 137438953), new $Uint64(2199023255, 2370821947)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1030792151, 171798691), new $Uint64(2748779069, 1889785610)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3435973836, 3435973836), new $Uint64(3435973836, 3435973836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2147483648, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2684354560, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3355443200, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4194304000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2621440000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3276800000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4096000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2560000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3200000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4000000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2500000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3125000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3906250000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2441406250, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3051757812, 2147483648)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3814697265, 2684354560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2384185791, 67108864)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2980232238, 3305111552)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3725290298, 1983905792)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2328306436, 2313682944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2910383045, 2892103680)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3637978807, 393904128)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2273736754, 1856802816)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2842170943, 173519872)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3552713678, 3438125312)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2220446049, 1075086496)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2775557561, 2417599944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3469446951, 4095741754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1073741824, 0), new $Uint64(2168404344, 4170451332)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1342177280, 0), new $Uint64(2710505431, 918096869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2751463424, 0), new $Uint64(3388131789, 73879262)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1291845632, 0), new $Uint64(4235164736, 1166090902)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4028628992, 0), new $Uint64(2646977960, 728806813)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1814560768, 0), new $Uint64(3308722450, 911008517)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3341942784, 0), new $Uint64(4135903062, 3286244294)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1014972416, 0), new $Uint64(2584939414, 980160860)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1268715520, 0), new $Uint64(3231174267, 3372684723)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(512152576, 0), new $Uint64(4038967834, 3142114080)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(320095360, 0), new $Uint64(2524354896, 3037563124)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(400119200, 0), new $Uint64(3155443620, 3796953905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1573890824, 0), new $Uint64(3944304526, 451225085)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1520552677, 0), new $Uint64(2465190328, 3503241150)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4048174494, 1073741824), new $Uint64(3081487911, 84084141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1838992645, 3489660928), new $Uint64(3851859888, 3326330649)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3833724963, 2717908992), new $Uint64(2407412430, 2078956655)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3718414380, 2323644416), new $Uint64(3009265538, 451212171)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3574276151, 2904555520), new $Uint64(3761581922, 2711498862)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1160180770, 3425959936), new $Uint64(2350988701, 2768428613)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2523967787, 2134966272), new $Uint64(2938735877, 239310294)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1007476086, 1594966016), new $Uint64(3673419846, 1372879692)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2777156201, 4218079232), new $Uint64(2295887403, 4079275279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2397703428, 2051373568), new $Uint64(2869859254, 4025352275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1923387461, 2564216960), new $Uint64(3587324068, 2884206696)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1202117163, 2139506512), new $Uint64(2242077542, 3950112833)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2576388278, 1600641316), new $Uint64(2802596928, 2790157393)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4294227171, 4148285293), new $Uint64(3503246160, 3487696741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3220762894, 2055807396), new $Uint64(2189528850, 2179810463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2952211794, 422275597), new $Uint64(2736911063, 577279431)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2616522918, 2675328144), new $Uint64(3421138828, 3942824761)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(49428176, 1196676532), new $Uint64(4276423536, 633563656)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(30892610, 747922832), new $Uint64(2672764710, 395977285)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1112357586, 3082387189), new $Uint64(3340955887, 2642455254)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3537930631, 1705500338), new $Uint64(4176194859, 2229327243)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1674335732, 2676550447), new $Uint64(2610121787, 856458615)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1019177841, 3345688059), new $Uint64(3262652233, 4291798741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2347714126, 960884602), new $Uint64(4078315292, 2143522954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2541063152, 3821778348), new $Uint64(2548947057, 3487185494)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1028845293, 482255639), new $Uint64(3186183822, 1137756396)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1286056616, 1676561373), new $Uint64(3982729777, 3569679143)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2414398121, 1047850858), new $Uint64(2489206111, 620436728)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3017997651, 2383555396), new $Uint64(3111507638, 3996771382)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1625013416, 1905702422), new $Uint64(3889384548, 2848480580)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3163117033, 1191064013), new $Uint64(2430865342, 3927784010)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1806412643, 2562571841), new $Uint64(3038581678, 2762246365)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3331757628, 2129472977), new $Uint64(3798227098, 1305324308)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4229832165, 3478404258), new $Uint64(2373891936, 1889569516)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(992322911, 1126779851), new $Uint64(2967364920, 2361961896)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1240403639, 334732990), new $Uint64(3709206150, 2952452370)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1848994098, 1819820855), new $Uint64(2318253844, 771540907)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1237500799, 127292420), new $Uint64(2897817305, 964426134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3694359646, 3380340998), new $Uint64(3622271631, 2279274491)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1772103867, 1038971299), new $Uint64(2263919769, 3035159293)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3288871658, 224972300), new $Uint64(2829899712, 572723644)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4111089572, 2428699024), new $Uint64(3537374640, 715904555)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2032560070, 3665420538), new $Uint64(2210859150, 447440347)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1466958264, 2434292024), new $Uint64(2763573937, 2706784082)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3981181478, 3042865030), new $Uint64(3454467422, 162254630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1414496600, 828048820), new $Uint64(2159042138, 3322634616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1768120750, 1035061025), new $Uint64(2698802673, 2005809622)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(62667289, 3441309929), new $Uint64(3373503341, 3581003852)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(78334112, 1080411939), new $Uint64(4216879177, 1255029343)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1659571556, 675257462), new $Uint64(2635549485, 3468747899)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1000722621, 844071828), new $Uint64(3294436857, 1114709402)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3398386924, 2128831609), new $Uint64(4118046071, 2467128576)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2123991827, 3478003403), new $Uint64(2573778794, 3152568096)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2654989784, 3273762430), new $Uint64(3217223493, 1793226472)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3318737230, 4092203038), new $Uint64(4021529366, 3315274914)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3147952593, 1483885074), new $Uint64(2513455854, 998304997)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(713715269, 2928598167), new $Uint64(3141819817, 3395364895)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4113369559, 439522237), new $Uint64(3927274772, 1022980646)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1497114150, 1885314134), new $Uint64(2454546732, 2786846552)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871392688, 209159020), new $Uint64(3068183415, 3483558190)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(191757212, 261448775), new $Uint64(3835229269, 3280705914)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1193590081, 2310889132), new $Uint64(2397018293, 2587312108)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1491987601, 3962353239), new $Uint64(2996272867, 12914663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(791242678, 1731716077), new $Uint64(3745341083, 3237368801)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3178881234, 8580724), new $Uint64(2340838177, 1486484588)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3973601542, 2158209553), new $Uint64(2926047721, 2931847559)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3893260104, 550278293), new $Uint64(3657559652, 443583977)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(822674829, 343923933), new $Uint64(2285974782, 2424723634)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3175827184, 1503646741), new $Uint64(2857468478, 883420894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1822300332, 1879558426), new $Uint64(3571835597, 3251759766)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(65195883, 3322207664), new $Uint64(2232397248, 2569220766)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2228978502, 3079017756), new $Uint64(2790496560, 3211525957)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3859964952, 1701288547), new $Uint64(3488120700, 4014407446)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1338736271, 1063305342), new $Uint64(2180075438, 361521006)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3820903987, 255389853), new $Uint64(2725094297, 2599384905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1554904511, 3540462789), new $Uint64(3406367872, 28005660)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1943630639, 3351836662), new $Uint64(4257959840, 35007075)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(677898237, 3705510650), new $Uint64(2661224900, 21879422)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2994856445, 1410662840), new $Uint64(3326531125, 27349277)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(522345084, 2837070374), new $Uint64(4158163906, 1107928421)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(863336589, 3920652632), new $Uint64(2598852441, 1766197087)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(5428913, 1679590318), new $Uint64(3248565551, 3281488183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3228011613, 3173229722), new $Uint64(4060706939, 3028118404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4164990906, 2520139488), new $Uint64(2537941837, 1355703090)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3058754985, 1002690712), new $Uint64(3172427296, 2768370687)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2749701907, 2327105214), new $Uint64(3965534120, 3460463359)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3329176428, 917569847), new $Uint64(2478458825, 2162789599)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3087728711, 1146962308), new $Uint64(3098073531, 3777228823)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2785919065, 359961061), new $Uint64(3872591914, 3647794205)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2278070327, 2909330223), new $Uint64(2420369946, 3353613202)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(700104261, 2562920955), new $Uint64(3025462433, 2044532855)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4096355798, 4277393018), new $Uint64(3781828041, 3629407892)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(412738726, 1599628812), new $Uint64(2363642526, 657767197)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1589665231, 4147019663), new $Uint64(2954553157, 2969692644)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1987081539, 4110032755), new $Uint64(3693191447, 490890333)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1778796874, 2031899560), new $Uint64(2308244654, 1917419194)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(76012445, 392390802), new $Uint64(2885305818, 249290345)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1168757380, 1564230326), new $Uint64(3606632272, 2459096579)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(193602450, 3125127602), new $Uint64(2254145170, 1536935362)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2389486711, 1758925854), new $Uint64(2817681462, 4068652850)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(839374741, 1124915494), new $Uint64(3522101828, 2938332415)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2135221949, 1239943096), new $Uint64(2201313642, 3983941407)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1595285612, 2623670694), new $Uint64(2751642053, 2832443111)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(920365191, 3279588367), new $Uint64(3439552567, 319328417)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3259582804, 3660355465), new $Uint64(2149720354, 1810192996)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4074478506, 280477036), new $Uint64(2687150443, 115257597)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871872660, 2498079943), new $Uint64(3358938053, 3365297469)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3413582649, 3122599929), new $Uint64(4198672567, 985396364)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4280972804, 341012219), new $Uint64(2624170354, 2226485463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4277474181, 426265274), new $Uint64(3280212943, 635623181)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2125617254, 1606573417), new $Uint64(4100266178, 4015754449)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4012865343, 4225333857), new $Uint64(2562666361, 3583588354)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2868598031, 4207925498), new $Uint64(3203332952, 1258259971)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2512005715, 4186165048), new $Uint64(4004166190, 1572824964)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3717487220, 2079482243), new $Uint64(2502603868, 4204241074)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2499375377, 2599352804), new $Uint64(3128254836, 960334047)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2050477398, 27965533), new $Uint64(3910318545, 1200417559)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2892161109, 3238703930), new $Uint64(2443949090, 3434615534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1467717739, 827154441), new $Uint64(3054936363, 2145785770)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3982130821, 4255168523), new $Uint64(3818670454, 1608490388)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(341348115, 3196351239), new $Uint64(2386669033, 4226531965)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1500426968, 2921697224), new $Uint64(2983336292, 2061939484)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1875533710, 3652121531), new $Uint64(3729170365, 2577424355)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(635337657, 1208834132), new $Uint64(2330731478, 2147761134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2941655719, 2584784490), new $Uint64(2913414348, 537217769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(455844177, 2157238788), new $Uint64(3641767935, 671522212)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2432386258, 4032628802), new $Uint64(2276104959, 2030314118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(892999175, 2893302355), new $Uint64(2845131199, 1464150824)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1116248969, 2542886120), new $Uint64(3556413999, 756446706)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1771397429, 4273658385), new $Uint64(2222758749, 2083391927)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1140504963, 2120847509), new $Uint64(2778448436, 3677981733)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2499373028, 1577317563), new $Uint64(3473060546, 302509870)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(488366318, 3133307125), new $Uint64(2170662841, 1262810493)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1684199722, 1769150258), new $Uint64(2713328551, 2652254940)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2105249653, 63954174), new $Uint64(3391660689, 2241576851)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1557820242, 1153684542), new $Uint64(4239575861, 3875712888)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(973637651, 1794794663), new $Uint64(2649734913, 2959191467)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(143305240, 1169751504), new $Uint64(3312168642, 477763862)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2326615198, 1462189381), new $Uint64(4140210802, 2744688475)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(917263586, 4135093835), new $Uint64(2587631751, 2789172121)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2220321307, 3021383645), new $Uint64(3234539689, 2412723327)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1701659810, 2702987733), new $Uint64(4043174611, 4089645983)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2674150117, 2763109157), new $Uint64(2526984132, 2019157827)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2268945823, 232660974), new $Uint64(3158730165, 2523947284)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2836182278, 3512051690), new $Uint64(3948412706, 4228675929)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(162001188, 1121290482), new $Uint64(2467757941, 3716664280)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(202501485, 1401613103), new $Uint64(3084697427, 1424604878)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2400610504, 2825758202), new $Uint64(3855871784, 707014273)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4184736125, 1766098876), new $Uint64(2409919865, 441883920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(935952860, 3281365420), new $Uint64(3012399831, 1626096725)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2243682899, 4101706775), new $Uint64(3765499789, 958879082)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2476043636, 2026695822), new $Uint64(2353437368, 1136170338)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(947570897, 2533369778), new $Uint64(2941796710, 1420212923)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(110721797, 4240454046), new $Uint64(3677245887, 3922749802)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1142942947, 3187154691), new $Uint64(2298278679, 4062331362)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3576162332, 2910201539), new $Uint64(2872848349, 4004172378)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2322719267, 3637751924), new $Uint64(3591060437, 1783990001)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4136054102, 1736724041), new $Uint64(2244412773, 1651864662)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3022583980, 23421403), new $Uint64(2805515966, 3138572652)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3778229975, 29276754), new $Uint64(3506894958, 1775732167)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3972006470, 1628910707), new $Uint64(2191809349, 36090780)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(670040791, 4183622032), new $Uint64(2739761686, 1118855300)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(837550989, 4155785716), new $Uint64(3424702107, 3546052773)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2120680561, 1973506673), new $Uint64(4280877634, 3358824142)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(251683526, 3917796230), new $Uint64(2675548521, 3173006913)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1388346232, 2749761640), new $Uint64(3344435652, 745033169)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2809174614, 3437202050), new $Uint64(4180544565, 931291461)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2292605046, 1074509457), new $Uint64(2612840353, 1118928075)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1792014483, 3490620469), new $Uint64(3266050441, 2472401918)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(92534456, 3289533763), new $Uint64(4082563051, 4164244222)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3279059507, 2055958602), new $Uint64(2551601907, 2065781726)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1951340736, 1496206428), new $Uint64(3189502384, 1508485334)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(291692272, 1870258035), new $Uint64(3986877980, 1885606668)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2329791318, 1168911272), new $Uint64(2491798737, 3325987815)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1838497323, 3608622738), new $Uint64(3114748422, 936259297)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3371863478, 3437036599), new $Uint64(3893435527, 3317807769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(496801938, 1074406050), new $Uint64(2433397204, 3684242592)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(621002422, 3490491211), new $Uint64(3041746506, 310335944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(776253028, 2215630365), new $Uint64(3802183132, 2535403578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1558899966, 3532252626), new $Uint64(2376364457, 3732110884)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1948624958, 2267832135), new $Uint64(2970455572, 1443913133)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3509523022, 687306521), new $Uint64(3713069465, 1804891416)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193451888, 3650792047), new $Uint64(2320668415, 3812411695)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1668073037, 268522763), new $Uint64(2900835519, 3691772795)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1011349472, 1409395278), new $Uint64(3626044399, 3540974170)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1705835244, 880872049), new $Uint64(2266277749, 3823721592)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2132294055, 1101090061), new $Uint64(2832847187, 1558426518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(517883921, 302620752), new $Uint64(3541058984, 874291324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2471161098, 2873492530), new $Uint64(2213161865, 546432077)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4162693197, 1444382015), new $Uint64(2766452331, 1756781920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(908399200, 2879219342), new $Uint64(3458065414, 1122235577)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3252104060, 1799512089), new $Uint64(2161290883, 3922622707)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2991388251, 2249390111), new $Uint64(2701613604, 3829536560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3739235314, 1737995815), new $Uint64(3377017006, 491953404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(379076847, 25011121), new $Uint64(4221271257, 2762425404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2384406677, 1626244686), new $Uint64(2638294536, 115903141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4054250170, 3106547682), new $Uint64(3297868170, 144878926)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2920329065, 1735700955), new $Uint64(4122335212, 2328582306)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2898947489, 3769167657), new $Uint64(2576459507, 3602847589)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(402458890, 1490234099), new $Uint64(3220574384, 3429817663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3724299084, 4010276272), new $Uint64(4025717980, 4287272078)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1253945104, 358939022), new $Uint64(2516073738, 532061401)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2641173204, 448673777), new $Uint64(3145092172, 2812560399)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2227724681, 560842221), new $Uint64(3931365215, 3515700499)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(855457013, 3034880948), new $Uint64(2457103259, 3807925548)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1069321267, 572375713), new $Uint64(3071379074, 3686165111)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(262909759, 3936695114), new $Uint64(3839223843, 2460222741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(701189511, 4071047182), new $Uint64(2399514902, 1000768301)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1950228713, 4015067154), new $Uint64(2999393627, 3398444024)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2437785892, 1797608470), new $Uint64(3749242034, 3174313206)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(449874358, 3270988942), new $Uint64(2343276271, 3057687578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2709826596, 1941252529), new $Uint64(2929095339, 2748367648)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3387283245, 2426565662), new $Uint64(3661369174, 2361717736)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2117052028, 2053474450), new $Uint64(2288355734, 402331761)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3720056859, 2566843063), new $Uint64(2860444667, 2650398349)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1428845602, 2134812005), new $Uint64(3575555834, 2239256113)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3577383061, 2407999327), new $Uint64(2234722396, 2473276894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2324245178, 4083740983), new $Uint64(2793402995, 3091596118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(757822825, 2957192581), new $Uint64(3491753744, 2790753324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2621122914, 237632627), new $Uint64(2182346090, 1744220827)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2202661818, 2444524431), new $Uint64(2727932613, 32792386)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(605843625, 908171891), new $Uint64(3409915766, 1114732307)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3978530003, 2208956688), new $Uint64(4262394707, 3540899031)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4097193988, 843727018), new $Uint64(2663996692, 1676190982)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2974008837, 1054658773), new $Uint64(3329995865, 2095238728)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3717511046, 2392065290), new $Uint64(4162494831, 3692790234)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3397186228, 421298982), new $Uint64(2601559269, 3918606632)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4246482785, 526623728), new $Uint64(3251949087, 1677032818)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3160619833, 1732021484), new $Uint64(4064936359, 1022549199)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3586000131, 3766867987), new $Uint64(2540585224, 2249705985)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1261274692, 3634843160), new $Uint64(3175731530, 2812132482)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3724077014, 248586654), new $Uint64(3969664413, 1367681954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3401289957, 3376592131), new $Uint64(2481040258, 1391672133)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1030386975, 999514691), new $Uint64(3101300322, 3887073815)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(214241895, 175651540), new $Uint64(3876625403, 2711358621)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(670772096, 1720394949), new $Uint64(2422890877, 1157728226)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2985948768, 2150493686), new $Uint64(3028613596, 2520902106)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1584952312, 2688117107), new $Uint64(3785766995, 3151127633)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3674949755, 1680073192), new $Uint64(2366104372, 1432583858)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2446203546, 1026349666), new $Uint64(2957630465, 1790729823)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1984012608, 3430420731), new $Uint64(3697038081, 3312154103)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2850620616, 2144012957), new $Uint64(2310648801, 459483578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1415792122, 2680016196), new $Uint64(2888311001, 1648096297)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2843481977, 1202536597), new $Uint64(3610388751, 3133862195)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1240305323, 3435939933), new $Uint64(2256492969, 3569276608)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1550381654, 3221183092), new $Uint64(2820616212, 1240370288)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1937977068, 1878995217), new $Uint64(3525770265, 1550462860)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3358719315, 3321855659), new $Uint64(2203606415, 3653393847)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3124657320, 3078577749), new $Uint64(2754508019, 3493000485)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(684596178, 3848222187), new $Uint64(3443135024, 3292508783)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2038485347, 3478880691), new $Uint64(2151959390, 2057817989)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3621848508, 3274859039), new $Uint64(2689949238, 424788838)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2379826987, 4093573799), new $Uint64(3362436547, 2678469696)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2974783734, 4043225425), new $Uint64(4203045684, 2274345296)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1859239834, 1453274067), new $Uint64(2626903552, 3568949458)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(176566144, 3964076232), new $Uint64(3283629441, 166219527)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3441933153, 660127994), new $Uint64(4104536801, 1281516232)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2151208220, 3096934556), new $Uint64(2565335500, 3485302205)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3762752099, 3871168195), new $Uint64(3206669376, 61660460)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(408472828, 3765218420), new $Uint64(4008336720, 77075576)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(255295518, 205777864), new $Uint64(2505210450, 48172235)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3540344869, 2404705978), new $Uint64(3131513062, 2207698941)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1204205614, 4079624297), new $Uint64(3914391328, 612140029)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1289499421, 1476023361), new $Uint64(2446494580, 382587518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3759357924, 2918771026), new $Uint64(3058118225, 478234397)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1477971933, 3648463782), new $Uint64(3822647781, 1671534821)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1460603370, 2817160776), new $Uint64(2389154863, 1581580175)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(752012389, 1373967322), new $Uint64(2986443579, 903233395)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4161240958, 2791200977), new $Uint64(3733054474, 55299919)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4211388335, 670758786), new $Uint64(2333159046, 1108304273)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2043009946, 4059673955), new $Uint64(2916448807, 3532863990)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(406278785, 2927108796), new $Uint64(3645561009, 3342338164)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2401407889, 218830261), new $Uint64(2278475631, 478348616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3001759861, 1347279650), new $Uint64(2848094538, 3819161242)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1604716178, 2757841387), new $Uint64(3560118173, 2626467905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3687302171, 2797392691), new $Uint64(2225073858, 2178413352)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(314160418, 2422999040), new $Uint64(2781342323, 575533043)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3613925995, 881265152), new $Uint64(3476677903, 3940641775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3869316483, 13919808), new $Uint64(2172923689, 4073513845)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1615420131, 3238625232), new $Uint64(2716154612, 1870666835)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(945533340, 2974539716), new $Uint64(3395193265, 2338333544)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1181916675, 3718174645), new $Uint64(4243991581, 3996658754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1812439746, 1786988241), new $Uint64(2652494738, 3034782633)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3339291507, 86251653), new $Uint64(3315618423, 1645994643)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3100372559, 3329040039), new $Uint64(4144523029, 983751480)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1937732849, 3691262760), new $Uint64(2590326893, 1151715587)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1348424238, 1392852978), new $Uint64(3237908616, 2513386308)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1685530297, 3888549871), new $Uint64(4047385770, 3141732885)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1590327348, 819730933), new $Uint64(2529616106, 3037324877)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3061651009, 1024663666), new $Uint64(3162020133, 1649172448)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3827063761, 2354571407), new $Uint64(3952525166, 3135207384)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2391914850, 4155961689), new $Uint64(2470328229, 885762791)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1916151739, 3047468464), new $Uint64(3087910286, 2180945313)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3468931498, 2735593756), new $Uint64(3859887858, 578697993)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(557469450, 2783487921), new $Uint64(2412429911, 1435428070)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2844320461, 1331876253), new $Uint64(3015537389, 720543263)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2481658752, 2738587141), new $Uint64(3769421736, 1974420903)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3161649456, 1711616963), new $Uint64(2355888585, 1234013064)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3952061820, 2139521204), new $Uint64(2944860731, 2616258154)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2792593627, 2674401505), new $Uint64(3681075914, 2196580869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2282241929, 1134630028), new $Uint64(2300672446, 2446604867)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1779060587, 2492029360), new $Uint64(2875840558, 910772436)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2223825734, 2041294876), new $Uint64(3594800697, 3285949193)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4074245644, 202067473), new $Uint64(2246750436, 443105509)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871581583, 252584341), new $Uint64(2808438045, 553881887)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1265735154, 3536955899), new $Uint64(3510547556, 1766094183)]), arrayType)]);
		leftcheats = new sliceType$2([$clone(new leftCheat.ptr(0, ""), leftCheat), $clone(new leftCheat.ptr(1, "5"), leftCheat), $clone(new leftCheat.ptr(1, "25"), leftCheat), $clone(new leftCheat.ptr(1, "125"), leftCheat), $clone(new leftCheat.ptr(2, "625"), leftCheat), $clone(new leftCheat.ptr(2, "3125"), leftCheat), $clone(new leftCheat.ptr(2, "15625"), leftCheat), $clone(new leftCheat.ptr(3, "78125"), leftCheat), $clone(new leftCheat.ptr(3, "390625"), leftCheat), $clone(new leftCheat.ptr(3, "1953125"), leftCheat), $clone(new leftCheat.ptr(4, "9765625"), leftCheat), $clone(new leftCheat.ptr(4, "48828125"), leftCheat), $clone(new leftCheat.ptr(4, "244140625"), leftCheat), $clone(new leftCheat.ptr(4, "1220703125"), leftCheat), $clone(new leftCheat.ptr(5, "6103515625"), leftCheat), $clone(new leftCheat.ptr(5, "30517578125"), leftCheat), $clone(new leftCheat.ptr(5, "152587890625"), leftCheat), $clone(new leftCheat.ptr(6, "762939453125"), leftCheat), $clone(new leftCheat.ptr(6, "3814697265625"), leftCheat), $clone(new leftCheat.ptr(6, "19073486328125"), leftCheat), $clone(new leftCheat.ptr(7, "95367431640625"), leftCheat), $clone(new leftCheat.ptr(7, "476837158203125"), leftCheat), $clone(new leftCheat.ptr(7, "2384185791015625"), leftCheat), $clone(new leftCheat.ptr(7, "11920928955078125"), leftCheat), $clone(new leftCheat.ptr(8, "59604644775390625"), leftCheat), $clone(new leftCheat.ptr(8, "298023223876953125"), leftCheat), $clone(new leftCheat.ptr(8, "1490116119384765625"), leftCheat), $clone(new leftCheat.ptr(9, "7450580596923828125"), leftCheat), $clone(new leftCheat.ptr(9, "37252902984619140625"), leftCheat), $clone(new leftCheat.ptr(9, "186264514923095703125"), leftCheat), $clone(new leftCheat.ptr(10, "931322574615478515625"), leftCheat), $clone(new leftCheat.ptr(10, "4656612873077392578125"), leftCheat), $clone(new leftCheat.ptr(10, "23283064365386962890625"), leftCheat), $clone(new leftCheat.ptr(10, "116415321826934814453125"), leftCheat), $clone(new leftCheat.ptr(11, "582076609134674072265625"), leftCheat), $clone(new leftCheat.ptr(11, "2910383045673370361328125"), leftCheat), $clone(new leftCheat.ptr(11, "14551915228366851806640625"), leftCheat), $clone(new leftCheat.ptr(12, "72759576141834259033203125"), leftCheat), $clone(new leftCheat.ptr(12, "363797880709171295166015625"), leftCheat), $clone(new leftCheat.ptr(12, "1818989403545856475830078125"), leftCheat), $clone(new leftCheat.ptr(13, "9094947017729282379150390625"), leftCheat), $clone(new leftCheat.ptr(13, "45474735088646411895751953125"), leftCheat), $clone(new leftCheat.ptr(13, "227373675443232059478759765625"), leftCheat), $clone(new leftCheat.ptr(13, "1136868377216160297393798828125"), leftCheat), $clone(new leftCheat.ptr(14, "5684341886080801486968994140625"), leftCheat), $clone(new leftCheat.ptr(14, "28421709430404007434844970703125"), leftCheat), $clone(new leftCheat.ptr(14, "142108547152020037174224853515625"), leftCheat), $clone(new leftCheat.ptr(15, "710542735760100185871124267578125"), leftCheat), $clone(new leftCheat.ptr(15, "3552713678800500929355621337890625"), leftCheat), $clone(new leftCheat.ptr(15, "17763568394002504646778106689453125"), leftCheat), $clone(new leftCheat.ptr(16, "88817841970012523233890533447265625"), leftCheat), $clone(new leftCheat.ptr(16, "444089209850062616169452667236328125"), leftCheat), $clone(new leftCheat.ptr(16, "2220446049250313080847263336181640625"), leftCheat), $clone(new leftCheat.ptr(16, "11102230246251565404236316680908203125"), leftCheat), $clone(new leftCheat.ptr(17, "55511151231257827021181583404541015625"), leftCheat), $clone(new leftCheat.ptr(17, "277555756156289135105907917022705078125"), leftCheat), $clone(new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), leftCheat), $clone(new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), leftCheat), $clone(new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), leftCheat), $clone(new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), leftCheat), $clone(new leftCheat.ptr(19, "867361737988403547205962240695953369140625"), leftCheat)]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		optimize = true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, abi, bytealg, goarch, itoa, unsafeheader, math, runtime, strconv, sync, unicode, utf8, Value, flag, ValueError, MapIter, Type, Kind, tflag, rtype, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, uncommonType, funcType, name, nameData, hiter, sliceType$1, ptrType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, ptrType$2, funcType$1, sliceType$7, sliceType$8, ptrType$6, ptrType$8, ptrType$9, sliceType$10, ptrType$10, sliceType$11, ptrType$11, ptrType$12, sliceType$12, ptrType$13, ptrType$14, funcType$2, sliceType$14, sliceType$15, ptrType$19, structType$3, sliceType$16, ptrType$20, ptrType$21, sliceType$17, sliceType$18, arrayType$6, sliceType$19, arrayType$7, sliceType$20, funcType$3, ptrType$23, arrayType$8, ptrType$24, funcType$4, funcType$5, ptrType$26, ptrType$29, bytesType, uint8Type, stringType, kindNames, initialized, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, copyVal, overflowFloat32, typesMustMatch, convertOp, makeFloat, makeFloat32, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I, PtrTo, PointerTo, implements$1, specialChannelAssignability, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, methodValueCallCodePtr, methodValueCall, init, New, jsType, reflectType, setKindType, newName, newMethodName, resolveReflectName, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapaccess_faststr, mapassign_faststr, mapdelete_faststr, mapiterinit, mapiterkey, mapiterelem, mapiternext, maplen, cvtDirect, cvtSliceArrayPtr, Copy, methodReceiver, valueInterface, ifaceE2I, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, DeepEqual, deepValueEqualJs, stringsLastIndex, stringsHasPrefix, valueMethodName, verifyNotInHeapPtr;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	abi = $packages["internal/abi"];
	bytealg = $packages["internal/bytealg"];
	goarch = $packages["internal/goarch"];
	itoa = $packages["internal/itoa"];
	unsafeheader = $packages["internal/unsafeheader"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	MapIter = $pkg.MapIter = $newType(0, $kindStruct, "reflect.MapIter", true, "reflect", true, function(m_, hiter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Value.ptr(ptrType$1.nil, 0, 0);
			this.hiter = new hiter.ptr($ifaceNil, null, null, 0, null);
			return;
		}
		this.m = m_;
		this.hiter = hiter_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$14.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$14.nil);
			this.methods = sliceType$14.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$14.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$14.nil);
			this.fields = sliceType$15.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$7.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$7.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$11.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$14.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_, embedded_, pkgPath_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			this.embedded = false;
			this.pkgPath = "";
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
		this.embedded = embedded_;
		this.pkgPath = pkgPath_;
	});
	hiter = $pkg.hiter = $newType(0, $kindStruct, "reflect.hiter", true, "reflect", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$2], true);
	sliceType$7 = $sliceType($Int);
	sliceType$8 = $sliceType(Value);
	ptrType$6 = $ptrType(runtime.Func);
	ptrType$8 = $ptrType($UnsafePointer);
	ptrType$9 = $ptrType(unsafeheader.Slice);
	sliceType$10 = $sliceType($Int32);
	ptrType$10 = $ptrType(uncommonType);
	sliceType$11 = $sliceType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	ptrType$14 = $ptrType($Uint8);
	funcType$2 = $funcType([], [], false);
	sliceType$14 = $sliceType(imethod);
	sliceType$15 = $sliceType(structField);
	ptrType$19 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	sliceType$16 = $sliceType(ptrType$2);
	ptrType$20 = $ptrType($String);
	ptrType$21 = $ptrType(funcType);
	sliceType$17 = $sliceType(Type);
	sliceType$18 = $sliceType(sliceType$16);
	arrayType$6 = $arrayType($UnsafePointer, 2);
	sliceType$19 = $sliceType(arrayType$6);
	arrayType$7 = $arrayType($Uintptr, 5);
	sliceType$20 = $sliceType($Uintptr);
	funcType$3 = $funcType([$String], [$Bool], false);
	ptrType$23 = $ptrType(MapIter);
	arrayType$8 = $arrayType($Uintptr, 2);
	ptrType$24 = $ptrType(ValueError);
	funcType$4 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	funcType$5 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$26 = $ptrType(structField);
	ptrType$29 = $ptrType(hiter);
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(valueMethodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if ((f === 0) || !((((f & 96) >>> 0) === 0))) {
			new flag(f).mustBeExportedSlow();
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeExportedSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(valueMethodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + valueMethodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExportedSlow = function() { return new flag(this.$get()).mustBeExportedSlow(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0)) || (((f & 256) >>> 0) === 0)) {
			new flag(f).mustBeAssignableSlow();
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	flag.prototype.mustBeAssignableSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(valueMethodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + valueMethodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + valueMethodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignableSlow = function() { return new flag(this.$get()).mustBeAssignableSlow(); };
	Value.ptr.prototype.Addr = function() {
		var fl, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		fl = (v.flag & 96) >>> 0;
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (fl | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		if (!((new flag(v.flag).kind() === 1))) {
			$clone(v, Value).panicNotBool();
		}
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.panicNotBool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
	};
	Value.prototype.panicNotBool = function() { return this.$val.panicNotBool(); };
	Value.ptr.prototype.Bytes = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === bytesType) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).bytesSlow(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Bytes, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var {_r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.runes, $c: true, $r, _r, v, $s};return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var {$24r, _r, in$1, v, $s, $r, $c} = $restore(this, {in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Call, $c: true, $r, $24r, _r, in$1, v, $s};return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var {$24r, _r, in$1, v, $s, $r, $c} = $restore(this, {in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.CallSlice, $c: true, $r, $24r, _r, in$1, v, $s};return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.CanComplex = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (15)) || (_1 === (16))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanComplex = function() { return this.$val.CanComplex(); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var {$24r, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		$s = 5; continue;
		case 6:
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByIndex, $c: true, $r, $24r, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s};return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByIndexErr = function(index) {
		var {$24r, $24r$1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _v, i, index, v, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = [_r, $ifaceNil];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					/* */ if ($clone(v, Value).IsNil()) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ($clone(v, Value).IsNil()) { */ case 13:
						_r$2 = v.typ.Elem().Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = errors.New("reflect: indirection through nil pointer to embedded struct field " + _r$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$24r$1 = [new Value.ptr(ptrType$1.nil, 0, 0), _r$3];
						$s = 17; case 17: return $24r$1;
					/* } */ case 14:
					_r$4 = $clone(v, Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					v = _r$4;
				/* } */ case 10:
			/* } */ case 8:
			_r$5 = $clone(v, Value).Field(x); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v = _r$5;
			_i++;
		$s = 5; continue;
		case 6:
		$s = -1; return [v, $ifaceNil];
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByIndexErr, $c: true, $r, $24r, $24r$1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _v, i, index, v, x, $s};return $f;
	};
	Value.prototype.FieldByIndexErr = function(index) { return this.$val.FieldByIndexErr(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByName, $c: true, $r, $24r, _r, _r$1, _tuple, f, name$1, ok, v, $s};return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var {$24r, _r, _r$1, _tuple, f, match, ok, v, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByNameFunc, $c: true, $r, $24r, _r, _r$1, _tuple, f, match, ok, v, $s};return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.CanFloat = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (13)) || (_1 === (14))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanFloat = function() { return this.$val.CanFloat(); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.CanInt = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanInt = function() { return this.$val.CanInt(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var {$24r, _r, i, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$24r = i;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Interface, $c: true, $r, $24r, _r, i, v, $s};return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.IsZero = function() {
		var {$24r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, c, i, i$1, v, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			_1 = new flag(v.flag).kind();
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (17)) { $s = 7; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (24)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (1)) { */ case 2:
				$s = -1; return !$clone(v, Value).Bool();
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 3:
				$s = -1; return (x = $clone(v, Value).Int(), (x.$high === 0 && x.$low === 0));
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 4:
				$s = -1; return (x$1 = $clone(v, Value).Uint(), (x$1.$high === 0 && x$1.$low === 0));
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return (x$2 = math.Float64bits($clone(v, Value).Float()), (x$2.$high === 0 && x$2.$low === 0));
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				c = $clone(v, Value).Complex();
				$s = -1; return (x$3 = math.Float64bits(c.$real), (x$3.$high === 0 && x$3.$low === 0)) && (x$4 = math.Float64bits(c.$imag), (x$4.$high === 0 && x$4.$low === 0));
			/* } else if (_1 === (17)) { */ case 7:
				i = 0;
				/* while (true) { */ case 13:
					_r = $clone(v, Value).Len(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* if (!(i < _r)) { break; } */ if(!(i < _r)) { $s = 14; continue; }
					_r$1 = $clone(v, Value).Index(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = $clone(_r$1, Value).IsZero(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!_r$2) { */ case 16:
						$s = -1; return false;
					/* } */ case 17:
					i = i + (1) >> 0;
				$s = 13; continue;
				case 14:
				$s = -1; return true;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 8:
				$s = -1; return $clone(v, Value).IsNil();
			/* } else if (_1 === (24)) { */ case 9:
				_r$3 = $clone(v, Value).Len(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$24r = _r$3 === 0;
				$s = 21; case 21: return $24r;
			/* } else if (_1 === (25)) { */ case 10:
				i$1 = 0;
				/* while (true) { */ case 22:
					/* if (!(i$1 < $clone(v, Value).NumField())) { break; } */ if(!(i$1 < $clone(v, Value).NumField())) { $s = 23; continue; }
					_r$4 = $clone(v, Value).Field(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = $clone(_r$4, Value).IsZero(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (!_r$5) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!_r$5) { */ case 24:
						$s = -1; return false;
					/* } */ case 25:
					i$1 = i$1 + (1) >> 0;
				$s = 22; continue;
				case 23:
				$s = -1; return true;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Value.IsZero", $clone(v, Value).Kind()));
			/* } */ case 12:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.IsZero, $c: true, $r, $24r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, c, i, i$1, v, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Value.prototype.IsZero = function() { return this.$val.IsZero(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var {_r, e, fl, k, k$1, key, tt, typ, v, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		e = 0;
		/* */ if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { */ case 1:
			k = (key.ptr).$get();
			e = mapaccess_faststr(v.typ, $clone(v, Value).pointer(), k);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			k$1 = 0;
			if (!((((key.flag & 128) >>> 0) === 0))) {
				k$1 = key.ptr;
			} else {
				k$1 = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
			}
			e = mapaccess(v.typ, $clone(v, Value).pointer(), k$1);
		/* } */ case 3:
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapIndex, $c: true, $r, _r, e, fl, k, k$1, key, tt, typ, v, $s};return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var {_r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		it = [it];
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it[0] = new hiter.ptr($ifaceNil, null, null, 0, null);
		mapiterinit(v.typ, m, it[0]);
		a = $makeSlice(sliceType$8, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = copyVal(keyType, fl, key));
			mapiternext(it[0]);
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapKeys, $c: true, $r, _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s};return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	hiter.ptr.prototype.initialized = function() {
		var h;
		h = this;
		return !($interfaceIsEqual(h.t, $ifaceNil));
	};
	hiter.prototype.initialized = function() { return this.$val.initialized(); };
	MapIter.ptr.prototype.Key = function() {
		var {_r, iter, iterkey, ktype, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("MapIter.Key called before Next"));
		}
		_r = mapiterkey(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterkey = _r;
		if (iterkey === 0) {
			$panic(new $String("MapIter.Key called on exhausted iterator"));
		}
		t = (iter.m.typ.kindType);
		ktype = t.key;
		$s = -1; return copyVal(ktype, (new flag(iter.m.flag).ro() | ((ktype.Kind() >>> 0))) >>> 0, iterkey);
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Key, $c: true, $r, _r, iter, iterkey, ktype, t, $s};return $f;
	};
	MapIter.prototype.Key = function() { return this.$val.Key(); };
	Value.ptr.prototype.SetIterKey = function(iter) {
		var {_r, _r$1, iter, iterkey, key, ktype, t, target, v, $s, $r, $c} = $restore(this, {iter});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("reflect: Value.SetIterKey called before Next"));
		}
		_r = mapiterkey(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterkey = _r;
		if (iterkey === 0) {
			$panic(new $String("reflect: Value.SetIterKey called on exhausted iterator"));
		}
		new flag(v.flag).mustBeAssignable();
		target = 0;
		if (new flag(v.flag).kind() === 20) {
			target = v.ptr;
		}
		t = (iter.m.typ.kindType);
		ktype = t.key;
		key = new Value.ptr(ktype, iterkey, (((iter.m.flag | ((ktype.Kind() >>> 0))) >>> 0) | 128) >>> 0);
		_r$1 = $clone(key, Value).assignTo("reflect.MapIter.SetKey", v.typ, target); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		key = _r$1;
		typedmemmove(v.typ, v.ptr, key.ptr);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetIterKey, $c: true, $r, _r, _r$1, iter, iterkey, key, ktype, t, target, v, $s};return $f;
	};
	Value.prototype.SetIterKey = function(iter) { return this.$val.SetIterKey(iter); };
	MapIter.ptr.prototype.Value = function() {
		var {_r, iter, iterelem, t, vtype, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("MapIter.Value called before Next"));
		}
		_r = mapiterelem(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterelem = _r;
		if (iterelem === 0) {
			$panic(new $String("MapIter.Value called on exhausted iterator"));
		}
		t = (iter.m.typ.kindType);
		vtype = t.elem;
		$s = -1; return copyVal(vtype, (new flag(iter.m.flag).ro() | ((vtype.Kind() >>> 0))) >>> 0, iterelem);
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Value, $c: true, $r, _r, iter, iterelem, t, vtype, $s};return $f;
	};
	MapIter.prototype.Value = function() { return this.$val.Value(); };
	Value.ptr.prototype.SetIterValue = function(iter) {
		var {_r, _r$1, elem, iter, iterelem, t, target, v, vtype, $s, $r, $c} = $restore(this, {iter});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("reflect: Value.SetIterValue called before Next"));
		}
		_r = mapiterelem(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterelem = _r;
		if (iterelem === 0) {
			$panic(new $String("reflect: Value.SetIterValue called on exhausted iterator"));
		}
		new flag(v.flag).mustBeAssignable();
		target = 0;
		if (new flag(v.flag).kind() === 20) {
			target = v.ptr;
		}
		t = (iter.m.typ.kindType);
		vtype = t.elem;
		elem = new Value.ptr(vtype, iterelem, (((iter.m.flag | ((vtype.Kind() >>> 0))) >>> 0) | 128) >>> 0);
		_r$1 = $clone(elem, Value).assignTo("reflect.MapIter.SetValue", v.typ, target); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		elem = _r$1;
		typedmemmove(v.typ, v.ptr, elem.ptr);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetIterValue, $c: true, $r, _r, _r$1, elem, iter, iterelem, t, target, v, vtype, $s};return $f;
	};
	Value.prototype.SetIterValue = function(iter) { return this.$val.SetIterValue(iter); };
	MapIter.ptr.prototype.Next = function() {
		var {$24r, _r, _r$1, iter, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!$clone(iter.m, Value).IsValid()) {
			$panic(new $String("MapIter.Next called on an iterator that does not have an associated map Value"));
		}
		/* */ if (!iter.hiter.initialized()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!iter.hiter.initialized()) { */ case 1:
			mapiterinit(iter.m.typ, $clone(iter.m, Value).pointer(), iter.hiter);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = mapiterkey(iter.hiter); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 0) { */ case 4:
				$panic(new $String("MapIter.Next called on exhausted iterator"));
			/* } */ case 5:
			mapiternext(iter.hiter);
		/* } */ case 3:
		_r$1 = mapiterkey(iter.hiter); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = !(_r$1 === 0);
		$s = 8; case 8: return $24r;
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Next, $c: true, $r, $24r, _r, _r$1, iter, $s};return $f;
	};
	MapIter.prototype.Next = function() { return this.$val.Next(); };
	MapIter.ptr.prototype.Reset = function(v) {
		var iter, v;
		iter = this;
		if ($clone(v, Value).IsValid()) {
			new flag(v.flag).mustBe(21);
		}
		iter.m = v;
		hiter.copy(iter.hiter, new hiter.ptr($ifaceNil, null, null, 0, null));
	};
	MapIter.prototype.Reset = function(v) { return this.$val.Reset(v); };
	Value.ptr.prototype.MapRange = function() {
		var v;
		v = this;
		if (!((new flag(v.flag).kind() === 21))) {
			new flag(v.flag).panicNotMap();
		}
		return new MapIter.ptr($clone(v, Value), new hiter.ptr($ifaceNil, null, null, 0, null));
	};
	Value.prototype.MapRange = function() { return this.$val.MapRange(); };
	flag.prototype.panicNotMap = function() {
		var f;
		f = this.$val;
		new flag(f).mustBe(21);
	};
	$ptrType(flag).prototype.panicNotMap = function() { return new flag(this.$get()).panicNotMap(); };
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	Value.ptr.prototype.Method = function(i) {
		var fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0)) || ((i >>> 0)) >= ((v.typ.NumMethod() >>> 0))) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (new flag(v.flag).ro() | (((v.flag & 128) >>> 0))) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var {_r, _tuple, m, name$1, ok, v, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return $clone(v, Value).Method(m.Index);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MethodByName, $c: true, $r, _r, _tuple, m, name$1, ok, v, $s};return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var {$24r, _r, _tuple, ok, v, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Recv, $c: true, $r, $24r, _r, _tuple, ok, v, x, $s};return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var {_r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r, $c} = $restore(this, {nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.recv, $c: true, $r, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s};return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var {_r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Send, $c: true, $r, _r, v, x, $s};return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var {$24r, _r, _r$1, nb, p, selected, tt, v, x, $s, $r, $c} = $restore(this, {x, nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$24r = selected;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.send, $c: true, $r, $24r, _r, _r$1, nb, p, selected, tt, v, x, $s};return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var {_r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.setRunes, $c: true, $r, _r, v, x, $s};return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, elem) {
		var {_r, _r$1, _r$2, e, e$1, elem, k, k$1, key, tt, v, $s, $r, $c} = $restore(this, {key, elem});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		/* */ if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { */ case 1:
			k = (key.ptr).$get();
			if (elem.typ === ptrType$1.nil) {
				mapdelete_faststr(v.typ, $clone(v, Value).pointer(), k);
				$s = -1; return;
			}
			new flag(elem.flag).mustBeExported();
			_r = $clone(elem, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			elem = _r;
			e = 0;
			if (!((((elem.flag & 128) >>> 0) === 0))) {
				e = elem.ptr;
			} else {
				e = ((elem.$ptr_ptr || (elem.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, elem))));
			}
			$r = mapassign_faststr(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_r$1 = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		key = _r$1;
		k$1 = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k$1 = key.ptr;
		} else {
			k$1 = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (elem.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k$1);
			$s = -1; return;
		}
		new flag(elem.flag).mustBeExported();
		_r$2 = $clone(elem, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		elem = _r$2;
		e$1 = 0;
		if (!((((elem.flag & 128) >>> 0) === 0))) {
			e$1 = elem.ptr;
		} else {
			e$1 = ((elem.$ptr_ptr || (elem.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, elem))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k$1, e$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetMapIndex, $c: true, $r, _r, _r$1, _r$2, e, e$1, elem, k, k$1, key, tt, v, $s};return $f;
	};
	Value.prototype.SetMapIndex = function(key, elem) { return this.$val.SetMapIndex(key, elem); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (new flag(v.flag).kind() === 24) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).stringNonString(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.String, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.stringNonString = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (new flag(v.flag).kind() === 0) {
			$s = -1; return "<invalid Value>";
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "<" + _r + " Value>";
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.stringNonString, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.stringNonString = function() { return this.$val.stringNonString(); };
	Value.ptr.prototype.TryRecv = function() {
		var {$24r, _r, _tuple, ok, v, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.TryRecv, $c: true, $r, $24r, _r, _tuple, ok, v, x, $s};return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var {$24r, _r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.TrySend, $c: true, $r, $24r, _r, v, x, $s};return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		if (!((v.flag === 0)) && (((v.flag & 512) >>> 0) === 0)) {
			return v.typ;
		}
		return $clone(v, Value).typeSlow();
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.typeSlow = function() {
		var i, m, m$1, ms, tt, v, x;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((v.flag & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ms = v.typ.exportedMethods();
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.typeSlow = function() { return this.$val.typeSlow(); };
	Value.ptr.prototype.CanUint = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanUint = function() { return this.$val.CanUint(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	Value.ptr.prototype.UnsafePointer = function() {
		var {_1, _r, code, k, p, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		code = [code];
		v = this;
		k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (22)) { $s = 2; continue; }
			/* */ if ((_1 === (18)) || (_1 === (21)) || (_1 === (26))) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (23)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (22)) { */ case 2:
				if (v.typ.ptrdata === 0) {
					if (!verifyNotInHeapPtr((v.ptr).$get())) {
						$panic(new $String("reflect: reflect.Value.UnsafePointer on an invalid notinheap pointer"));
					}
					$s = -1; return (v.ptr).$get();
				}
				$s = -1; return $clone(v, Value).pointer();
			/* } else if ((_1 === (18)) || (_1 === (21)) || (_1 === (26))) { */ case 3:
				$s = -1; return $clone(v, Value).pointer();
			/* } else if (_1 === (19)) { */ case 4:
				/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 7:
					_r = methodValueCallCodePtr(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					code[0] = _r;
					$s = -1; return code[0];
				/* } */ case 8:
				p = $clone(v, Value).pointer();
				if (!(p === 0)) {
					p = (p).$get();
				}
				$s = -1; return p;
			/* } else if (_1 === (23)) { */ case 5:
				$s = -1; return ($pointerOfStructConversion(v.ptr, ptrType$9)).Data;
			/* } */ case 6:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.UnsafePointer", new flag(v.flag).kind()));
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.UnsafePointer, $c: true, $r, _1, _r, code, k, p, v, $s};return $f;
	};
	Value.prototype.UnsafePointer = function() { return this.$val.UnsafePointer(); };
	typesMustMatch = function(what, t1, t2) {
		var {_r, _r$1, t1, t2, what, $s, $r, $c} = $restore(this, {what, t1, t2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: typesMustMatch, $c: true, $r, _r, _r$1, t1, t2, what, $s};return $f;
	};
	Value.ptr.prototype.Convert = function(t) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = _r$4;
		$s = 10; case 10: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Convert, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s};return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	Value.ptr.prototype.CanConvert = function(t) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, n, t, v, vt, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		vt = $clone(v, Value).Type();
		_r = vt.ConvertibleTo(t); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$1 = vt.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r$1 === 23)) { _v$1 = false; $s = 7; continue s; }
		_r$2 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 22; case 7:
		if (!(_v$1)) { _v = false; $s = 6; continue s; }
		_r$3 = t.Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4 === 17; case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			_r$5 = t.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.Len(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			n = _r$6;
			_r$7 = $clone(v, Value).Len(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (n > _r$7) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (n > _r$7) { */ case 14:
				$s = -1; return false;
			/* } */ case 15:
		/* } */ case 5:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.CanConvert, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, n, t, v, vt, $s};return $f;
	};
	Value.prototype.CanConvert = function(t) { return this.$val.CanConvert(t); };
	convertOp = function(dst, src) {
		var {_1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, dst, src, $s, $r, $c} = $restore(this, {dst, src});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (18)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 9; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 9; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 12; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
						_r$1 = dst.Elem().Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 14:
				/* } */ case 11:
				$s = 9; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 18:
				/* */ if (_v$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v$1) { */ case 16:
						_r$3 = src.Elem().Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 20:
				/* } */ case 17:
				if (!(dst.Kind() === 22)) { _v$3 = false; $s = 25; continue s; }
				_r$4 = dst.Elem().Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v$3 = _r$4 === 17; case 25:
				if (!(_v$3)) { _v$2 = false; $s = 24; continue s; }
				_r$5 = dst.Elem().Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = $interfaceIsEqual(src.Elem(), _r$5); case 24:
				/* */ if (_v$2) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_v$2) { */ case 22:
					$s = -1; return cvtSliceArrayPtr;
				/* } */ case 23:
				$s = 9; continue;
			/* } else if (_1 === (18)) { */ case 8:
				if (!(dst.Kind() === 18)) { _v$4 = false; $s = 30; continue s; }
				_r$6 = specialChannelAssignability(dst, src); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$4 = _r$6; case 30:
				/* */ if (_v$4) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (_v$4) { */ case 28:
					$s = -1; return cvtDirect;
				/* } */ case 29:
			/* } */ case 9:
		case 1:
		_r$7 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (_r$7) { */ case 32:
			$s = -1; return cvtDirect;
		/* } */ case 33:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$5 = false; $s = 37; continue s; }
		_r$8 = dst.Elem().common(); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg = _r$8;
		_r$9 = src.Elem().common(); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$1 = _r$9;
		_r$10 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 40; case 40: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$5 = _r$10; case 37:
		/* */ if (_v$5) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (_v$5) { */ case 35:
			$s = -1; return cvtDirect;
		/* } */ case 36:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } var $f = {$blk: convertOp, $c: true, $r, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, dst, src, $s};return $f;
	};
	makeFloat = function(f, v, t) {
		var {_1, _r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeFloat, $c: true, $r, _1, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeFloat32 = function(f, v, t) {
		var {_r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		(ptr).$set(v);
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeFloat32, $c: true, $r, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeComplex = function(f, v, t) {
		var {_1, _r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeComplex, $c: true, $r, _1, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeString = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeString, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	makeBytes = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeBytes, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	makeRunes = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeRunes, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	cvtInt = function(v, t) {
		var {$24r, _r, t, v, x, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtInt, $c: true, $r, $24r, _r, t, v, x, $s};return $f;
	};
	cvtUint = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUint, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtFloatInt = function(v, t) {
		var {$24r, _r, t, v, x, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtFloatInt, $c: true, $r, $24r, _r, t, v, x, $s};return $f;
	};
	cvtFloatUint = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtFloatUint, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtIntFloat = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtIntFloat, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtUintFloat = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUintFloat, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtFloat = function(v, t) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _v, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(v, Value).Type().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r === 13)) { _v = false; $s = 3; continue s; }
		_r$1 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 13; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$2 = makeFloat32(new flag(v.flag).ro(), (v.ptr).$get(), t); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2;
			$s = 7; case 7: return $24r;
		/* } */ case 2:
		_r$3 = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 9; case 9: return $24r$1;
		/* */ } return; } var $f = {$blk: cvtFloat, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _v, t, v, $s};return $f;
	};
	cvtComplex = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtComplex, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtIntString = function(v, t) {
		var {$24r, _r, s, t, v, x, x$1, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Int();
		if ((x$1 = (new $Int64(0, (((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtIntString, $c: true, $r, $24r, _r, s, t, v, x, x$1, $s};return $f;
	};
	cvtUintString = function(v, t) {
		var {$24r, _r, s, t, v, x, x$1, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Uint();
		if ((x$1 = (new $Uint64(0, ((x.$low >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune(((x.$low >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUintString, $c: true, $r, $24r, _r, s, t, v, x, x$1, $s};return $f;
	};
	cvtBytesString = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtBytesString, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtStringBytes = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$4($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtStringBytes, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtRunesString = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtRunesString, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtStringRunes = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$10($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtStringRunes, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtT2I = function(v, typ) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		$s = 9; case 9: return $24r;
		/* */ } return; } var $f = {$blk: cvtT2I, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s};return $f;
	};
	cvtI2I = function(v, typ) {
		var {$24r, _r, _r$1, _r$2, ret, typ, v, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: cvtI2I, $c: true, $r, $24r, _r, _r$1, _r$2, ret, typ, v, $s};return $f;
	};
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return $clone(f.name, name).embedded();
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Method.ptr.prototype.IsExported = function() {
		var m;
		m = this;
		return m.PkgPath === "";
	};
	Method.prototype.IsExported = function() { return this.$val.IsExported(); };
	Kind.prototype.String = function() {
		var k, x;
		k = this.$val;
		if (((k >>> 0)) < ((kindNames.$length >>> 0))) {
			return (x = ((k >>> 0)), ((x < 0 || x >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + x]));
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			return sliceType$11.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var {$24r, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		_ref = ut.exportedMethods();
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			/* */ if ($clone(t.nameOff(p.name), name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(t.nameOff(p.name), name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$24r = [m, ok];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			_i++;
		$s = 1; continue;
		case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.MethodByName, $c: true, $r, $24r, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s};return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var _1, i, s, sqBrackets, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		sqBrackets = 0;
		while (true) {
			if (!(i >= 0 && (!((s.charCodeAt(i) === 46)) || !((sqBrackets === 0))))) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (93)) {
				sqBrackets = sqBrackets + (1) >> 0;
			} else if (_1 === (91)) {
				sqBrackets = sqBrackets - (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type " + t.String()));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var {$24r, _r, index, t, tt, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByIndex, $c: true, $r, $24r, _r, index, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _r, name$1, t, tt, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByName, $c: true, $r, $24r, _r, name$1, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var {$24r, _r, match, t, tt, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByNameFunc, $c: true, $r, $24r, _r, match, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type " + t.String()));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructField.ptr.prototype.IsExported = function() {
		var f;
		f = this;
		return f.PkgPath === "";
	};
	StructField.prototype.IsExported = function() { return this.$val.IsExported(); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.embedded();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset;
		f.Index = new sliceType$7([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var {_i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByIndex, $c: true, $r, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s};return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var {_entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([$clone(new fieldScan.ptr(t, sliceType$7.nil), fieldScan)]);
		nextCount = false;
		visited = $makeMap(ptrType$13.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = $mapIndex(visited,ptrType$13.keyFor(t$1)), _entry !== undefined ? _entry.v : false)) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key), { k: _key, v: true });
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.embedded()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (f.embedded()) { */ case 7:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (ntyp.Kind() === 22) { */ case 9:
							_r = ntyp.Elem().common(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 10:
					/* } */ case 8:
					_r$1 = match(fname); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$1) { */ case 12:
						if ((_entry$1 = $mapIndex(count,ptrType$13.keyFor(t$1)), _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$7.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 5; continue;
					/* } */ case 13:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = $mapIndex(nextCount,ptrType$13.keyFor(styp)), _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$1), { k: _key$1, v: 2 });
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$13.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$2), { k: _key$2, v: 1 });
					if ((_entry$3 = $mapIndex(count,ptrType$13.keyFor(t$1)), _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$3), { k: _key$3, v: 2 });
					}
					index = sliceType$7.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				$s = 5; continue;
				case 6:
				_i++;
			$s = 3; continue;
			case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [result, ok];
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByNameFunc, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s};return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		present = false;
		t = this;
		hasEmbeds = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.embedded()) {
					hasEmbeds = true;
				}
				_i++;
			}
		}
		if (!hasEmbeds) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$24r = [f, present];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByName, $c: true, $r, $24r, _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s};return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return PointerTo(t);
	};
	$pkg.PtrTo = PtrTo;
	PointerTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PointerTo = PointerTo;
	rtype.ptr.prototype.Implements = function(u) {
		var {_r, t, u, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Implements, $c: true, $r, _r, t, u, $s};return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.AssignableTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = !(_r === $throwNilPointerError);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.ConvertibleTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$10.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	specialChannelAssignability = function(T, V) {
		var {$24r, T, V, _r, _v, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!((V.ChanDir() === 3) && (T.Name() === "" || V.Name() === ""))) { _v = false; $s = 1; continue s; }
		_r = haveIdenticalType(T.Elem(), V.Elem(), true); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: specialChannelAssignability, $c: true, $r, $24r, T, V, _r, _v, $s};return $f;
	};
	directlyAssignable = function(T, V) {
		var {$24r, T, V, _r, _r$1, _v, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		if (!(T.Kind() === 18)) { _v = false; $s = 3; continue s; }
		_r = specialChannelAssignability(T, V); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		_r$1 = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: directlyAssignable, $c: true, $r, $24r, T, V, _r, _r$1, _v, $s};return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var {$24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, _v$1, cmpTags, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v$1 = true; $s = 4; continue s; }
		_r$2 = T.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = !((_r$2 === _r$3)); case 4:
		if (_v$1) { _v = true; $s = 3; continue s; }
		_r$4 = T.PkgPath(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = V.PkgPath(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = !(_r$4 === _r$5); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$6 = T.common(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg = _r$6;
		_r$7 = V.common(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$1 = _r$7;
		_r$8 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$24r = _r$8;
		$s = 14; case 14: return $24r;
		/* */ } return; } var $f = {$blk: haveIdenticalType, $c: true, $r, $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, _v$1, cmpTags, $s};return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var {$24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _v, _v$1, _v$2, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === T.ChanDir())) { _v$1 = false; $s = 13; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 13:
				$24r$1 = _v$1;
				$s = 15; case 15: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 16:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 17; continue; }
					_r$2 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!_r$2) { */ case 18:
						$s = -1; return false;
					/* } */ case 19:
					i = i + (1) >> 0;
				$s = 16; continue;
				case 17:
				i$1 = 0;
				/* while (true) { */ case 21:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 22; continue; }
					_r$3 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!_r$3) { */ case 23:
						$s = -1; return false;
					/* } */ case 24:
					i$1 = i$1 + (1) >> 0;
				$s = 21; continue;
				case 22:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$4 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				if (!(_r$4)) { _v$2 = false; $s = 26; continue s; }
				_r$5 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = _r$5; case 26:
				$24r$2 = _v$2;
				$s = 29; case 29: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$24r$3 = _r$6;
				$s = 31; case 31: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$7 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* */ if (!_r$7) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$7) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!(tf.embedded() === vf.embedded())) {
						$s = -1; return false;
					}
					_i++;
				$s = 32; continue;
				case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: haveIdenticalUnderlyingType, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _v, _v$1, _v$2, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s};return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	methodValueCallCodePtr = function() {
		var {$24r, _r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = abi.FuncPCABI0(new funcType$2(methodValueCall)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: methodValueCallCodePtr, $c: true, $r, $24r, _r, $s};return $f;
	};
	methodValueCall = function() {
		$throwRuntimeError("native function not implemented: reflect.methodValueCall");
	};
	init = function() {
		var {used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$11.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new name.ptr(ptrType$14.nil), sliceType$14.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new name.ptr(ptrType$14.nil), sliceType$15.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$14.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: init, $c: true, $r, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	New = function(typ) {
		var fl, pt, ptr, t, typ;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		t = $assertType(typ, ptrType$1);
		pt = t.ptrTo();
		ptr = unsafe_New(t);
		fl = 22;
		return new Value.ptr(pt, ptr, fl);
	};
	$pkg.New = New;
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$14.nil, resolveReflectName($clone(newName(internalStr(typ.string), "", !!(typ.exported), false), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$11.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(resolveReflectName($clone(newMethodName(m), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(resolveReflectName($clone(newMethodName(m$1), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(resolveReflectName($clone(newName(internalStr(typ.pkg), "", false, false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				ut.jsType = typ;
				rt.uncommonType = ut;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$14, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(resolveReflectName($clone(newMethodName(m$2), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false, false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$15, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported), !!(f.embedded)), name), reflectType(f.typ), ((i$5 >>> 0))));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false, false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var obj, t;
		t = this;
		obj = t.uncommonType;
		if (obj === undefined) {
			return ptrType$10.nil;
		}
		return ((obj));
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$19.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$19.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$19.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$19.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	name.ptr.prototype.embedded = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$19.nil).embedded;
	};
	name.prototype.embedded = function() { return this.$val.embedded(); };
	newName = function(n, tag, exported, embedded) {
		var _key, b, embedded, exported, n, tag;
		b = $newDataPointer(0, ptrType$14);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$14.keyFor(_key), { k: _key, v: new nameData.ptr(n, tag, exported, embedded, "") });
		return new name.ptr(b);
	};
	newMethodName = function(m) {
		var _key, b, m;
		b = $newDataPointer(0, ptrType$14);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$14.keyFor(_key), { k: _key, v: new nameData.ptr(internalStr(m.name), "", internalStr(m.pkg) === "", false, internalStr(m.pkg)) });
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	resolveReflectName = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r, $c} = $restore(this, {t, v, fl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } var $f = {$blk: makeValue, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s};return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var {$24r, _r, _r$1, cap, len, typ, $s, $r, $c} = $restore(this, {typ, len, cap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var {$24r, _r$1, _r$2, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2.zero();
			$s = 3; case 3: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$1, _r$2, $s};return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: MakeSlice, $c: true, $r, $24r, _r, _r$1, cap, len, typ, $s};return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var {$24r, _r, i, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ValueOf, $c: true, $r, $24r, _r, i, $s};return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var {_i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r, $c} = $restore(this, {in$1, out, variadic});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$16, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$16, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$16), $externalize(jsOut, sliceType$16), $externalize(variadic, $Bool)));
		/* */ } return; } var $f = {$blk: FuncOf, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s};return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var {$24r, _r, typ, $s, $r, $c} = $restore(this, {typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Zero, $c: true, $r, $24r, _r, typ, $s};return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var {_1, _r, bits, f, ptr, t, typ, $s, $r, $c} = $restore(this, {f, bits, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeInt, $c: true, $r, _1, _r, bits, f, ptr, t, typ, $s};return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = jsType(t.Key()).keyFor(kv);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		if (!!!(m)) {
			return 0;
		}
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m.get(k);
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var {_r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r, $c} = $restore(this, {t, m, key, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m.set(k, entry);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: mapassign, $c: true, $r, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s};return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		if (!!!(m)) {
			return;
		}
		m.delete(k);
	};
	mapaccess_faststr = function(t, m, key) {
		var key, key$24ptr, m, t, val;
		val = 0;
		val = mapaccess(t, m, ((key$24ptr || (key$24ptr = new ptrType$20(function() { return key; }, function($v) { key = $v; })))));
		return val;
	};
	mapassign_faststr = function(t, m, key, val) {
		var {key, m, t, val, $s, $r, $c} = $restore(this, {t, m, key, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		key = [key];
		$r = mapassign(t, m, ((key.$ptr || (key.$ptr = new ptrType$20(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, key)))), val); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: mapassign_faststr, $c: true, $r, key, m, t, val, $s};return $f;
	};
	mapdelete_faststr = function(t, m, key) {
		var key, key$24ptr, m, t;
		mapdelete(t, m, ((key$24ptr || (key$24ptr = new ptrType$20(function() { return key; }, function($v) { key = $v; })))));
	};
	hiter.ptr.prototype.skipUntilValidKey = function() {
		var entry, iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			entry = iter.m.get(k);
			if (!(entry === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	hiter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m, it) {
		var it, keys, keysIter, m, mapObj, t;
		mapObj = m;
		keys = new ($global.Array)();
		if (!(mapObj.keys === undefined)) {
			keysIter = mapObj.keys();
			if (!(mapObj.keys === undefined)) {
				keys = $global.Array.from(keysIter);
			}
		}
		hiter.copy(it, new hiter.ptr(t, mapObj, keys, 0, null));
	};
	mapiterkey = function(it) {
		var {$24r, _r, _r$1, _r$2, it, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kv = null;
		if (!(it.last === null)) {
			kv = it.last;
		} else {
			it.skipUntilValidKey();
			if (it.i === $parseInt(it.keys.length)) {
				$s = -1; return 0;
			}
			k = it.keys[it.i];
			kv = it.m.get(k);
			it.last = kv;
		}
		_r = it.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterkey, $c: true, $r, $24r, _r, _r$1, _r$2, it, k, kv, $s};return $f;
	};
	mapiterelem = function(it) {
		var {$24r, _r, _r$1, _r$2, it, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kv = null;
		if (!(it.last === null)) {
			kv = it.last;
		} else {
			it.skipUntilValidKey();
			if (it.i === $parseInt(it.keys.length)) {
				$s = -1; return 0;
			}
			k = it.keys[it.i];
			kv = it.m.get(k);
			it.last = kv;
		}
		_r = it.t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.v, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterelem, $c: true, $r, $24r, _r, _r$1, _r$2, it, k, kv, $s};return $f;
	};
	mapiternext = function(it) {
		var it;
		it.last = null;
		it.i = it.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt(m.size) >> 0;
	};
	cvtDirect = function(v, typ) {
		var {$24r, $24r$1, _1, _2, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (22)) { $s = 8; continue; }
			/* */ if (_1 === (25)) { $s = 9; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (23)) { */ case 7:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 12; continue;
			/* } else if (_1 === (22)) { */ case 8:
					_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_2 = _r$3;
					/* */ if (_2 === (25)) { $s = 16; continue; }
					/* */ if (_2 === (17)) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (_2 === (25)) { */ case 16:
						_r$4 = typ.Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 20; continue; }
						/* */ $s = 21; continue;
						/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 20:
							val = srcVal;
							/* break; */ $s = 13; continue;
						/* } */ case 21:
						val = new (jsType(typ))();
						_arg = val;
						_arg$1 = srcVal;
						_r$5 = typ.Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_arg$2 = _r$5;
						$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 19; continue;
					/* } else if (_2 === (17)) { */ case 17:
						val = srcVal;
						$s = 19; continue;
					/* } else { */ case 18:
						val = new (jsType(typ))(srcVal.$get, srcVal.$set);
					/* } */ case 19:
				case 13:
				$s = 12; continue;
			/* } else if (_1 === (25)) { */ case 9:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 12; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { */ case 10:
				val = v.ptr;
				$s = 12; continue;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 12:
		case 5:
		_r$6 = typ.common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		$s = 27; case 27: return $24r$1;
		/* */ } return; } var $f = {$blk: cvtDirect, $c: true, $r, $24r, $24r$1, _1, _2, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s};return $f;
	};
	cvtSliceArrayPtr = function(v, t) {
		var {$24r, _r, _r$1, _r$2, alen, array, slen, slice, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		slice = $clone(v, Value).object();
		slen = $parseInt(slice.$length) >> 0;
		_r = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		alen = _r$1;
		if (alen > slen) {
			$panic(new $String("reflect: cannot convert slice with length " + itoa.Itoa(slen) + " to pointer to array with length " + itoa.Itoa(alen)));
		}
		array = $sliceToGoArray(slice, jsType(t));
		_r$2 = t.common(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r$2, (array), (((v.flag & ~415) >>> 0) | 22) >>> 0);
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: cvtSliceArrayPtr, $c: true, $r, $24r, _r, _r$1, _r$2, alen, array, slen, slice, t, v, $s};return $f;
	};
	Copy = function(dst, src) {
		var {_r, _v, dk, dst, dstVal, sk, src, srcVal, stringCopy, $s, $r, $c} = $restore(this, {dst, src});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		stringCopy = false;
		/* */ if (!((sk === 17)) && !((sk === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((sk === 17)) && !((sk === 23))) { */ case 1:
			if (!(sk === 24)) { _v = false; $s = 3; continue s; }
			_r = dst.typ.Elem().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 8; case 3:
			stringCopy = _v;
			if (!stringCopy) {
				$panic(new ValueError.ptr("reflect.Copy", sk));
			}
		/* } */ case 2:
		new flag(src.flag).mustBeExported();
		/* */ if (!stringCopy) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!stringCopy) { */ case 5:
			$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		dstVal = $clone(dst, Value).object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = $clone(src, Value).object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		if (stringCopy) {
			$s = -1; return $parseInt($copyString(dstVal, srcVal)) >> 0;
		}
		$s = -1; return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } var $f = {$blk: Copy, $c: true, $r, _r, _v, dk, dst, dstVal, sk, src, srcVal, stringCopy, $s};return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var _, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_ = ptrType$1.nil;
		t = ptrType$21.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_, t, fn];
	};
	valueInterface = function(v, safe) {
		var {_r, cv, safe, v, $s, $r, $c} = $restore(this, {v, safe});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			if (!((((v.flag & 128) >>> 0) === 0)) && ($clone(v, Value).Kind() === 25)) {
				cv = jsType(v.typ).zero();
				copyStruct(cv, $clone(v, Value).object(), v.typ);
				$s = -1; return ((new (jsType(v.typ))(cv)));
			}
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } var $f = {$blk: valueInterface, $c: true, $r, _r, cv, safe, v, $s};return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	makeMethodValue = function(op, v) {
		var {$24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r, $c} = $restore(this, {op, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$16)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: makeMethodValue, $c: true, $r, $24r, _r, _tuple, fn, fv, op, rcvr, v, $s};return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var {$24r, _1, _r, _r$1, i, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				$s = 8; continue;
				case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Comparable, $c: true, $r, $24r, _1, _r, _r$1, i, t, $s};return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var {_i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$17, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$17, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		mt = _r;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$16)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Method, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s};return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var {_r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r, $c} = $restore(this, {context, dst, target});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.assignTo, $c: true, $r, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s};return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var {$24r, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r, $c} = $restore(this, {op, in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$21.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = (v.typ.kindType);
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.rtype.NumIn();
		if (isSlice) {
			if (!t.rtype.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.rtype.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.rtype.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.rtype.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		/* */ if (!isSlice && t.rtype.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.rtype.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.rtype.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.rtype.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			$s = 12; continue;
			case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$8, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.rtype.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.rtype.NumOut();
		argsArray = new ($global.Array)(t.rtype.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.rtype.In(i$2);
			_r$9 = t.rtype.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		$s = 21; continue;
		case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$8.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.rtype.Out(0), wrapJsObject(t.rtype.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$24r = new sliceType$8([$clone(_r$14, Value)]);
				$s = 34; case 34: return $24r;
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$8, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 36; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.rtype.Out(i$3), wrapJsObject(t.rtype.Out(i$3), results[i$3]), 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				$s = 35; continue;
				case 36:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$8.nil;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.call, $c: true, $r, $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s};return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var {$24r, _1, _r, _r$1, k, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if ((_1 === (18)) || (_1 === (23))) { $s = 3; continue; }
			/* */ if (_1 === (22)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				$s = -1; return v.typ.Len();
			/* } else if ((_1 === (18)) || (_1 === (23))) { */ case 3:
				$s = -1; return $parseInt($clone(v, Value).object().$capacity) >> 0;
			/* } else if (_1 === (22)) { */ case 4:
				_r = v.typ.Elem().Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 17) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r === 17) { */ case 6:
					_r$1 = v.typ.Elem().Len(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = _r$1;
					$s = 10; case 10: return $24r;
				/* } */ case 7:
				$panic(new $String("reflect: call of reflect.Value.Cap on ptr to non-array Value"));
			/* } */ case 5:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Cap, $c: true, $r, $24r, _1, _r, _r$1, k, v, $s};return $f;
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var {$24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Elem, $c: true, $r, $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s};return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var {$24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				$s = 5; continue;
				case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Field, $c: true, $r, $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s};return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var {$24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$14(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Index, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s};return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var {$24r, _1, _r, _r$1, k, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if ((_1 === (17)) || (_1 === (24))) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (18)) { $s = 4; continue; }
			/* */ if (_1 === (21)) { $s = 5; continue; }
			/* */ if (_1 === (22)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (17)) || (_1 === (24))) { */ case 2:
				$s = -1; return $parseInt($clone(v, Value).object().length);
			/* } else if (_1 === (23)) { */ case 3:
				$s = -1; return $parseInt($clone(v, Value).object().$length) >> 0;
			/* } else if (_1 === (18)) { */ case 4:
				$s = -1; return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
			/* } else if (_1 === (21)) { */ case 5:
				$s = -1; return $parseInt($clone(v, Value).object().size) >> 0;
			/* } else if (_1 === (22)) { */ case 6:
				_r = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 17) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r === 17) { */ case 9:
					_r$1 = v.typ.Elem().Len(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = _r$1;
					$s = 13; case 13: return $24r;
				/* } */ case 10:
				$panic(new $String("reflect: call of reflect.Value.Len on ptr to non-array Value"));
				$s = 8; continue;
			/* } else { */ case 7:
				$panic(new ValueError.ptr("reflect.Value.Len", k));
			/* } */ case 8:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Len, $c: true, $r, $24r, _1, _r, _r$1, k, v, $s};return $f;
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var {_1, _r, _r$1, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if ((_1 === (17)) || (_1 === (25))) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((_1 === (17)) || (_1 === (25))) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 8; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 8; continue;
				/* } else { */ case 7:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 8:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Set, $c: true, $r, _1, _r, _r$1, v, x, $s};return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.bytesSlow = function() {
		var {_1, _r, _r$1, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			_1 = new flag(v.flag).kind();
			/* */ if (_1 === (23)) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (23)) { */ case 2:
				_r = v.typ.Elem().Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!((_r === 8))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((_r === 8))) { */ case 5:
					$panic(new $String("reflect.Value.Bytes of non-byte slice"));
				/* } */ case 6:
				$s = -1; return (v.ptr).$get();
			/* } else if (_1 === (17)) { */ case 3:
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!((_r$1 === 8))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((_r$1 === 8))) { */ case 8:
					$panic(new $String("reflect.Value.Bytes of non-byte array"));
				/* } */ case 9:
				if (!$clone(v, Value).CanAddr()) {
					$panic(new $String("reflect.Value.Bytes of unaddressable byte array"));
				}
				$s = -1; return $assertType($internalize(v.ptr, $emptyInterface), sliceType$4);
			/* } */ case 4:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.Bytes", new flag(v.flag).kind()));
		$s = -1; return sliceType$4.nil;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.bytesSlow, $c: true, $r, _1, _r, _r$1, v, $s};return $f;
	};
	Value.prototype.bytesSlow = function() { return this.$val.bytesSlow(); };
	Value.ptr.prototype.SetBytes = function(x) {
		var {_r, _r$1, _v, slice, typedSlice, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetBytes, $c: true, $r, _r, _r$1, _v, slice, typedSlice, v, x, $s};return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var {$24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var {$24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r, $c} = $restore(this, {i, j, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice3, $c: true, $r, $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r, $c} = $restore(this, {ch, nb, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$18([new sliceType$16([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$16([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } var $f = {$blk: chanrecv, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s};return $f;
	};
	chansend = function(ch, val, nb) {
		var {_r, ch, comms, nb, selectRes, val, $s, $r, $c} = $restore(this, {ch, val, nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		comms = new sliceType$18([new sliceType$16([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$16([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: chansend, $c: true, $r, _r, ch, comms, nb, selectRes, val, $s};return $f;
	};
	DeepEqual = function(a1, a2) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s, $r, $c} = $restore(this, {a1, a2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i1 = a1;
		i2 = a2;
		if (i1 === i2) {
			$s = -1; return true;
		}
		if (i1 === null || i2 === null || !(i1.constructor === i2.constructor)) {
			$s = -1; return false;
		}
		_r = ValueOf(a1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = $clone(_r, Value);
		_r$1 = ValueOf(a2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$1, Value);
		_arg$2 = sliceType$19.nil;
		_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: DeepEqual, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s};return $f;
	};
	$pkg.DeepEqual = DeepEqual;
	deepValueEqualJs = function(v1, v2, visited) {
		var {$24r, $24r$1, $24r$2, _1, _2, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, entry, i, i$1, k, keys, n, n$1, v1, v2, val1, val2, visited, $s, $r, $c} = $restore(this, {v1, v2, visited});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!$clone(v1, Value).IsValid() || !$clone(v2, Value).IsValid()) {
			$s = -1; return !$clone(v1, Value).IsValid() && !$clone(v2, Value).IsValid();
		}
		if (!($interfaceIsEqual($clone(v1, Value).Type(), $clone(v2, Value).Type()))) {
			$s = -1; return false;
		}
		if ($interfaceIsEqual($clone(v1, Value).Type(), jsObjectPtr)) {
			$s = -1; return unwrapJsObject(jsObjectPtr, $clone(v1, Value).object()) === unwrapJsObject(jsObjectPtr, $clone(v2, Value).object());
		}
		_1 = $clone(v1, Value).Kind();
		if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (25))) {
			_ref = visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				entry = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$6);
				if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
					$s = -1; return true;
				}
				_i++;
			}
			visited = $append(visited, $toNativeArray($kindUnsafePointer, [v1.ptr, v2.ptr]));
		}
			_2 = $clone(v1, Value).Kind();
			/* */ if ((_2 === (17)) || (_2 === (23))) { $s = 2; continue; }
			/* */ if (_2 === (20)) { $s = 3; continue; }
			/* */ if (_2 === (22)) { $s = 4; continue; }
			/* */ if (_2 === (25)) { $s = 5; continue; }
			/* */ if (_2 === (21)) { $s = 6; continue; }
			/* */ if (_2 === (19)) { $s = 7; continue; }
			/* */ if (_2 === (26)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_2 === (17)) || (_2 === (23))) { */ case 2:
				if ($clone(v1, Value).Kind() === 23) {
					if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
						$s = -1; return false;
					}
					if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
						$s = -1; return true;
					}
				}
				_r = $clone(v1, Value).Len(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				n = _r;
				_r$1 = $clone(v2, Value).Len(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!((n === _r$1))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((n === _r$1))) { */ case 11:
					$s = -1; return false;
				/* } */ case 12:
				i = 0;
				/* while (true) { */ case 14:
					/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 15; continue; }
					_r$2 = $clone(v1, Value).Index(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg = $clone(_r$2, Value);
					_r$3 = $clone(v2, Value).Index(i); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = $clone(_r$3, Value);
					_arg$2 = visited;
					_r$4 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!_r$4) { */ case 16:
						$s = -1; return false;
					/* } */ case 17:
					i = i + (1) >> 0;
				$s = 14; continue;
				case 15:
				$s = -1; return true;
			/* } else if (_2 === (20)) { */ case 3:
				if ($clone(v1, Value).IsNil() || $clone(v2, Value).IsNil()) {
					$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
				}
				_r$5 = $clone(v1, Value).Elem(); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$3 = $clone(_r$5, Value);
				_r$6 = $clone(v2, Value).Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$4 = $clone(_r$6, Value);
				_arg$5 = visited;
				_r$7 = deepValueEqualJs(_arg$3, _arg$4, _arg$5); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r = _r$7;
				$s = 24; case 24: return $24r;
			/* } else if (_2 === (22)) { */ case 4:
				_r$8 = $clone(v1, Value).Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_arg$6 = $clone(_r$8, Value);
				_r$9 = $clone(v2, Value).Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$7 = $clone(_r$9, Value);
				_arg$8 = visited;
				_r$10 = deepValueEqualJs(_arg$6, _arg$7, _arg$8); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$24r$1 = _r$10;
				$s = 28; case 28: return $24r$1;
			/* } else if (_2 === (25)) { */ case 5:
				n$1 = $clone(v1, Value).NumField();
				i$1 = 0;
				/* while (true) { */ case 29:
					/* if (!(i$1 < n$1)) { break; } */ if(!(i$1 < n$1)) { $s = 30; continue; }
					_r$11 = $clone(v1, Value).Field(i$1); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_arg$9 = $clone(_r$11, Value);
					_r$12 = $clone(v2, Value).Field(i$1); /* */ $s = 34; case 34: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_arg$10 = $clone(_r$12, Value);
					_arg$11 = visited;
					_r$13 = deepValueEqualJs(_arg$9, _arg$10, _arg$11); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					/* */ if (!_r$13) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if (!_r$13) { */ case 31:
						$s = -1; return false;
					/* } */ case 32:
					i$1 = i$1 + (1) >> 0;
				$s = 29; continue;
				case 30:
				$s = -1; return true;
			/* } else if (_2 === (21)) { */ case 6:
				if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
					$s = -1; return false;
				}
				if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
					$s = -1; return true;
				}
				_r$14 = $clone(v1, Value).MapKeys(); /* */ $s = 36; case 36: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				keys = _r$14;
				_r$15 = $clone(v2, Value).Len(); /* */ $s = 39; case 39: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ if (!((keys.$length === _r$15))) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (!((keys.$length === _r$15))) { */ case 37:
					$s = -1; return false;
				/* } */ case 38:
				_ref$1 = keys;
				_i$1 = 0;
				/* while (true) { */ case 40:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 41; continue; }
					k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					_r$16 = $clone(v1, Value).MapIndex($clone(k, Value)); /* */ $s = 42; case 42: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					val1 = _r$16;
					_r$17 = $clone(v2, Value).MapIndex($clone(k, Value)); /* */ $s = 43; case 43: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					val2 = _r$17;
					if (!$clone(val1, Value).IsValid() || !$clone(val2, Value).IsValid()) { _v = true; $s = 46; continue s; }
					_r$18 = deepValueEqualJs($clone(val1, Value), $clone(val2, Value), visited); /* */ $s = 47; case 47: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_v = !_r$18; case 46:
					/* */ if (_v) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (_v) { */ case 44:
						$s = -1; return false;
					/* } */ case 45:
					_i$1++;
				$s = 40; continue;
				case 41:
				$s = -1; return true;
			/* } else if (_2 === (19)) { */ case 7:
				$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
			/* } else if (_2 === (26)) { */ case 8:
				$s = -1; return $clone(v1, Value).object() === $clone(v2, Value).object();
			/* } */ case 9:
		case 1:
		_r$19 = valueInterface($clone(v1, Value), false); /* */ $s = 48; case 48: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$20 = valueInterface($clone(v2, Value), false); /* */ $s = 49; case 49: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		$24r$2 = !!($interfaceIsEqual(_r$19, _r$20));
		$s = 50; case 50: return $24r$2;
		/* */ } return; } var $f = {$blk: deepValueEqualJs, $c: true, $r, $24r, $24r$1, $24r$2, _1, _2, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, entry, i, i$1, k, keys, n, n$1, v1, v2, val1, val2, visited, $s};return $f;
	};
	stringsLastIndex = function(s, c) {
		var c, i, s;
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	stringsHasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	valueMethodName = function() {
		var _tuple, frame, frames, idx, methodName, more, n, name$1, pc;
		pc = arrayType$7.zero();
		n = runtime.Callers(1, new sliceType$20(pc));
		frames = runtime.CallersFrames($subslice(new sliceType$20(pc), 0, n));
		frame = new runtime.Frame.ptr(0, ptrType$6.nil, "", "", 0, 0);
		more = true;
		while (true) {
			if (!(more)) { break; }
			_tuple = frames.Next();
			runtime.Frame.copy(frame, _tuple[0]);
			more = _tuple[1];
			name$1 = frame.Function;
			if (stringsHasPrefix(name$1, "Object.$packages.reflect.")) {
				idx = stringsLastIndex(name$1, 46);
				if (idx >= 0) {
					methodName = $substring(name$1, (idx + 1 >> 0));
					if (methodName.length > 0 && 65 <= methodName.charCodeAt(0) && methodName.charCodeAt(0) <= 90) {
						return "reflect.Value." + methodName;
					}
				}
			}
		}
		return "unknown method";
	};
	verifyNotInHeapPtr = function(p) {
		var p;
		return true;
	};
	Value.methods = [{prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "panicNotBool", name: "panicNotBool", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$10], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "capNonSlice", name: "capNonSlice", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "CanComplex", name: "CanComplex", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [Value], false)}, {prop: "FieldByIndexErr", name: "FieldByIndexErr", pkg: "", typ: $funcType([sliceType$7], [Value, $error], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "CanFloat", name: "CanFloat", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "CanInt", name: "CanInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "lenNonSlice", name: "lenNonSlice", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "SetIterKey", name: "SetIterKey", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "SetIterValue", name: "SetIterValue", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "MapRange", name: "MapRange", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$10], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "stringNonString", name: "stringNonString", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "typeSlow", name: "typeSlow", pkg: "reflect", typ: $funcType([], [Type], false)}, {prop: "CanUint", name: "CanUint", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "UnsafePointer", name: "UnsafePointer", pkg: "", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}, {prop: "CanConvert", name: "CanConvert", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$8], [sliceType$8], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$8], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "bytesSlow", name: "bytesSlow", pkg: "reflect", typ: $funcType([], [sliceType$4], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$4], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeExportedSlow", name: "mustBeExportedSlow", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignableSlow", name: "mustBeAssignableSlow", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "panicNotMap", name: "panicNotMap", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([Value], [], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "gcSlice", name: "gcSlice", pkg: "reflect", typ: $funcType([$Uintptr, $Uintptr], [sliceType$4], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$10], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$26.methods = [{prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	Method.methods = [{prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}];
	StructField.methods = [{prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	ptrType$10.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}];
	ptrType$21.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$14], false)}, {prop: "hasTag", name: "hasTag", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "readVarint", name: "readVarint", pkg: "reflect", typ: $funcType([$Int], [$Int, $Int], false)}, {prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "setPkgPath", name: "setPkgPath", pkg: "reflect", typ: $funcType([$String], [], false)}];
	ptrType$29.methods = [{prop: "initialized", name: "initialized", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "reflect", typ: $funcType([], [], false)}];
	Value.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	MapIter.init("reflect", [{prop: "m", name: "m", embedded: false, exported: false, typ: Value, tag: ""}, {prop: "hiter", name: "hiter", embedded: false, exported: false, typ: hiter, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$10], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$4, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$14, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$14, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$5, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$15, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", embedded: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: sliceType$7, tag: ""}, {prop: "Anonymous", name: "Anonymous", embedded: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$13, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$11, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$14, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "embedded", name: "embedded", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: $String, tag: ""}]);
	hiter.init("reflect", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = abi.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = goarch.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unsafeheader.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		initialized = false;
		nameMap = new $global.Map();
		bytesType = $assertType(TypeOf((sliceType$4.nil)), ptrType$1);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		stringType = $assertType(TypeOf(new $String("")), ptrType$1);
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		$r = init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, sync, littleEndian, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	sync = $packages["sync"];
	littleEndian = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	littleEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	littleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	littleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	littleEndian.ptr.prototype.AppendUint16 = function(b, v) {
		var b, v;
		return $append(b, ((v << 24 >>> 24)), (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint16 = function(b, v) { return this.$val.AppendUint16(b, v); };
	littleEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	littleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	littleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	littleEndian.ptr.prototype.AppendUint32 = function(b, v) {
		var b, v;
		return $append(b, ((v << 24 >>> 24)), (((v >>> 8 >>> 0) << 24 >>> 24)), (((v >>> 16 >>> 0) << 24 >>> 24)), (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint32 = function(b, v) { return this.$val.AppendUint32(b, v); };
	littleEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$7 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	littleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	littleEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v.$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	littleEndian.ptr.prototype.AppendUint64 = function(b, v) {
		var b, v;
		return $append(b, ((v.$low << 24 >>> 24)), (($shiftRightUint64(v, 8).$low << 24 >>> 24)), (($shiftRightUint64(v, 16).$low << 24 >>> 24)), (($shiftRightUint64(v, 24).$low << 24 >>> 24)), (($shiftRightUint64(v, 32).$low << 24 >>> 24)), (($shiftRightUint64(v, 40).$low << 24 >>> 24)), (($shiftRightUint64(v, 48).$low << 24 >>> 24)), (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint64 = function(b, v) { return this.$val.AppendUint64(b, v); };
	littleEndian.ptr.prototype.String = function() {
		return "LittleEndian";
	};
	littleEndian.prototype.String = function() { return this.$val.String(); };
	littleEndian.ptr.prototype.GoString = function() {
		return "binary.LittleEndian";
	};
	littleEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.AppendUint16 = function(b, v) {
		var b, v;
		return $append(b, (((v >>> 8 << 16 >>> 16) << 24 >>> 24)), ((v << 24 >>> 24)));
	};
	bigEndian.prototype.AppendUint16 = function(b, v) { return this.$val.AppendUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.AppendUint32 = function(b, v) {
		var b, v;
		return $append(b, (((v >>> 24 >>> 0) << 24 >>> 24)), (((v >>> 16 >>> 0) << 24 >>> 24)), (((v >>> 8 >>> 0) << 24 >>> 24)), ((v << 24 >>> 24)));
	};
	bigEndian.prototype.AppendUint32 = function(b, v) { return this.$val.AppendUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.AppendUint64 = function(b, v) {
		var b, v;
		return $append(b, (($shiftRightUint64(v, 56).$low << 24 >>> 24)), (($shiftRightUint64(v, 48).$low << 24 >>> 24)), (($shiftRightUint64(v, 40).$low << 24 >>> 24)), (($shiftRightUint64(v, 32).$low << 24 >>> 24)), (($shiftRightUint64(v, 24).$low << 24 >>> 24)), (($shiftRightUint64(v, 16).$low << 24 >>> 24)), (($shiftRightUint64(v, 8).$low << 24 >>> 24)), ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.AppendUint64 = function(b, v) { return this.$val.AppendUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	littleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "AppendUint16", name: "AppendUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [sliceType], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "AppendUint32", name: "AppendUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [sliceType], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "AppendUint64", name: "AppendUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "AppendUint16", name: "AppendUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [sliceType], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "AppendUint32", name: "AppendUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [sliceType], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "AppendUint64", name: "AppendUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	littleEndian.init("", []);
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LittleEndian = new littleEndian.ptr();
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflectlite, bits, Interface, xorshift, lessSwap, reverse, StringSlice, ptrType, ptrType$1, sliceType$2, funcType, funcType$1, reflectValueOf, reflectSwapper, insertionSort, siftDown, heapSort, pdqsort, partition, partitionEqual, partialInsertionSort, breakPatterns, choosePivot, order2, median, medianAdjacent, reverseRange, swapRange, stable, symMerge, rotate, insertionSort_func, siftDown_func, heapSort_func, pdqsort_func, partition_func, partitionEqual_func, partialInsertionSort_func, breakPatterns_func, choosePivot_func, order2_func, median_func, medianAdjacent_func, reverseRange_func, Sort, nextPowerOfTwo, Reverse, Strings, Stable, Slice, Search, SearchStrings;
	reflectlite = $packages["internal/reflectlite"];
	bits = $packages["math/bits"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "sort.Interface", true, "sort", true, null);
	xorshift = $pkg.xorshift = $newType(8, $kindUint64, "sort.xorshift", true, "sort", false, null);
	lessSwap = $pkg.lessSwap = $newType(0, $kindStruct, "sort.lessSwap", true, "sort", false, function(Less_, Swap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Less = $throwNilPointerError;
			this.Swap = $throwNilPointerError;
			return;
		}
		this.Less = Less_;
		this.Swap = Swap_;
	});
	reverse = $pkg.reverse = $newType(0, $kindStruct, "sort.reverse", true, "sort", false, function(Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Interface = $ifaceNil;
			return;
		}
		this.Interface = Interface_;
	});
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
	ptrType = $ptrType(xorshift);
	ptrType$1 = $ptrType($Int);
	sliceType$2 = $sliceType($String);
	funcType = $funcType([$Int, $Int], [$Bool], false);
	funcType$1 = $funcType([$Int, $Int], [], false);
	insertionSort = function(data, a, b) {
		var {_r, _v, a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			$s = 3; continue;
			case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: insertionSort, $c: true, $r, _r, _v, a, b, data, i, j, $s};return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var {_r, _r$1, _v, child, data, first, hi, lo, root, $s, $r, $c} = $restore(this, {data, lo, hi, first});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: siftDown, $c: true, $r, _r, _r$1, _v, child, data, first, hi, lo, root, $s};return $f;
	};
	heapSort = function(data, a, b) {
		var {_q, a, b, data, first, hi, i, i$1, lo, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		$s = 1; continue;
		case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		$s = 4; continue;
		case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: heapSort, $c: true, $r, _q, a, b, data, first, hi, i, i$1, lo, $s};return $f;
	};
	pdqsort = function(data, a, b, limit) {
		var {_q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s, $r, $c} = $restore(this, {data, a, b, limit});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		wasBalanced = true;
		wasPartitioned = true;
		/* while (true) { */ case 1:
			length = b - a >> 0;
			/* */ if (length <= 12) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (length <= 12) { */ case 3:
				$r = insertionSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			/* */ if (limit === 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (limit === 0) { */ case 6:
				$r = heapSort(data, a, b); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 7:
			/* */ if (!wasBalanced) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!wasBalanced) { */ case 9:
				$r = breakPatterns(data, a, b); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				limit = limit - (1) >> 0;
			/* } */ case 10:
			_r = choosePivot(data, a, b); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			pivot = _tuple[0];
			hint = _tuple[1];
			/* */ if (hint === 2) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (hint === 2) { */ case 13:
				$r = reverseRange(data, a, b); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				pivot = ((b - 1 >> 0)) - ((pivot - a >> 0)) >> 0;
				hint = 1;
			/* } */ case 14:
			/* */ if (wasBalanced && wasPartitioned && (hint === 1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (wasBalanced && wasPartitioned && (hint === 1)) { */ case 16:
				_r$1 = partialInsertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_r$1) { */ case 18:
					$s = -1; return;
				/* } */ case 19:
			/* } */ case 17:
			if (!(a > 0)) { _v = false; $s = 23; continue s; }
			_r$2 = data.Less(a - 1 >> 0, pivot); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 23:
			/* */ if (_v) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_v) { */ case 21:
				_r$3 = partitionEqual(data, a, b, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				mid = _r$3;
				a = mid;
				/* continue; */ $s = 1; continue;
			/* } */ case 22:
			_r$4 = partition(data, a, b, pivot); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			mid$1 = _tuple$1[0];
			alreadyPartitioned = _tuple$1[1];
			wasPartitioned = alreadyPartitioned;
			_tmp = mid$1 - a >> 0;
			_tmp$1 = b - mid$1 >> 0;
			leftLen = _tmp;
			rightLen = _tmp$1;
			balanceThreshold = (_q = length / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* */ if (leftLen < rightLen) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (leftLen < rightLen) { */ case 27:
				wasBalanced = leftLen >= balanceThreshold;
				$r = pdqsort(data, a, mid$1, limit); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mid$1 + 1 >> 0;
				$s = 29; continue;
			/* } else { */ case 28:
				wasBalanced = rightLen >= balanceThreshold;
				$r = pdqsort(data, mid$1 + 1 >> 0, b, limit); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mid$1;
			/* } */ case 29:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pdqsort, $c: true, $r, _q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s};return $f;
	};
	partition = function(data, a, b, pivot) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		alreadyPartitioned = false;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			if (!(i <= j)) { _v = false; $s = 4; continue s; }
			_r = data.Less(i, a); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 4:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 3; continue; }
			i = i + (1) >> 0;
		$s = 2; continue;
		case 3:
		/* while (true) { */ case 6:
			if (!(i <= j)) { _v$1 = false; $s = 8; continue s; }
			_r$1 = data.Less(j, a); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v$1 = !_r$1; case 8:
			/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 7; continue; }
			j = j - (1) >> 0;
		$s = 6; continue;
		case 7:
		/* */ if (i > j) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (i > j) { */ case 10:
			$r = data.Swap(j, a); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = j;
			_tmp$3 = true;
			newpivot = _tmp$2;
			alreadyPartitioned = _tmp$3;
			$s = -1; return [newpivot, alreadyPartitioned];
		/* } */ case 11:
		$r = data.Swap(i, j); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = i + (1) >> 0;
		j = j - (1) >> 0;
		/* while (true) { */ case 14:
			/* while (true) { */ case 16:
				if (!(i <= j)) { _v$2 = false; $s = 18; continue s; }
				_r$2 = data.Less(i, a); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 18:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 17; continue; }
				i = i + (1) >> 0;
			$s = 16; continue;
			case 17:
			/* while (true) { */ case 20:
				if (!(i <= j)) { _v$3 = false; $s = 22; continue s; }
				_r$3 = data.Less(j, a); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v$3 = !_r$3; case 22:
				/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 21; continue; }
				j = j - (1) >> 0;
			$s = 20; continue;
			case 21:
			if (i > j) {
				/* break; */ $s = 15; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 14; continue;
		case 15:
		$r = data.Swap(j, a); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = j;
		_tmp$5 = false;
		newpivot = _tmp$4;
		alreadyPartitioned = _tmp$5;
		$s = -1; return [newpivot, alreadyPartitioned];
		/* */ } return; } var $f = {$blk: partition, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partitionEqual = function(data, a, b, pivot) {
		var {_r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			/* while (true) { */ case 4:
				if (!(i <= j)) { _v = false; $s = 6; continue s; }
				_r = data.Less(a, i); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 6:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 5; continue; }
				i = i + (1) >> 0;
			$s = 4; continue;
			case 5:
			/* while (true) { */ case 8:
				if (!(i <= j)) { _v$1 = false; $s = 10; continue s; }
				_r$1 = data.Less(a, j); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 10:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 9; continue; }
				j = j - (1) >> 0;
			$s = 8; continue;
			case 9:
			if (i > j) {
				/* break; */ $s = 3; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 2; continue;
		case 3:
		newpivot = i;
		$s = -1; return newpivot;
		/* */ } return; } var $f = {$blk: partitionEqual, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partialInsertionSort = function(data, a, b) {
		var {_r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < 5)) { break; } */ if(!(j < 5)) { $s = 2; continue; }
			/* while (true) { */ case 3:
				if (!(i < b)) { _v = false; $s = 5; continue s; }
				_r = data.Less(i, i - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
			if (i === b) {
				$s = -1; return true;
			}
			if ((b - a >> 0) < 50) {
				$s = -1; return false;
			}
			$r = data.Swap(i, i - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((i - a >> 0) >= 2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((i - a >> 0) >= 2) { */ case 8:
				j$1 = i - 1 >> 0;
				/* while (true) { */ case 10:
					/* if (!(j$1 >= 1)) { break; } */ if(!(j$1 >= 1)) { $s = 11; continue; }
					_r$1 = data.Less(j$1, j$1 - 1 >> 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!_r$1) { */ case 12:
						/* break; */ $s = 11; continue;
					/* } */ case 13:
					$r = data.Swap(j$1, j$1 - 1 >> 0); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$1 = j$1 - (1) >> 0;
				$s = 10; continue;
				case 11:
			/* } */ case 9:
			/* */ if ((b - i >> 0) >= 2) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ((b - i >> 0) >= 2) { */ case 16:
				j$2 = i + 1 >> 0;
				/* while (true) { */ case 18:
					/* if (!(j$2 < b)) { break; } */ if(!(j$2 < b)) { $s = 19; continue; }
					_r$2 = data.Less(j$2, j$2 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$2) { */ case 20:
						/* break; */ $s = 19; continue;
					/* } */ case 21:
					$r = data.Swap(j$2, j$2 - 1 >> 0); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$2 = j$2 + (1) >> 0;
				$s = 18; continue;
				case 19:
			/* } */ case 17:
			j = j + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: partialInsertionSort, $c: true, $r, _r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s};return $f;
	};
	breakPatterns = function(data, a, b) {
		var {_q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		length = b - a >> 0;
		/* */ if (length >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (length >= 8) { */ case 1:
			random = (new xorshift(0, length));
			modulus = nextPowerOfTwo(length);
			idx = (a + ($imul(((_q = length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { break; } */ if(!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { $s = 4; continue; }
				other = (((((((random$24ptr || (random$24ptr = new ptrType(function() { return random; }, function($v) { random = $v; }))).Next().$low >>> 0)) & ((modulus - 1 >>> 0))) >>> 0) >> 0));
				if (other >= length) {
					other = other - (length) >> 0;
				}
				$r = data.Swap(idx, a + other >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				idx = idx + (1) >> 0;
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: breakPatterns, $c: true, $r, _q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s};return $f;
	};
	choosePivot = function(data, a, b) {
		var {_1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		swaps = [swaps];
		pivot = 0;
		hint = 0;
		l = b - a >> 0;
		swaps[0] = 0;
		i = a + ($imul((_q = l / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 1)) >> 0;
		j = a + ($imul((_q$1 = l / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2)) >> 0;
		k = a + ($imul((_q$2 = l / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), 3)) >> 0;
		/* */ if (l >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l >= 8) { */ case 1:
			/* */ if (l >= 50) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (l >= 50) { */ case 3:
				_r = medianAdjacent(data, i, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				i = _r;
				_r$1 = medianAdjacent(data, j, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				j = _r$1;
				_r$2 = medianAdjacent(data, k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				k = _r$2;
			/* } */ case 4:
			_r$3 = median(data, i, j, k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			j = _r$3;
		/* } */ case 2:
		_1 = swaps[0];
		if (_1 === (0)) {
			_tmp = j;
			_tmp$1 = 1;
			pivot = _tmp;
			hint = _tmp$1;
			$s = -1; return [pivot, hint];
		} else if (_1 === (12)) {
			_tmp$2 = j;
			_tmp$3 = 2;
			pivot = _tmp$2;
			hint = _tmp$3;
			$s = -1; return [pivot, hint];
		} else {
			_tmp$4 = j;
			_tmp$5 = 0;
			pivot = _tmp$4;
			hint = _tmp$5;
			$s = -1; return [pivot, hint];
		}
		$s = -1; return [pivot, hint];
		/* */ } return; } var $f = {$blk: choosePivot, $c: true, $r, _1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s};return $f;
	};
	order2 = function(data, a, b, swaps) {
		var {_r, a, b, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = data.Less(b, a); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			swaps.$set(swaps.$get() + (1) >> 0);
			$s = -1; return [b, a];
		/* } */ case 2:
		$s = -1; return [a, b];
		/* */ } return; } var $f = {$blk: order2, $c: true, $r, _r, a, b, data, swaps, $s};return $f;
	};
	median = function(data, a, b, c, swaps) {
		var {_r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, c, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = order2(data, a, b, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[0];
		b = _tuple[1];
		_r$1 = order2(data, b, c, swaps); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		b = _tuple$1[0];
		c = _tuple$1[1];
		_r$2 = order2(data, a, b, swaps); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		a = _tuple$2[0];
		b = _tuple$2[1];
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: median, $c: true, $r, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s};return $f;
	};
	medianAdjacent = function(data, a, swaps) {
		var {$24r, _r, a, data, swaps, $s, $r, $c} = $restore(this, {data, a, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = median(data, a - 1 >> 0, a, a + 1 >> 0, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: medianAdjacent, $c: true, $r, $24r, _r, a, data, swaps, $s};return $f;
	};
	reverseRange = function(data, a, b) {
		var {a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a;
		j = b - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			$r = data.Swap(i, j); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: reverseRange, $c: true, $r, a, b, data, i, j, $s};return $f;
	};
	swapRange = function(data, a, b, n) {
		var {a, b, data, i, n, $s, $r, $c} = $restore(this, {data, a, b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: swapRange, $c: true, $r, a, b, data, i, n, $s};return $f;
	};
	stable = function(data, n) {
		var {_tmp, _tmp$1, _tmp$2, _tmp$3, a, b, blockSize, data, m, n, $s, $r, $c} = $restore(this, {data, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		blockSize = 20;
		_tmp = 0;
		_tmp$1 = blockSize;
		a = _tmp;
		b = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 2; continue; }
			$r = insertionSort(data, a, b); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			a = b;
			b = b + (blockSize) >> 0;
		$s = 1; continue;
		case 2:
		$r = insertionSort(data, a, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 5:
			/* if (!(blockSize < n)) { break; } */ if(!(blockSize < n)) { $s = 6; continue; }
			_tmp$2 = 0;
			_tmp$3 = $imul(2, blockSize);
			a = _tmp$2;
			b = _tmp$3;
			/* while (true) { */ case 7:
				/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 8; continue; }
				$r = symMerge(data, a, a + blockSize >> 0, b); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = b;
				b = b + (($imul(2, blockSize))) >> 0;
			$s = 7; continue;
			case 8:
			m = a + blockSize >> 0;
			/* */ if (m < n) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (m < n) { */ case 10:
				$r = symMerge(data, a, m, n); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			blockSize = $imul(blockSize, (2));
		$s = 5; continue;
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: stable, $c: true, $r, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, blockSize, data, m, n, $s};return $f;
	};
	symMerge = function(data, a, m, b) {
		var {_r, _r$1, _r$2, _tmp, _tmp$1, a, b, c, data, end, h, h$1, i, i$1, j, j$1, k, k$1, m, mid, n, p, r, start, $s, $r, $c} = $restore(this, {data, a, m, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ((m - a >> 0) === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((m - a >> 0) === 1) { */ case 1:
			i = m;
			j = b;
			/* while (true) { */ case 3:
				/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 4; continue; }
				h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r = data.Less(h, a); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r) { */ case 5:
					i = h + 1 >> 0;
					$s = 7; continue;
				/* } else { */ case 6:
					j = h;
				/* } */ case 7:
			$s = 3; continue;
			case 4:
			k = a;
			/* while (true) { */ case 9:
				/* if (!(k < (i - 1 >> 0))) { break; } */ if(!(k < (i - 1 >> 0))) { $s = 10; continue; }
				$r = data.Swap(k, k + 1 >> 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k = k + (1) >> 0;
			$s = 9; continue;
			case 10:
			$s = -1; return;
		/* } */ case 2:
		/* */ if ((b - m >> 0) === 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - m >> 0) === 1) { */ case 12:
			i$1 = a;
			j$1 = m;
			/* while (true) { */ case 14:
				/* if (!(i$1 < j$1)) { break; } */ if(!(i$1 < j$1)) { $s = 15; continue; }
				h$1 = ((((((i$1 + j$1 >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r$1 = data.Less(m, h$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!_r$1) { */ case 16:
					i$1 = h$1 + 1 >> 0;
					$s = 18; continue;
				/* } else { */ case 17:
					j$1 = h$1;
				/* } */ case 18:
			$s = 14; continue;
			case 15:
			k$1 = m;
			/* while (true) { */ case 20:
				/* if (!(k$1 > i$1)) { break; } */ if(!(k$1 > i$1)) { $s = 21; continue; }
				$r = data.Swap(k$1, k$1 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k$1 = k$1 - (1) >> 0;
			$s = 20; continue;
			case 21:
			$s = -1; return;
		/* } */ case 13:
		mid = ((((((a + b >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		n = mid + m >> 0;
		_tmp = 0;
		_tmp$1 = 0;
		start = _tmp;
		r = _tmp$1;
		if (m > mid) {
			start = n - b >> 0;
			r = mid;
		} else {
			start = a;
			r = m;
		}
		p = n - 1 >> 0;
		/* while (true) { */ case 23:
			/* if (!(start < r)) { break; } */ if(!(start < r)) { $s = 24; continue; }
			c = ((((((start + r >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r$2 = data.Less(p - c >> 0, c); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!_r$2) { */ case 25:
				start = c + 1 >> 0;
				$s = 27; continue;
			/* } else { */ case 26:
				r = c;
			/* } */ case 27:
		$s = 23; continue;
		case 24:
		end = n - start >> 0;
		/* */ if (start < m && m < end) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (start < m && m < end) { */ case 29:
			$r = rotate(data, start, m, end); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 30:
		/* */ if (a < start && start < mid) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (a < start && start < mid) { */ case 32:
			$r = symMerge(data, a, start, mid); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 33:
		/* */ if (mid < end && end < b) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (mid < end && end < b) { */ case 35:
			$r = symMerge(data, mid, end, b); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: symMerge, $c: true, $r, _r, _r$1, _r$2, _tmp, _tmp$1, a, b, c, data, end, h, h$1, i, i$1, j, j$1, k, k$1, m, mid, n, p, r, start, $s};return $f;
	};
	rotate = function(data, a, m, b) {
		var {a, b, data, i, j, m, $s, $r, $c} = $restore(this, {data, a, m, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = m - a >> 0;
		j = b - m >> 0;
		/* while (true) { */ case 1:
			/* if (!(!((i === j)))) { break; } */ if(!(!((i === j)))) { $s = 2; continue; }
			/* */ if (i > j) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > j) { */ case 3:
				$r = swapRange(data, m - i >> 0, m, j); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (j) >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = swapRange(data, m - i >> 0, (m + j >> 0) - i >> 0, i); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (i) >> 0;
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$r = swapRange(data, m - i >> 0, m, i); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rotate, $c: true, $r, a, b, data, i, j, m, $s};return $f;
	};
	insertionSort_func = function(data, a, b) {
		var {_r, _v, a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			$s = 3; continue;
			case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: insertionSort_func, $c: true, $r, _r, _v, a, b, data, i, j, $s};return $f;
	};
	siftDown_func = function(data, lo, hi, first) {
		var {_r, _r$1, _v, child, data, first, hi, lo, root, $s, $r, $c} = $restore(this, {data, lo, hi, first});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: siftDown_func, $c: true, $r, _r, _r$1, _v, child, data, first, hi, lo, root, $s};return $f;
	};
	heapSort_func = function(data, a, b) {
		var {_q, a, b, data, first, hi, i, i$1, lo, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown_func($clone(data, lessSwap), i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		$s = 1; continue;
		case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown_func($clone(data, lessSwap), lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		$s = 4; continue;
		case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: heapSort_func, $c: true, $r, _q, a, b, data, first, hi, i, i$1, lo, $s};return $f;
	};
	pdqsort_func = function(data, a, b, limit) {
		var {_q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s, $r, $c} = $restore(this, {data, a, b, limit});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		wasBalanced = true;
		wasPartitioned = true;
		/* while (true) { */ case 1:
			length = b - a >> 0;
			/* */ if (length <= 12) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (length <= 12) { */ case 3:
				$r = insertionSort_func($clone(data, lessSwap), a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			/* */ if (limit === 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (limit === 0) { */ case 6:
				$r = heapSort_func($clone(data, lessSwap), a, b); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 7:
			/* */ if (!wasBalanced) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!wasBalanced) { */ case 9:
				$r = breakPatterns_func($clone(data, lessSwap), a, b); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				limit = limit - (1) >> 0;
			/* } */ case 10:
			_r = choosePivot_func($clone(data, lessSwap), a, b); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			pivot = _tuple[0];
			hint = _tuple[1];
			/* */ if (hint === 2) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (hint === 2) { */ case 13:
				$r = reverseRange_func($clone(data, lessSwap), a, b); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				pivot = ((b - 1 >> 0)) - ((pivot - a >> 0)) >> 0;
				hint = 1;
			/* } */ case 14:
			/* */ if (wasBalanced && wasPartitioned && (hint === 1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (wasBalanced && wasPartitioned && (hint === 1)) { */ case 16:
				_r$1 = partialInsertionSort_func($clone(data, lessSwap), a, b); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_r$1) { */ case 18:
					$s = -1; return;
				/* } */ case 19:
			/* } */ case 17:
			if (!(a > 0)) { _v = false; $s = 23; continue s; }
			_r$2 = data.Less(a - 1 >> 0, pivot); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 23:
			/* */ if (_v) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_v) { */ case 21:
				_r$3 = partitionEqual_func($clone(data, lessSwap), a, b, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				mid = _r$3;
				a = mid;
				/* continue; */ $s = 1; continue;
			/* } */ case 22:
			_r$4 = partition_func($clone(data, lessSwap), a, b, pivot); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			mid$1 = _tuple$1[0];
			alreadyPartitioned = _tuple$1[1];
			wasPartitioned = alreadyPartitioned;
			_tmp = mid$1 - a >> 0;
			_tmp$1 = b - mid$1 >> 0;
			leftLen = _tmp;
			rightLen = _tmp$1;
			balanceThreshold = (_q = length / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* */ if (leftLen < rightLen) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (leftLen < rightLen) { */ case 27:
				wasBalanced = leftLen >= balanceThreshold;
				$r = pdqsort_func($clone(data, lessSwap), a, mid$1, limit); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mid$1 + 1 >> 0;
				$s = 29; continue;
			/* } else { */ case 28:
				wasBalanced = rightLen >= balanceThreshold;
				$r = pdqsort_func($clone(data, lessSwap), mid$1 + 1 >> 0, b, limit); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mid$1;
			/* } */ case 29:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pdqsort_func, $c: true, $r, _q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s};return $f;
	};
	partition_func = function(data, a, b, pivot) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		alreadyPartitioned = false;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			if (!(i <= j)) { _v = false; $s = 4; continue s; }
			_r = data.Less(i, a); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 4:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 3; continue; }
			i = i + (1) >> 0;
		$s = 2; continue;
		case 3:
		/* while (true) { */ case 6:
			if (!(i <= j)) { _v$1 = false; $s = 8; continue s; }
			_r$1 = data.Less(j, a); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v$1 = !_r$1; case 8:
			/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 7; continue; }
			j = j - (1) >> 0;
		$s = 6; continue;
		case 7:
		/* */ if (i > j) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (i > j) { */ case 10:
			$r = data.Swap(j, a); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = j;
			_tmp$3 = true;
			newpivot = _tmp$2;
			alreadyPartitioned = _tmp$3;
			$s = -1; return [newpivot, alreadyPartitioned];
		/* } */ case 11:
		$r = data.Swap(i, j); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = i + (1) >> 0;
		j = j - (1) >> 0;
		/* while (true) { */ case 14:
			/* while (true) { */ case 16:
				if (!(i <= j)) { _v$2 = false; $s = 18; continue s; }
				_r$2 = data.Less(i, a); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 18:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 17; continue; }
				i = i + (1) >> 0;
			$s = 16; continue;
			case 17:
			/* while (true) { */ case 20:
				if (!(i <= j)) { _v$3 = false; $s = 22; continue s; }
				_r$3 = data.Less(j, a); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v$3 = !_r$3; case 22:
				/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 21; continue; }
				j = j - (1) >> 0;
			$s = 20; continue;
			case 21:
			if (i > j) {
				/* break; */ $s = 15; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 14; continue;
		case 15:
		$r = data.Swap(j, a); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = j;
		_tmp$5 = false;
		newpivot = _tmp$4;
		alreadyPartitioned = _tmp$5;
		$s = -1; return [newpivot, alreadyPartitioned];
		/* */ } return; } var $f = {$blk: partition_func, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partitionEqual_func = function(data, a, b, pivot) {
		var {_r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			/* while (true) { */ case 4:
				if (!(i <= j)) { _v = false; $s = 6; continue s; }
				_r = data.Less(a, i); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 6:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 5; continue; }
				i = i + (1) >> 0;
			$s = 4; continue;
			case 5:
			/* while (true) { */ case 8:
				if (!(i <= j)) { _v$1 = false; $s = 10; continue s; }
				_r$1 = data.Less(a, j); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 10:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 9; continue; }
				j = j - (1) >> 0;
			$s = 8; continue;
			case 9:
			if (i > j) {
				/* break; */ $s = 3; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 2; continue;
		case 3:
		newpivot = i;
		$s = -1; return newpivot;
		/* */ } return; } var $f = {$blk: partitionEqual_func, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partialInsertionSort_func = function(data, a, b) {
		var {_r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < 5)) { break; } */ if(!(j < 5)) { $s = 2; continue; }
			/* while (true) { */ case 3:
				if (!(i < b)) { _v = false; $s = 5; continue s; }
				_r = data.Less(i, i - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
			if (i === b) {
				$s = -1; return true;
			}
			if ((b - a >> 0) < 50) {
				$s = -1; return false;
			}
			$r = data.Swap(i, i - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((i - a >> 0) >= 2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((i - a >> 0) >= 2) { */ case 8:
				j$1 = i - 1 >> 0;
				/* while (true) { */ case 10:
					/* if (!(j$1 >= 1)) { break; } */ if(!(j$1 >= 1)) { $s = 11; continue; }
					_r$1 = data.Less(j$1, j$1 - 1 >> 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!_r$1) { */ case 12:
						/* break; */ $s = 11; continue;
					/* } */ case 13:
					$r = data.Swap(j$1, j$1 - 1 >> 0); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$1 = j$1 - (1) >> 0;
				$s = 10; continue;
				case 11:
			/* } */ case 9:
			/* */ if ((b - i >> 0) >= 2) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ((b - i >> 0) >= 2) { */ case 16:
				j$2 = i + 1 >> 0;
				/* while (true) { */ case 18:
					/* if (!(j$2 < b)) { break; } */ if(!(j$2 < b)) { $s = 19; continue; }
					_r$2 = data.Less(j$2, j$2 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$2) { */ case 20:
						/* break; */ $s = 19; continue;
					/* } */ case 21:
					$r = data.Swap(j$2, j$2 - 1 >> 0); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$2 = j$2 + (1) >> 0;
				$s = 18; continue;
				case 19:
			/* } */ case 17:
			j = j + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: partialInsertionSort_func, $c: true, $r, _r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s};return $f;
	};
	breakPatterns_func = function(data, a, b) {
		var {_q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		length = b - a >> 0;
		/* */ if (length >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (length >= 8) { */ case 1:
			random = (new xorshift(0, length));
			modulus = nextPowerOfTwo(length);
			idx = (a + ($imul(((_q = length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { break; } */ if(!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { $s = 4; continue; }
				other = (((((((random$24ptr || (random$24ptr = new ptrType(function() { return random; }, function($v) { random = $v; }))).Next().$low >>> 0)) & ((modulus - 1 >>> 0))) >>> 0) >> 0));
				if (other >= length) {
					other = other - (length) >> 0;
				}
				$r = data.Swap(idx, a + other >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				idx = idx + (1) >> 0;
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: breakPatterns_func, $c: true, $r, _q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s};return $f;
	};
	choosePivot_func = function(data, a, b) {
		var {_1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		swaps = [swaps];
		pivot = 0;
		hint = 0;
		l = b - a >> 0;
		swaps[0] = 0;
		i = a + ($imul((_q = l / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 1)) >> 0;
		j = a + ($imul((_q$1 = l / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2)) >> 0;
		k = a + ($imul((_q$2 = l / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), 3)) >> 0;
		/* */ if (l >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l >= 8) { */ case 1:
			/* */ if (l >= 50) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (l >= 50) { */ case 3:
				_r = medianAdjacent_func($clone(data, lessSwap), i, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				i = _r;
				_r$1 = medianAdjacent_func($clone(data, lessSwap), j, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				j = _r$1;
				_r$2 = medianAdjacent_func($clone(data, lessSwap), k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				k = _r$2;
			/* } */ case 4:
			_r$3 = median_func($clone(data, lessSwap), i, j, k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			j = _r$3;
		/* } */ case 2:
		_1 = swaps[0];
		if (_1 === (0)) {
			_tmp = j;
			_tmp$1 = 1;
			pivot = _tmp;
			hint = _tmp$1;
			$s = -1; return [pivot, hint];
		} else if (_1 === (12)) {
			_tmp$2 = j;
			_tmp$3 = 2;
			pivot = _tmp$2;
			hint = _tmp$3;
			$s = -1; return [pivot, hint];
		} else {
			_tmp$4 = j;
			_tmp$5 = 0;
			pivot = _tmp$4;
			hint = _tmp$5;
			$s = -1; return [pivot, hint];
		}
		$s = -1; return [pivot, hint];
		/* */ } return; } var $f = {$blk: choosePivot_func, $c: true, $r, _1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s};return $f;
	};
	order2_func = function(data, a, b, swaps) {
		var {_r, a, b, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = data.Less(b, a); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			swaps.$set(swaps.$get() + (1) >> 0);
			$s = -1; return [b, a];
		/* } */ case 2:
		$s = -1; return [a, b];
		/* */ } return; } var $f = {$blk: order2_func, $c: true, $r, _r, a, b, data, swaps, $s};return $f;
	};
	median_func = function(data, a, b, c, swaps) {
		var {_r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, c, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = order2_func($clone(data, lessSwap), a, b, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[0];
		b = _tuple[1];
		_r$1 = order2_func($clone(data, lessSwap), b, c, swaps); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		b = _tuple$1[0];
		c = _tuple$1[1];
		_r$2 = order2_func($clone(data, lessSwap), a, b, swaps); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		a = _tuple$2[0];
		b = _tuple$2[1];
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: median_func, $c: true, $r, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s};return $f;
	};
	medianAdjacent_func = function(data, a, swaps) {
		var {$24r, _r, a, data, swaps, $s, $r, $c} = $restore(this, {data, a, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = median_func($clone(data, lessSwap), a - 1 >> 0, a, a + 1 >> 0, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: medianAdjacent_func, $c: true, $r, $24r, _r, a, data, swaps, $s};return $f;
	};
	reverseRange_func = function(data, a, b) {
		var {a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a;
		j = b - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			$r = data.Swap(i, j); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: reverseRange_func, $c: true, $r, a, b, data, i, j, $s};return $f;
	};
	Sort = function(data) {
		var {_r, data, limit, n, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		if (n <= 1) {
			$s = -1; return;
		}
		limit = bits.Len(((n >>> 0)));
		$r = pdqsort(data, 0, n, limit); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Sort, $c: true, $r, _r, data, limit, n, $s};return $f;
	};
	$pkg.Sort = Sort;
	$ptrType(xorshift).prototype.Next = function() {
		var r, x, x$1, x$2, x$3, x$4, x$5, x$6;
		r = this;
		r.$set((x = r.$get(), x$1 = $shiftLeft64(r.$get(), 13), new xorshift(x.$high ^ x$1.$high, (x.$low ^ x$1.$low) >>> 0)));
		r.$set((x$2 = r.$get(), x$3 = $shiftRightUint64(r.$get(), 17), new xorshift(x$2.$high ^ x$3.$high, (x$2.$low ^ x$3.$low) >>> 0)));
		r.$set((x$4 = r.$get(), x$5 = $shiftLeft64(r.$get(), 5), new xorshift(x$4.$high ^ x$5.$high, (x$4.$low ^ x$5.$low) >>> 0)));
		return ((x$6 = r.$get(), new $Uint64(x$6.$high, x$6.$low)));
	};
	nextPowerOfTwo = function(length) {
		var length, shift, y;
		shift = ((bits.Len(((length >>> 0))) >>> 0));
		return (((y = shift, y < 32 ? (1 << y) : 0) >>> 0));
	};
	reverse.ptr.prototype.Less = function(i, j) {
		var {$24r, _r, i, j, r, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Interface.Less(j, i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: reverse.ptr.prototype.Less, $c: true, $r, $24r, _r, i, j, r, $s};return $f;
	};
	reverse.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	Reverse = function(data) {
		var data;
		return new reverse.ptr(data);
	};
	$pkg.Reverse = Reverse;
	StringSlice.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var i, j, x;
		x = this;
		return ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) < ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var {x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		$r = Sort(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: StringSlice.prototype.Sort, $c: true, $r, x, $s};return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = function(x) {
		var {x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = Sort(($convertSliceType(x, StringSlice))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Strings, $c: true, $r, x, $s};return $f;
	};
	$pkg.Strings = Strings;
	Stable = function(data) {
		var {_arg, _arg$1, _r, data, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = data;
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = stable(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Stable, $c: true, $r, _arg, _arg$1, _r, data, $s};return $f;
	};
	$pkg.Stable = Stable;
	Slice = function(x, less) {
		var {_r, _r$1, length, less, limit, rv, swap, x, $s, $r, $c} = $restore(this, {x, less});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = reflectValueOf(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rv = $clone(_r, reflectlite.Value);
		_r$1 = reflectSwapper(x); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		swap = _r$1;
		length = $clone(rv, reflectlite.Value).Len();
		limit = bits.Len(((length >>> 0)));
		$r = pdqsort_func($clone(new lessSwap.ptr(less, swap), lessSwap), 0, length, limit); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Slice, $c: true, $r, _r, _r$1, length, less, limit, rv, swap, x, $s};return $f;
	};
	$pkg.Slice = Slice;
	Search = function(n, f) {
		var {_r, _tmp, _tmp$1, f, h, i, j, n, $s, $r, $c} = $restore(this, {n, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$s = -1; return i;
		/* */ } return; } var $f = {$blk: Search, $c: true, $r, _r, _tmp, _tmp$1, f, h, i, j, n, $s};return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var {$24r, _r, a, x, $s, $r, $c} = $restore(this, {a, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SearchStrings, $c: true, $r, $24r, _r, a, x, $s};return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var {$24r, _r, p, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($convertSliceType(p, sliceType$2), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: StringSlice.prototype.Search, $c: true, $r, $24r, _r, p, x, $s};return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	ptrType.methods = [{prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Uint64], false)}];
	reverse.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	StringSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}];
	Interface.init([{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}]);
	lessSwap.init("", [{prop: "Less", name: "Less", embedded: false, exported: true, typ: funcType, tag: ""}, {prop: "Swap", name: "Swap", embedded: false, exported: true, typ: funcType$1, tag: ""}]);
	reverse.init("", [{prop: "Interface", name: "Interface", embedded: true, exported: true, typ: Interface, tag: ""}]);
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		reflectValueOf = reflectlite.ValueOf;
		reflectSwapper = reflectlite.Swapper;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/fmtsort"] = (function() {
	var $pkg = {}, $init, reflect, sort, SortedMap, ptrType, sliceType, Sort, compare, nilCompare, floatCompare, isNaN;
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	SortedMap = $pkg.SortedMap = $newType(0, $kindStruct, "fmtsort.SortedMap", true, "internal/fmtsort", true, function(Key_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = sliceType.nil;
			this.Value = sliceType.nil;
			return;
		}
		this.Key = Key_;
		this.Value = Value_;
	});
	ptrType = $ptrType(SortedMap);
	sliceType = $sliceType(reflect.Value);
	SortedMap.ptr.prototype.Len = function() {
		var o;
		o = this;
		return o.Key.$length;
	};
	SortedMap.prototype.Len = function() { return this.$val.Len(); };
	SortedMap.ptr.prototype.Less = function(i, j) {
		var {$24r, _r, i, j, o, x, x$1, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		o = this;
		_r = compare($clone((x = o.Key, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), reflect.Value), $clone((x$1 = o.Key, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])), reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r < 0;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SortedMap.ptr.prototype.Less, $c: true, $r, $24r, _r, i, j, o, x, x$1, $s};return $f;
	};
	SortedMap.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	SortedMap.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, o, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		o = this;
		_tmp = (x = o.Key, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
		_tmp$1 = (x$1 = o.Key, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
		(x$2 = o.Key, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = _tmp));
		(x$3 = o.Key, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j] = _tmp$1));
		_tmp$2 = (x$4 = o.Value, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j]));
		_tmp$3 = (x$5 = o.Value, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
		(x$6 = o.Value, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = _tmp$2));
		(x$7 = o.Value, ((j < 0 || j >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + j] = _tmp$3));
	};
	SortedMap.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	Sort = function(mapValue) {
		var {_r, _r$1, _r$2, _r$3, _r$4, iter, key, mapValue, n, sorted, value, $s, $r, $c} = $restore(this, {mapValue});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(mapValue, reflect.Value).Type().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$s = -1; return ptrType.nil;
		/* } */ case 2:
		_r$1 = $clone(mapValue, reflect.Value).Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n = _r$1;
		key = $makeSlice(sliceType, 0, n);
		value = $makeSlice(sliceType, 0, n);
		iter = $clone(mapValue, reflect.Value).MapRange();
		/* while (true) { */ case 5:
			_r$2 = iter.Next(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(_r$2)) { break; } */ if(!(_r$2)) { $s = 6; continue; }
			_r$3 = iter.Key(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			key = $append(key, _r$3);
			_r$4 = iter.Value(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = $append(value, _r$4);
		$s = 5; continue;
		case 6:
		sorted = new SortedMap.ptr(key, value);
		$r = sort.Stable(sorted); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return sorted;
		/* */ } return; } var $f = {$blk: Sort, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, iter, key, mapValue, n, sorted, value, $s};return $f;
	};
	$pkg.Sort = Sort;
	compare = function(aVal, bVal) {
		var {$24r, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, a$1, a$2, a$3, a$4, a$5, aType, aVal, ap, b, b$1, b$2, b$3, b$4, b$5, bType, bVal, bp, c, c$1, c$2, c$3, c$4, c$5, i, i$1, ok, ok$1, $s, $r, $c} = $restore(this, {aVal, bVal});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = $clone(aVal, reflect.Value).Type();
		_tmp$1 = $clone(bVal, reflect.Value).Type();
		aType = _tmp;
		bType = _tmp$1;
		if (!($interfaceIsEqual(aType, bType))) {
			$s = -1; return -1;
		}
			_1 = $clone(aVal, reflect.Value).Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (1)) { $s = 7; continue; }
			/* */ if ((_1 === (22)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (18)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (20)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_tmp$2 = $clone(aVal, reflect.Value).Int();
				_tmp$3 = $clone(bVal, reflect.Value).Int();
				a = _tmp$2;
				b = _tmp$3;
				if ((a.$high < b.$high || (a.$high === b.$high && a.$low < b.$low))) {
					$s = -1; return -1;
				} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_tmp$4 = $clone(aVal, reflect.Value).Uint();
				_tmp$5 = $clone(bVal, reflect.Value).Uint();
				a$1 = _tmp$4;
				b$1 = _tmp$5;
				if ((a$1.$high < b$1.$high || (a$1.$high === b$1.$high && a$1.$low < b$1.$low))) {
					$s = -1; return -1;
				} else if ((a$1.$high > b$1.$high || (a$1.$high === b$1.$high && a$1.$low > b$1.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (24)) { */ case 4:
				_r = $clone(aVal, reflect.Value).String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$6 = _r;
				_r$1 = $clone(bVal, reflect.Value).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tmp$7 = _r$1;
				a$2 = _tmp$6;
				b$2 = _tmp$7;
				if (a$2 < b$2) {
					$s = -1; return -1;
				} else if (a$2 > b$2) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return floatCompare($clone(aVal, reflect.Value).Float(), $clone(bVal, reflect.Value).Float());
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				_tmp$8 = $clone(aVal, reflect.Value).Complex();
				_tmp$9 = $clone(bVal, reflect.Value).Complex();
				a$3 = _tmp$8;
				b$3 = _tmp$9;
				c = floatCompare(a$3.$real, b$3.$real);
				if (!((c === 0))) {
					$s = -1; return c;
				}
				$s = -1; return floatCompare(a$3.$imag, b$3.$imag);
			/* } else if (_1 === (1)) { */ case 7:
				_tmp$10 = $clone(aVal, reflect.Value).Bool();
				_tmp$11 = $clone(bVal, reflect.Value).Bool();
				a$4 = _tmp$10;
				b$4 = _tmp$11;
				if (a$4 === b$4) {
					$s = -1; return 0;
				} else if (a$4) {
					$s = -1; return 1;
				} else {
					$s = -1; return -1;
				}
				$s = 14; continue;
			/* } else if ((_1 === (22)) || (_1 === (26))) { */ case 8:
				_tmp$12 = $clone(aVal, reflect.Value).Pointer();
				_tmp$13 = $clone(bVal, reflect.Value).Pointer();
				a$5 = _tmp$12;
				b$5 = _tmp$13;
				if (a$5 < b$5) {
					$s = -1; return -1;
				} else if (a$5 > b$5) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (18)) { */ case 9:
				_tuple = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$1 = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return c$1;
				}
				_tmp$14 = $clone(aVal, reflect.Value).Pointer();
				_tmp$15 = $clone(bVal, reflect.Value).Pointer();
				ap = _tmp$14;
				bp = _tmp$15;
				if (ap < bp) {
					$s = -1; return -1;
				} else if (ap > bp) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (25)) { */ case 10:
				i = 0;
				/* while (true) { */ case 17:
					/* if (!(i < $clone(aVal, reflect.Value).NumField())) { break; } */ if(!(i < $clone(aVal, reflect.Value).NumField())) { $s = 18; continue; }
					_r$2 = $clone(aVal, reflect.Value).Field(i); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg = $clone(_r$2, reflect.Value);
					_r$3 = $clone(bVal, reflect.Value).Field(i); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = $clone(_r$3, reflect.Value);
					_r$4 = compare(_arg, _arg$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					c$2 = _r$4;
					if (!((c$2 === 0))) {
						$s = -1; return c$2;
					}
					i = i + (1) >> 0;
				$s = 17; continue;
				case 18:
				$s = -1; return 0;
			/* } else if (_1 === (17)) { */ case 11:
				i$1 = 0;
				/* while (true) { */ case 22:
					_r$5 = $clone(aVal, reflect.Value).Len(); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* if (!(i$1 < _r$5)) { break; } */ if(!(i$1 < _r$5)) { $s = 23; continue; }
					_r$6 = $clone(aVal, reflect.Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$2 = $clone(_r$6, reflect.Value);
					_r$7 = $clone(bVal, reflect.Value).Index(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_arg$3 = $clone(_r$7, reflect.Value);
					_r$8 = compare(_arg$2, _arg$3); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					c$3 = _r$8;
					if (!((c$3 === 0))) {
						$s = -1; return c$3;
					}
					i$1 = i$1 + (1) >> 0;
				$s = 22; continue;
				case 23:
				$s = -1; return 0;
			/* } else if (_1 === (20)) { */ case 12:
				_tuple$1 = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$4 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$s = -1; return c$4;
				}
				_r$9 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = $clone(_r$9, reflect.Value).Type(); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = reflect.ValueOf(_r$10); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$4 = $clone(_r$11, reflect.Value);
				_r$12 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = $clone(_r$12, reflect.Value).Type(); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = reflect.ValueOf(_r$13); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$5 = $clone(_r$14, reflect.Value);
				_r$15 = compare(_arg$4, _arg$5); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				c$5 = _r$15;
				if (!((c$5 === 0))) {
					$s = -1; return c$5;
				}
				_r$16 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$6 = $clone(_r$16, reflect.Value);
				_r$17 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_arg$7 = $clone(_r$17, reflect.Value);
				_r$18 = compare(_arg$6, _arg$7); /* */ $s = 37; case 37: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$24r = _r$18;
				$s = 38; case 38: return $24r;
			/* } else { */ case 13:
				_r$19 = aType.String(); /* */ $s = 39; case 39: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$panic(new $String("bad type in compare: " + _r$19));
			/* } */ case 14:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: compare, $c: true, $r, $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, a$1, a$2, a$3, a$4, a$5, aType, aVal, ap, b, b$1, b$2, b$3, b$4, b$5, bType, bVal, bp, c, c$1, c$2, c$3, c$4, c$5, i, i$1, ok, ok$1, $s};return $f;
	};
	nilCompare = function(aVal, bVal) {
		var aVal, bVal;
		if ($clone(aVal, reflect.Value).IsNil()) {
			if ($clone(bVal, reflect.Value).IsNil()) {
				return [0, true];
			}
			return [-1, true];
		}
		if ($clone(bVal, reflect.Value).IsNil()) {
			return [1, true];
		}
		return [0, false];
	};
	floatCompare = function(a, b) {
		var a, b;
		if (isNaN(a)) {
			return -1;
		} else if (isNaN(b)) {
			return 1;
		} else if (a < b) {
			return -1;
		} else if (a > b) {
			return 1;
		}
		return 0;
	};
	isNaN = function(a) {
		var a;
		return !((a === a));
	};
	ptrType.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	SortedMap.init("", [{prop: "Key", name: "Key", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/oserror"] = (function() {
	var $pkg = {}, $init, errors;
	errors = $packages["errors"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall/js"] = (function() {
	var $pkg = {}, $init, js, Type, Func, Error, Value, ValueError, sliceType, funcType, arrayType, sliceType$1, mapType, sliceType$2, ptrType, sliceType$3, ptrType$1, ptrType$2, typeNames, id, instanceOf, typeOf, Global, Null, Undefined, FuncOf, objectToValue, init, getValueType, ValueOf, convertArgs, convertJSError, CopyBytesToGo, CopyBytesToJS;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Type = $pkg.Type = $newType(4, $kindInt, "js.Type", true, "syscall/js", true, null);
	Func = $pkg.Func = $newType(0, $kindStruct, "js.Func", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "js.Value", true, "syscall/js", true, function(v_, inited_, _$2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			this.inited = false;
			this._$2 = arrayType.zero();
			return;
		}
		this.v = v_;
		this.inited = inited_;
		this._$2 = _$2_;
	});
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "js.ValueError", true, "syscall/js", true, function(Method_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Type = 0;
			return;
		}
		this.Method = Method_;
		this.Type = Type_;
	});
	sliceType = $sliceType($String);
	funcType = $funcType([], [], false);
	arrayType = $arrayType(funcType, 0);
	sliceType$1 = $sliceType(Value);
	mapType = $mapType($String, $emptyInterface);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType(js.Error);
	sliceType$3 = $sliceType($Uint8);
	ptrType$1 = $ptrType(js.Object);
	ptrType$2 = $ptrType(ValueError);
	Type.prototype.String = function() {
		var t;
		t = this.$val;
		if (((t >> 0)) < 0 || typeNames.$length <= ((t >> 0))) {
			$panic(new $String("bad type"));
		}
		return ((t < 0 || t >= typeNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeNames.$array[typeNames.$offset + t]);
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	Type.prototype.isObject = function() {
		var t;
		t = this.$val;
		return (t === 6) || (t === 7);
	};
	$ptrType(Type).prototype.isObject = function() { return new Type(this.$get()).isObject(); };
	Global = function() {
		return objectToValue($global);
	};
	$pkg.Global = Global;
	Null = function() {
		return objectToValue(null);
	};
	$pkg.Null = Null;
	Undefined = function() {
		return objectToValue(undefined);
	};
	$pkg.Undefined = Undefined;
	Func.ptr.prototype.Release = function() {
		var f;
		f = this;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) - 1 >> 0;
		Value.copy(f.Value, Null());
	};
	Func.prototype.Release = function() { return this.$val.Release(); };
	FuncOf = function(fn) {
		var fn;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) + 1 >> 0;
		return new Func.ptr($clone(objectToValue(js.MakeFunc((function $b(this$1, args) {
			var {$24r, _i, _r, _ref, a, args, i, this$1, vargs, $s, $r, $c} = $restore(this, {this$1, args});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			vargs = $makeSlice(sliceType$1, args.$length);
			_ref = args;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				Value.copy(((i < 0 || i >= vargs.$length) ? ($throwRuntimeError("index out of range"), undefined) : vargs.$array[vargs.$offset + i]), objectToValue(a));
				_i++;
			}
			_r = fn($clone(objectToValue(this$1), Value), vargs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _i, _r, _ref, a, args, i, this$1, vargs, $s};return $f;
		}))), Value));
	};
	$pkg.FuncOf = FuncOf;
	Error.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "JavaScript error: " + $clone($clone(e.Value, Value).Get("message"), Value).String();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	objectToValue = function(obj) {
		var obj;
		if (obj === undefined) {
			return new Value.ptr(null, false, arrayType.zero());
		}
		return new Value.ptr(obj, true, arrayType.zero());
	};
	init = function() {
		if (!($global === null)) {
			id = $id;
			instanceOf = $instanceOf;
			typeOf = $typeOf;
		}
	};
	getValueType = function(obj) {
		var _i, _ref, name, name2, obj, type2;
		if (obj === null) {
			return 1;
		}
		name = $internalize(typeOf(obj), $String);
		_ref = typeNames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			type2 = _i;
			name2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (name === name2) {
				return ((type2 >> 0));
			}
			_i++;
		}
		return 6;
	};
	ValueOf = function(x) {
		var _ref, x, x$1, x$2, x$3, x$4, x$5;
		_ref = x;
		if ($assertType(_ref, Value, true)[1]) {
			x$1 = $clone(_ref.$val, Value);
			return x$1;
		} else if ($assertType(_ref, Func, true)[1]) {
			x$2 = $clone(_ref.$val, Func);
			return x$2.Value;
		} else if (_ref === $ifaceNil) {
			x$3 = _ref;
			return Null();
		} else if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1] || $assertType(_ref, mapType, true)[1] || $assertType(_ref, sliceType$2, true)[1]) {
			x$4 = _ref;
			return objectToValue(id($externalize(x$4, $emptyInterface)));
		} else {
			x$5 = _ref;
			$panic(new $String("ValueOf: invalid value"));
		}
	};
	$pkg.ValueOf = ValueOf;
	Value.ptr.prototype.internal = function() {
		var v;
		v = this;
		if (!v.inited) {
			return undefined;
		}
		return v.v;
	};
	Value.prototype.internal = function() { return this.$val.internal(); };
	Value.ptr.prototype.Bool = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 2))) {
			$panic(new ValueError.ptr("Value.Bool", vType));
		}
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	convertArgs = function(args) {
		var _i, _ref, arg, args, newArgs, v;
		newArgs = new sliceType$2([]);
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			v = $clone(ValueOf(arg), Value);
			newArgs = $append(newArgs, new $jsObjectPtr($clone(v, Value).internal()));
			_i++;
		}
		return newArgs;
	};
	convertJSError = function() {
		var _tuple, err, jsErr, ok, x;
		err = $recover();
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return;
		}
		_tuple = $assertType(err, ptrType, true);
		jsErr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$panic((x = new Error.ptr($clone(objectToValue(jsErr.Object), Value)), new x.constructor.elem(x)));
		}
		$panic(err);
	};
	Value.ptr.prototype.Call = function(m, args) {
		var {$24r, args, m, obj, propType, v, vType, $s, $deferred, $r, $c} = $restore(this, {m, args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 6)) && !((vType === 7))) {
			$panic(new ValueError.ptr("Value.Call", vType));
		}
		propType = $clone($clone(v, Value).Get(m), Value).Type();
		if (!((propType === 7))) {
			$panic(new $String("js: Value.Call: property " + m + " is not a function, got " + new Type(propType).String()));
		}
		$deferred.push([convertJSError, []]);
		$24r = objectToValue((obj = $clone(v, Value).internal(), obj[$externalize(m, $String)].apply(obj, $externalize(convertArgs(args), sliceType$2))));
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(null, false, arrayType.zero()); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Value.ptr.prototype.Call, $c: true, $r, $24r, args, m, obj, propType, v, vType, $s, $deferred};return $f; } }
	};
	Value.prototype.Call = function(m, args) { return this.$val.Call(m, args); };
	Value.ptr.prototype.Float = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Float", vType));
		}
		return $parseFloat($clone(v, Value).internal());
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Get = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Get", vType));
		}
		return objectToValue($clone(v, Value).internal()[$externalize(p, $String)]);
	};
	Value.prototype.Get = function(p) { return this.$val.Get(p); };
	Value.ptr.prototype.Index = function(i) {
		var i, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Index", vType));
		}
		return objectToValue($clone(v, Value).internal()[i]);
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.Int = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Int", vType));
		}
		return $parseInt($clone(v, Value).internal()) >> 0;
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.InstanceOf = function(t) {
		var t, v;
		v = this;
		return !!(instanceOf($clone(v, Value).internal(), $clone(t, Value).internal()));
	};
	Value.prototype.InstanceOf = function(t) { return this.$val.InstanceOf(t); };
	Value.ptr.prototype.Invoke = function(args) {
		var args, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 7))) {
			$panic(new ValueError.ptr("Value.Invoke", vType));
		}
		return objectToValue($clone(v, Value).internal().apply(undefined, $externalize(convertArgs(args), sliceType$2)));
	};
	Value.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Value.ptr.prototype.JSValue = function() {
		var v;
		v = this;
		return v;
	};
	Value.prototype.JSValue = function() { return this.$val.JSValue(); };
	Value.ptr.prototype.Length = function() {
		var v;
		v = this;
		return $parseInt($clone(v, Value).internal().length);
	};
	Value.prototype.Length = function() { return this.$val.Length(); };
	Value.ptr.prototype.New = function(args) {
		var {$24r, args, v, $s, $deferred, $r, $c} = $restore(this, {args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		v = [v];
		v[0] = this;
		$deferred.push([(function(v) { return function() {
			var _tuple, err, jsErr, ok, vType, x;
			err = $recover();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				return;
			}
			vType = $clone(v[0], Value).Type();
			if (!((vType === 7))) {
				$panic(new ValueError.ptr("Value.New", vType));
			}
			_tuple = $assertType(err, ptrType, true);
			jsErr = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$panic((x = new Error.ptr($clone(objectToValue(jsErr.Object), Value)), new x.constructor.elem(x)));
			}
			$panic(err);
		}; })(v), []]);
		$24r = objectToValue(new ($global.Function.prototype.bind.apply($clone(v[0], Value).internal(), [undefined].concat($externalize(convertArgs(args), sliceType$2)))));
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(null, false, arrayType.zero()); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Value.ptr.prototype.New, $c: true, $r, $24r, args, v, $s, $deferred};return $f; } }
	};
	Value.prototype.New = function(args) { return this.$val.New(args); };
	Value.ptr.prototype.Set = function(p, x) {
		var p, v, vType, x, x$1;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Set", vType));
		}
		$clone(v, Value).internal()[$externalize(p, $String)] = $externalize((x$1 = convertArgs(new sliceType$2([x])), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
	};
	Value.prototype.Set = function(p, x) { return this.$val.Set(p, x); };
	Value.ptr.prototype.SetIndex = function(i, x) {
		var i, v, vType, x, x$1;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.SetIndex", vType));
		}
		$clone(v, Value).internal()[i] = $externalize((x$1 = convertArgs(new sliceType$2([x])), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
	};
	Value.prototype.SetIndex = function(i, x) { return this.$val.SetIndex(i, x); };
	Value.ptr.prototype.String = function() {
		var _1, v;
		v = this;
		_1 = $clone(v, Value).Type();
		if (_1 === (4)) {
			return $internalize($clone(v, Value).internal(), $String);
		} else if (_1 === (0)) {
			return "<undefined>";
		} else if (_1 === (1)) {
			return "<null>";
		} else if (_1 === (2)) {
			return "<boolean: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (3)) {
			return "<number: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (5)) {
			return "<symbol>";
		} else if (_1 === (6)) {
			return "<object>";
		} else if (_1 === (7)) {
			return "<function>";
		} else {
			$panic(new $String("bad type"));
		}
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.Truthy = function() {
		var v;
		v = this;
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Truthy = function() { return this.$val.Truthy(); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		return (getValueType($clone(v, Value).internal()));
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.IsNull = function() {
		var v;
		v = this;
		return $clone(v, Value).Type() === 1;
	};
	Value.prototype.IsNull = function() { return this.$val.IsNull(); };
	Value.ptr.prototype.IsUndefined = function() {
		var v;
		v = this;
		return !v.inited;
	};
	Value.prototype.IsUndefined = function() { return this.$val.IsUndefined(); };
	Value.ptr.prototype.IsNaN = function() {
		var v;
		v = this;
		return !!($global.isNaN($clone(v, Value).internal()));
	};
	Value.prototype.IsNaN = function() { return this.$val.IsNaN(); };
	Value.ptr.prototype.Delete = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Delete", vType));
		}
		delete $clone(v, Value).internal()[$externalize(p, $String)];
	};
	Value.prototype.Delete = function(p) { return this.$val.Delete(p); };
	Value.ptr.prototype.Equal = function(w) {
		var v, w;
		v = this;
		return $clone(v, Value).internal() === $clone(w, Value).internal();
	};
	Value.prototype.Equal = function(w) { return this.$val.Equal(w); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "syscall/js: call of " + e.Method + " on " + new Type(e.Type).String();
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	CopyBytesToGo = function(dst, src) {
		var dlen, dst, src, vlen;
		vlen = $parseInt(src.v.length);
		dlen = dst.$length;
		if (dlen < vlen) {
			vlen = dlen;
		}
		$copySlice(dst, $assertType($internalize(src.v, $emptyInterface), sliceType$3));
		return vlen;
	};
	$pkg.CopyBytesToGo = CopyBytesToGo;
	CopyBytesToJS = function(dst, src) {
		var _tuple, dst, dt, ok, src;
		_tuple = $assertType($internalize(dst.v, $emptyInterface), sliceType$3, true);
		dt = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new $String("syscall/js: CopyBytesToJS: expected dst to be an Uint8Array"));
		}
		return $copySlice(dt, src);
	};
	$pkg.CopyBytesToJS = CopyBytesToJS;
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "isObject", name: "isObject", pkg: "syscall/js", typ: $funcType([], [$Bool], false)}];
	Func.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Value.methods = [{prop: "internal", name: "internal", pkg: "syscall/js", typ: $funcType([], [ptrType$1], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$2], [Value], true)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InstanceOf", name: "InstanceOf", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "JSValue", name: "JSValue", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Truthy", name: "Truthy", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "IsNull", name: "IsNull", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNaN", name: "IsNaN", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Value], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Func.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Error.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Value.init("syscall/js", [{prop: "v", name: "v", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "inited", name: "inited", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$2", name: "_", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		id = null;
		instanceOf = null;
		typeOf = null;
		typeNames = new sliceType(["undefined", "null", "boolean", "number", "string", "symbol", "object", "function"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, bytealg, itoa, oserror, runtime, sync, js, Errno, Stat_t, Iovec, Sockaddr, SockaddrInet4, SockaddrInet6, RawConn, jsFile, callResult, sliceType, sliceType$2, ptrType, ptrType$2, funcType, arrayType$2, arrayType$3, arrayType$4, funcType$1, funcType$2, errorstr, errEAGAIN, errEINVAL, errENOENT, errnoByCode, jsProcess, jsFS, constants, uint8Array, nodeWRONLY, nodeRDWR, nodeCREATE, nodeTRUNC, nodeAPPEND, nodeEXCL, filesMu, files, envOnce, envLock, env, envs, _r, faketimeWrite, errnoErr, StopIO, Accept, Recvfrom, Sendto, Recvmsg, SendmsgN, SetReadDeadline, SetWriteDeadline, Shutdown, SetNonblock, fdToFile, Open, Close, CloseOnExec, ReadDirent, Stat, Lstat, Fstat, Chmod, Fchmod, Fchown, Ftruncate, Chdir, Fchdir, Readlink, Fsync, Read, Write, Pread, Pwrite, Seek, Dup, checkPath, recoverErr, mapJSError, copyenv, Getenv, runtime_envs, setStat, fsCall;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	itoa = $packages["internal/itoa"];
	oserror = $packages["internal/oserror"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	js = $packages["syscall/js"];
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Mode_, Nlink_, Uid_, Gid_, Rdev_, Size_, Blksize_, Blocks_, Atime_, AtimeNsec_, Mtime_, MtimeNsec_, Ctime_, CtimeNsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Int64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Mode = 0;
			this.Nlink = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = new $Int64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = 0;
			this.Blocks = 0;
			this.Atime = new $Int64(0, 0);
			this.AtimeNsec = new $Int64(0, 0);
			this.Mtime = new $Int64(0, 0);
			this.MtimeNsec = new $Int64(0, 0);
			this.Ctime = new $Int64(0, 0);
			this.CtimeNsec = new $Int64(0, 0);
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atime = Atime_;
		this.AtimeNsec = AtimeNsec_;
		this.Mtime = Mtime_;
		this.MtimeNsec = MtimeNsec_;
		this.Ctime = Ctime_;
		this.CtimeNsec = CtimeNsec_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$3.zero();
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType$4.zero();
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
	});
	RawConn = $pkg.RawConn = $newType(8, $kindInterface, "syscall.RawConn", true, "syscall", true, null);
	jsFile = $pkg.jsFile = $newType(0, $kindStruct, "syscall.jsFile", true, "syscall", false, function(path_, entries_, dirIdx_, pos_, seeked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.entries = sliceType.nil;
			this.dirIdx = 0;
			this.pos = new $Int64(0, 0);
			this.seeked = false;
			return;
		}
		this.path = path_;
		this.entries = entries_;
		this.dirIdx = dirIdx_;
		this.pos = pos_;
		this.seeked = seeked_;
	});
	callResult = $newType(0, $kindStruct, "syscall.callResult", true, "syscall", false, function(val_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = new js.Value.ptr(null, false, arrayType$2.zero());
			this.err = $ifaceNil;
			return;
		}
		this.val = val_;
		this.err = err_;
	});
	sliceType = $sliceType($String);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType($error);
	ptrType$2 = $ptrType(jsFile);
	funcType = $funcType([], [], false);
	arrayType$2 = $arrayType(funcType, 0);
	arrayType$3 = $arrayType($Uint8, 4);
	arrayType$4 = $arrayType($Uint8, 16);
	funcType$1 = $funcType([$Uintptr], [], false);
	funcType$2 = $funcType([$Uintptr], [$Bool], false);
	faketimeWrite = function(fd, p) {
		var fd, p;
		$panic(new $String("not implemented"));
	};
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 2054) {
			s = ((e < 0 || e >= errorstr.length) ? ($throwRuntimeError("index out of range"), undefined) : errorstr[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa.Itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Is = function(target) {
		var _1, e, target;
		e = this.$val;
		_1 = target;
		if ($interfaceIsEqual(_1, (oserror.ErrPermission))) {
			return (e === 13) || (e === 1);
		} else if ($interfaceIsEqual(_1, (oserror.ErrExist))) {
			return (e === 17) || (e === 39);
		} else if ($interfaceIsEqual(_1, (oserror.ErrNotExist))) {
			return e === 2;
		}
		return false;
	};
	$ptrType(Errno).prototype.Is = function(target) { return new Errno(this.$get()).Is(target); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	StopIO = function(fd) {
		var fd;
		return new Errno(38);
	};
	$pkg.StopIO = StopIO;
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, err, fd, newfd, sa;
		newfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = $ifaceNil;
		_tmp$2 = new Errno(38);
		newfd = _tmp;
		sa = _tmp$1;
		err = _tmp$2;
		return [newfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvfrom = function(fd, p, flags) {
		var _tmp, _tmp$1, _tmp$2, err, fd, flags, from, n, p;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = $ifaceNil;
		_tmp$2 = new Errno(38);
		n = _tmp;
		from = _tmp$1;
		err = _tmp$2;
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var fd, flags, p, to;
		return new Errno(38);
	};
	$pkg.Sendto = Sendto;
	Recvmsg = function(fd, p, oob, flags) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = $ifaceNil;
		_tmp$4 = new Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		from = _tmp$3;
		err = _tmp$4;
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgN = SendmsgN;
	SetReadDeadline = function(fd, t) {
		var fd, t;
		return new Errno(38);
	};
	$pkg.SetReadDeadline = SetReadDeadline;
	SetWriteDeadline = function(fd, t) {
		var fd, t;
		return new Errno(38);
	};
	$pkg.SetWriteDeadline = SetWriteDeadline;
	Shutdown = function(fd, how) {
		var fd, how;
		return new Errno(38);
	};
	$pkg.Shutdown = Shutdown;
	SetNonblock = function(fd, nonblocking) {
		var fd, nonblocking;
		return $ifaceNil;
	};
	$pkg.SetNonblock = SetNonblock;
	fdToFile = function(fd) {
		var {_entry, _tuple, f, fd, ok, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = filesMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = $mapIndex(files,$Int.keyFor(fd)), _entry !== undefined ? [_entry.v, true] : [ptrType$2.nil, false]);
		f = _tuple[0];
		ok = _tuple[1];
		$r = filesMu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!ok) {
			$s = -1; return [ptrType$2.nil, new Errno(9)];
		}
		$s = -1; return [f, $ifaceNil];
		/* */ } return; } var $f = {$blk: fdToFile, $c: true, $r, _entry, _tuple, f, fd, ok, $s};return $f;
	};
	Open = function(path, openmode, perm) {
		var {_i, _key, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, _v, cwd, dir, entries, err, err$1, err$2, err$3, f, fd, flags, i, jsFD, openmode, path, perm, stat, $s, $r, $c} = $restore(this, {path, openmode, perm});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPath(path);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		flags = 0;
		if (!(((openmode & 1) === 0))) {
			flags = flags | (nodeWRONLY);
		}
		if (!(((openmode & 2) === 0))) {
			flags = flags | (nodeRDWR);
		}
		if (!(((openmode & 64) === 0))) {
			flags = flags | (nodeCREATE);
		}
		if (!(((openmode & 512) === 0))) {
			flags = flags | (nodeTRUNC);
		}
		if (!(((openmode & 1024) === 0))) {
			flags = flags | (nodeAPPEND);
		}
		if (!(((openmode & 128) === 0))) {
			flags = flags | (nodeEXCL);
		}
		if (!(((openmode & 4096) === 0))) {
			$s = -1; return [0, errors.New("syscall.Open: O_SYNC is not supported by js/wasm")];
		}
		_r$1 = fsCall("open", new sliceType$2([new $String(path), new $Int(flags), new $Uint32(perm)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsFD = $clone(_tuple[0], js.Value);
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		fd = $clone(jsFD, js.Value).Int();
		entries = sliceType.nil;
		_r$2 = fsCall("fstat", new sliceType$2([new $Int(fd)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		stat = $clone(_tuple$1[0], js.Value);
		err$2 = _tuple$1[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) { _v = false; $s = 5; continue s; }
		_r$3 = $clone(stat, js.Value).Call("isDirectory", sliceType$2.nil); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(_r$3, js.Value).Bool(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4; case 5:
		/* */ if (_v) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_v) { */ case 3:
			_r$5 = fsCall("readdir", new sliceType$2([new $String(path)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$2 = _r$5;
			dir = $clone(_tuple$2[0], js.Value);
			err$3 = _tuple$2[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				$s = -1; return [0, err$3];
			}
			entries = $makeSlice(sliceType, $clone(dir, js.Value).Length());
			_ref = entries;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= entries.$length) ? ($throwRuntimeError("index out of range"), undefined) : entries.$array[entries.$offset + i] = $clone($clone(dir, js.Value).Index(i), js.Value).String());
				_i++;
			}
		/* } */ case 4:
		/* */ if (!((path.charCodeAt(0) === 47))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((path.charCodeAt(0) === 47))) { */ case 9:
			_r$6 = $clone(jsProcess, js.Value).Call("cwd", sliceType$2.nil); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(_r$6, js.Value).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			cwd = _r$7;
			path = cwd + "/" + path;
		/* } */ case 10:
		f = new jsFile.ptr(path, entries, 0, new $Int64(0, 0), false);
		$r = filesMu.Lock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = fd; (files || $throwRuntimeError("assignment to entry in nil map")).set($Int.keyFor(_key), { k: _key, v: f });
		$r = filesMu.Unlock(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [fd, $ifaceNil];
		/* */ } return; } var $f = {$blk: Open, $c: true, $r, _i, _key, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, _v, cwd, dir, entries, err, err$1, err$2, err$3, f, fd, flags, i, jsFD, openmode, path, perm, stat, $s};return $f;
	};
	$pkg.Open = Open;
	Close = function(fd) {
		var {_r$1, _tuple, err, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = filesMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$mapDelete(files, $Int.keyFor(fd));
		$r = filesMu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = fsCall("close", new sliceType$2([new $Int(fd)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Close, $c: true, $r, _r$1, _tuple, err, fd, $s};return $f;
	};
	$pkg.Close = Close;
	CloseOnExec = function(fd) {
		var fd;
	};
	$pkg.CloseOnExec = CloseOnExec;
	ReadDirent = function(fd, buf) {
		var {_r$1, _tuple, buf, entry, err, f, fd, l, n, x, x$1, $s, $r, $c} = $restore(this, {fd, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (f.entries === sliceType.nil) {
			$s = -1; return [0, new Errno(22)];
		}
		n = 0;
		while (true) {
			if (!(f.dirIdx < f.entries.$length)) { break; }
			entry = (x = f.entries, x$1 = f.dirIdx, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			l = 2 + entry.length >> 0;
			if (l > buf.$length) {
				break;
			}
			(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = ((l << 24 >>> 24)));
			(1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1] = (((l >> 8 >> 0) << 24 >>> 24)));
			$copyString($subslice(buf, 2), entry);
			buf = $subslice(buf, l);
			n = n + (l) >> 0;
			f.dirIdx = f.dirIdx + (1) >> 0;
		}
		$s = -1; return [n, $ifaceNil];
		/* */ } return; } var $f = {$blk: ReadDirent, $c: true, $r, _r$1, _tuple, buf, entry, err, f, fd, l, n, x, x$1, $s};return $f;
	};
	$pkg.ReadDirent = ReadDirent;
	Stat = function(path, st) {
		var {_r$1, _tuple, err, err$1, jsSt, path, st, $s, $r, $c} = $restore(this, {path, st});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPath(path);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = fsCall("stat", new sliceType$2([new $String(path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsSt = $clone(_tuple[0], js.Value);
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		setStat(st, $clone(jsSt, js.Value));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Stat, $c: true, $r, _r$1, _tuple, err, err$1, jsSt, path, st, $s};return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(path, st) {
		var {_r$1, _tuple, err, err$1, jsSt, path, st, $s, $r, $c} = $restore(this, {path, st});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPath(path);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = fsCall("lstat", new sliceType$2([new $String(path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsSt = $clone(_tuple[0], js.Value);
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		setStat(st, $clone(jsSt, js.Value));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Lstat, $c: true, $r, _r$1, _tuple, err, err$1, jsSt, path, st, $s};return $f;
	};
	$pkg.Lstat = Lstat;
	Fstat = function(fd, st) {
		var {_r$1, _tuple, err, fd, jsSt, st, $s, $r, $c} = $restore(this, {fd, st});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fstat", new sliceType$2([new $Int(fd)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsSt = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		setStat(st, $clone(jsSt, js.Value));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Fstat, $c: true, $r, _r$1, _tuple, err, fd, jsSt, st, $s};return $f;
	};
	$pkg.Fstat = Fstat;
	Chmod = function(path, mode) {
		var {_r$1, _tuple, err, err$1, mode, path, $s, $r, $c} = $restore(this, {path, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPath(path);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = fsCall("chmod", new sliceType$2([new $String(path), new $Uint32(mode)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err$1 = _tuple[1];
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: Chmod, $c: true, $r, _r$1, _tuple, err, err$1, mode, path, $s};return $f;
	};
	$pkg.Chmod = Chmod;
	Fchmod = function(fd, mode) {
		var {_r$1, _tuple, err, fd, mode, $s, $r, $c} = $restore(this, {fd, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fchmod", new sliceType$2([new $Int(fd), new $Uint32(mode)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fchmod, $c: true, $r, _r$1, _tuple, err, fd, mode, $s};return $f;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var {_r$1, _tuple, err, fd, gid, uid, $s, $r, $c} = $restore(this, {fd, uid, gid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fchown", new sliceType$2([new $Int(fd), new $Uint32(((uid >>> 0))), new $Uint32(((gid >>> 0)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fchown, $c: true, $r, _r$1, _tuple, err, fd, gid, uid, $s};return $f;
	};
	$pkg.Fchown = Fchown;
	Ftruncate = function(fd, length) {
		var {_r$1, _tuple, err, fd, length, $s, $r, $c} = $restore(this, {fd, length});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("ftruncate", new sliceType$2([new $Int(fd), length])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Ftruncate, $c: true, $r, _r$1, _tuple, err, fd, length, $s};return $f;
	};
	$pkg.Ftruncate = Ftruncate;
	Chdir = function(path) {
		var {$24r, $24r$1, _r$1, err, err$1, path, $s, $deferred, $r, $c} = $restore(this, {path});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		err$1 = checkPath(path);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 1:
			err[0] = err$1;
			$24r = err[0];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([recoverErr, [(err.$ptr || (err.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_r$1 = $clone(jsProcess, js.Value).Call("chdir", new sliceType$2([new $String(path)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$24r$1 = err[0];
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { var $f = {$blk: Chdir, $c: true, $r, $24r, $24r$1, _r$1, err, err$1, path, $s, $deferred};return $f; } }
	};
	$pkg.Chdir = Chdir;
	Fchdir = function(fd) {
		var {$24r, _r$1, _r$2, _tuple, err, f, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = Chdir(f.path); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Fchdir, $c: true, $r, $24r, _r$1, _r$2, _tuple, err, f, fd, $s};return $f;
	};
	$pkg.Fchdir = Fchdir;
	Readlink = function(path, buf) {
		var {_r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, dst, err, err$1, n, path, $s, $r, $c} = $restore(this, {path, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		err$1 = checkPath(path);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$1 = fsCall("readlink", new sliceType$2([new $String(path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		dst = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		n = $copyString(buf, $clone(dst, js.Value).String());
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Readlink, $c: true, $r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, dst, err, err$1, n, path, $s};return $f;
	};
	$pkg.Readlink = Readlink;
	Fsync = function(fd) {
		var {_r$1, _tuple, err, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fsync", new sliceType$2([new $Int(fd)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fsync, $c: true, $r, _r$1, _tuple, err, fd, $s};return $f;
	};
	$pkg.Fsync = Fsync;
	Read = function(fd, b) {
		var {_r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n2, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {fd, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		/* */ if (f.seeked) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (f.seeked) { */ case 2:
			_r$2 = Pread(fd, b, f.pos); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			f.pos = (x = f.pos, x$1 = (new $Int64(0, n)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			$s = -1; return [n, err$1];
		/* } */ case 3:
		_r$3 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = $clone(_r$3, js.Value);
		_r$4 = fsCall("read", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), $ifaceNil])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		n$1 = $clone(_tuple$2[0], js.Value);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		js.CopyBytesToGo(b, $clone(buf, js.Value));
		n2 = $clone(n$1, js.Value).Int();
		f.pos = (x$2 = f.pos, x$3 = (new $Int64(0, n2)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		$s = -1; return [n2, err];
		/* */ } return; } var $f = {$blk: Read, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n2, x, x$1, x$2, x$3, $s};return $f;
	};
	$pkg.Read = Read;
	Write = function(fd, b) {
		var {_r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n$2, n2, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {fd, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		/* */ if (f.seeked) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (f.seeked) { */ case 2:
			_r$2 = Pwrite(fd, b, f.pos); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			f.pos = (x = f.pos, x$1 = (new $Int64(0, n)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			$s = -1; return [n, err$1];
		/* } */ case 3:
		if (false && ((fd === 1) || (fd === 2))) {
			n$1 = faketimeWrite(fd, b);
			if (n$1 < 0) {
				$s = -1; return [0, errnoErr(((-n$1 >>> 0)))];
			}
			$s = -1; return [n$1, $ifaceNil];
		}
		_r$3 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = $clone(_r$3, js.Value);
		js.CopyBytesToJS($clone(buf, js.Value), b);
		_r$4 = fsCall("write", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), $ifaceNil])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		n$2 = $clone(_tuple$2[0], js.Value);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		n2 = $clone(n$2, js.Value).Int();
		f.pos = (x$2 = f.pos, x$3 = (new $Int64(0, n2)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		$s = -1; return [n2, err];
		/* */ } return; } var $f = {$blk: Write, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n$2, n2, x, x$1, x$2, x$3, $s};return $f;
	};
	$pkg.Write = Write;
	Pread = function(fd, b, offset) {
		var {_r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s, $r, $c} = $restore(this, {fd, b, offset});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		buf = $clone(_r$1, js.Value);
		_r$2 = fsCall("read", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), offset])); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		js.CopyBytesToGo(b, $clone(buf, js.Value));
		$s = -1; return [$clone(n, js.Value).Int(), $ifaceNil];
		/* */ } return; } var $f = {$blk: Pread, $c: true, $r, _r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s};return $f;
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, b, offset) {
		var {_r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s, $r, $c} = $restore(this, {fd, b, offset});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		buf = $clone(_r$1, js.Value);
		js.CopyBytesToJS($clone(buf, js.Value), b);
		_r$2 = fsCall("write", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), offset])); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$s = -1; return [$clone(n, js.Value).Int(), $ifaceNil];
		/* */ } return; } var $f = {$blk: Pwrite, $c: true, $r, _r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s};return $f;
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var {_1, _r$1, _r$2, _tuple, err, err$1, f, fd, newPos, offset, st, whence, x, x$1, $s, $r, $c} = $restore(this, {fd, offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		st = [st];
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		newPos = new $Int64(0, 0);
			_1 = whence;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 3:
				newPos = offset;
				$s = 7; continue;
			/* } else if (_1 === (1)) { */ case 4:
				newPos = (x = f.pos, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 5:
				st[0] = new Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
				_r$2 = Fstat(fd, st[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err$1 = _r$2;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [new $Int64(0, 0), err$1];
				}
				newPos = (x$1 = st[0].Size, new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
				$s = 7; continue;
			/* } else { */ case 6:
				$s = -1; return [new $Int64(0, 0), errnoErr(22)];
			/* } */ case 7:
		case 2:
		if ((newPos.$high < 0 || (newPos.$high === 0 && newPos.$low < 0))) {
			$s = -1; return [new $Int64(0, 0), errnoErr(22)];
		}
		f.seeked = true;
		f.dirIdx = 0;
		f.pos = newPos;
		$s = -1; return [newPos, $ifaceNil];
		/* */ } return; } var $f = {$blk: Seek, $c: true, $r, _1, _r$1, _r$2, _tuple, err, err$1, f, fd, newPos, offset, st, whence, x, x$1, $s};return $f;
	};
	$pkg.Seek = Seek;
	Dup = function(fd) {
		var fd;
		return [0, new Errno(38)];
	};
	$pkg.Dup = Dup;
	checkPath = function(path) {
		var i, path;
		if (path === "") {
			return new Errno(22);
		}
		i = 0;
		while (true) {
			if (!(i < path.length)) { break; }
			if (path.charCodeAt(i) === 0) {
				return new Errno(22);
			}
			i = i + (1) >> 0;
		}
		return $ifaceNil;
	};
	recoverErr = function(errPtr) {
		var _tuple, err, errPtr, jsErr, ok;
		err = $recover();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple = $assertType(err, js.Error, true);
			jsErr = $clone(_tuple[0], js.Error);
			ok = _tuple[1];
			if (!ok) {
				$panic(err);
			}
			errPtr.$set(mapJSError($clone(jsErr.Value, js.Value)));
		}
	};
	mapJSError = function(jsErr) {
		var _entry, _tuple, errno, jsErr, ok;
		_tuple = (_entry = $mapIndex(errnoByCode,$String.keyFor($clone($clone(jsErr, js.Value).Get("code"), js.Value).String())), _entry !== undefined ? [_entry.v, true] : [0, false]);
		errno = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new jsErr.constructor.elem(jsErr));
		}
		return errnoErr((errno));
	};
	copyenv = function() {
		var _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = new $global.Map();
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = $substring(s, 0, j);
					_tuple = (_entry = $mapIndex(env,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: i });
					} else {
						((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var {$24r, $24r$1, $24r$2, $24r$3, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (key.length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (key.length === 0) { */ case 2:
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			$24r = [value, found];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$r = envLock.RLock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = $mapIndex(env,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!ok) { */ case 6:
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			$24r$1 = [value, found];
			$s = 8; case 8: return $24r$1;
		/* } */ case 7:
		s = ((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i]);
		i$1 = 0;
		/* while (true) { */ case 9:
			/* if (!(i$1 < s.length)) { break; } */ if(!(i$1 < s.length)) { $s = 10; continue; }
			/* */ if (s.charCodeAt(i$1) === 61) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (s.charCodeAt(i$1) === 61) { */ case 11:
				_tmp$4 = $substring(s, (i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				$24r$2 = [value, found];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			i$1 = i$1 + (1) >> 0;
		$s = 9; continue;
		case 10:
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		$24r$3 = [value, found];
		$s = 14; case 14: return $24r$3;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { var $f = {$blk: Getenv, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred};return $f; } }
	};
	$pkg.Getenv = Getenv;
	runtime_envs = function() {
		var {_r$1, envkeys, envs$1, i, jsEnv, key, process, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		process = $clone($clone(js.Global(), js.Value).Get("process"), js.Value);
		if ($clone(process, js.Value).IsUndefined()) {
			$s = -1; return sliceType.nil;
		}
		jsEnv = $clone($clone(process, js.Value).Get("env"), js.Value);
		if ($clone(jsEnv, js.Value).IsUndefined()) {
			$s = -1; return sliceType.nil;
		}
		_r$1 = $clone($clone(js.Global(), js.Value).Get("Object"), js.Value).Call("keys", new sliceType$2([new jsEnv.constructor.elem(jsEnv)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		envkeys = $clone(_r$1, js.Value);
		envs$1 = $makeSlice(sliceType, $clone(envkeys, js.Value).Length());
		i = 0;
		while (true) {
			if (!(i < $clone(envkeys, js.Value).Length())) { break; }
			key = $clone($clone(envkeys, js.Value).Index(i), js.Value).String();
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $clone($clone(jsEnv, js.Value).Get(key), js.Value).String());
			i = i + (1) >> 0;
		}
		$s = -1; return envs$1;
		/* */ } return; } var $f = {$blk: runtime_envs, $c: true, $r, _r$1, envkeys, envs$1, i, jsEnv, key, process, $s};return $f;
	};
	setStat = function(st, jsSt) {
		var atime, ctime, jsSt, mtime, st;
		st.Dev = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("dev"), js.Value).Int()));
		st.Ino = (new $Uint64(0, $clone($clone(jsSt, js.Value).Get("ino"), js.Value).Int()));
		st.Mode = (($clone($clone(jsSt, js.Value).Get("mode"), js.Value).Int() >>> 0));
		st.Nlink = (($clone($clone(jsSt, js.Value).Get("nlink"), js.Value).Int() >>> 0));
		st.Uid = (($clone($clone(jsSt, js.Value).Get("uid"), js.Value).Int() >>> 0));
		st.Gid = (($clone($clone(jsSt, js.Value).Get("gid"), js.Value).Int() >>> 0));
		st.Rdev = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("rdev"), js.Value).Int()));
		st.Size = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("size"), js.Value).Int()));
		st.Blksize = (($clone($clone(jsSt, js.Value).Get("blksize"), js.Value).Int() >> 0));
		st.Blocks = (($clone($clone(jsSt, js.Value).Get("blocks"), js.Value).Int() >> 0));
		atime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("atimeMs"), js.Value).Float()));
		st.Atime = $div64(atime, new $Int64(0, 1000), false);
		st.AtimeNsec = $mul64(($div64(atime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
		mtime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("mtimeMs"), js.Value).Float()));
		st.Mtime = $div64(mtime, new $Int64(0, 1000), false);
		st.MtimeNsec = $mul64(($div64(mtime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
		ctime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("ctimeMs"), js.Value).Float()));
		st.Ctime = $div64(ctime, new $Int64(0, 1000), false);
		st.CtimeNsec = $mul64(($div64(ctime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
	};
	fsCall = function(name, args) {
		var {$24r, $24r$1, _r$1, _r$2, args, c, f, name, res, $s, $deferred, $r, $c} = $restore(this, {name, args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		c = [c];
		c[0] = new $Chan(callResult, 1);
		f = $clone(js.FuncOf((function(c) { return function $b(this$1, args$1) {
			var {args$1, jsErr, res, this$1, $s, $r, $c} = $restore(this, {this$1, args$1});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			res = new callResult.ptr(new js.Value.ptr(null, false, arrayType$2.zero()), $ifaceNil);
			if (args$1.$length >= 1) {
				jsErr = $clone((0 >= args$1.$length ? ($throwRuntimeError("index out of range"), undefined) : args$1.$array[args$1.$offset + 0]), js.Value);
				if (!$clone(jsErr, js.Value).IsUndefined() && !$clone(jsErr, js.Value).IsNull()) {
					res.err = mapJSError($clone(jsErr, js.Value));
				}
			}
			js.Value.copy(res.val, js.Undefined());
			if (args$1.$length >= 2) {
				js.Value.copy(res.val, (1 >= args$1.$length ? ($throwRuntimeError("index out of range"), undefined) : args$1.$array[args$1.$offset + 1]));
			}
			$r = $send(c[0], $clone($clone(res, callResult), callResult)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, args$1, jsErr, res, this$1, $s};return $f;
		}; })(c)), js.Func);
		$deferred.push([$methodVal($clone(f, js.Func), "Release"), []]);
		/* */ if ($clone($clone(jsFS, js.Value).Get(name), js.Value).IsUndefined()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone($clone(jsFS, js.Value).Get(name), js.Value).IsUndefined()) { */ case 1:
			$24r = [js.Undefined(), new Errno(38)];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		_r$1 = $clone(jsFS, js.Value).Call(name, $append(args, new f.constructor.elem(f))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = $recv(c[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		res = $clone(_r$2[0], callResult);
		$24r$1 = [res.val, res.err];
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new js.Value.ptr(null, false, arrayType$2.zero()), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: fsCall, $c: true, $r, $24r, $24r$1, _r$1, _r$2, args, c, f, name, res, $s, $deferred};return $f; } }
	};
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Is", name: "Is", pkg: "", typ: $funcType([$error], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	Stat_t.init("", [{prop: "Dev", name: "Dev", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Ino", name: "Ino", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Nlink", name: "Nlink", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Size", name: "Size", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Blocks", name: "Blocks", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Atime", name: "Atime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "AtimeNsec", name: "AtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Mtime", name: "Mtime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "MtimeNsec", name: "MtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Ctime", name: "Ctime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "CtimeNsec", name: "CtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	Iovec.init("", []);
	Sockaddr.init([]);
	SockaddrInet4.init("", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$3, tag: ""}]);
	SockaddrInet6.init("", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawConn.init([{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$2], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$2], [$error], false)}]);
	jsFile.init("syscall", [{prop: "path", name: "path", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "entries", name: "entries", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "dirIdx", name: "dirIdx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "pos", name: "pos", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "seeked", name: "seeked", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	callResult.init("syscall", [{prop: "val", name: "val", embedded: false, exported: false, typ: js.Value, tag: ""}, {prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ForkLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		filesMu = new sync.Mutex.ptr(0, 0);
		envOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		errorstr = $toNativeArray($kindString, ["", "Operation not permitted", "No such file or directory", "No such process", "Interrupted system call", "I/O error", "No such device or address", "Argument list too long", "Exec format error", "Bad file number", "No child processes", "Try again", "Out of memory", "Permission denied", "Bad address", "", "Device or resource busy", "File exists", "Cross-device link", "No such device", "Not a directory", "Is a directory", "Invalid argument", "File table overflow", "Too many open files", "Not a typewriter", "", "File too large", "No space left on device", "Illegal seek", "Read-only file system", "Too many links", "Broken pipe", "Math arg out of domain of func", "Math result not representable", "Deadlock condition", "File name too long", "No record locks available", "not implemented on js", "Directory not empty", "Too many symbolic links", "", "No message of desired type", "Identifier removed", "Channel number out of range", "Level 2 not synchronized", "Level 3 halted", "Level 3 reset", "Link number out of range", "Protocol driver not attached", "No CSI structure available", "Level 2 halted", "Invalid exchange", "Invalid request descriptor", "Exchange full", "No anode", "Invalid request code", "Invalid slot", "", "Bad font file fmt", "Device not a stream", "No data (for no delay io)", "Timer expired", "Out of streams resources", "Machine is not on the network", "Package not installed", "The object is remote", "The link has been severed", "Advertise error", "Srmount error", "Communication error on send", "Protocol error", "Multihop attempted", "Cross mount point (not really error)", "Trying to read unreadable message", "Value too large for defined data type", "Given log. name not unique", "f.d. invalid for this operation", "Remote address changed", "Can't access a needed shared lib", "Accessing a corrupted shared lib", ".lib section in a.out corrupted", "Attempting to link in too many libs", "Attempting to exec a shared library", "", "", "", "", "Socket operation on non-socket", "Destination address required", "Message too long", "Protocol wrong type for socket", "Protocol not available", "Unknown protocol", "Socket type not supported", "Operation not supported on transport endpoint", "Protocol family not supported", "Address family not supported by protocol family", "Address already in use", "Address not available", "Network interface is not configured", "Network is unreachable", "", "Connection aborted", "Connection reset by peer", "No buffer space available", "Socket is already connected", "Socket is not connected", "Can't send after socket shutdown", "", "Connection timed out", "Connection refused", "Host is down", "Host is unreachable", "Socket already connected", "Connection already in progress", "", "", "", "", "", "", "Quota exceeded", "No medium (in tape drive)", "", "Operation cancelednode is remote (not really error)", "Inappropriate file type or format", "No more files", "", "No such host or network path", "Filename exists with different case"]);
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errnoByCode = $makeMap($String.keyFor, [{ k: "EPERM", v: 1 }, { k: "ENOENT", v: 2 }, { k: "ESRCH", v: 3 }, { k: "EINTR", v: 4 }, { k: "EIO", v: 5 }, { k: "ENXIO", v: 6 }, { k: "E2BIG", v: 7 }, { k: "ENOEXEC", v: 8 }, { k: "EBADF", v: 9 }, { k: "ECHILD", v: 10 }, { k: "EAGAIN", v: 11 }, { k: "ENOMEM", v: 12 }, { k: "EACCES", v: 13 }, { k: "EFAULT", v: 14 }, { k: "EBUSY", v: 16 }, { k: "EEXIST", v: 17 }, { k: "EXDEV", v: 18 }, { k: "ENODEV", v: 19 }, { k: "ENOTDIR", v: 20 }, { k: "EISDIR", v: 21 }, { k: "EINVAL", v: 22 }, { k: "ENFILE", v: 23 }, { k: "EMFILE", v: 24 }, { k: "ENOTTY", v: 25 }, { k: "EFBIG", v: 27 }, { k: "ENOSPC", v: 28 }, { k: "ESPIPE", v: 29 }, { k: "EROFS", v: 30 }, { k: "EMLINK", v: 31 }, { k: "EPIPE", v: 32 }, { k: "ENAMETOOLONG", v: 36 }, { k: "ENOSYS", v: 38 }, { k: "EDQUOT", v: 122 }, { k: "EDOM", v: 33 }, { k: "ERANGE", v: 34 }, { k: "EDEADLK", v: 35 }, { k: "ENOLCK", v: 37 }, { k: "ENOTEMPTY", v: 39 }, { k: "ELOOP", v: 40 }, { k: "ENOMSG", v: 42 }, { k: "EIDRM", v: 43 }, { k: "ECHRNG", v: 44 }, { k: "EL2NSYNC", v: 45 }, { k: "EL3HLT", v: 46 }, { k: "EL3RST", v: 47 }, { k: "ELNRNG", v: 48 }, { k: "EUNATCH", v: 49 }, { k: "ENOCSI", v: 50 }, { k: "EL2HLT", v: 51 }, { k: "EBADE", v: 52 }, { k: "EBADR", v: 53 }, { k: "EXFULL", v: 54 }, { k: "ENOANO", v: 55 }, { k: "EBADRQC", v: 56 }, { k: "EBADSLT", v: 57 }, { k: "EDEADLOCK", v: 35 }, { k: "EBFONT", v: 59 }, { k: "ENOSTR", v: 60 }, { k: "ENODATA", v: 61 }, { k: "ETIME", v: 62 }, { k: "ENOSR", v: 63 }, { k: "ENONET", v: 64 }, { k: "ENOPKG", v: 65 }, { k: "EREMOTE", v: 66 }, { k: "ENOLINK", v: 67 }, { k: "EADV", v: 68 }, { k: "ESRMNT", v: 69 }, { k: "ECOMM", v: 70 }, { k: "EPROTO", v: 71 }, { k: "EMULTIHOP", v: 72 }, { k: "EDOTDOT", v: 73 }, { k: "EBADMSG", v: 74 }, { k: "EOVERFLOW", v: 75 }, { k: "ENOTUNIQ", v: 76 }, { k: "EBADFD", v: 77 }, { k: "EREMCHG", v: 78 }, { k: "ELIBACC", v: 79 }, { k: "ELIBBAD", v: 80 }, { k: "ELIBSCN", v: 81 }, { k: "ELIBMAX", v: 82 }, { k: "ELIBEXEC", v: 83 }, { k: "EILSEQ", v: 84 }, { k: "EUSERS", v: 87 }, { k: "ENOTSOCK", v: 88 }, { k: "EDESTADDRREQ", v: 89 }, { k: "EMSGSIZE", v: 90 }, { k: "EPROTOTYPE", v: 91 }, { k: "ENOPROTOOPT", v: 92 }, { k: "EPROTONOSUPPORT", v: 93 }, { k: "ESOCKTNOSUPPORT", v: 94 }, { k: "EOPNOTSUPP", v: 95 }, { k: "EPFNOSUPPORT", v: 96 }, { k: "EAFNOSUPPORT", v: 97 }, { k: "EADDRINUSE", v: 98 }, { k: "EADDRNOTAVAIL", v: 99 }, { k: "ENETDOWN", v: 100 }, { k: "ENETUNREACH", v: 101 }, { k: "ENETRESET", v: 102 }, { k: "ECONNABORTED", v: 103 }, { k: "ECONNRESET", v: 104 }, { k: "ENOBUFS", v: 105 }, { k: "EISCONN", v: 106 }, { k: "ENOTCONN", v: 107 }, { k: "ESHUTDOWN", v: 108 }, { k: "ETOOMANYREFS", v: 109 }, { k: "ETIMEDOUT", v: 110 }, { k: "ECONNREFUSED", v: 111 }, { k: "EHOSTDOWN", v: 112 }, { k: "EHOSTUNREACH", v: 113 }, { k: "EALREADY", v: 114 }, { k: "EINPROGRESS", v: 115 }, { k: "ESTALE", v: 116 }, { k: "ENOTSUP", v: 95 }, { k: "ENOMEDIUM", v: 123 }, { k: "ECANCELED", v: 125 }, { k: "ELBIN", v: 2048 }, { k: "EFTYPE", v: 2049 }, { k: "ENMFILE", v: 2050 }, { k: "EPROCLIM", v: 2051 }, { k: "ENOSHARE", v: 2052 }, { k: "ECASECLASH", v: 2053 }, { k: "EWOULDBLOCK", v: 11 }]);
		jsProcess = $clone($clone(js.Global(), js.Value).Get("process"), js.Value);
		jsFS = $clone($clone(js.Global(), js.Value).Get("fs"), js.Value);
		constants = $clone($clone(jsFS, js.Value).Get("constants"), js.Value);
		uint8Array = $clone($clone(js.Global(), js.Value).Get("Uint8Array"), js.Value);
		nodeWRONLY = $clone($clone(constants, js.Value).Get("O_WRONLY"), js.Value).Int();
		nodeRDWR = $clone($clone(constants, js.Value).Get("O_RDWR"), js.Value).Int();
		nodeCREATE = $clone($clone(constants, js.Value).Get("O_CREAT"), js.Value).Int();
		nodeTRUNC = $clone($clone(constants, js.Value).Get("O_TRUNC"), js.Value).Int();
		nodeAPPEND = $clone($clone(constants, js.Value).Get("O_APPEND"), js.Value).Int();
		nodeEXCL = $clone($clone(constants, js.Value).Get("O_EXCL"), js.Value).Int();
		files = $makeMap($Int.keyFor, [{ k: 0, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }, { k: 1, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }, { k: 2, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }]);
		_r = runtime_envs(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		envs = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/unix"] = (function() {
	var $pkg = {}, $init, syscall, IsNonblock, RecvfromInet4, RecvfromInet6, SendtoInet4, SendtoInet6, SendmsgNInet4, SendmsgNInet6, RecvmsgInet4, RecvmsgInet6;
	syscall = $packages["syscall"];
	IsNonblock = function(fd) {
		var _tmp, _tmp$1, err, fd, nonblocking;
		nonblocking = false;
		err = $ifaceNil;
		_tmp = false;
		_tmp$1 = $ifaceNil;
		nonblocking = _tmp;
		err = _tmp$1;
		return [nonblocking, err];
	};
	$pkg.IsNonblock = IsNonblock;
	RecvfromInet4 = function(fd, p, flags, from) {
		var fd, flags, from, p;
		return [0, new syscall.Errno(38)];
	};
	$pkg.RecvfromInet4 = RecvfromInet4;
	RecvfromInet6 = function(fd, p, flags, from) {
		var _tmp, _tmp$1, err, fd, flags, from, n, p;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.RecvfromInet6 = RecvfromInet6;
	SendtoInet4 = function(fd, p, flags, to) {
		var err, fd, flags, p, to;
		err = $ifaceNil;
		err = new syscall.Errno(38);
		return err;
	};
	$pkg.SendtoInet4 = SendtoInet4;
	SendtoInet6 = function(fd, p, flags, to) {
		var err, fd, flags, p, to;
		err = $ifaceNil;
		err = new syscall.Errno(38);
		return err;
	};
	$pkg.SendtoInet6 = SendtoInet6;
	SendmsgNInet4 = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgNInet4 = SendmsgNInet4;
	SendmsgNInet6 = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgNInet6 = SendmsgNInet6;
	RecvmsgInet4 = function(fd, p, oob, flags, from) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = new syscall.Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		err = _tmp$3;
		return [n, oobn, recvflags, err];
	};
	$pkg.RecvmsgInet4 = RecvmsgInet4;
	RecvmsgInet6 = function(fd, p, oob, flags, from) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = new syscall.Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		err = _tmp$3;
		return [n, oobn, recvflags, err];
	};
	$pkg.RecvmsgInet6 = RecvmsgInet6;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = syscall.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Pool, Once, Mutex, sliceType, ptrType, funcType, funcType$1, ptrType$1, ptrType$2;
	Pool = $pkg.Pool = $newType(0, $kindStruct, "nosync.Pool", true, "github.com/gopherjs/gopherjs/nosync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_, _$1_, _$2_, _$3_, _$4_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			this._$1 = false;
			this._$2 = false;
			this._$3 = false;
			this._$4 = 0;
			return;
		}
		this.locked = locked_;
		this._$1 = _$1_;
		this._$2 = _$2_;
		this._$3 = _$3_;
		this._$4 = _$4_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Pool);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([], [], false);
	ptrType$1 = $ptrType(Once);
	ptrType$2 = $ptrType(Mutex);
	Pool.ptr.prototype.Get = function() {
		var {$24r, _r, p, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } var $f = {$blk: Pool.ptr.prototype.Get, $c: true, $r, $24r, _r, p, x, x$1, x$2, $s};return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	Once.ptr.prototype.Do = function(f) {
		var {f, o, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		/* */ if (o[0].done) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (o[0].done) { */ case 1:
			$s = 3; case 3: return;
		/* } */ case 2:
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Once.ptr.prototype.Do, $c: true, $r, f, o, $s, $deferred};return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$2.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("github.com/gopherjs/gopherjs/nosync", [{prop: "store", name: "store", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$1", name: "_", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$2", name: "_", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$3", name: "_", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$4", name: "_", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, Location, zone, zoneTrans, ruleKind, rule, Time, Month, Weekday, Duration, ParseError, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, ptrType$2, arrayType$2, arrayType$3, arrayType$4, arrayType$5, ptrType$4, ptrType$7, badData, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, daysBefore, startNano, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, zoneSources, x, _r, FixedZone, tzset, tzsetName, tzsetOffset, tzsetRule, tzsetNum, tzruleTime, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, daysSinceEpoch, runtimeNano, Now, unixTime, Unix, isLeap, norm, Date, div, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, stdFracSecond, digitsLen, separator, formatNano, quote, isDigit, getnum, getnum3, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseSignedOffset, commaOrPeriod, parseNanoseconds, leadingInt, initLocal, itoa, init, now;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, extend_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.extend = "";
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.extend = extend_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	ruleKind = $pkg.ruleKind = $newType(4, $kindInt, "time.ruleKind", true, "time", false, null);
	rule = $pkg.rule = $newType(0, $kindStruct, "time.rule", true, "time", false, function(kind_, day_, week_, mon_, time_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.day = 0;
			this.week = 0;
			this.mon = 0;
			this.time = 0;
			return;
		}
		this.kind = kind_;
		this.day = day_;
		this.week = week_;
		this.mon = mon_;
		this.time = time_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType($Uint8);
	ptrType$2 = $ptrType(Location);
	arrayType$2 = $arrayType($Uint8, 32);
	arrayType$3 = $arrayType($Uint8, 20);
	arrayType$4 = $arrayType($Uint8, 9);
	arrayType$5 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(Time);
	ptrType$7 = $ptrType(ParseError);
	Location.ptr.prototype.get = function() {
		var {l, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.get, $c: true, $r, l, $s};return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var {$24r, _r$1, l, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1.name;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.String, $c: true, $r, $24r, _r$1, l, $s};return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x$1;
		l = new Location.ptr(name, new sliceType([$clone(new zone.ptr(name, offset, false), zone)]), new sliceType$1([$clone(new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false), zoneTrans)]), "", new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x$1 = l.zone, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var {_q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, eend, eisDST, ename, end, eoffset, estart, hi, isDST, l, lim, lo, m, name, offset, ok, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s, $r, $c} = $restore(this, {sec});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		isDST = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			isDST = false;
			$s = -1; return [name, offset, start, end, isDST];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			start = l.cacheStart;
			end = l.cacheEnd;
			isDST = zone$1.isDST;
			$s = -1; return [name, offset, start, end, isDST];
		}
		if ((l.tx.$length === 0) || (x$3 = (x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).when, (sec.$high < x$3.$high || (sec.$high === x$3.$high && sec.$low < x$3.$low)))) {
			zone$2 = (x$5 = l.zone, x$6 = l.lookupFirstZone(), ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
			name = zone$2.name;
			offset = zone$2.offset;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$7 = l.tx, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			isDST = zone$2.isDST;
			$s = -1; return [name, offset, start, end, isDST];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$8 = l.zone, x$9 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
		name = zone$3.name;
		offset = zone$3.offset;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		isDST = zone$3.isDST;
		if ((lo === (tx.$length - 1 >> 0)) && !(l.extend === "")) {
			_tuple = tzset(l.extend, start, sec);
			ename = _tuple[0];
			eoffset = _tuple[1];
			estart = _tuple[2];
			eend = _tuple[3];
			eisDST = _tuple[4];
			ok = _tuple[5];
			if (ok) {
				_tmp = ename;
				_tmp$1 = eoffset;
				_tmp$2 = estart;
				_tmp$3 = eend;
				_tmp$4 = eisDST;
				name = _tmp;
				offset = _tmp$1;
				start = _tmp$2;
				end = _tmp$3;
				isDST = _tmp$4;
				$s = -1; return [name, offset, start, end, isDST];
			}
		}
		$s = -1; return [name, offset, start, end, isDST];
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.lookup, $c: true, $r, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, eend, eisDST, ename, end, eoffset, estart, hi, isDST, l, lim, lo, m, name, offset, ok, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s};return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x$1, x$2, x$3, x$4, x$5, x$6, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x$1 = l.zone, x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).isDST) {
			zi = (((x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$5 = l.zone, ((zi < 0 || zi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$6 = l.zone, ((zi$1 < 0 || zi$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	tzset = function(s, lastTxSec, sec) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, dstIsDST, dstName, dstOffset, end, endRule, endSec, isDST, lastTxSec, name, offset, ok, s, sec, start, startRule, startSec, stdIsDST, stdName, stdOffset, x$1, x$2, x$3, x$4, x$5, x$6, yday, year, ysec;
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		isDST = false;
		ok = false;
		_tmp = "";
		_tmp$1 = "";
		stdName = _tmp;
		dstName = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		stdOffset = _tmp$2;
		dstOffset = _tmp$3;
		_tuple = tzsetName(s);
		stdName = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tuple$1 = tzsetOffset(s);
			stdOffset = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
		}
		if (!ok) {
			_tmp$4 = "";
			_tmp$5 = 0;
			_tmp$6 = new $Int64(0, 0);
			_tmp$7 = new $Int64(0, 0);
			_tmp$8 = false;
			_tmp$9 = false;
			name = _tmp$4;
			offset = _tmp$5;
			start = _tmp$6;
			end = _tmp$7;
			isDST = _tmp$8;
			ok = _tmp$9;
			return [name, offset, start, end, isDST, ok];
		}
		stdOffset = -stdOffset;
		if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
			_tmp$10 = stdName;
			_tmp$11 = stdOffset;
			_tmp$12 = lastTxSec;
			_tmp$13 = new $Int64(2147483647, 4294967295);
			_tmp$14 = false;
			_tmp$15 = true;
			name = _tmp$10;
			offset = _tmp$11;
			start = _tmp$12;
			end = _tmp$13;
			isDST = _tmp$14;
			ok = _tmp$15;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$2 = tzsetName(s);
		dstName = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (ok) {
			if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
				dstOffset = stdOffset + 3600 >> 0;
			} else {
				_tuple$3 = tzsetOffset(s);
				dstOffset = _tuple$3[0];
				s = _tuple$3[1];
				ok = _tuple$3[2];
				dstOffset = -dstOffset;
			}
		}
		if (!ok) {
			_tmp$16 = "";
			_tmp$17 = 0;
			_tmp$18 = new $Int64(0, 0);
			_tmp$19 = new $Int64(0, 0);
			_tmp$20 = false;
			_tmp$21 = false;
			name = _tmp$16;
			offset = _tmp$17;
			start = _tmp$18;
			end = _tmp$19;
			isDST = _tmp$20;
			ok = _tmp$21;
			return [name, offset, start, end, isDST, ok];
		}
		if (s.length === 0) {
			s = ",M3.2.0,M11.1.0";
		}
		if (!((s.charCodeAt(0) === 44)) && !((s.charCodeAt(0) === 59))) {
			_tmp$22 = "";
			_tmp$23 = 0;
			_tmp$24 = new $Int64(0, 0);
			_tmp$25 = new $Int64(0, 0);
			_tmp$26 = false;
			_tmp$27 = false;
			name = _tmp$22;
			offset = _tmp$23;
			start = _tmp$24;
			end = _tmp$25;
			isDST = _tmp$26;
			ok = _tmp$27;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tmp$28 = new rule.ptr(0, 0, 0, 0, 0);
		_tmp$29 = new rule.ptr(0, 0, 0, 0, 0);
		startRule = $clone(_tmp$28, rule);
		endRule = $clone(_tmp$29, rule);
		_tuple$4 = tzsetRule(s);
		rule.copy(startRule, _tuple$4[0]);
		s = _tuple$4[1];
		ok = _tuple$4[2];
		if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 44))) {
			_tmp$30 = "";
			_tmp$31 = 0;
			_tmp$32 = new $Int64(0, 0);
			_tmp$33 = new $Int64(0, 0);
			_tmp$34 = false;
			_tmp$35 = false;
			name = _tmp$30;
			offset = _tmp$31;
			start = _tmp$32;
			end = _tmp$33;
			isDST = _tmp$34;
			ok = _tmp$35;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tuple$5 = tzsetRule(s);
		rule.copy(endRule, _tuple$5[0]);
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok || s.length > 0) {
			_tmp$36 = "";
			_tmp$37 = 0;
			_tmp$38 = new $Int64(0, 0);
			_tmp$39 = new $Int64(0, 0);
			_tmp$40 = false;
			_tmp$41 = false;
			name = _tmp$36;
			offset = _tmp$37;
			start = _tmp$38;
			end = _tmp$39;
			isDST = _tmp$40;
			ok = _tmp$41;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$6 = absDate(((x$1 = (x$2 = new $Int64(sec.$high + 14, sec.$low + 2006054656), new $Int64(x$2.$high + 2147483631, x$2.$low + 2739393024)), new $Uint64(x$1.$high, x$1.$low))), false);
		year = _tuple$6[0];
		yday = _tuple$6[3];
		ysec = (x$3 = (new $Int64(0, ($imul(yday, 86400)))), x$4 = $div64(sec, new $Int64(0, 86400), true), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		d = daysSinceEpoch(year);
		abs = ((x$5 = $mul64(d, new $Uint64(0, 86400)), new $Int64(x$5.$high, x$5.$low)));
		abs = (x$6 = new $Int64(-2147483647, 3844486912), new $Int64(abs.$high + x$6.$high, abs.$low + x$6.$low));
		startSec = (new $Int64(0, tzruleTime(year, $clone(startRule, rule), stdOffset)));
		endSec = (new $Int64(0, tzruleTime(year, $clone(endRule, rule), dstOffset)));
		_tmp$42 = true;
		_tmp$43 = false;
		dstIsDST = _tmp$42;
		stdIsDST = _tmp$43;
		if ((endSec.$high < startSec.$high || (endSec.$high === startSec.$high && endSec.$low < startSec.$low))) {
			_tmp$44 = endSec;
			_tmp$45 = startSec;
			startSec = _tmp$44;
			endSec = _tmp$45;
			_tmp$46 = dstName;
			_tmp$47 = stdName;
			stdName = _tmp$46;
			dstName = _tmp$47;
			_tmp$48 = dstOffset;
			_tmp$49 = stdOffset;
			stdOffset = _tmp$48;
			dstOffset = _tmp$49;
			_tmp$50 = dstIsDST;
			_tmp$51 = stdIsDST;
			stdIsDST = _tmp$50;
			dstIsDST = _tmp$51;
		}
		if ((ysec.$high < startSec.$high || (ysec.$high === startSec.$high && ysec.$low < startSec.$low))) {
			_tmp$52 = stdName;
			_tmp$53 = stdOffset;
			_tmp$54 = abs;
			_tmp$55 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$56 = stdIsDST;
			_tmp$57 = true;
			name = _tmp$52;
			offset = _tmp$53;
			start = _tmp$54;
			end = _tmp$55;
			isDST = _tmp$56;
			ok = _tmp$57;
			return [name, offset, start, end, isDST, ok];
		} else if ((ysec.$high > endSec.$high || (ysec.$high === endSec.$high && ysec.$low >= endSec.$low))) {
			_tmp$58 = stdName;
			_tmp$59 = stdOffset;
			_tmp$60 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$61 = new $Int64(abs.$high + 0, abs.$low + 31536000);
			_tmp$62 = stdIsDST;
			_tmp$63 = true;
			name = _tmp$58;
			offset = _tmp$59;
			start = _tmp$60;
			end = _tmp$61;
			isDST = _tmp$62;
			ok = _tmp$63;
			return [name, offset, start, end, isDST, ok];
		} else {
			_tmp$64 = dstName;
			_tmp$65 = dstOffset;
			_tmp$66 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$67 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$68 = dstIsDST;
			_tmp$69 = true;
			name = _tmp$64;
			offset = _tmp$65;
			start = _tmp$66;
			end = _tmp$67;
			isDST = _tmp$68;
			ok = _tmp$69;
			return [name, offset, start, end, isDST, ok];
		}
	};
	tzsetName = function(s) {
		var _1, _i, _i$1, _ref, _ref$1, _rune, _rune$1, i, i$1, r, r$1, s;
		if (s.length === 0) {
			return ["", "", false];
		}
		if (!((s.charCodeAt(0) === 60))) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r = _rune[0];
				_1 = r;
				if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55)) || (_1 === (56)) || (_1 === (57)) || (_1 === (44)) || (_1 === (45)) || (_1 === (43))) {
					if (i < 3) {
						return ["", "", false];
					}
					return [$substring(s, 0, i), $substring(s, i), true];
				}
				_i += _rune[1];
			}
			if (s.length < 3) {
				return ["", "", false];
			}
			return [s, "", true];
		} else {
			_ref$1 = s;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.length)) { break; }
				_rune$1 = $decodeRune(_ref$1, _i$1);
				i$1 = _i$1;
				r$1 = _rune$1[0];
				if (r$1 === 62) {
					return [$substring(s, 1, i$1), $substring(s, (i$1 + 1 >> 0)), true];
				}
				_i$1 += _rune$1[1];
			}
			return ["", "", false];
		}
	};
	tzsetOffset = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, hours, mins, neg, off, offset, ok, rest, s, secs;
		offset = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			offset = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [offset, rest, ok];
		}
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			neg = true;
		}
		hours = 0;
		_tuple = tzsetNum(s, 0, 168);
		hours = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (!ok) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = false;
			offset = _tmp$3;
			rest = _tmp$4;
			ok = _tmp$5;
			return [offset, rest, ok];
		}
		off = $imul(hours, 3600);
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$6 = off;
			_tmp$7 = s;
			_tmp$8 = true;
			offset = _tmp$6;
			rest = _tmp$7;
			ok = _tmp$8;
			return [offset, rest, ok];
		}
		mins = 0;
		_tuple$1 = tzsetNum($substring(s, 1), 0, 59);
		mins = _tuple$1[0];
		s = _tuple$1[1];
		ok = _tuple$1[2];
		if (!ok) {
			_tmp$9 = 0;
			_tmp$10 = "";
			_tmp$11 = false;
			offset = _tmp$9;
			rest = _tmp$10;
			ok = _tmp$11;
			return [offset, rest, ok];
		}
		off = off + (($imul(mins, 60))) >> 0;
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$12 = off;
			_tmp$13 = s;
			_tmp$14 = true;
			offset = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [offset, rest, ok];
		}
		secs = 0;
		_tuple$2 = tzsetNum($substring(s, 1), 0, 59);
		secs = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (!ok) {
			_tmp$15 = 0;
			_tmp$16 = "";
			_tmp$17 = false;
			offset = _tmp$15;
			rest = _tmp$16;
			ok = _tmp$17;
			return [offset, rest, ok];
		}
		off = off + (secs) >> 0;
		if (neg) {
			off = -off;
		}
		_tmp$18 = off;
		_tmp$19 = s;
		_tmp$20 = true;
		offset = _tmp$18;
		rest = _tmp$19;
		ok = _tmp$20;
		return [offset, rest, ok];
	};
	tzsetRule = function(s) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, day, day$1, jday, mon, offset, ok, r, s, week;
		r = new rule.ptr(0, 0, 0, 0, 0);
		if (s.length === 0) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		ok = false;
		if (s.charCodeAt(0) === 74) {
			jday = 0;
			_tuple = tzsetNum($substring(s, 1), 1, 365);
			jday = _tuple[0];
			s = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 0;
			r.day = jday;
		} else if (s.charCodeAt(0) === 77) {
			mon = 0;
			_tuple$1 = tzsetNum($substring(s, 1), 1, 12);
			mon = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			week = 0;
			_tuple$2 = tzsetNum($substring(s, 1), 1, 5);
			week = _tuple$2[0];
			s = _tuple$2[1];
			ok = _tuple$2[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			day = 0;
			_tuple$3 = tzsetNum($substring(s, 1), 0, 6);
			day = _tuple$3[0];
			s = _tuple$3[1];
			ok = _tuple$3[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 2;
			r.day = day;
			r.week = week;
			r.mon = mon;
		} else {
			day$1 = 0;
			_tuple$4 = tzsetNum(s, 0, 365);
			day$1 = _tuple$4[0];
			s = _tuple$4[1];
			ok = _tuple$4[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 1;
			r.day = day$1;
		}
		if ((s.length === 0) || !((s.charCodeAt(0) === 47))) {
			r.time = 7200;
			return [r, s, true];
		}
		_tuple$5 = tzsetOffset($substring(s, 1));
		offset = _tuple$5[0];
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		r.time = offset;
		return [r, s, true];
	};
	tzsetNum = function(s, min, max) {
		var _i, _ref, _rune, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, i, max, min, num, ok, r, rest, s;
		num = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			num = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [num, rest, ok];
		}
		num = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r < 48 || r > 57) {
				if ((i === 0) || num < min) {
					_tmp$3 = 0;
					_tmp$4 = "";
					_tmp$5 = false;
					num = _tmp$3;
					rest = _tmp$4;
					ok = _tmp$5;
					return [num, rest, ok];
				}
				_tmp$6 = num;
				_tmp$7 = $substring(s, i);
				_tmp$8 = true;
				num = _tmp$6;
				rest = _tmp$7;
				ok = _tmp$8;
				return [num, rest, ok];
			}
			num = $imul(num, (10));
			num = num + ((((r >> 0)) - 48 >> 0)) >> 0;
			if (num > max) {
				_tmp$9 = 0;
				_tmp$10 = "";
				_tmp$11 = false;
				num = _tmp$9;
				rest = _tmp$10;
				ok = _tmp$11;
				return [num, rest, ok];
			}
			_i += _rune[1];
		}
		if (num < min) {
			_tmp$12 = 0;
			_tmp$13 = "";
			_tmp$14 = false;
			num = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [num, rest, ok];
		}
		_tmp$15 = num;
		_tmp$16 = "";
		_tmp$17 = true;
		num = _tmp$15;
		rest = _tmp$16;
		ok = _tmp$17;
		return [num, rest, ok];
	};
	tzruleTime = function(year, r, off) {
		var _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, d, dow, i, m1, off, r, s, x$1, year, yy0, yy1, yy2;
		s = 0;
		_1 = r.kind;
		if (_1 === (0)) {
			s = $imul(((r.day - 1 >> 0)), 86400);
			if (isLeap(year) && r.day >= 60) {
				s = s + (86400) >> 0;
			}
		} else if (_1 === (1)) {
			s = $imul(r.day, 86400);
		} else if (_1 === (2)) {
			m1 = (_r$1 = ((r.mon + 9 >> 0)) % 12, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			yy0 = year;
			if (r.mon <= 2) {
				yy0 = yy0 - (1) >> 0;
			}
			yy1 = (_q = yy0 / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			yy2 = (_r$2 = yy0 % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			dow = (_r$3 = (((((((_q$1 = ((($imul(26, m1)) - 2 >> 0)) / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) + yy2 >> 0) + (_q$2 = yy2 / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + (_q$3 = yy1 / 4, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) - ($imul(2, yy1)) >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
			if (dow < 0) {
				dow = dow + (7) >> 0;
			}
			d = r.day - dow >> 0;
			if (d < 0) {
				d = d + (7) >> 0;
			}
			i = 1;
			while (true) {
				if (!(i < r.week)) { break; }
				if ((d + 7 >> 0) >= daysIn(((r.mon >> 0)), year)) {
					break;
				}
				d = d + (7) >> 0;
				i = i + (1) >> 0;
			}
			d = d + ((((x$1 = r.mon - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0))) >> 0;
			if (isLeap(year) && r.mon > 2) {
				d = d + (1) >> 0;
			}
			s = $imul(d, 86400);
		}
		return (s + r.time >> 0) - off >> 0;
	};
	Location.ptr.prototype.lookupName = function(name, unix) {
		var {_i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s, $r, $c} = $restore(this, {name, unix});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x$1 = l.zone, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$2 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$2.$high, unix.$low - x$2.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		$s = 2; continue;
		case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$3 = l.zone, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.lookupName, $c: true, $r, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s};return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	Time.ptr.prototype.nsec = function() {
		var t, x$1;
		t = this;
		return (((x$1 = t.wall, new $Uint64(x$1.$high & 0, (x$1.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$3 = ((x$4 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$4.$high, x$4.$low))), new $Int64(13 + x$3.$high, 3618733952 + x$3.$low));
		}
		return t.ext;
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), new $Int64(x$1.$high + -15, x$1.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, sum, t, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			sec = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$4 = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & 0, (x$6.$low & 1073741823) >>> 0)), x$7 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0)), new $Uint64(x$4.$high | 2147483648, (x$4.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		sum = (x$8 = t.ext, new $Int64(x$8.$high + d.$high, x$8.$low + d.$low));
		if (((x$9 = t.ext, (sum.$high > x$9.$high || (sum.$high === x$9.$high && sum.$low > x$9.$low)))) === ((d.$high > 0 || (d.$high === 0 && d.$low > 0)))) {
			t.ext = sum;
		} else if ((d.$high > 0 || (d.$high === 0 && d.$low > 0))) {
			t.ext = new $Int64(2147483647, 4294967295);
		} else {
			t.ext = new $Int64(-2147483648, 1);
		}
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$3 = t.wall, x$4 = new $Uint64(0, 1073741823), new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high < us.$high || (ts.$high === us.$high && ts.$low < us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
		}
		return (x$7 = t.sec(), x$8 = u.sec(), (x$7.$high === x$8.$high && x$7.$low === x$8.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x$1;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= longMonthNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longMonthNames.$array[longMonthNames.$offset + x$1]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var buf, d, n;
		d = this.$val;
		if (0 <= d && d <= 6) {
			return ((d < 0 || d >= longDayNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longDayNames.$array[longDayNames.$offset + d]);
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, d)));
		return "%!Weekday(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), (x$1.$high === 0 && x$1.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var {_r$1, _r$2, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				offset = _tuple[1];
				sec = (x$4 = (new $Int64(0, offset)), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low)));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.abs, $c: true, $r, _r$1, _r$2, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var {_r$1, _r$2, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.locabs, $c: true, $r, _r$1, _r$2, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var {_r$1, _tuple, day, month, t, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Date, $c: true, $r, _r$1, _tuple, day, month, t, year, $s};return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var {_r$1, _tuple, t, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Year, $c: true, $r, _r$1, _tuple, t, year, $s};return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var {_r$1, _tuple, month, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Month, $c: true, $r, _r$1, _tuple, month, t, $s};return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var {_r$1, _tuple, day, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Day, $c: true, $r, _r$1, _tuple, day, t, $s};return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var {$24r, _r$1, _r$2, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Weekday, $c: true, $r, $24r, _r$1, _r$2, t, $s};return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var {_q, _r$1, _tmp, _tmp$1, _tuple, abs, d, t, week, x$1, yday, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		abs = _r$1;
		d = 4 - absWeekday(abs) >> 0;
		if (d === 4) {
			d = -3;
		}
		abs = (x$1 = $mul64((new $Uint64(0, d)), new $Uint64(0, 86400)), new $Uint64(abs.$high + x$1.$high, abs.$low + x$1.$low));
		_tuple = absDate(abs, false);
		year = _tuple[0];
		yday = _tuple[3];
		_tmp = year;
		_tmp$1 = (_q = yday / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
		year = _tmp;
		week = _tmp$1;
		$s = -1; return [year, week];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.ISOWeek, $c: true, $r, _q, _r$1, _tmp, _tmp$1, _tuple, abs, d, t, week, x$1, yday, year, $s};return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var {$24r, _r$1, _r$2, _tuple, hour, min, sec, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$24r = [hour, min, sec];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Clock, $c: true, $r, $24r, _r$1, _r$2, _tuple, hour, min, sec, t, $s};return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var {$24r, _q, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Hour, $c: true, $r, $24r, _q, _r$1, t, $s};return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var {$24r, _q, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Minute, $c: true, $r, $24r, _q, _r$1, t, $s};return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var {$24r, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (($div64(_r$1, new $Uint64(0, 60), true).$low >> 0));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Second, $c: true, $r, $24r, _r$1, t, $s};return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var {_r$1, _tuple, t, yday, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.YearDay, $c: true, $r, _r$1, _tuple, t, yday, $s};return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$2.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Microseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000), false);
	};
	$ptrType(Duration).prototype.Microseconds = function() { return this.$get().Microseconds(); };
	Duration.prototype.Milliseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000000), false);
	};
	$ptrType(Duration).prototype.Milliseconds = function() { return this.$get().Milliseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x$1 = $div64(d, m, true), new Duration(d.$high - x$1.$high, d.$low - x$1.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x$1, y) {
		var x$1, x$2, x$3, x$4, x$5, y;
		return (x$2 = (x$3 = (new $Uint64(x$1.$high, x$1.$low)), x$4 = (new $Uint64(x$1.$high, x$1.$low)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = (new $Uint64(y.$high, y.$low)), (x$2.$high < x$5.$high || (x$2.$high === x$5.$high && x$2.$low < x$5.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x$1, x$2;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x$1 = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x$1.$high + r.$high, x$1.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$2 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$2.$high - r.$high, x$2.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Duration.prototype.Abs = function() {
		var d;
		d = this;
		if ((d.$high > 0 || (d.$high === 0 && d.$low >= 0))) {
			return d;
		} else if ((d.$high === -2147483648 && d.$low === 0)) {
			return new Duration(2147483647, 4294967295);
		} else {
			return new Duration(-d.$high, -d.$low);
		}
	};
	$ptrType(Duration).prototype.Abs = function() { return this.$get().Abs(); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x$1 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$1.$high, x$1.$low)));
		nsec = t.nsec() + (((x$2 = $div64(d, new Duration(0, 1000000000), true), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high + x$3.$high, dsec.$low + x$3.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$4 = new $Int64(0, 1), new $Int64(dsec.$high - x$4.$high, dsec.$low - x$4.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & ~0, (x$6.$low & ~1073741823) >>> 0)), x$7 = (new $Uint64(0, nsec)), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$8 = (x$9 = t.wall, new $Uint64(x$9.$high & 2147483648, (x$9.$low & 0) >>> 0)), (x$8.$high === 0 && x$8.$low === 0)))) {
			te = (x$10 = t.ext, x$11 = (new $Int64(d.$high, d.$low)), new $Int64(x$10.$high + x$11.$high, x$10.$low + x$11.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$12 = t.ext, (te.$high > x$12.$high || (te.$high === x$12.$high && te.$low > x$12.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$13 = t.ext, (te.$high < x$13.$high || (te.$high === x$13.$high && te.$low < x$13.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			te = t.ext;
			ue = u.ext;
			d = ((x$5 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$5.$high, x$5.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$6 = $mul64(((x$7 = (x$8 = t.sec(), x$9 = u.sec(), new $Int64(x$8.$high - x$9.$high, x$8.$low - x$9.$low)), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$10 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$6.$high + x$10.$high, x$6.$low + x$10.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months, days) {
		var {$24r, _r$1, _r$2, _r$3, _tuple, _tuple$1, day, days, hour, min, month, months, sec, t, year, years, $s, $r, $c} = $restore(this, {years, months, days});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$2 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$3 = Date(year + years >> 0, month + ((months >> 0)) >> 0, day + days >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.AddDate, $c: true, $r, $24r, _r$1, _r$2, _r$3, _tuple, _tuple$1, day, days, hour, min, month, months, sec, t, year, years, $s};return $f;
	};
	Time.prototype.AddDate = function(years, months, days) { return this.$val.AddDate(years, months, days); };
	Time.ptr.prototype.date = function(full) {
		var {$24r, _r$1, _r$2, _tuple, day, full, month, t, yday, year, $s, $r, $c} = $restore(this, {full});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$24r = [year, month, day, yday];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.date, $c: true, $r, $24r, _r$1, _r$2, _tuple, day, full, month, t, yday, year, $s};return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x$1 = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x$1.$high, d.$low - x$1.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$2 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$2.$high, n.$low - x$2.$low));
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$3.$high, y.$low + x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$4.$high, d.$low - x$4.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$5.$high, y.$low + x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$6.$high, d.$low - x$6.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$7 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$7.$high, n.$low - x$7.$low));
		y = (x$8 = n, new $Uint64(y.$high + x$8.$high, y.$low + x$8.$low));
		d = (x$9 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$9.$high, d.$low - x$9.$low));
		year = (((x$10 = (x$11 = (new $Int64(y.$high, y.$low)), new $Int64(x$11.$high + -69, x$11.$low + 4075721025)), x$10.$low + ((x$10.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$12 = month + 1 >> 0, ((x$12 < 0 || x$12 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$12])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x$1, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0) >> 0));
	};
	daysSinceEpoch = function(year) {
		var d, n, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, year;
		y = ((x$1 = (x$2 = (new $Int64(0, year)), new $Int64(x$2.$high - -69, x$2.$low - 4075721025)), new $Uint64(x$1.$high, x$1.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$3 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$4 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$4.$high, y.$low - x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$5.$high, d.$low + x$5.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$6 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$6.$high, y.$low - x$6.$low));
		d = (x$7 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		n = y;
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		return d;
	};
	runtimeNano = function() {
		$throwRuntimeError("native function not implemented: time.runtimeNano");
	};
	Now = function() {
		var {_r$1, _tuple, mono, nsec, sec, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = now(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		sec = _tuple[0];
		nsec = _tuple[1];
		mono = _tuple[2];
		mono = (x$1 = startNano, new $Int64(mono.$high - x$1.$high, mono.$low - x$1.$low));
		sec = (x$2 = new $Int64(0, 2682288000), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
		if (!((x$3 = $shiftRightUint64((new $Uint64(sec.$high, sec.$low)), 33), (x$3.$high === 0 && x$3.$low === 0)))) {
			$s = -1; return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 13, sec.$low + 3618733952), $pkg.Local);
		}
		$s = -1; return new Time.ptr((x$4 = (x$5 = $shiftLeft64((new $Uint64(sec.$high, sec.$low)), 30), new $Uint64(2147483648 | x$5.$high, (0 | x$5.$low) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), mono, $pkg.Local);
		/* */ } return; } var $f = {$blk: Now, $c: true, $r, _r$1, _tuple, mono, nsec, sec, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	$pkg.Now = Now;
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var {_r$1, _tuple, name, offset, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r$1 = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Zone, $c: true, $r, _r$1, _tuple, name, offset, t, $s};return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.ZoneBounds = function() {
		var {_r$1, _tuple, end, endSec, start, startSec, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		start = new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
		end = new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
		t = this;
		_r$1 = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		startSec = _tuple[2];
		endSec = _tuple[3];
		if (!((startSec.$high === -2147483648 && startSec.$low === 0))) {
			Time.copy(start, unixTime(startSec, 0));
			start.setLoc(t.loc);
		}
		if (!((endSec.$high === 2147483647 && endSec.$low === 4294967295))) {
			Time.copy(end, unixTime(endSec, 0));
			end.setLoc(t.loc);
		}
		$s = -1; return [start, end];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.ZoneBounds, $c: true, $r, _r$1, _tuple, end, endSec, start, startSec, t, $s};return $f;
	};
	Time.prototype.ZoneBounds = function() { return this.$val.ZoneBounds(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixMilli = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64(t.unixSec(), new $Int64(0, 1000)), x$2 = $div64((new $Int64(0, t.nsec())), new $Int64(0, 1000000), false), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixMilli = function() { return this.$val.UnixMilli(); };
	Time.ptr.prototype.UnixMicro = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64(t.unixSec(), new $Int64(0, 1000000)), x$2 = $div64((new $Int64(0, t.nsec())), new $Int64(0, 1000), false), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixMicro = function() { return this.$val.UnixMicro(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$2 = (new $Int64(0, t.nsec())), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var {_q, _r$1, _r$2, _r$3, _tuple, enc, nsec, offset, offsetMin, offsetSec, sec, t, version, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		offsetSec = 0;
		version = 1;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			offset = _tuple[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				version = 2;
				offsetSec = (((_r$3 = offset % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) << 24 >> 24));
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([version, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		if (version === 2) {
			enc = $append(enc, ((offsetSec << 24 >>> 24)));
		}
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalBinary, $c: true, $r, _q, _r$1, _r$2, _r$3, _tuple, enc, nsec, offset, offsetMin, offsetSec, sec, t, version, $s};return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var {_r$1, _tuple, buf, data, localoff, nsec, offset, sec, t, version, wantLen, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		version = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		if (!((version === 1)) && !((version === 2))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		wantLen = 15;
		if (version === 2) {
			wantLen = wantLen + (1) >> 0;
		}
		if (!((buf.$length === wantLen))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (x$7 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$8 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$6.$high | x$9.$high, (x$6.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$5.$high | x$10.$high, (x$5.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$3.$high | x$12.$high, (x$3.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$2.$high | x$13.$high, (x$2.$low | x$13.$low) >>> 0)), x$14 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x$1.$high | x$14.$high, (x$1.$low | x$14.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		if (version === 2) {
			offset = offset + ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0))) >> 0;
		}
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalBinary, $c: true, $r, _r$1, _tuple, buf, data, localoff, nsec, offset, sec, t, version, wantLen, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var {$24r, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GobEncode, $c: true, $r, $24r, _r$1, t, $s};return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var {$24r, _r$1, data, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GobDecode, $c: true, $r, $24r, _r$1, data, t, $s};return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var {_r$1, _r$2, b, t, y, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalJSON, $c: true, $r, _r$1, _r$2, b, t, y, $s};return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var {_r$1, _tuple, data, err, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalJSON, $c: true, $r, _r$1, _tuple, data, err, t, $s};return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var {$24r, _r$1, _r$2, b, t, y, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = [_r$2, $ifaceNil];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalText, $c: true, $r, $24r, _r$1, _r$2, b, t, y, $s};return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var {_r$1, _tuple, data, err, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalText, $c: true, $r, _r$1, _tuple, data, err, t, $s};return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x$1, x$2, x$3, x$4;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x$1 = n, new $Int64(sec.$high + x$1.$high, sec.$low + x$1.$low));
			nsec = (x$2 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$3 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$3.$high, nsec.$low + x$3.$low));
				sec = (x$4 = new $Int64(0, 1), new $Int64(sec.$high - x$4.$high, sec.$low - x$4.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	Time.ptr.prototype.IsDST = function() {
		var {_r$1, _tuple, isDST, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.loc.lookup($clone(t, Time).Unix()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		isDST = _tuple[4];
		$s = -1; return isDST;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.IsDST, $c: true, $r, _r$1, _tuple, isDST, t, $s};return $f;
	};
	Time.prototype.IsDST = function() { return this.$val.IsDST(); };
	isLeap = function(year) {
		var _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var {_r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, day, end, hour, loc, m, min, month, nsec, offset, sec, start, t, unix, utc, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, year, $s, $r, $c} = $restore(this, {year, month, day, hour, min, sec, nsec, loc});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		d = daysSinceEpoch(year);
		d = (x$1 = (new $Uint64(0, (x$2 = month - 1 >> 0, ((x$2 < 0 || x$2 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$2])))), new $Uint64(d.$high + x$1.$high, d.$low + x$1.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$3 = new $Uint64(0, 1), new $Uint64(d.$high + x$3.$high, d.$low + x$3.$low));
		}
		d = (x$4 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$5 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$5.$high, abs.$low + x$5.$low));
		unix = (x$6 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$6.$high + -2147483647, x$6.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$5 = _r$1;
		offset = _tuple$5[1];
		start = _tuple$5[2];
		end = _tuple$5[3];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
			utc = (x$7 = (new $Int64(0, offset)), new $Int64(unix.$high - x$7.$high, unix.$low - x$7.$low));
			/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low)) || (utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low)) || (utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 4:
				_r$2 = loc.lookup(utc); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$6 = _r$2;
				offset = _tuple$6[1];
			/* } */ case 5:
			unix = (x$8 = (new $Int64(0, offset)), new $Int64(unix.$high - x$8.$high, unix.$low - x$8.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } var $f = {$blk: Date, $c: true, $r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, day, end, hour, loc, m, min, month, nsec, offset, sec, start, t, unix, utc, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, year, $s};return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x$1 = new $Int64(0, 1), new $Int64(sec.$high - x$1.$high, sec.$low - x$1.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$2 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$2.$high === 0 && x$2.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r$1 = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$3 = $div64(d, new Duration(0, 1000000000), true), (x$3.$high === 0 && x$3.$low === 0))) {
			d1 = ((x$4 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$4.$high, x$4.$low)));
			qmod2 = (((x$5 = $div64(sec, d1, false), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$6 = $mul64(((x$7 = $div64(sec, d1, true), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$8 = (new Duration(0, nsec)), new Duration(x$6.$high + x$8.$high, x$6.$low + x$8.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$9 = new $Uint64(0, 1), new $Uint64(u1.$high + x$9.$high, u1.$low + x$9.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$10 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$10.$high, u0.$low + x$10.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$11 = new $Uint64(0, 1), new $Uint64(u1.$high + x$11.$high, u1.$low + x$11.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$12 = $shiftRightUint64(d1$1, 63), (x$12.$high === 0 && x$12.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$13 = new $Uint64(0, 1), new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
					}
					u1 = (x$14 = d1$1, new $Uint64(u1.$high - x$14.$high, u1.$low - x$14.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$15 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$15.$high && d0.$low === x$15.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$16 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$16.$high, (d0.$low | x$16.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$87, _tmp$88, _tmp$89, _tmp$9, _tmp$90, _tmp$91, _tmp$92, c, ch, code, i, j, layout, prefix, std, std$1, suffix, x$1;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 23;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x$1 = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x$1 < 0 || x$1 >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x$1]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 48) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 267;
					_tmp$20 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$21 = $substring(layout, 0, i);
					_tmp$22 = 524;
					_tmp$23 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$21;
					std = _tmp$22;
					suffix = _tmp$23;
					return [prefix, std, suffix];
				}
				_tmp$24 = $substring(layout, 0, i);
				_tmp$25 = 259;
				_tmp$26 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$24;
				std = _tmp$25;
				suffix = _tmp$26;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$27 = $substring(layout, 0, i);
					_tmp$28 = 275;
					_tmp$29 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$27;
					std = _tmp$28;
					suffix = _tmp$29;
					return [prefix, std, suffix];
				}
				_tmp$30 = $substring(layout, 0, i);
				_tmp$31 = 263;
				_tmp$32 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$30;
				std = _tmp$31;
				suffix = _tmp$32;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$33 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$34 = 275;
						_tmp$35 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$33;
						std = _tmp$34;
						suffix = _tmp$35;
						return [prefix, std, suffix];
					}
					_tmp$36 = $substring(layout, 0, i);
					_tmp$37 = 264;
					_tmp$38 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$36;
					std = _tmp$37;
					suffix = _tmp$38;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 95) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$39 = $substring(layout, 0, i);
					_tmp$40 = 266;
					_tmp$41 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$39;
					std = _tmp$40;
					suffix = _tmp$41;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 525;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$45 = $substring(layout, 0, i);
				_tmp$46 = 527;
				_tmp$47 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$45;
				std = _tmp$46;
				suffix = _tmp$47;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$48 = $substring(layout, 0, i);
				_tmp$49 = 529;
				_tmp$50 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$48;
				std = _tmp$49;
				suffix = _tmp$50;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 533;
					_tmp$53 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 534;
					_tmp$56 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 30;
					_tmp$59 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 33;
					_tmp$62 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 32;
					_tmp$68 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 31;
					_tmp$71 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 25;
					_tmp$74 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 28;
					_tmp$77 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$81 = $substring(layout, 0, i);
					_tmp$82 = 27;
					_tmp$83 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$81;
					std = _tmp$82;
					suffix = _tmp$83;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$84 = $substring(layout, 0, i);
					_tmp$85 = 26;
					_tmp$86 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$84;
					std = _tmp$85;
					suffix = _tmp$86;
					return [prefix, std, suffix];
				}
			} else if ((_1 === (46)) || (_1 === (44))) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						code = 34;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							code = 35;
						}
						std$1 = stdFracSecond(code, j - ((i + 1 >> 0)) >> 0, c);
						_tmp$87 = $substring(layout, 0, i);
						_tmp$88 = std$1;
						_tmp$89 = $substring(layout, j);
						prefix = _tmp$87;
						std = _tmp$88;
						suffix = _tmp$89;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$90 = layout;
		_tmp$91 = 0;
		_tmp$92 = "";
		prefix = _tmp$90;
		std = _tmp$91;
		suffix = _tmp$92;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x$1, width) {
		var _q, b, buf, i, q, u, w, width, x$1;
		u = ((x$1 >>> 0));
		if (x$1 < 0) {
			b = $append(b, 45);
			u = ((-x$1 >>> 0));
		}
		buf = arrayType$3.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x$1;
		x$1 = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x$1 = ((q.$low >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x$1 = _tmp;
			err = _tmp$1;
			return [x$1, err];
		}
		if (neg) {
			x$1 = -x$1;
		}
		_tmp$2 = x$1;
		_tmp$3 = $ifaceNil;
		x$1 = _tmp$2;
		err = _tmp$3;
		return [x$1, err];
	};
	stdFracSecond = function(code, n, c) {
		var c, code, n;
		if (c === 46) {
			return code | ((((n & 4095)) << 16 >> 0));
		}
		return (code | ((((n & 4095)) << 16 >> 0))) | 268435456;
	};
	digitsLen = function(std) {
		var std;
		return ((std >> 16 >> 0)) & 4095;
	};
	separator = function(std) {
		var std;
		if (((std >> 28 >> 0)) === 0) {
			return 46;
		}
		return 44;
	};
	formatNano = function(b, nanosec, std) {
		var _q, _r$1, b, buf, n, nanosec, separator$1, start, std, trim, u, x$1;
		n = digitsLen(std);
		separator$1 = separator(std);
		trim = (std & 65535) === 35;
		u = nanosec;
		buf = arrayType$4.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$1])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, separator$1);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var {_r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = _r$1;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			m2 = ((x$3 = t.ext, new $Uint64(x$3.$high, x$3.$low)));
			sign = 43;
			if ((x$4 = t.ext, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = $makeSlice(sliceType$3, 0, 24);
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.String, $c: true, $r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.GoString = function() {
		var {_1, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, loc, month, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		buf = $makeSlice(sliceType$3, 0, 70);
		buf = $appendSlice(buf, "time.Date(");
		_arg = buf;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_r$2 = appendInt(_arg, _arg$1, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		buf = _r$2;
		_r$3 = $clone(t, Time).Month(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		month = _r$3;
		/* */ if (1 <= month && month <= 12) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (1 <= month && month <= 12) { */ case 4:
			buf = $appendSlice(buf, ", time.");
			_arg$2 = buf;
			_r$4 = $clone(t, Time).Month(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = new Month(_r$4).String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$3 = _r$5;
			buf = $appendSlice(_arg$2, _arg$3);
			$s = 6; continue;
		/* } else { */ case 5:
			buf = appendInt(buf, ((month >> 0)), 0);
		/* } */ case 6:
		buf = $appendSlice(buf, ", ");
		_arg$4 = buf;
		_r$6 = $clone(t, Time).Day(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$5 = _r$6;
		_r$7 = appendInt(_arg$4, _arg$5, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		buf = _r$7;
		buf = $appendSlice(buf, ", ");
		_arg$6 = buf;
		_r$8 = $clone(t, Time).Hour(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$7 = _r$8;
		_r$9 = appendInt(_arg$6, _arg$7, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		buf = _r$9;
		buf = $appendSlice(buf, ", ");
		_arg$8 = buf;
		_r$10 = $clone(t, Time).Minute(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_arg$9 = _r$10;
		_r$11 = appendInt(_arg$8, _arg$9, 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		buf = _r$11;
		buf = $appendSlice(buf, ", ");
		_arg$10 = buf;
		_r$12 = $clone(t, Time).Second(); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_arg$11 = _r$12;
		_r$13 = appendInt(_arg$10, _arg$11, 0); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		buf = _r$13;
		buf = $appendSlice(buf, ", ");
		buf = appendInt(buf, $clone(t, Time).Nanosecond(), 0);
		buf = $appendSlice(buf, ", ");
		loc = $clone(t, Time).Location();
		_1 = loc;
		if (_1 === ($pkg.UTC) || _1 === ptrType$2.nil) {
			buf = $appendSlice(buf, "time.UTC");
		} else if (_1 === ($pkg.Local)) {
			buf = $appendSlice(buf, "time.Local");
		} else {
			buf = $appendSlice(buf, "time.Location(");
			buf = $appendSlice(buf, (new sliceType$3($stringToBytes(quote(loc.name)))));
			buf = $appendSlice(buf, ")");
		}
		buf = $append(buf, 41);
		$s = -1; return ($bytesToString(buf));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GoString, $c: true, $r, _1, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, loc, month, t, $s};return $f;
	};
	Time.prototype.GoString = function() { return this.$val.GoString(); };
	Time.ptr.prototype.Format = function(layout) {
		var {_r$1, b, buf, layout, max, t, $s, $r, $c} = $restore(this, {layout});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$5.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Format, $c: true, $r, _r$1, b, buf, layout, max, t, $s};return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var {_1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, yday, year, zone$1, zone$2, $s, $r, $c} = $restore(this, {b, layout});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		yday = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
				yday = _tuple$2[3];
				yday = yday + (1) >> 0;
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (275)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (266)) {
					if (yday < 100) {
						b = $append(b, 32);
						if (yday < 10) {
							b = $append(b, 32);
						}
					}
					b = appendInt(b, yday, 0);
				} else if (_1 === (267)) {
					b = appendInt(b, yday, 3);
				} else if (_1 === (524)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (525)) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (526)) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (529)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (530)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (533)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (534)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (32)) || (_1 === (30)) || (_1 === (31)) || (_1 === (33))) {
					if ((offset === 0) && ((std === 24) || (std === 27) || (std === 25) || (std === 26) || (std === 28))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 27) || (std === 32) || (std === 28) || (std === 33)) {
						b = $append(b, 58);
					}
					if (!((std === 31)) && !((std === 26))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 25) || (std === 30) || (std === 33) || (std === 28)) {
						if ((std === 33) || (std === 28)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (23)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (34)) || (_1 === (35))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.AppendFormat, $c: true, $r, _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, yday, year, zone$1, zone$2, $s};return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var _i, _ref, _rune, buf, c, i, j, s, width;
		buf = $makeSlice(sliceType$3, 1, (s.length + 2 >> 0));
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = 34);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c >= 128 || c < 32) {
				width = 0;
				if (c === 65533) {
					width = 1;
					if ((i + 2 >> 0) < s.length && $substring(s, i, (i + 3 >> 0)) === "\xEF\xBF\xBD") {
						width = 3;
					}
				} else {
					width = ($encodeRune(c)).length;
				}
				j = 0;
				while (true) {
					if (!(j < width)) { break; }
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt((i + j >> 0)) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt((i + j >> 0)) & 15) >>> 0)));
					j = j + (1) >> 0;
				}
			} else {
				if ((c === 34) || (c === 92)) {
					buf = $append(buf, 92);
				}
				buf = $appendSlice(buf, ($encodeRune(c)));
			}
			_i += _rune[1];
		}
		buf = $append(buf, 34);
		return ($bytesToString(buf));
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	getnum3 = function(s, fixed) {
		var _tmp, _tmp$1, fixed, i, n, s;
		_tmp = 0;
		_tmp$1 = 0;
		n = _tmp;
		i = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < 3 && isDigit(s, i))) { break; }
			n = ($imul(n, 10)) + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			i = i + (1) >> 0;
		}
		if ((i === 0) || fixed && !((i === 3))) {
			return [0, s, errBad];
		}
		return [n, $substring(s, i), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var {$24r, _r$1, layout, value, $s, $r, $c} = $restore(this, {layout, value});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Parse, $c: true, $r, $24r, _r$1, layout, value, $s};return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var {$24r, $24r$1, _1, _2, _3, _4, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, d, day, defaultLocation, err, hold, hour, hour$1, hr, i, i$1, layout, local, m, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, x$3, yday, year, z, zoneName, zoneOffset, $s, $r, $c} = $restore(this, {layout, value, defaultLocation, local});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = -1;
		day = -1;
		yday = -1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + quote(value))];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					hold = value;
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						value = hold;
					} else if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (275)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if ($interfaceIsEqual(err, $ifaceNil) && (month <= 0 || 12 < month)) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (266)) || (_1 === (267))) {
					i = 0;
					while (true) {
						if (!(i < 2)) { break; }
						if ((std === 266) && value.length > 0 && (value.charCodeAt(0) === 32)) {
							value = $substring(value, 1);
						}
						i = i + (1) >> 0;
					}
					_tuple$10 = getnum3(value, std === 267);
					yday = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
				} else if (_1 === (524)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (529)) || (_1 === (530))) {
					_tuple$14 = getnum(value, std === 530);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && commaOrPeriod(value.charCodeAt(0)) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 34) || (std === 35)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (533)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (534)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31)) || (_1 === (32)) || (_1 === (30)) || (_1 === (33))) {
					if (((std === 24) || (std === 26) || (std === 27)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 27) || (std === 32)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 31) || (std === 26)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 28) || (std === 33)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 25) || (std === 30)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (23)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (34)) {
					ndigit = 1 + digitsLen(std) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (35)) {
					if (value.length < 2 || !commaOrPeriod(value.charCodeAt(0)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i$1 = 0;
					while (true) {
						if (!(i$1 < 9 && (i$1 + 1 >> 0) < value.length && 48 <= value.charCodeAt((i$1 + 1 >> 0)) && value.charCodeAt((i$1 + 1 >> 0)) <= 57)) { break; }
						i$1 = i$1 + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i$1 >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i$1 >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (yday >= 0) {
			d = 0;
			m = 0;
			if (isLeap(year)) {
				if (yday === 60) {
					m = 2;
					d = 29;
				} else if (yday > 60) {
					yday = yday - (1) >> 0;
				}
			}
			if (yday < 1 || yday > 365) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year out of range")];
			}
			if (m === 0) {
				m = (_q = ((yday - 1 >> 0)) / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
				if (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) >> 0)) < yday) {
					m = m + (1) >> 0;
				}
				d = yday - (((x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0)) >> 0;
			}
			if (month >= 0 && !((month === m))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match month")];
			}
			month = m;
			if (day >= 0 && !((day === d))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match day")];
			}
			day = d;
		} else {
			if (month < 0) {
				month = 1;
			}
			if (day < 0) {
				day = 1;
			}
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = [_r$1, $ifaceNil];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$2 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.addSec((x$2 = (new $Int64(0, zoneOffset)), new $Int64(-x$2.$high, -x$2.$low)));
			_r$3 = local.lookup(t.unixSec()); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$4 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[1];
			if (ok$1) {
				t$1.addSec((x$3 = (new $Int64(0, offset$1)), new $Int64(-x$3.$high, -x$3.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$6 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r$1 = [_r$6, $ifaceNil];
		$s = 14; case 14: return $24r$1;
		/* */ } return; } var $f = {$blk: parse, $c: true, $r, $24r, $24r$1, _1, _2, _3, _4, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, d, day, defaultLocation, err, hold, hour, hour$1, hr, i, i$1, layout, local, m, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, x$3, yday, year, z, zoneName, zoneOffset, $s};return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, ok$1, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		if ((value.charCodeAt(0) === 43) || (value.charCodeAt(0) === 45)) {
			length = parseSignedOffset(value);
			ok$1 = length > 0;
			_tmp$6 = length;
			_tmp$7 = ok$1;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$8 = 0;
			_tmp$9 = false;
			length = _tmp$8;
			ok = _tmp$9;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$10 = 5;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$12 = 4;
				_tmp$13 = true;
				length = _tmp$12;
				ok = _tmp$13;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$14 = 3;
			_tmp$15 = true;
			length = _tmp$14;
			ok = _tmp$15;
			return [length, ok];
		}
		_tmp$16 = 0;
		_tmp$17 = false;
		length = _tmp$16;
		ok = _tmp$17;
		return [length, ok];
	};
	parseGMT = function(value) {
		var value;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		return 3 + parseSignedOffset(value) >> 0;
	};
	parseSignedOffset = function(value) {
		var _tuple, err, rem, sign, value, x$1;
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 0;
		}
		_tuple = leadingInt($substring(value, 1));
		x$1 = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil)) || $substring(value, 1) === rem) {
			return 0;
		}
		if ((x$1.$high > 0 || (x$1.$high === 0 && x$1.$low > 23))) {
			return 0;
		}
		return value.length - rem.length >> 0;
	};
	commaOrPeriod = function(b) {
		var b;
		return (b === 46) || (b === 44);
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!commaOrPeriod(value.charCodeAt(0))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		if (nbytes > 10) {
			value = $substring(value, 0, 10);
			nbytes = 10;
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x$1, x$2, x$3, x$4;
		x$1 = new $Uint64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x$1.$high > 214748364 || (x$1.$high === 214748364 && x$1.$low > 3435973836))) {
				_tmp = new $Uint64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x$1 = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x$1, rem, err];
			}
			x$1 = (x$2 = (x$3 = $mul64(x$1, new $Uint64(0, 10)), x$4 = (new $Uint64(0, c)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), new $Uint64(x$2.$high - 0, x$2.$low - 48));
			if ((x$1.$high > 2147483648 || (x$1.$high === 2147483648 && x$1.$low > 0))) {
				_tmp$3 = new $Uint64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x$1 = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x$1, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x$1;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x$1 = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x$1, rem, err];
	};
	initLocal = function() {
		var _q, _r$1, d, min, offset, z;
		localLoc.name = "Local";
		z = new zone.ptr("", 0, false);
		d = new ($global.Date)();
		offset = $imul(($parseInt(d.getTimezoneOffset()) >> 0), -1);
		z.offset = $imul(offset, 60);
		z.name = "UTC";
		if (offset < 0) {
			z.name = z.name + ("-");
			offset = $imul(offset, (-1));
		} else {
			z.name = z.name + ("+");
		}
		z.name = z.name + (itoa((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		min = (_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (!((min === 0))) {
			z.name = z.name + (":" + itoa(min));
		}
		localLoc.zone = new sliceType([$clone(z, zone)]);
	};
	itoa = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	now = function() {
		var {_r$1, _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		sec = new $Int64(0, 0);
		nsec = 0;
		mono = new $Int64(0, 0);
		_r$1 = runtimeNano(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n = _r$1;
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x$1 = $div64(n, new $Int64(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
		_tmp$2 = n;
		sec = _tmp;
		nsec = _tmp$1;
		mono = _tmp$2;
		$s = -1; return [sec, nsec, mono];
		/* */ } return; } var $f = {$blk: now, $c: true, $r, _r$1, _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x$1, $s};return $f;
	};
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Int64, $Int64, $Bool], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	Time.methods = [{prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "ZoneBounds", name: "ZoneBounds", pkg: "", typ: $funcType([], [Time, Time], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixMilli", name: "UnixMilli", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixMicro", name: "UnixMicro", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "IsDST", name: "IsDST", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}];
	ptrType$4.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Microseconds", name: "Microseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Milliseconds", name: "Milliseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Duration], false)}];
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Location.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "extend", name: "extend", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "cacheStart", name: "cacheStart", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	rule.init("time", [{prop: "kind", name: "kind", embedded: false, exported: false, typ: ruleKind, tag: ""}, {prop: "day", name: "day", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "week", name: "week", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "mon", name: "mon", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "time", name: "time", embedded: false, exported: false, typ: $Int, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	ParseError.init("", [{prop: "Layout", name: "Layout", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", embedded: false, exported: true, typ: $String, tag: ""}]);
	$pkg.$initLinknames = function() {
		runtimeNano = $linknames["runtime.nanotime"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		badData = errors.New("malformed time zone information");
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		_r = runtimeNano(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		startNano = (x = _r, new $Int64(x.$high - 0, x.$low - 1));
		std0x = $toNativeArray($kindInt, [260, 265, 526, 528, 530, 276]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, unix, io, atomic, syscall, time, FD, pollDesc, fdMutex, errNetClosing, DeadlineExceededError, ptrType, ptrType$1, ptrType$2, ptrType$3, sliceType, sliceType$1, ptrType$4, ptrType$5, ptrType$6, ptrType$7, funcType, funcType$1, ptrType$8, ptrType$9, ptrType$10, tryDupCloexec, tryDupCloexec$24ptr, accept, DupCloseOnExec, dupCloseOnExecOld, ignoringEINTRIO, ignoringEINTR, setDeadlineImpl, errClosing, fcntl, runtime_Semacquire, runtime_Semrelease;
	errors = $packages["errors"];
	unix = $packages["internal/syscall/unix"];
	io = $packages["io"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, isBlocking_, IsStream_, ZeroReadIsEOF_, isFile_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(ptrType$2.nil, false);
			this.iovecs = ptrType$4.nil;
			this.csema = 0;
			this.isBlocking = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.isBlocking = isBlocking_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
	});
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(fd_, closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = ptrType$2.nil;
			this.closing = false;
			return;
		}
		this.fd = fd_;
		this.closing = closing_;
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	errNetClosing = $pkg.errNetClosing = $newType(0, $kindStruct, "poll.errNetClosing", true, "internal/poll", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	DeadlineExceededError = $pkg.DeadlineExceededError = $newType(0, $kindStruct, "poll.DeadlineExceededError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType($Uint32);
	ptrType$1 = $ptrType($Int32);
	ptrType$2 = $ptrType(FD);
	ptrType$3 = $ptrType($Uint64);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(syscall.Iovec);
	ptrType$4 = $ptrType(sliceType$1);
	ptrType$5 = $ptrType(syscall.SockaddrInet4);
	ptrType$6 = $ptrType(syscall.SockaddrInet6);
	ptrType$7 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [$Bool], false);
	funcType$1 = $funcType([$Uintptr], [], false);
	ptrType$8 = $ptrType(pollDesc);
	ptrType$9 = $ptrType(fdMutex);
	ptrType$10 = $ptrType(DeadlineExceededError);
	accept = function(s) {
		var {_r, _r$1, _tuple, err, ns, s, sa, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } var $f = {$blk: accept, $c: true, $r, _r, _r$1, _tuple, err, ns, s, sa, $s};return $f;
	};
	FD.ptr.prototype.Init = function(net, pollable) {
		var err, fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = 1;
			return $ifaceNil;
		}
		err = fd.pd.init(fd);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			fd.isBlocking = 1;
		}
		return err;
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var {_r, err, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.destroy, $c: true, $r, _r, err, fd, $s};return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var {_r, _r$1, err, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (fd.isBlocking === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (fd.isBlocking === 0) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.Close, $c: true, $r, _r, _r$1, err, fd, $s};return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.SetBlocking = function() {
		var {$24r, $24r$1, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		atomic.StoreUint32((fd.$ptr_isBlocking || (fd.$ptr_isBlocking = new ptrType(function() { return this.$target.isBlocking; }, function($v) { this.$target.isBlocking = $v; }, fd))), 1);
		$24r$1 = syscall.SetNonblock(fd.Sysfd, false);
		$s = 4; case 4: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.SetBlocking, $c: true, $r, $24r, $24r$1, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		/* */ if (p.$length === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.$length === 0) { */ case 5:
			$24r$1 = [0, $ifaceNil];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 8:
			$24r$2 = [0, err$1];
			$s = 10; case 10: return $24r$2;
		/* } */ case 9:
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		/* while (true) { */ case 11:
			_r$1 = ignoringEINTRIO(syscall.Read, fd.Sysfd, p); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 11; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$3 = [n, err$2];
			$s = 14; case 14: return $24r$3;
		case 12:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Read, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var {_r, _r$1, _tuple, err, err$1, fd, n, off, p, $s, $r, $c} = $restore(this, {p, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		n = 0;
		err$1 = $ifaceNil;
		/* while (true) { */ case 1:
			_r = syscall.Pread(fd.Sysfd, p, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, new syscall.Errno(4)))) {
				/* break; */ $s = 2; continue;
			}
		$s = 1; continue;
		case 2:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.Pread, $c: true, $r, _r, _r$1, _tuple, err, err$1, fd, n, off, p, $s};return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, sa, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFrom, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadFromInet4 = function(p, from) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred, $r, $c} = $restore(this, {p, from});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvfromInet4(fd.Sysfd, p, 0, from);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFromInet4, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFromInet4 = function(p, from) { return this.$val.ReadFromInet4(p, from); };
	FD.ptr.prototype.ReadFromInet6 = function(p, from) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred, $r, $c} = $restore(this, {p, from});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvfromInet6(fd.Sysfd, p, 0, from);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFromInet6, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFromInet6 = function(p, from) { return this.$val.ReadFromInet6(p, from); };
	FD.ptr.prototype.ReadMsg = function(p, oob, flags) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, flags);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, sa, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsg, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob, flags) { return this.$val.ReadMsg(p, oob, flags); };
	FD.ptr.prototype.ReadMsgInet4 = function(p, oob, flags, sa4) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa4, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags, sa4});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvmsgInet4(fd.Sysfd, p, oob, flags, sa4);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			err$2 = _tuple[3];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsgInet4, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa4, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsgInet4 = function(p, oob, flags, sa4) { return this.$val.ReadMsgInet4(p, oob, flags, sa4); };
	FD.ptr.prototype.ReadMsgInet6 = function(p, oob, flags, sa6) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa6, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags, sa6});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvmsgInet6(fd.Sysfd, p, oob, flags, sa6);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			err$2 = _tuple[3];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsgInet6, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa6, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsgInet6 = function(p, oob, flags, sa6) { return this.$val.ReadMsgInet6(p, oob, flags, sa6); };
	FD.ptr.prototype.Write = function(p) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, _r, _r$1, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		nn = 0;
		/* while (true) { */ case 8:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, $subslice(p, nn, max)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (nn === p.$length) { */ case 11:
				$24r$2 = [nn, err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = [nn, err$2];
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
			/* */ if (n === 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (n === 0) { */ case 17:
				$24r$4 = [nn, io.ErrUnexpectedEOF];
				$s = 19; case 19: return $24r$4;
			/* } */ case 18:
		$s = 8; continue;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Write, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, _r, _r$1, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred};return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r, $c} = $restore(this, {p, off});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		/* while (true) { */ case 4:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if ($interfaceIsEqual(err$1, new syscall.Errno(4))) {
				/* continue; */ $s = 4; continue;
			}
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (nn === p.$length) { */ case 7:
				$24r$1 = [nn, err$1];
				$s = 9; case 9: return $24r$1;
			/* } */ case 8:
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:
				$24r$2 = [nn, err$1];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			/* */ if (n === 0) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (n === 0) { */ case 13:
				$24r$3 = [nn, io.ErrUnexpectedEOF];
				$s = 15; case 15: return $24r$3;
			/* } */ case 14:
		$s = 4; continue;
		case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Pwrite, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred};return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteToInet4 = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = unix.SendtoInet4(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteToInet4, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteToInet4 = function(p, sa) { return this.$val.WriteToInet4(p, sa); };
	FD.ptr.prototype.WriteToInet6 = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = unix.SendtoInet6(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteToInet6, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteToInet6 = function(p, sa) { return this.$val.WriteToInet6(p, sa); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = syscall.Sendto(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteTo, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsg, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.WriteMsgInet4 = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.SendmsgNInet4(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsgInet4, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsgInet4 = function(p, oob, sa) { return this.$val.WriteMsgInet4(p, oob, sa); };
	FD.ptr.prototype.WriteMsgInet6 = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.SendmsgNInet6(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsgInet6, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsgInet6 = function(p, oob, sa) { return this.$val.WriteMsgInet6(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var {$24r, $24r$1, $24r$2, $24r$3, _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [-1, $ifaceNil, "", err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [-1, $ifaceNil, "", err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = accept(fd.Sysfd); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			/* */ if ($interfaceIsEqual(err$2, $ifaceNil)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($interfaceIsEqual(err$2, $ifaceNil)) { */ case 11:
				$24r$2 = [s, rsa, "", err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((4)))) {
				/* continue; */ $s = 8; continue;
			} else if ($interfaceIsEqual(_1, new syscall.Errno((11)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((103)))) {
				/* continue; */ $s = 8; continue;
			}
			$24r$3 = [-1, $ifaceNil, errcall, err$2];
			$s = 14; case 14: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Accept, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred};return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var {$24r, $24r$1, _r, err, fd, offset, whence, $s, $deferred, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [new $Int64(0, 0), err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Seek(fd.Sysfd, offset, whence); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Seek, $c: true, $r, $24r, $24r$1, _r, err, fd, offset, whence, $s, $deferred};return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var {$24r, $24r$1, _r, _tuple, buf, err, err$1, fd, n, $s, $deferred, $r, $c} = $restore(this, {buf});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		/* while (true) { */ case 4:
			_r = ignoringEINTRIO(syscall.ReadDirent, fd.Sysfd, buf); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						/* continue; */ $s = 4; continue;
					}
				}
			}
			$24r$1 = [n, err$1];
			$s = 7; case 7: return $24r$1;
		case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadDirent, $c: true, $r, $24r, $24r$1, _r, _tuple, buf, err, err$1, fd, n, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var {$24r, $24r$1, _r, err, fd, mode, $s, $deferred, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		mode = [mode];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, mode) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchmod(fd[0].Sysfd, mode[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, mode)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchmod, $c: true, $r, $24r, $24r$1, _r, err, fd, mode, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchdir = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Fchdir(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchdir, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var {$24r, $24r$1, _r, err, fd, s, $s, $deferred, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		s = [s];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, s) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fstat(fd[0].Sysfd, s[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, s)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fstat, $c: true, $r, $24r, $24r$1, _r, err, fd, s, $s, $deferred};return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	DupCloseOnExec = function(fd) {
		var {$24r, _1, _r, _tuple, e1, fd, r0, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (true && (atomic.LoadInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; })))) === 1)) {
			_tuple = fcntl(fd, 1, 0);
			r0 = _tuple[0];
			e1 = _tuple[1];
			if ($interfaceIsEqual(e1, $ifaceNil)) {
				$s = -1; return [r0, "", $ifaceNil];
			}
			_1 = $assertType(e1, syscall.Errno);
			if ((_1 === (22)) || (_1 === (38))) {
				atomic.StoreInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; }))), 0);
			} else {
				$s = -1; return [-1, "fcntl", e1];
			}
		}
		_r = dupCloseOnExecOld(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: DupCloseOnExec, $c: true, $r, $24r, _1, _r, _tuple, e1, fd, r0, $s};return $f;
	};
	$pkg.DupCloseOnExec = DupCloseOnExec;
	dupCloseOnExecOld = function(fd) {
		var {$24r, $24r$1, _tuple, err, fd, newfd, $s, $deferred, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$r = syscall.ForkLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(syscall.ForkLock, "RUnlock"), []]);
		_tuple = syscall.Dup(fd);
		newfd = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [-1, "dup", err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		syscall.CloseOnExec(newfd);
		$24r$1 = [newfd, "", $ifaceNil];
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: dupCloseOnExecOld, $c: true, $r, $24r, $24r$1, _tuple, err, fd, newfd, $s, $deferred};return $f; } }
	};
	FD.ptr.prototype.Dup = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [-1, "", err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = DupCloseOnExec(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Dup, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Dup = function() { return this.$val.Dup(); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var {$24r, $24r$1, _r, _r$1, err, fd, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteOnce, $c: true, $r, $24r, $24r$1, _r, _r$1, err, fd, p, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawRead = function(f) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitRead(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		$s = 8; continue;
		case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawRead, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitWrite(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		$s = 8; continue;
		case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawWrite, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	ignoringEINTRIO = function(fn, fd, p) {
		var {_r, _tuple, err, fd, fn, n, p, $s, $r, $c} = $restore(this, {fn, fd, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(fd, p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return [n, err];
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } var $f = {$blk: ignoringEINTRIO, $c: true, $r, _r, _tuple, err, fd, fn, n, p, $s};return $f;
	};
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Shutdown = function(how) {
		var {$24r, $24r$1, err, fd, how, $s, $deferred, $r, $c} = $restore(this, {how});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		$24r$1 = syscall.Shutdown(fd.Sysfd, how);
		$s = 4; case 4: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Shutdown, $c: true, $r, $24r, $24r$1, err, fd, how, $s, $deferred};return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var {$24r, $24r$1, _r, err, fd, gid, uid, $s, $deferred, $r, $c} = $restore(this, {uid, gid});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		gid = [gid];
		uid = [uid];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, gid, uid) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchown(fd[0].Sysfd, uid[0], gid[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, gid, uid)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchown, $c: true, $r, $24r, $24r$1, _r, err, fd, gid, uid, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var {$24r, $24r$1, _r, err, fd, size, $s, $deferred, $r, $c} = $restore(this, {size});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		size = [size];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, size) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Ftruncate(fd[0].Sysfd, size[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, size)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Ftruncate, $c: true, $r, $24r, $24r$1, _r, err, fd, size, $s, $deferred};return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.RawControl = function(f) {
		var {$24r, $24r$1, err, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$24r$1 = $ifaceNil;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawControl, $c: true, $r, $24r, $24r$1, err, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	ignoringEINTR = function(fn) {
		var {_r, err, fn, $s, $r, $c} = $restore(this, {fn});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ignoringEINTR, $c: true, $r, _r, err, fn, $s};return $f;
	};
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		pd.fd = fd;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
		if (!(pd.fd === ptrType$2.nil)) {
			syscall.StopIO(pd.fd.Sysfd);
		}
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		if (isFile) {
			return $ifaceNil;
		}
		return $pkg.ErrDeadlineExceeded;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		var pd;
		pd = this;
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 233); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 114); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetReadDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 119); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetWriteDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	setDeadlineImpl = function(fd, t, mode) {
		var {_1, _r, d, err, fd, mode, t, $s, $r, $c} = $restore(this, {fd, t, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		d = $clone(t, time.Time).UnixNano();
		if ($clone(t, time.Time).IsZero()) {
			d = new $Int64(0, 0);
		}
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_1 = mode;
		if (_1 === (114)) {
			syscall.SetReadDeadline(fd.Sysfd, d);
		} else if (_1 === (119)) {
			syscall.SetWriteDeadline(fd.Sysfd, d);
		} else if (_1 === (233)) {
			syscall.SetReadDeadline(fd.Sysfd, d);
			syscall.SetWriteDeadline(fd.Sysfd, d);
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: setDeadlineImpl, $c: true, $r, _1, _r, d, err, fd, mode, t, $s};return $f;
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var {mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
				case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
				case 9:
				$s = -1; return true;
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.increfAndClose, $c: true, $r, mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s};return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var {_tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {read});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.rwlock, $c: true, $r, _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var {_tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {read});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.rwunlock, $c: true, $r, _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var {$24r, _r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.decref, $c: true, $r, $24r, _r, fd, $s};return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var {_r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.readLock, $c: true, $r, _r, fd, $s};return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var {_r, _r$1, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.readUnlock, $c: true, $r, _r, _r$1, fd, $s};return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var {_r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.writeLock, $c: true, $r, _r, fd, $s};return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var {_r, _r$1, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.writeUnlock, $c: true, $r, _r, _r$1, fd, $s};return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.Fsync = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fsync(fd[0].Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fsync, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	errNetClosing.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "use of closed network connection";
	};
	errNetClosing.prototype.Error = function() { return this.$val.Error(); };
	errNetClosing.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return false;
	};
	errNetClosing.prototype.Timeout = function() { return this.$val.Timeout(); };
	errNetClosing.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return false;
	};
	errNetClosing.prototype.Temporary = function() { return this.$val.Temporary(); };
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return new $pkg.ErrNetClosing.constructor.elem($pkg.ErrNetClosing);
	};
	DeadlineExceededError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	DeadlineExceededError.prototype.Error = function() { return this.$val.Error(); };
	DeadlineExceededError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Timeout = function() { return this.$val.Timeout(); };
	DeadlineExceededError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Temporary = function() { return this.$val.Temporary(); };
	fcntl = function(fd, cmd, arg) {
		var arg, cmd, fd;
		return [0, new syscall.Errno(38)];
	};
	runtime_Semacquire = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semrelease");
	};
	ptrType$2.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadFromInet4", name: "ReadFromInet4", pkg: "", typ: $funcType([sliceType, ptrType$5], [$Int, $error], false)}, {prop: "ReadFromInet6", name: "ReadFromInet6", pkg: "", typ: $funcType([sliceType, ptrType$6], [$Int, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType, sliceType, $Int], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsgInet4", name: "ReadMsgInet4", pkg: "", typ: $funcType([sliceType, sliceType, $Int, ptrType$5], [$Int, $Int, $Int, $error], false)}, {prop: "ReadMsgInet6", name: "ReadMsgInet6", pkg: "", typ: $funcType([sliceType, sliceType, $Int, ptrType$6], [$Int, $Int, $Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "WriteToInet4", name: "WriteToInet4", pkg: "", typ: $funcType([sliceType, ptrType$5], [$Int, $error], false)}, {prop: "WriteToInet6", name: "WriteToInet6", pkg: "", typ: $funcType([sliceType, ptrType$6], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType, sliceType, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "WriteMsgInet4", name: "WriteMsgInet4", pkg: "", typ: $funcType([sliceType, sliceType, ptrType$5], [$Int, $Int, $error], false)}, {prop: "WriteMsgInet6", name: "WriteMsgInet6", pkg: "", typ: $funcType([sliceType, sliceType, ptrType$6], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$7], [$error], false)}, {prop: "Dup", name: "Dup", pkg: "", typ: $funcType([], [$Int, $String, $error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$8.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$2], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	errNetClosing.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", embedded: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", embedded: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", embedded: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "csema", name: "csema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "isBlocking", name: "isBlocking", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	pollDesc.init("internal/poll", [{prop: "fd", name: "fd", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "closing", name: "closing", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	errNetClosing.init("", []);
	DeadlineExceededError.init("", []);
	$pkg.$initLinknames = function() {
		runtime_Semacquire = $linknames["sync.runtime_Semacquire"];
		runtime_Semrelease = $linknames["sync.runtime_Semrelease"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		tryDupCloexec = 1;
		$pkg.ErrNetClosing = new errNetClosing.ptr();
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrDeadlineExceeded = new DeadlineExceededError.ptr();
		$pkg.ErrNotPollable = errors.New("not pollable");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/safefilepath"] = (function() {
	var $pkg = {}, $init, errors, runtime, errInvalidPath;
	errors = $packages["errors"];
	runtime = $packages["runtime"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errInvalidPath = errors.New("invalid path");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/execenv"] = (function() {
	var $pkg = {}, $init, syscall;
	syscall = $packages["syscall"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = syscall.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, sync, atomic, Interface, ptrType, logger, Logger, Getenv, Open, Stat;
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Getenv = function(name) {
		var {log, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Getenv(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Getenv, $c: true, $r, log, name, $s};return $f;
	};
	$pkg.Getenv = Getenv;
	Open = function(name) {
		var {log, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Open(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Open, $c: true, $r, log, name, $s};return $f;
	};
	$pkg.Open = Open;
	Stat = function(name) {
		var {log, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Stat, $c: true, $r, log, name, $s};return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path"] = (function() {
	var $pkg = {}, $init, errors, bytealg, utf8, lazybuf, sliceType, ptrType, Clean, Join;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "path.lazybuf", true, "path", false, function(s_, buf_, w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.buf = sliceType.nil;
			this.w = 0;
			return;
		}
		this.s = s_;
		this.buf = buf_;
		this.w = w_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(lazybuf);
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.s.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType.nil) {
			if (b.w < b.s.length && (b.s.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType, b.s.length);
			$copyString(b.buf, $substring(b.s, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType.nil) {
			return $substring(b.s, 0, b.w);
		}
		return ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, out, path, r, rooted;
		if (path === "") {
			return ".";
		}
		rooted = path.charCodeAt(0) === 47;
		n = path.length;
		out = new lazybuf.ptr(path, sliceType.nil, 0);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if ((path.charCodeAt(r) === 47)) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || (path.charCodeAt((r + 1 >> 0)) === 47))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || (path.charCodeAt((r + 2 >> 0)) === 47))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !((out.index(out.w) === 47)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !((path.charCodeAt(r) === 47)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			return ".";
		}
		return out.string();
	};
	$pkg.Clean = Clean;
	Join = function(elem) {
		var _i, _i$1, _ref, _ref$1, buf, e, e$1, elem, size;
		size = 0;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			size = size + (e.length) >> 0;
			_i++;
		}
		if (size === 0) {
			return "";
		}
		buf = $makeSlice(sliceType, 0, ((size + elem.$length >> 0) - 1 >> 0));
		_ref$1 = elem;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			e$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (buf.$length > 0 || !(e$1 === "")) {
				if (buf.$length > 0) {
					buf = $append(buf, 47);
				}
				buf = $appendSlice(buf, e$1);
			}
			_i$1++;
		}
		return Clean(($bytesToString(buf)));
	};
	$pkg.Join = Join;
	ptrType.methods = [{prop: "index", name: "index", pkg: "path", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path", typ: $funcType([], [$String], false)}];
	lazybuf.init("path", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "w", name: "w", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/fs"] = (function() {
	var $pkg = {}, $init, errors, oserror, io, path, sort, time, utf8, DirEntry, FileInfo, FileMode, PathError, ptrType, sliceType$2, arrayType, interfaceType, errInvalid, errPermission, errExist, errNotExist, errClosed;
	errors = $packages["errors"];
	oserror = $packages["internal/oserror"];
	io = $packages["io"];
	path = $packages["path"];
	sort = $packages["sort"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	DirEntry = $pkg.DirEntry = $newType(8, $kindInterface, "fs.DirEntry", true, "io/fs", true, null);
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "fs.FileInfo", true, "io/fs", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "fs.FileMode", true, "io/fs", true, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "fs.PathError", true, "io/fs", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	ptrType = $ptrType(PathError);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 32);
	interfaceType = $interfaceType([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	errInvalid = function() {
		return oserror.ErrInvalid;
	};
	errPermission = function() {
		return oserror.ErrPermission;
	};
	errExist = function() {
		return oserror.ErrExist;
	};
	errNotExist = function() {
		return oserror.ErrNotExist;
	};
	errClosed = function() {
		return oserror.ErrClosed;
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType.zero();
		w = 0;
		_ref = "dalTLDpSugct?";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2401763328) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	FileMode.prototype.Type = function() {
		var m;
		m = this.$val;
		return (m & 2401763328) >>> 0;
	};
	$ptrType(FileMode).prototype.Type = function() { return new FileMode(this.$get()).Type(); };
	PathError.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Path + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: PathError.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	PathError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	PathError.ptr.prototype.Timeout = function() {
		var {$24r, _r, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, interfaceType, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: PathError.ptr.prototype.Timeout, $c: true, $r, $24r, _r, _tuple, _v, e, ok, t, $s};return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	DirEntry.init([{prop: "Info", name: "Info", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = path.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.SkipDir = errors.New("skip this directory");
		$pkg.ErrInvalid = errInvalid();
		$pkg.ErrPermission = errPermission();
		$pkg.ErrExist = errExist();
		$pkg.ErrNotExist = errNotExist();
		$pkg.ErrClosed = errClosed();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, itoa, oserror, poll, safefilepath, execenv, unix, testlog, io, fs, runtime, sort, sync, atomic, syscall, time, fileStat, File, rawConn, file, unixDirent, LinkError, onlyWriter, timeout, SyscallError, dirInfo, readdirMode, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$5, ptrType$6, sliceType$4, ptrType$7, ptrType$8, ptrType$9, funcType, ptrType$17, ptrType$18, sliceType$7, sliceType$8, funcType$2, funcType$3, ptrType$19, ptrType$20, errPatternHasSeparator, errWriteAtInAppendMode, lstat, dirBufPool, testingForceReadDirLstat, _r, _r$1, _r$2, statNolog, lstatNolog, fillFileStatFromSys, Stat, Lstat, newRawConn, init, IsPathSeparator, basename, fixLongPath, NewFile, newFile, epipecheck, openFileNolog, Readlink, newUnixDirent, sigpipe, syscallMode, chmod, ignoringEINTR, genericReadFrom, setStickyBit, Open, OpenFile, fixCount, Chmod, ReadFile, errNoDeadline, errDeadlineExceeded, IsNotExist, underlyingErrorIs, underlyingError, Getenv, direntIno, direntReclen, direntNamlen, direntType, readInt, readIntBE, readIntLE, ReadDir, runtime_args, init$1;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	itoa = $packages["internal/itoa"];
	oserror = $packages["internal/oserror"];
	poll = $packages["internal/poll"];
	safefilepath = $packages["internal/safefilepath"];
	execenv = $packages["internal/syscall/execenv"];
	unix = $packages["internal/syscall/unix"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	fs = $packages["io/fs"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil);
			this.sys = new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$9.nil;
			return;
		}
		this.file = file_;
	});
	rawConn = $pkg.rawConn = $newType(0, $kindStruct, "os.rawConn", true, "os", false, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$2.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_, appendMode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(ptrType$6.nil, false), ptrType$7.nil, 0, 0, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$8.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			this.appendMode = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
		this.appendMode = appendMode_;
	});
	unixDirent = $pkg.unixDirent = $newType(0, $kindStruct, "os.unixDirent", true, "os", false, function(parent_, name_, typ_, info_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = "";
			this.name = "";
			this.typ = 0;
			this.info = $ifaceNil;
			return;
		}
		this.parent = parent_;
		this.name = name_;
		this.typ = typ_;
		this.info = info_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	onlyWriter = $pkg.onlyWriter = $newType(0, $kindStruct, "os.onlyWriter", true, "os", false, function(Writer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Writer = $ifaceNil;
			return;
		}
		this.Writer = Writer_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	readdirMode = $pkg.readdirMode = $newType(4, $kindInt, "os.readdirMode", true, "os", false, null);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$2);
	ptrType$1 = $ptrType(fileStat);
	ptrType$2 = $ptrType(File);
	ptrType$3 = $ptrType(time.Location);
	ptrType$5 = $ptrType(fs.PathError);
	ptrType$6 = $ptrType(poll.FD);
	sliceType$4 = $sliceType(syscall.Iovec);
	ptrType$7 = $ptrType(sliceType$4);
	ptrType$8 = $ptrType(dirInfo);
	ptrType$9 = $ptrType(file);
	funcType = $funcType([ptrType$9], [$error], false);
	ptrType$17 = $ptrType(LinkError);
	ptrType$18 = $ptrType(SyscallError);
	sliceType$7 = $sliceType(fs.DirEntry);
	sliceType$8 = $sliceType(fs.FileInfo);
	funcType$2 = $funcType([$Uintptr], [], false);
	funcType$3 = $funcType([$Uintptr], [$Bool], false);
	ptrType$19 = $ptrType(rawConn);
	ptrType$20 = $ptrType(unixDirent);
	fileStat.ptr.prototype.Size = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	fileStat.ptr.prototype.Name = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs$1;
		fs$1 = this;
		return new fs.FileMode(fs$1.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	File.ptr.prototype.Stat = function() {
		var {_r$3, err, f, fs$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil), new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0)));
		_r$3 = f.file.pfd.Fstat(fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs$1[0], f.file.name);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Stat, $c: true, $r, _r$3, err, f, fs$1, $s};return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	statNolog = function(name) {
		var {_r$3, err, fs$1, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		name = [name];
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil), new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0)));
		_r$3 = ignoringEINTR((function(fs$1, name) { return function $b() {
			var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$3 = syscall.Stat(name[0], fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = _r$3;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
		}; })(fs$1, name)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("stat", name[0], err)];
		}
		fillFileStatFromSys(fs$1[0], name[0]);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: statNolog, $c: true, $r, _r$3, err, fs$1, name, $s};return $f;
	};
	lstatNolog = function(name) {
		var {_r$3, err, fs$1, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		name = [name];
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil), new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0)));
		_r$3 = ignoringEINTR((function(fs$1, name) { return function $b() {
			var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$3 = syscall.Lstat(name[0], fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = _r$3;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
		}; })(fs$1, name)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("lstat", name[0], err)];
		}
		fillFileStatFromSys(fs$1[0], name[0]);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: lstatNolog, $c: true, $r, _r$3, err, fs$1, name, $s};return $f;
	};
	fillFileStatFromSys = function(fs$1, name) {
		var _1, fs$1, name;
		fs$1.name = basename(name);
		fs$1.size = fs$1.sys.Size;
		time.Time.copy(fs$1.modTime, time.Unix(fs$1.sys.Mtime, fs$1.sys.MtimeNsec));
		fs$1.mode = ((((fs$1.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs$1.sys.Mode & 126976) >>> 0;
		if (_1 === (24576)) {
			fs$1.mode = (fs$1.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs$1.mode = (fs$1.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs$1.mode = (fs$1.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs$1.mode = (fs$1.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs$1.mode = (fs$1.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs$1.mode = (fs$1.mode | (16777216)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 1024) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (4194304)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 2048) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (8388608)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 512) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (1048576)) >>> 0;
		}
	};
	Stat = function(name) {
		var {$24r, _r$3, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = statNolog(name); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Stat, $c: true, $r, $24r, _r$3, name, $s};return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var {$24r, _r$3, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = lstatNolog(name); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Lstat, $c: true, $r, $24r, _r$3, name, $s};return $f;
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readFrom = function(r) {
		var _tmp, _tmp$1, _tmp$2, err, f, handled, n, r;
		n = new $Int64(0, 0);
		handled = false;
		err = $ifaceNil;
		f = this;
		_tmp = new $Int64(0, 0);
		_tmp$1 = false;
		_tmp$2 = $ifaceNil;
		n = _tmp;
		handled = _tmp$1;
		err = _tmp$2;
		return [n, handled, err];
	};
	File.prototype.readFrom = function(r) { return this.$val.readFrom(r); };
	rawConn.ptr.prototype.Control = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Control");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawControl(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Control, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Control = function(f) { return this.$val.Control(f); };
	rawConn.ptr.prototype.Read = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Read");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawRead(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Read, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Read = function(f) { return this.$val.Read(f); };
	rawConn.ptr.prototype.Write = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Write");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawWrite(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Write, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Write = function(f) { return this.$val.Write(f); };
	newRawConn = function(file$1) {
		var file$1;
		return [new rawConn.ptr(file$1), $ifaceNil];
	};
	init = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	IsPathSeparator = function(c) {
		var c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	fixLongPath = function(path) {
		var path;
		return path;
	};
	File.ptr.prototype.Fd = function() {
		var {_r$3, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r$3 = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Fd, $c: true, $r, _r$3, f, $s};return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var {$24r, _r$3, _tuple, err, fd, kind, name, nb, $s, $r, $c} = $restore(this, {fd, name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kind = 0;
		_tuple = unix.IsNonblock(((fd >> 0)));
		nb = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil) && nb) {
			kind = 3;
		}
		_r$3 = newFile(fd, name, kind); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: NewFile, $c: true, $r, $24r, _r$3, _tuple, err, fd, kind, name, nb, $s};return $f;
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var {_1, _r$3, err, err$1, err$2, f, fd, fdi, kind, name, pollable, st, typ, $s, $r, $c} = $restore(this, {fd, name, kind});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fdi = [fdi];
		st = [st];
		fdi[0] = ((fd >> 0));
		if (fdi[0] < 0) {
			$s = -1; return ptrType$2.nil;
		}
		f = new File.ptr(new file.ptr($clone(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi[0], new poll.pollDesc.ptr(ptrType$6.nil, false), ptrType$7.nil, 0, 0, true, true, false), poll.FD), name, ptrType$8.nil, false, (fdi[0] === 1) || (fdi[0] === 2), false));
		pollable = (kind === 1) || (kind === 2) || (kind === 3);
		/* */ if (kind === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (kind === 1) { */ case 1:
				_1 = "js";
				/* */ if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { */ case 4:
					st[0] = new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
					_r$3 = ignoringEINTR((function(fdi, st) { return function $b() {
						var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						_r$3 = syscall.Fstat(fdi[0], st[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$24r = _r$3;
						$s = 2; case 2: return $24r;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
					}; })(fdi, st)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err = _r$3;
					typ = (st[0].Mode & 126976) >>> 0;
					if ($interfaceIsEqual(err, $ifaceNil) && ((typ === 32768) || (typ === 16384))) {
						pollable = false;
					}
					if (false && (typ === 4096)) {
						pollable = false;
					}
				/* } */ case 5:
			case 3:
		/* } */ case 2:
		err$1 = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
		} else if (pollable) {
			err$2 = syscall.SetNonblock(fdi[0], true);
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType($methodExpr(ptrType$9, "close")));
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: newFile, $c: true, $r, _1, _r$3, err, err$1, err$2, f, fd, fdi, kind, name, pollable, st, typ, $s};return $f;
	};
	epipecheck = function(file$1, e) {
		var {e, file$1, $s, $r, $c} = $restore(this, {file$1, e});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) { */ case 1:
			$r = sigpipe(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: epipecheck, $c: true, $r, e, file$1, $s};return $f;
	};
	openFileNolog = function(name, flag, perm) {
		var {$24r, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, e, err, flag, name, perm, r, setSticky, $s, $r, $c} = $restore(this, {name, flag, perm});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		setSticky = false;
		/* */ if (true && !(((flag & 64) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (true && !(((flag & 64) === 0)) && !((((perm & 1048576) >>> 0) === 0))) { */ case 1:
			_r$3 = Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			err = _tuple[1];
			if (IsNotExist(err)) {
				setSticky = true;
			}
		/* } */ case 2:
		r = 0;
		/* while (true) { */ case 4:
			e = $ifaceNil;
			_r$4 = syscall.Open(name, flag | 0, syscallMode(perm)); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			r = _tuple$1[0];
			e = _tuple$1[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 5; continue;
			}
			if ($interfaceIsEqual(e, new syscall.Errno(4))) {
				/* continue; */ $s = 4; continue;
			}
			$s = -1; return [ptrType$2.nil, new fs.PathError.ptr("open", name, e)];
		case 5:
		/* */ if (setSticky) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (setSticky) { */ case 7:
			_r$5 = setStickyBit(name); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 8:
		if (true) {
			syscall.CloseOnExec(r);
		}
		_r$6 = newFile(((r >>> 0)), name, 1); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = [_r$6, $ifaceNil];
		$s = 11; case 11: return $24r;
		/* */ } return; } var $f = {$blk: openFileNolog, $c: true, $r, $24r, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, e, err, flag, name, perm, r, setSticky, $s};return $f;
	};
	file.ptr.prototype.close = function() {
		var {_r$3, e, err, file$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$9.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		if (!(file$1.dirinfo === ptrType$8.nil)) {
			file$1.dirinfo.close();
			file$1.dirinfo = ptrType$8.nil;
		}
		err = $ifaceNil;
		_r$3 = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new fs.PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: file.ptr.prototype.close, $c: true, $r, _r$3, e, err, file$1, $s};return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.seek = function(offset, whence) {
		var {_r$3, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (!(f.file.dirinfo === ptrType$8.nil)) {
			f.file.dirinfo.close();
			f.file.dirinfo = ptrType$8.nil;
		}
		_r$3 = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.seek, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s};return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	Readlink = function(name) {
		var {_r$3, _r$4, _tuple, _tuple$1, b, e, len, n, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		len = 128;
		/* while (true) { */ case 1:
			b = $makeSlice(sliceType$2, len);
			n = 0;
			e = $ifaceNil;
			/* while (true) { */ case 3:
				_r$3 = syscall.Readlink(name, b); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				_r$4 = fixCount(_tuple$1[0], _tuple$1[1]); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				n = _tuple[0];
				e = _tuple[1];
				if (!($interfaceIsEqual(e, new syscall.Errno(4)))) {
					/* break; */ $s = 4; continue;
				}
			$s = 3; continue;
			case 4:
			if (false && $interfaceIsEqual(e, new syscall.Errno(34))) {
				len = $imul(len, (2));
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				$s = -1; return ["", new fs.PathError.ptr("readlink", name, e)];
			}
			if (n < len) {
				$s = -1; return [($bytesToString($subslice(b, 0, n))), $ifaceNil];
			}
			len = $imul(len, (2));
		$s = 1; continue;
		case 2:
		$s = -1; return ["", $ifaceNil];
		/* */ } return; } var $f = {$blk: Readlink, $c: true, $r, _r$3, _r$4, _tuple, _tuple$1, b, e, len, n, name, $s};return $f;
	};
	$pkg.Readlink = Readlink;
	unixDirent.ptr.prototype.Name = function() {
		var d;
		d = this;
		return d.name;
	};
	unixDirent.prototype.Name = function() { return this.$val.Name(); };
	unixDirent.ptr.prototype.IsDir = function() {
		var d;
		d = this;
		return new fs.FileMode(d.typ).IsDir();
	};
	unixDirent.prototype.IsDir = function() { return this.$val.IsDir(); };
	unixDirent.ptr.prototype.Type = function() {
		var d;
		d = this;
		return d.typ;
	};
	unixDirent.prototype.Type = function() { return this.$val.Type(); };
	unixDirent.ptr.prototype.Info = function() {
		var {$24r, _r$3, d, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.info, $ifaceNil))) {
			$s = -1; return [d.info, $ifaceNil];
		}
		_r$3 = lstat(d.parent + "/" + d.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: unixDirent.ptr.prototype.Info, $c: true, $r, $24r, _r$3, d, $s};return $f;
	};
	unixDirent.prototype.Info = function() { return this.$val.Info(); };
	newUnixDirent = function(parent, name, typ) {
		var {_r$3, _r$4, _r$5, _tuple, err, info, name, parent, typ, ude, $s, $r, $c} = $restore(this, {parent, name, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ude = new unixDirent.ptr(parent, name, typ, $ifaceNil);
		if (!((typ === 4294967295)) && !testingForceReadDirLstat) {
			$s = -1; return [ude, $ifaceNil];
		}
		_r$3 = lstat(parent + "/" + name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		info = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		_r$4 = info.Mode(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = new fs.FileMode(_r$4).Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		ude.typ = _r$5;
		ude.info = info;
		$s = -1; return [ude, $ifaceNil];
		/* */ } return; } var $f = {$blk: newUnixDirent, $c: true, $r, _r$3, _r$4, _r$5, _tuple, err, info, name, parent, typ, ude, $s};return $f;
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	File.ptr.prototype.Close = function() {
		var {$24r, _r$3, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r$3 = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Close, $c: true, $r, $24r, _r$3, f, $s};return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	File.ptr.prototype.read = function(b) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.read, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s};return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.pread, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s};return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.write, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s};return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.pwrite, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s};return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new fs.FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	chmod = function(name, mode) {
		var {_r$3, e, longName, mode, name, $s, $r, $c} = $restore(this, {name, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		longName = [longName];
		mode = [mode];
		longName[0] = fixLongPath(name);
		_r$3 = ignoringEINTR((function(longName, mode) { return function $b() {
			var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$3 = syscall.Chmod(longName[0], syscallMode(mode[0])); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = _r$3;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
		}; })(longName, mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return new fs.PathError.ptr("chmod", name, e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: chmod, $c: true, $r, _r$3, e, longName, mode, name, $s};return $f;
	};
	File.ptr.prototype.chmod = function(mode) {
		var {_r$3, e, err, f, mode, $s, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.chmod, $c: true, $r, _r$3, e, err, f, mode, $s};return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var {_r$3, e, err, f, gid, uid, $s, $r, $c} = $restore(this, {uid, gid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chown, $c: true, $r, _r$3, e, err, f, gid, uid, $s};return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var {_r$3, e, err, f, size, $s, $r, $c} = $restore(this, {size});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Truncate, $c: true, $r, _r$3, e, err, f, size, $s};return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var {_r$3, e, err, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Sync, $c: true, $r, _r$3, e, err, f, $s};return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var {_r$3, e, err, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chdir, $c: true, $r, _r$3, e, err, f, $s};return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetReadDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setReadDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetWriteDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setWriteDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	ignoringEINTR = function(fn) {
		var {_r$3, err, fn, $s, $r, $c} = $restore(this, {fn});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r$3 = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ignoringEINTR, $c: true, $r, _r$3, err, fn, $s};return $f;
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var {$24r, _r$3, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Old + " " + e.New + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: LinkError.ptr.prototype.Error, $c: true, $r, $24r, _r$3, e, $s};return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	LinkError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	LinkError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	File.ptr.prototype.Read = function(b) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Read, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s};return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new fs.PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadAt, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s};return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.ReadFrom = function(r) {
		var {$24r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, e, err, err$1, f, handled, n, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_tuple = f.readFrom(r);
		n = _tuple[0];
		handled = _tuple[1];
		e = _tuple[2];
		/* */ if (!handled) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!handled) { */ case 1:
			_r$3 = genericReadFrom(f, r); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [n, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("write", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadFrom, $c: true, $r, $24r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, e, err, err$1, f, handled, n, r, $s};return $f;
	};
	File.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	genericReadFrom = function(f, r) {
		var {$24r, _r$3, f, r, x, $s, $r, $c} = $restore(this, {f, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$3 = io.Copy((x = new onlyWriter.ptr(f), new x.constructor.elem(x)), r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: genericReadFrom, $c: true, $r, $24r, _r$3, f, r, x, $s};return $f;
	};
	File.ptr.prototype.Write = function(b) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		$r = epipecheck(f, e); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Write, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s};return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if (f.file.appendMode) {
			_tmp$2 = 0;
			_tmp$3 = errWriteAtInAppendMode;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$4 = 0;
			_tmp$5 = new fs.PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.WriteAt, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, m, n, off, x, $s};return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r$3 = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$8.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Seek, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s};return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	setStickyBit = function(name) {
		var {$24r, _arg, _arg$1, _r$3, _r$4, _r$5, _tuple, err, fi, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$3 = Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		fi = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_arg = name;
		_r$4 = fi.Mode(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = (_r$4 | 1048576) >>> 0;
		_r$5 = Chmod(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r = _r$5;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: setStickyBit, $c: true, $r, $24r, _arg, _arg$1, _r$3, _r$4, _r$5, _tuple, err, fi, name, $s};return $f;
	};
	Open = function(name) {
		var {$24r, _r$3, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$3 = OpenFile(name, 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Open, $c: true, $r, $24r, _r$3, name, $s};return $f;
	};
	$pkg.Open = Open;
	OpenFile = function(name, flag, perm) {
		var {_r$3, _tuple, err, f, flag, name, perm, $s, $r, $c} = $restore(this, {name, flag, perm});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = testlog.Open(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = openFileNolog(name, flag, perm); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err];
		}
		f.file.appendMode = !(((flag & 1024) === 0));
		$s = -1; return [f, $ifaceNil];
		/* */ } return; } var $f = {$blk: OpenFile, $c: true, $r, _r$3, _tuple, err, f, flag, name, perm, $s};return $f;
	};
	$pkg.OpenFile = OpenFile;
	fixCount = function(n, err) {
		var err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new fs.PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	Chmod = function(name, mode) {
		var {$24r, _r$3, mode, name, $s, $r, $c} = $restore(this, {name, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$3 = chmod(name, mode); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Chmod, $c: true, $r, $24r, _r$3, mode, name, $s};return $f;
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var {$24r, _r$3, f, mode, $s, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chmod, $c: true, $r, $24r, _r$3, f, mode, $s};return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setReadDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetReadDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setWriteDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetWriteDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	File.ptr.prototype.SyscallConn = function() {
		var _returncast, err, f;
		f = this;
		err = f.checkValid("SyscallConn");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		_returncast = newRawConn(f);
		return [_returncast[0], _returncast[1]];
	};
	File.prototype.SyscallConn = function() { return this.$val.SyscallConn(); };
	ReadFile = function(name) {
		var {$24r, $24r$1, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, d, data, err, err$1, err$2, f, info, n, name, size, size64, x, $s, $deferred, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		_r$3 = Open(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [sliceType$2.nil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(f, "Close"), []]);
		size = 0;
		_r$4 = f.Stat(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		info = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 6:
			_r$5 = info.Size(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			size64 = _r$5;
			if ((x = (new $Int64(0, (((size64.$low + ((size64.$high >> 31) * 4294967296)) >> 0)))), (x.$high === size64.$high && x.$low === size64.$low))) {
				size = (((size64.$low + ((size64.$high >> 31) * 4294967296)) >> 0));
			}
		/* } */ case 7:
		size = size + (1) >> 0;
		if (size < 512) {
			size = 512;
		}
		data = $makeSlice(sliceType$2, 0, size);
		/* while (true) { */ case 9:
			if (data.$length >= data.$capacity) {
				d = $append($subslice(data, 0, data.$capacity), 0);
				data = $subslice(d, 0, data.$length);
			}
			_r$6 = f.Read($subslice(data, data.$length, data.$capacity)); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$2 = _r$6;
			n = _tuple$2[0];
			err$2 = _tuple$2[1];
			data = $subslice(data, 0, (data.$length + n >> 0));
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 12:
				if ($interfaceIsEqual(err$2, io.EOF)) {
					err$2 = $ifaceNil;
				}
				$24r$1 = [data, err$2];
				$s = 14; case 14: return $24r$1;
			/* } */ case 13:
		$s = 9; continue;
		case 10:
		$s = -1; return [sliceType$2.nil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$2.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: ReadFile, $c: true, $r, $24r, $24r$1, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, d, data, err, err$1, err$2, f, info, n, name, size, size64, x, $s, $deferred};return $f; } }
	};
	$pkg.ReadFile = ReadFile;
	errNoDeadline = function() {
		return poll.ErrNoDeadline;
	};
	errDeadlineExceeded = function() {
		return poll.ErrDeadlineExceeded;
	};
	SyscallError.ptr.prototype.Error = function() {
		var {$24r, _r$3, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Syscall + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SyscallError.ptr.prototype.Error, $c: true, $r, $24r, _r$3, e, $s};return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	SyscallError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var {$24r, _r$3, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r$3 = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: SyscallError.ptr.prototype.Timeout, $c: true, $r, $24r, _r$3, _tuple, _v, e, ok, t, $s};return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	IsNotExist = function(err) {
		var err;
		return underlyingErrorIs(err, $pkg.ErrNotExist);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingErrorIs = function(err, target) {
		var _tuple, e, err, ok, target;
		err = underlyingError(err);
		if ($interfaceIsEqual(err, target)) {
			return true;
		}
		_tuple = $assertType(err, syscall.Errno, true);
		e = _tuple[0];
		ok = _tuple[1];
		return ok && new syscall.Errno(e).Is(target);
	};
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$5, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	Getenv = function(key) {
		var {_r$3, _tuple, key, v, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = testlog.Getenv(key); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = syscall.Getenv(key); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		v = _tuple[0];
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: Getenv, $c: true, $r, _r$3, _tuple, key, v, $s};return $f;
	};
	$pkg.Getenv = Getenv;
	direntIno = function(buf) {
		var buf;
		return [new $Uint64(0, 1), true];
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 0, 2);
	};
	direntNamlen = function(buf) {
		var _tuple, buf, ok, reclen;
		_tuple = direntReclen(buf);
		reclen = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new $Uint64(0, 0), false];
		}
		return [new $Uint64(reclen.$high - 0, reclen.$low - 2), true];
	};
	direntType = function(buf) {
		var buf;
		return 4294967295;
	};
	dirInfo.ptr.prototype.close = function() {
		var d;
		d = this;
		if (!(d.buf === ptrType.nil)) {
			dirBufPool.Put(d.buf);
			d.buf = ptrType.nil;
		}
	};
	dirInfo.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readdir = function(n, mode) {
		var {_i, _r$3, _r$4, _r$5, _r$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, c, d, de, dirents, err, err$1, err$2, errno, f, i, info, infos, ino, mode, n, name, names, namlen, ok, rec, reclen, x, x$1, x$2, $s, $r, $c} = $restore(this, {n, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		dirents = sliceType$7.nil;
		infos = sliceType$8.nil;
		err = $ifaceNil;
		f = this;
		/* */ if (f.file.dirinfo === ptrType$8.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.dirinfo === ptrType$8.nil) { */ case 1:
			f.file.dirinfo = new dirInfo.ptr(ptrType.nil, 0, 0);
			_r$3 = dirBufPool.Get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			f.file.dirinfo.buf = $assertType(_r$3, ptrType);
		/* } */ case 2:
		d = f.file.dirinfo;
		if (n === 0) {
			n = -1;
		}
		/* while (true) { */ case 4:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 5; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (d.bufp >= d.nbuf) { */ case 6:
				d.bufp = 0;
				errno = $ifaceNil;
				_r$4 = f.file.pfd.ReadDirent(d.buf.$get()); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = dirents;
					_tmp$2 = infos;
					_tmp$3 = new fs.PathError.ptr("readdirent", f.file.name, errno);
					names = _tmp;
					dirents = _tmp$1;
					infos = _tmp$2;
					err = _tmp$3;
					$s = -1; return [names, dirents, infos, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 5; continue;
				}
			/* } */ case 7:
			buf = $subslice((d.buf.$get()), d.bufp, d.nbuf);
			_tuple$1 = direntReclen(buf);
			reclen = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				/* break; */ $s = 5; continue;
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			d.bufp = d.bufp + (((reclen.$low >> 0))) >> 0;
			_tuple$2 = direntIno(rec);
			ino = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok) {
				/* break; */ $s = 5; continue;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				/* continue; */ $s = 4; continue;
			}
			_tuple$3 = direntNamlen(rec);
			namlen = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 2 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				/* break; */ $s = 5; continue;
			}
			name = $subslice(rec, 2, $flatten64(new $Uint64(0 + namlen.$high, 2 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				/* continue; */ $s = 4; continue;
			}
			if (n > 0) {
				n = n - (1) >> 0;
			}
			/* */ if (mode === 0) { $s = 9; continue; }
			/* */ if (mode === 1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (mode === 0) { */ case 9:
				names = $append(names, ($bytesToString(name)));
				$s = 12; continue;
			/* } else if (mode === 1) { */ case 10:
				_r$5 = newUnixDirent(f.file.name, ($bytesToString(name)), direntType(rec)); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$4 = _r$5;
				de = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (IsNotExist(err$1)) {
					/* continue; */ $s = 4; continue;
				}
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$4 = sliceType.nil;
					_tmp$5 = dirents;
					_tmp$6 = sliceType$8.nil;
					_tmp$7 = err$1;
					names = _tmp$4;
					dirents = _tmp$5;
					infos = _tmp$6;
					err = _tmp$7;
					$s = -1; return [names, dirents, infos, err];
				}
				dirents = $append(dirents, de);
				$s = 12; continue;
			/* } else { */ case 11:
				_r$6 = lstat(f.file.name + "/" + ($bytesToString(name))); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$5 = _r$6;
				info = _tuple$5[0];
				err$2 = _tuple$5[1];
				if (IsNotExist(err$2)) {
					/* continue; */ $s = 4; continue;
				}
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$8 = sliceType.nil;
					_tmp$9 = sliceType$7.nil;
					_tmp$10 = infos;
					_tmp$11 = err$2;
					names = _tmp$8;
					dirents = _tmp$9;
					infos = _tmp$10;
					err = _tmp$11;
					$s = -1; return [names, dirents, infos, err];
				}
				infos = $append(infos, info);
			/* } */ case 12:
		$s = 4; continue;
		case 5:
		if (n > 0 && (((names.$length + dirents.$length >> 0) + infos.$length >> 0) === 0)) {
			_tmp$12 = sliceType.nil;
			_tmp$13 = sliceType$7.nil;
			_tmp$14 = sliceType$8.nil;
			_tmp$15 = io.EOF;
			names = _tmp$12;
			dirents = _tmp$13;
			infos = _tmp$14;
			err = _tmp$15;
			$s = -1; return [names, dirents, infos, err];
		}
		_tmp$16 = names;
		_tmp$17 = dirents;
		_tmp$18 = infos;
		_tmp$19 = $ifaceNil;
		names = _tmp$16;
		dirents = _tmp$17;
		infos = _tmp$18;
		err = _tmp$19;
		$s = -1; return [names, dirents, infos, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.readdir, $c: true, $r, _i, _r$3, _r$4, _r$5, _r$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, c, d, de, dirents, err, err$1, err$2, errno, f, i, info, infos, ino, mode, n, name, names, namlen, ok, rec, reclen, x, x$1, x$2, $s};return $f;
	};
	File.prototype.readdir = function(n, mode) { return this.$val.readdir(n, mode); };
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	File.ptr.prototype.Readdir = function(n) {
		var {_r$3, _tuple, err, f, infos, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [sliceType$8.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		infos = _tuple[2];
		err = _tuple[3];
		if (infos === sliceType$8.nil) {
			infos = new sliceType$8([]);
		}
		$s = -1; return [infos, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Readdir, $c: true, $r, _r$3, _tuple, err, f, infos, n, $s};return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, f, n, names, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r$3 = f.readdir(n, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		names = _tuple[0];
		err = _tuple[3];
		if (names === sliceType.nil) {
			names = new sliceType([]);
		}
		_tmp$2 = names;
		_tmp$3 = err;
		names = _tmp$2;
		err = _tmp$3;
		$s = -1; return [names, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Readdirnames, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, f, n, names, $s};return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.ReadDir = function(n) {
		var {_r$3, _tuple, dirents, err, f, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [sliceType$7.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		dirents = _tuple[1];
		err = _tuple[3];
		if (dirents === sliceType$7.nil) {
			dirents = new sliceType$7([]);
		}
		$s = -1; return [dirents, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadDir, $c: true, $r, _r$3, _tuple, dirents, err, f, n, $s};return $f;
	};
	File.prototype.ReadDir = function(n) { return this.$val.ReadDir(n); };
	ReadDir = function(name) {
		var {$24r, $24r$1, _r$3, _r$4, _tuple, _tuple$1, dirs, err, f, name, $s, $deferred, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		dirs = [dirs];
		_r$3 = Open(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [sliceType$7.nil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(f, "Close"), []]);
		_r$4 = f.ReadDir(-1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		dirs[0] = _tuple$1[0];
		err = _tuple$1[1];
		$r = sort.Slice(dirs[0], (function(dirs) { return function $b(i, j) {
			var {$24r$1, _r$5, _r$6, i, j, $s, $r, $c} = $restore(this, {i, j});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$5 = ((i < 0 || i >= dirs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : dirs[0].$array[dirs[0].$offset + i]).Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = ((j < 0 || j >= dirs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : dirs[0].$array[dirs[0].$offset + j]).Name(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$24r$1 = _r$5 < _r$6;
			$s = 3; case 3: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r$5, _r$6, i, j, $s};return $f;
		}; })(dirs)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$24r$1 = [dirs[0], err];
		$s = 7; case 7: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$7.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: ReadDir, $c: true, $r, $24r, $24r$1, _r$3, _r$4, _tuple, _tuple$1, dirs, err, f, name, $s, $deferred};return $f; } }
	};
	$pkg.ReadDir = ReadDir;
	runtime_args = function() {
		return $pkg.Args;
	};
	init$1 = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			if (!(argv === undefined) && $parseInt(argv.length) >= 1) {
				$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
					((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
					i = i + (1) >> 0;
				}
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.WriteString = function(s) {
		var {$24r, _r$3, _tuple, err, f, n, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.WriteString, $c: true, $r, $24r, _r$3, _tuple, err, f, n, s, $s};return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	ptrType$1.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}, {prop: "readFrom", name: "readFrom", pkg: "os", typ: $funcType([io.Reader], [$Int64, $Bool, $error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SyscallConn", name: "SyscallConn", pkg: "", typ: $funcType([], [syscall.RawConn, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int, readdirMode], [sliceType, sliceType$7, sliceType$8, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$8, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "ReadDir", name: "ReadDir", pkg: "", typ: $funcType([$Int], [sliceType$7, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$19.methods = [{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType$2], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$3], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$3], [$error], false)}];
	ptrType$9.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType$20.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "Info", name: "Info", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}];
	ptrType$17.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [], false)}];
	fileStat.init("os", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "modTime", name: "modTime", embedded: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", embedded: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", embedded: true, exported: false, typ: ptrType$9, tag: ""}]);
	rawConn.init("os", [{prop: "file", name: "file", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", embedded: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", embedded: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "nonblock", name: "nonblock", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "appendMode", name: "appendMode", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	unixDirent.init("os", [{prop: "parent", name: "parent", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "info", name: "info", embedded: false, exported: false, typ: fs.FileInfo, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	onlyWriter.init("", [{prop: "Writer", name: "Writer", embedded: true, exported: true, typ: io.Writer, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "nbuf", name: "nbuf", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = safefilepath.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = execenv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fs.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		testingForceReadDirLstat = false;
		errPatternHasSeparator = errors.New("pattern contains path separator");
		errWriteAtInAppendMode = errors.New("os: invalid use of WriteAt on file opened with O_APPEND");
		lstat = Lstat;
		$pkg.ErrProcessDone = errors.New("os: process already finished");
		$pkg.ErrInvalid = fs.ErrInvalid;
		$pkg.ErrNotExist = fs.ErrNotExist;
		$pkg.ErrClosed = fs.ErrClosed;
		$pkg.ErrNoDeadline = errNoDeadline();
		$pkg.ErrDeadlineExceeded = errDeadlineExceeded();
		dirBufPool = new sync.Pool.ptr(sliceType$1.nil, (function() {
			var buf, buf$24ptr;
			buf = $makeSlice(sliceType$2, 8192);
			return (buf$24ptr || (buf$24ptr = new ptrType(function() { return buf; }, function($v) { buf = $v; })));
		}));
		_r = NewFile(0, "/dev/stdin"); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$pkg.Stdin = _r;
		_r$1 = NewFile(1, "/dev/stdout"); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$pkg.Stdout = _r$1;
		_r$2 = NewFile(2, "/dev/stderr"); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$pkg.Stderr = _r$2;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, fmtsort, io, math, os, reflect, strconv, sync, utf8, ScanState, scanError, ss, ssave, State, Formatter, Stringer, GoStringer, buffer, pp, fmtFlags, fmt, wrapError, arrayType, sliceType, sliceType$1, ptrType, ptrType$1, arrayType$1, sliceType$2, ptrType$4, ptrType$24, arrayType$3, funcType, ptrType$26, ptrType$27, space, ssFree, complexError, boolError, ppFree, isSpace, notSpace, indexRune, newPrinter, Fprintf, Sprintf, Fprint, Sprint, getField, tooLarge, parsenum, intFromArg, parseArgNumber, Errorf;
	errors = $packages["errors"];
	fmtsort = $packages["internal/fmtsort"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", true, "fmt", true, null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_, wrapErrs_, wrappedErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType$1.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			this.wrapErrs = false;
			this.wrappedErr = $ifaceNil;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.wrapErrs = wrapErrs_;
		this.wrappedErr = wrappedErr_;
	});
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType$1.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	wrapError = $pkg.wrapError = $newType(0, $kindStruct, "fmt.wrapError", true, "fmt", false, function(msg_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.err = $ifaceNil;
			return;
		}
		this.msg = msg_;
		this.err = err_;
	});
	arrayType = $arrayType($Uint16, 2);
	sliceType = $sliceType(arrayType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType$1 = $arrayType($Uint8, 68);
	sliceType$2 = $sliceType($Uint8);
	ptrType$4 = $ptrType(ss);
	ptrType$24 = $ptrType(pp);
	arrayType$3 = $arrayType($Uint8, 6);
	funcType = $funcType([$Int32], [$Bool], false);
	ptrType$26 = $ptrType(fmt);
	ptrType$27 = $ptrType(wrapError);
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var {_r, _tuple, err, r, s, size, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.ReadRune, $c: true, $r, _r, _tuple, err, r, s, size, $s};return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var {_r, _tuple, err, r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.getRune, $c: true, $r, _r, _tuple, err, r, s, $s};return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var {_r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.UnreadRune, $c: true, $r, _r, s, $s};return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var {$24r, _r, err, f, s, skipSpace, tok, $s, $deferred, $r, $c} = $restore(this, {skipSpace, f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$24r = [tok, err[0]];
		$s = 2; case 2: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { var $f = {$blk: ss.ptr.prototype.Token, $c: true, $r, $24r, _r, err, f, s, skipSpace, tok, $s, $deferred};return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var {_r, _r$1, _r$2, _v, r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (r === 10) {
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			}
			/* */ if (!isSpace(r)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!isSpace(r)) { */ case 8:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 9:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.SkipSpace, $c: true, $r, _r, _r$1, _r$2, _v, r, s, $s};return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var {_r, _r$1, _r$2, f, r, s, skipSpace, $s, $r, $c} = $restore(this, {skipSpace, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).writeRune(r);
		$s = 4; continue;
		case 5:
		$s = -1; return $convertSliceType(s.buf, sliceType$2);
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.token, $c: true, $r, _r, _r$1, _r$2, f, r, s, skipSpace, $s};return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var {_r, _r$1, ok, r, s, $s, $r, $c} = $restore(this, {ok});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.peek, $c: true, $r, _r, _r$1, ok, r, s, $s};return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	$ptrType(buffer).prototype.write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.writeString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.writeByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.writeRune = function(r) {
		var b, bp, n, r, w;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune($convertSliceType($subslice(b, n, (n + 4 >> 0)), sliceType$2), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var {_r, p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$24);
		p.panicking = false;
		p.erroring = false;
		p.wrapErrs = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } var $f = {$blk: newPrinter, $c: true, $r, _r, p, $s};return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 65536) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		p.wrappedErr = $ifaceNil;
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Fprintf = function(w, format, a) {
		var {_r, _r$1, _tuple, a, err, format, n, p, w, $s, $r, $c} = $restore(this, {w, format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write($convertSliceType(p.buf, sliceType$2)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Fprintf, $c: true, $r, _r, _r$1, _tuple, a, err, format, n, p, w, $s};return $f;
	};
	$pkg.Fprintf = Fprintf;
	Sprintf = function(format, a) {
		var {_r, a, format, p, s, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: Sprintf, $c: true, $r, _r, a, format, p, s, $s};return $f;
	};
	$pkg.Sprintf = Sprintf;
	Fprint = function(w, a) {
		var {_r, _r$1, _tuple, a, err, n, p, w, $s, $r, $c} = $restore(this, {w, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write($convertSliceType(p.buf, sliceType$2)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Fprint, $c: true, $r, _r, _r$1, _tuple, a, err, n, p, w, $s};return $f;
	};
	$pkg.Fprint = Fprint;
	Sprint = function(a) {
		var {_r, a, p, s, $s, $r, $c} = $restore(this, {a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: Sprint, $c: true, $r, _r, a, p, s, $s};return $f;
	};
	$pkg.Sprint = Sprint;
	getField = function(v, i) {
		var {_r, _r$1, i, v, val, $s, $r, $c} = $restore(this, {v, i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } var $f = {$blk: getField, $c: true, $r, _r, _r$1, i, v, val, $s};return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var {_r, p, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.unknownType, $c: true, $r, _r, p, v, $s};return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var {_r, _r$1, p, verb, $s, $r, $c} = $restore(this, {verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.badVerb, $c: true, $r, _r, _r$1, p, verb, $s};return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var {_1, p, v, verb, $s, $r, $c} = $restore(this, {v, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmtBoolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtBool, $c: true, $r, _1, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmtInteger(v, 16, false, 118, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var {_1, isSigned, p, v, verb, $s, $r, $c} = $restore(this, {v, isSigned, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if ((_1 === (111)) || (_1 === (79))) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmtInteger(v, 2, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if ((_1 === (111)) || (_1 === (79))) { */ case 5:
				p.fmt.fmtInteger(v, 8, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmtC(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				p.fmt.fmtQc(v);
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmtUnicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtInteger, $c: true, $r, _1, isSigned, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var {_1, p, size, v, verb, $s, $r, $c} = $restore(this, {v, size, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmtFloat(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { */ case 3:
				p.fmt.fmtFloat(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmtFloat(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmtFloat(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtFloat, $c: true, $r, _1, p, size, v, verb, $s};return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var {_1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r, $c} = $restore(this, {v, size, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtComplex, $c: true, $r, _1, _q, _q$1, oldPlus, p, size, v, verb, $s};return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var {_1, p, v, verb, $s, $r, $c} = $restore(this, {v, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmtQ(v);
				} else {
					p.fmt.fmtS(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtS(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtSx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtSx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtString, $c: true, $r, _1, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var {_1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r, $c} = $restore(this, {v, verb, typeString});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						p.fmt.fmtInteger((new $Uint64(0, c$1)), 10, false, verb, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtBs(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtBx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtBx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtBytes, $c: true, $r, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s};return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var {_1, _2, _r, p, u, value, verb, $s, $r, $c} = $restore(this, {value, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtPointer, $c: true, $r, _1, _2, _r, p, u, value, verb, $s};return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb, method) {
		var {_r, arg, err, method, oldFlags, p, v, verb, $s, $r, $c} = $restore(this, {arg, verb, method});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(PANIC=");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(method);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(" method: ");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.catchPanic, $c: true, $r, _r, arg, err, method, oldFlags, p, v, verb, $s};return $f;
	};
	pp.prototype.catchPanic = function(arg, verb, method) { return this.$val.catchPanic(arg, verb, method); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, err, formatter, handled, ok, ok$1, ok$2, p, stringer, v, v$1, verb, $s, $deferred, $r, $c} = $restore(this, {verb});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		/* */ if (p.erroring) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.erroring) { */ case 1:
			$24r = handled;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		/* */ if (verb === 119) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (verb === 119) { */ case 4:
			_tuple = $assertType(p.arg, $error, true);
			err = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { */ case 6:
				p.wrappedErr = $ifaceNil;
				p.wrapErrs = false;
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				handled = true;
				$24r$1 = handled;
				$s = 9; case 9: return $24r$1;
			/* } */ case 7:
			p.wrappedErr = err;
			verb = 118;
		/* } */ case 5:
		_tuple$1 = $assertType(p.arg, Formatter, true);
		formatter = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (ok$1) { */ case 10:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Format"]]);
			$r = formatter.Format(p, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$24r$2 = handled;
			$s = 13; case 13: return $24r$2;
		/* } */ case 11:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 14:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$2 = _tuple$2[1];
			/* */ if (ok$2) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (ok$2) { */ case 17:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "GoString"]]);
				_r = stringer.GoString(); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$24r$3 = handled;
				$s = 21; case 21: return $24r$3;
			/* } */ case 18:
			$s = 16; continue;
		/* } else { */ case 15:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 23:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 25; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 25:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Error"]]);
						_r$1 = v.Error(); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$4 = handled;
						$s = 30; case 30: return $24r$4;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 26:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "String"]]);
						_r$2 = v$1.String(); /* */ $s = 31; case 31: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$5 = handled;
						$s = 33; case 33: return $24r$5;
					/* } */ case 27:
				/* } */ case 24:
			case 22:
		/* } */ case 16:
		handled = false;
		$24r$6 = handled;
		$s = 34; case 34: return $24r$6;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { var $f = {$blk: pp.ptr.prototype.handleMethods, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, err, formatter, handled, ok, ok$1, ok$2, p, stringer, v, v$1, verb, $s, $deferred};return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var {_1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r, $c} = $restore(this, {arg, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.printArg, $c: true, $r, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s};return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var {_1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, name, p, sorted, t, value, value$1, verb, x, x$1, $s, $r, $c} = $restore(this, {value, verb, depth});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("map[");
				/* } */ case 44:
				_r$4 = fmtsort.Sort($clone(f, reflect.Value)); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				sorted = _r$4;
				_ref = sorted.Key;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
					$r = p.printValue($clone((x$1 = sorted.Value, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				$s = 48; continue;
				case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 52:
					_r$5 = $clone(f, reflect.Value).Type().String(); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$5); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 53:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
				i$1 = 0;
				/* while (true) { */ case 56:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 57; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 58; continue; }
					/* */ $s = 59; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 58:
						_r$6 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						name = _r$6.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
						}
					/* } */ case 59:
					_r$7 = getField($clone(f, reflect.Value), i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$7, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				$s = 56; continue;
				case 57:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$8 = $clone(f, reflect.Value).Elem(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				value$1 = _r$8;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 64:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 67; continue; }
					/* */ $s = 68; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 67:
						_r$9 = $clone(f, reflect.Value).Type().String(); /* */ $s = 70; case 70: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$9); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = 69; continue;
					/* } else { */ case 68:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					/* } */ case 69:
					$s = 66; continue;
				/* } else { */ case 65:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 66:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 74; continue; }
					/* */ $s = 75; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 74:
						t = $clone(f, reflect.Value).Type();
						_r$10 = t.Elem(); /* */ $s = 78; case 78: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = _r$10.Kind(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						/* */ if (_r$11 === 8) { $s = 76; continue; }
						/* */ $s = 77; continue;
						/* if (_r$11 === 8) { */ case 76:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 80; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 81; continue; }
							/* */ $s = 82; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 80:
								_r$12 = $clone(f, reflect.Value).Bytes(); /* */ $s = 84; case 84: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								bytes = _r$12;
								$s = 83; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Len(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								_arg = _r$13;
								_r$14 = $clone(f, reflect.Value).Slice(0, _arg); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 83; continue;
							/* } else { */ case 82:
								_r$16 = $clone(f, reflect.Value).Len(); /* */ $s = 88; case 88: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
								bytes = $makeSlice(sliceType$2, _r$16);
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 89:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 90; continue; }
									i$2 = _i$1;
									_r$17 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									_r$18 = $clone(_r$17, reflect.Value).Uint(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$18.$low << 24 >>> 24)));
									_i$1++;
								$s = 89; continue;
								case 90:
							/* } */ case 83:
							_arg$1 = bytes;
							_arg$2 = verb;
							_r$19 = t.String(); /* */ $s = 93; case 93: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							_arg$3 = _r$19;
							$r = p.fmtBytes(_arg$1, _arg$2, _arg$3); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 77:
					/* } */ case 75:
				case 73:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 95; continue; }
				/* */ $s = 96; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 95:
					_r$20 = $clone(f, reflect.Value).Type().String(); /* */ $s = 98; case 98: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$20); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					i$3 = 0;
					/* while (true) { */ case 100:
						_r$21 = $clone(f, reflect.Value).Len(); /* */ $s = 102; case 102: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						/* if (!(i$3 < _r$21)) { break; } */ if(!(i$3 < _r$21)) { $s = 101; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						_r$22 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 103; case 103: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$22, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					$s = 100; continue;
					case 101:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
					$s = 97; continue;
				/* } else { */ case 96:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					i$4 = 0;
					/* while (true) { */ case 105:
						_r$23 = $clone(f, reflect.Value).Len(); /* */ $s = 107; case 107: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						/* if (!(i$4 < _r$23)) { break; } */ if(!(i$4 < _r$23)) { $s = 106; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						_r$24 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 108; case 108: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$24, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					$s = 105; continue;
					case 106:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				/* } */ case 97:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 110; continue; }
				/* */ $s = 111; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 110:
						_r$25 = $clone(f, reflect.Value).Elem(); /* */ $s = 113; case 113: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						a = _r$25;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 114; continue; }
						/* */ $s = 115; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 114:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 115:
					case 112:
				/* } */ case 111:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.printValue, $c: true, $r, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, name, p, sorted, t, value, value$1, verb, x, x$1, $s};return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var {_1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r, $c} = $restore(this, {a, argNum});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } var $f = {$blk: intFromArg, $c: true, $r, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s};return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var {_1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		$s = 1; continue;
		case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			$s = 37; continue;
			case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.doPrintf, $c: true, $r, _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s};return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var {_i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r, $c} = $restore(this, {a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.doPrint, $c: true, $r, _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s};return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.write(b);
		} else {
			f.buf.write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.writeString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.writeString(s);
		} else {
			f.buf.writeString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmtBoolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmtBoolean = function(v) { return this.$val.fmtBoolean(v); };
	fmt.ptr.prototype.fmtUnicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmtUnicode = function(u) { return this.$val.fmtUnicode(u); };
	fmt.ptr.prototype.fmtInteger = function(u, base, isSigned, verb, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, verb, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (2)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 98);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			} else if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (verb === 79) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 111);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmtInteger = function(u, base, isSigned, verb, digits) { return this.$val.fmtInteger(u, base, isSigned, verb, digits); };
	fmt.ptr.prototype.truncateString = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncateString = function(s) { return this.$val.truncateString(s); };
	fmt.ptr.prototype.truncate = function(b) {
		var _tuple, b, f, i, n, wid;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			i = 0;
			while (true) {
				if (!(i < b.$length)) { break; }
				n = n - (1) >> 0;
				if (n < 0) {
					return $subslice(b, 0, i);
				}
				wid = 1;
				if (((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >= 128) {
					_tuple = utf8.DecodeRune($subslice(b, i));
					wid = _tuple[1];
				}
				i = i + (wid) >> 0;
			}
		}
		return b;
	};
	fmt.prototype.truncate = function(b) { return this.$val.truncate(b); };
	fmt.ptr.prototype.fmtS = function(s) {
		var f, s;
		f = this;
		s = f.truncateString(s);
		f.padString(s);
	};
	fmt.prototype.fmtS = function(s) { return this.$val.fmtS(s); };
	fmt.ptr.prototype.fmtBs = function(b) {
		var b, f;
		f = this;
		b = f.truncate(b);
		f.pad(b);
	};
	fmt.prototype.fmtBs = function(b) { return this.$val.fmtBs(b); };
	fmt.ptr.prototype.fmtSbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmtSbx = function(s, b, digits) { return this.$val.fmtSbx(s, b, digits); };
	fmt.ptr.prototype.fmtSx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmtSbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmtSx = function(s, digits) { return this.$val.fmtSx(s, digits); };
	fmt.ptr.prototype.fmtBx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmtSbx("", b, digits);
	};
	fmt.prototype.fmtBx = function(b, digits) { return this.$val.fmtBx(b, digits); };
	fmt.ptr.prototype.fmtQ = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncateString(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmtQ = function(s) { return this.$val.fmtQ(s); };
	fmt.ptr.prototype.fmtC = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	fmt.ptr.prototype.fmtQc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmtQc = function(c) { return this.$val.fmtQc(c); };
	fmt.ptr.prototype.fmtFloat = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, sawNonzeroDigit, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$3.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			sawNonzeroDigit = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				switch (0) { default:
					_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
					if (_2 === (46)) {
						hasDecimalPoint = true;
					} else if ((_2 === (112)) || (_2 === (80))) {
						tail = $appendSlice(tail, $subslice(num, i));
						num = $subslice(num, 0, i);
					} else if ((_2 === (101)) || (_2 === (69))) {
						if (!((verb === 120)) && !((verb === 88))) {
							tail = $appendSlice(tail, $subslice(num, i));
							num = $subslice(num, 0, i);
							break;
						}
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					} else {
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					}
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				if ((num.$length === 2) && ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 48)) {
					digits = digits - (1) >> 0;
				}
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.writeByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmtFloat = function(v, size, verb, prec) { return this.$val.fmtFloat(v, size, verb, prec); };
	Errorf = function(format, a) {
		var {_r, a, err, format, p, s, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		p.wrapErrs = true;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		err = $ifaceNil;
		if ($interfaceIsEqual(p.wrappedErr, $ifaceNil)) {
			err = errors.New(s);
		} else {
			err = new wrapError.ptr(s, p.wrappedErr);
		}
		p.free();
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Errorf, $c: true, $r, _r, a, err, format, p, s, $s};return $f;
	};
	$pkg.Errorf = Errorf;
	wrapError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	wrapError.prototype.Error = function() { return this.$val.Error(); };
	wrapError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.err;
	};
	wrapError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	ptrType$4.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanPercent", name: "scanPercent", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "write", name: "write", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "writeString", name: "writeString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "fmt", typ: $funcType([$Uint8], [], false)}, {prop: "writeRune", name: "writeRune", pkg: "fmt", typ: $funcType([$Int32], [], false)}];
	ptrType$24.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $String], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType$1], [], false)}];
	ptrType$26.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBoolean", name: "fmtBoolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $Int32, $String], [], false)}, {prop: "truncateString", name: "truncateString", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([sliceType$2], [sliceType$2], false)}, {prop: "fmtS", name: "fmtS", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBs", name: "fmtBs", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "fmtSbx", name: "fmtSbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmtSx", name: "fmtSx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmtBx", name: "fmtBx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmtQ", name: "fmtQ", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtQc", name: "fmtQc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$27.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	scanError.init("fmt", [{prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", embedded: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", embedded: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", embedded: false, exported: false, typ: $Int, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", embedded: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", embedded: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", embedded: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrapErrs", name: "wrapErrs", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrappedErr", name: "wrappedErr", embedded: false, exported: false, typ: $error, tag: ""}]);
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", embedded: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", embedded: false, exported: false, typ: arrayType$1, tag: ""}]);
	wrapError.init("fmt", [{prop: "msg", name: "msg", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmtsort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		space = new sliceType([$clone($toNativeArray($kindUint16, [9, 13]), arrayType), $clone($toNativeArray($kindUint16, [32, 32]), arrayType), $clone($toNativeArray($kindUint16, [133, 133]), arrayType), $clone($toNativeArray($kindUint16, [160, 160]), arrayType), $clone($toNativeArray($kindUint16, [5760, 5760]), arrayType), $clone($toNativeArray($kindUint16, [8192, 8202]), arrayType), $clone($toNativeArray($kindUint16, [8232, 8233]), arrayType), $clone($toNativeArray($kindUint16, [8239, 8239]), arrayType), $clone($toNativeArray($kindUint16, [8287, 8287]), arrayType), $clone($toNativeArray($kindUint16, [12288, 12288]), arrayType)]);
		ssFree = new sync.Pool.ptr(sliceType$1.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		ppFree = new sync.Pool.ptr(sliceType$1.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType$1.zero()), false, false, false, false, false, $ifaceNil);
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, rngSource, Source, Source64, Rand, lockedSource, ptrType, ptrType$1, ptrType$2, arrayType, ptrType$4, sliceType, ptrType$5, funcType, sliceType$1, rngCooked, globalRand, kn, wn, fn, ke, we, fe, seedrand, NewSource, New, read, absInt32;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false, false, false, false, 0);
			this.src = ptrType.nil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	ptrType = $ptrType(rngSource);
	ptrType$1 = $ptrType(lockedSource);
	ptrType$2 = $ptrType(Rand);
	arrayType = $arrayType($Int64, 607);
	ptrType$4 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$5 = $ptrType($Int64);
	funcType = $funcType([$Int, $Int], [], false);
	sliceType$1 = $sliceType($Uint8);
	seedrand = function(x) {
		var _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rngCooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rngCooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	NewSource = function(seed) {
		var rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var {_tuple, lk, ok, r, seed, $s, $r, $c} = $restore(this, {seed});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType$1, true);
		lk = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$4(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r))));
			$s = -1; return;
		}
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Seed, $c: true, $r, _tuple, lk, ok, r, seed, $s};return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var {$24r, _r, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Int63, $c: true, $r, $24r, _r, r, $s};return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var {$24r, _r, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = (($shiftRightInt64(_r, 31).$low >>> 0));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Uint32, $c: true, $r, $24r, _r, r, $s};return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var {$24r, $24r$1, _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r$1 = (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Uint64, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s};return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var {$24r, _r, r, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Int31, $c: true, $r, $24r, _r, r, x, $s};return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var {_r, r, u, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Int, $c: true, $r, _r, r, u, $s};return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var {$24r, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 6:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 7; continue; }
			_r$2 = r.Int63(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		$s = 6; continue;
		case 7:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Int63n, $c: true, $r, $24r, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r & ((n - 1 >> 0));
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 6:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 7; continue; }
			_r$3 = r.Int31(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		$s = 6; continue;
		case 7:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Int31n, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s};return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.int31n = function(n) {
		var {_r, _r$1, _r$2, low, n, prod, r, thresh, v, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Uint32(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
		low = ((prod.$low >>> 0));
		/* */ if (low < ((n >>> 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (low < ((n >>> 0))) { */ case 2:
			thresh = (_r$1 = ((-n >>> 0)) % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			/* while (true) { */ case 4:
				/* if (!(low < thresh)) { break; } */ if(!(low < thresh)) { $s = 5; continue; }
				_r$2 = r.Uint32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
				prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
				low = ((prod.$low >>> 0));
			$s = 4; continue;
			case 5:
		/* } */ case 3:
		$s = -1; return (($shiftRightUint64(prod, 32).$low >> 0));
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.int31n, $c: true, $r, _r, _r$1, _r$2, low, n, prod, r, thresh, v, $s};return $f;
	};
	Rand.prototype.int31n = function(n) { return this.$val.int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var {$24r, $24r$1, _r, _r$1, n, r, x, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = ((_r >> 0));
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		$s = 6; case 6: return $24r$1;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Intn, $c: true, $r, $24r, $24r$1, _r, _r$1, n, r, x, $s};return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var {_r, f, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Float64, $c: true, $r, _r, f, r, $s};return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var {_r, f, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Float32, $c: true, $r, _r, f, r, $s};return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var {_r, i, j, m, n, r, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Perm, $c: true, $r, _r, i, j, m, n, r, $s};return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Shuffle = function(n, swap) {
		var {_r, _r$1, i, j, j$1, n, r, swap, x, $s, $r, $c} = $restore(this, {n, swap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (n < 0) {
			$panic(new $String("invalid argument to Shuffle"));
		}
		i = n - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i > 2147483646)) { break; } */ if(!(i > 2147483646)) { $s = 2; continue; }
			_r = r.Int63n((new $Int64(0, (i + 1 >> 0)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (((x = _r, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			$r = swap(i, j); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		$s = 1; continue;
		case 2:
		/* while (true) { */ case 5:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 6; continue; }
			_r$1 = r.int31n((((i + 1 >> 0) >> 0))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			j$1 = ((_r$1 >> 0));
			$r = swap(i, j$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		$s = 5; continue;
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Shuffle, $c: true, $r, _r, _r$1, i, j, j$1, n, r, swap, x, $s};return $f;
	};
	Rand.prototype.Shuffle = function(n, swap) { return this.$val.Shuffle(n, swap); };
	Rand.ptr.prototype.Read = function(p) {
		var {$24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType$1, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$5(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$4(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [n, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_r$1 = read(p, r.src, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$5(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$4(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$24r$1 = [n, err];
		$s = 6; case 6: return $24r$1;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.Read, $c: true, $r, $24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s};return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, src, readVal, readPos) {
		var {_r, _tuple, err, n, p, pos, readPos, readVal, rng, src, val, $s, $r, $c} = $restore(this, {p, src, readVal, readPos});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		_tuple = $assertType(src, ptrType, true);
		rng = _tuple[0];
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				/* */ if (!(rng === ptrType.nil)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(rng === ptrType.nil)) { */ case 5:
					val = rng.Int63();
					$s = 7; continue;
				/* } else { */ case 6:
					_r = src.Int63(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					val = _r;
				/* } */ case 7:
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		$s = 1; continue;
		case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: read, $c: true, $r, _r, _tuple, err, n, p, pos, readPos, readVal, rng, src, val, $s};return $f;
	};
	lockedSource.ptr.prototype.Int63 = function() {
		var n, r;
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		n = r.src.Int63();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var n, r;
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		n = r.src.Uint64();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r, seed;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		r.lk.Unlock();
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var r, readPos, seed;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		readPos.$set(0);
		r.lk.Unlock();
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var {_r, _tuple, err, n, p, r, readPos, readVal, $s, $r, $c} = $restore(this, {p, readVal, readPos});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, r.src, readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: lockedSource.ptr.prototype.read, $c: true, $r, _r, _tuple, err, n, p, r, readPos, readVal, $s};return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	absInt32 = function(i) {
		var i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				$s = 6; continue;
				case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		$s = 1; continue;
		case 2:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.NormFloat64, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s};return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	Rand.ptr.prototype.ExpFloat64 = function() {
		var {$24r, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$24r = 7.69711747013105 - _r$2;
				$s = 8; case 8: return $24r;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 9:
				$s = -1; return x;
			/* } */ case 10:
		$s = 1; continue;
		case 2:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Rand.ptr.prototype.ExpFloat64, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s};return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	ptrType.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$2.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "int31n", name: "int31n", pkg: "math/rand", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Shuffle", name: "Shuffle", pkg: "", typ: $funcType([$Int, funcType], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$4], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$5, ptrType$4], [$Int, $error], false)}];
	rngSource.init("math/rand", [{prop: "tap", name: "tap", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", embedded: false, exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", embedded: false, exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", embedded: false, exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", embedded: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		rngCooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false, false, false, false, 0), $assertType(NewSource(new $Int64(0, 1)), ptrType)));
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, sync, unicode, utf8, Reader, Builder, sliceType, ptrType$1, sliceType$2, ptrType$10, explode, Contains, LastIndexByte, genSplit, Split, Join, HasPrefix, HasSuffix, Map, ToLower, TrimSuffix, Replace, ReplaceAll, EqualFold, Cut, NewReader, Index, LastIndex, Count;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	Builder = $pkg.Builder = $newType(0, $kindStruct, "strings.Builder", true, "strings", true, function(addr_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.addr = ptrType$1.nil;
			this.buf = sliceType$2.nil;
			return;
		}
		this.addr = addr_;
		this.buf = buf_;
	});
	sliceType = $sliceType($String);
	ptrType$1 = $ptrType(Builder);
	sliceType$2 = $sliceType($Uint8);
	ptrType$10 = $ptrType(Reader);
	explode = function(s, n) {
		var _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	LastIndexByte = function(s, c) {
		var c, i, s;
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	$pkg.LastIndexByte = LastIndexByte;
	genSplit = function(s, sep, sepSave, n) {
		var a, i, m, n, s, sep, sepSave;
		if (n === 0) {
			return sliceType.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		if (n > (s.length + 1 >> 0)) {
			n = s.length + 1 >> 0;
		}
		a = $makeSlice(sliceType, n);
		n = n - (1) >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			m = Index(s, sep);
			if (m < 0) {
				break;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
			s = $substring(s, (m + sep.length >> 0));
			i = i + (1) >> 0;
		}
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
		return $subslice(a, 0, (i + 1 >> 0));
	};
	Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(elems, sep) {
		var _1, _i, _ref, b, elems, i, n, s, sep;
		_1 = elems.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= elems.$length ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + 0]);
		}
		n = $imul(sep.length, ((elems.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < elems.$length)) { break; }
			n = n + (((i < 0 || i >= elems.$length) ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		b.Grow(n);
		b.WriteString((0 >= elems.$length ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + 0]));
		_ref = $subslice(elems, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			b.WriteString(sep);
			b.WriteString(s);
			_i++;
		}
		return b.String();
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var s, suffix;
		return s.length >= suffix.length && $substring(s, (s.length - suffix.length >> 0)) === suffix;
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var {_i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, r, r$1, s, width, $s, $r, $c} = $restore(this, {mapping, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if ((r === c) && !((c === 65533))) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			width = 0;
			if (c === 65533) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				c = _tuple[0];
				width = _tuple[1];
				if (!((width === 1)) && (r === c)) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
			} else {
				width = utf8.RuneLen(c);
			}
			b.Grow(s.length + 4 >> 0);
			b.WriteString($substring(s, 0, i));
			if (r >= 0) {
				b.WriteRune(r);
			}
			s = $substring(s, (i + width >> 0));
			/* break; */ $s = 2; continue;
		case 2:
		if (b.Cap() === 0) {
			$s = -1; return s;
		}
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if (r$1 >= 0) {
				if (r$1 < 128) {
					b.WriteByte(((r$1 << 24 >>> 24)));
				} else {
					b.WriteRune(r$1);
				}
			}
			_i$1 += _rune$1[1];
		$s = 4; continue;
		case 5:
		$s = -1; return b.String();
		/* */ } return; } var $f = {$blk: Map, $c: true, $r, _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, r, r$1, s, width, $s};return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var {$24r, _r, _tmp, _tmp$1, b, c, c$1, hasUpper, i, i$1, isASCII, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = true;
		_tmp$1 = false;
		isASCII = _tmp;
		hasUpper = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c >= 128) {
				isASCII = false;
				break;
			}
			hasUpper = hasUpper || (65 <= c && c <= 90);
			i = i + (1) >> 0;
		}
		if (isASCII) {
			if (!hasUpper) {
				$s = -1; return s;
			}
			b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
			b.Grow(s.length);
			i$1 = 0;
			while (true) {
				if (!(i$1 < s.length)) { break; }
				c$1 = s.charCodeAt(i$1);
				if (65 <= c$1 && c$1 <= 90) {
					c$1 = c$1 + (32) << 24 >>> 24;
				}
				b.WriteByte(c$1);
				i$1 = i$1 + (1) >> 0;
			}
			$s = -1; return b.String();
		}
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ToLower, $c: true, $r, $24r, _r, _tmp, _tmp$1, b, c, c$1, hasUpper, i, i$1, isASCII, s, $s};return $f;
	};
	$pkg.ToLower = ToLower;
	TrimSuffix = function(s, suffix) {
		var s, suffix;
		if (HasSuffix(s, suffix)) {
			return $substring(s, 0, (s.length - suffix.length >> 0));
		}
		return s;
	};
	$pkg.TrimSuffix = TrimSuffix;
	Replace = function(s, old, new$1, n) {
		var _tuple, b, i, j, m, n, new$1, old, s, start, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		b.Grow(s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			b.WriteString($substring(s, start, j));
			b.WriteString(new$1);
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		b.WriteString($substring(s, start));
		return b.String();
	};
	$pkg.Replace = Replace;
	ReplaceAll = function(s, old, new$1) {
		var new$1, old, s;
		return Replace(s, old, new$1, -1);
	};
	$pkg.ReplaceAll = ReplaceAll;
	EqualFold = function(s, t) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!(s === "") && !(t === ""))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if (s.charCodeAt(0) < 128) {
				_tmp$2 = ((s.charCodeAt(0) >> 0));
				_tmp$3 = $substring(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $substring(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if (t.charCodeAt(0) < 128) {
				_tmp$6 = ((t.charCodeAt(0) >> 0));
				_tmp$7 = $substring(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRuneInString(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $substring(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128) {
				if (65 <= sr && sr <= 90 && (tr === ((sr + 97 >> 0) - 65 >> 0))) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s === t;
	};
	$pkg.EqualFold = EqualFold;
	Cut = function(s, sep) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, after, before, found, i, s, sep;
		before = "";
		after = "";
		found = false;
		i = Index(s, sep);
		if (i >= 0) {
			_tmp = $substring(s, 0, i);
			_tmp$1 = $substring(s, (i + sep.length >> 0));
			_tmp$2 = true;
			before = _tmp;
			after = _tmp$1;
			found = _tmp$2;
			return [before, after, found];
		}
		_tmp$3 = s;
		_tmp$4 = "";
		_tmp$5 = false;
		before = _tmp$3;
		after = _tmp$4;
		found = _tmp$5;
		return [before, after, found];
	};
	$pkg.Cut = Cut;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, $substring(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("strings.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, $substring(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.prevRune = -1;
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString($substring(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = (new $Int64(0, size)), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r, x;
		r = this;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadRune: at beginning of string");
		}
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var {_r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {w});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		s = $substring(r.s, $flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Reader.ptr.prototype.WriteTo, $c: true, $r, _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s};return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(s) {
		var r, s;
		r = this;
		Reader.copy(r, new Reader.ptr(s, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(s) { return this.$val.Reset(s); };
	NewReader = function(s) {
		var s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	Builder.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length;
	};
	Builder.prototype.Len = function() { return this.$val.Len(); };
	Builder.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Builder.prototype.Cap = function() { return this.$val.Cap(); };
	Builder.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.addr = ptrType$1.nil;
		b.buf = sliceType$2.nil;
	};
	Builder.prototype.Reset = function() { return this.$val.Reset(); };
	Builder.ptr.prototype.grow = function(n) {
		var b, buf, n;
		b = this;
		buf = $makeSlice(sliceType$2, b.buf.$length, (($imul(2, b.buf.$capacity)) + n >> 0));
		$copySlice(buf, b.buf);
		b.buf = buf;
	};
	Builder.prototype.grow = function(n) { return this.$val.grow(n); };
	Builder.ptr.prototype.Grow = function(n) {
		var b, n;
		b = this;
		b.copyCheck();
		if (n < 0) {
			$panic(new $String("strings.Builder.Grow: negative count"));
		}
		if ((b.buf.$capacity - b.buf.$length >> 0) < n) {
			b.grow(n);
		}
	};
	Builder.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Builder.ptr.prototype.Write = function(p) {
		var b, p;
		b = this;
		b.copyCheck();
		b.buf = $appendSlice(b.buf, p);
		return [p.$length, $ifaceNil];
	};
	Builder.prototype.Write = function(p) { return this.$val.Write(p); };
	Builder.ptr.prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.copyCheck();
		b.buf = $append(b.buf, c);
		return $ifaceNil;
	};
	Builder.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Builder.ptr.prototype.WriteRune = function(r) {
		var b, l, n, r;
		b = this;
		b.copyCheck();
		if (((r >>> 0)) < 128) {
			b.buf = $append(b.buf, ((r << 24 >>> 24)));
			return [1, $ifaceNil];
		}
		l = b.buf.$length;
		if ((b.buf.$capacity - l >> 0) < 4) {
			b.grow(4);
		}
		n = utf8.EncodeRune($subslice(b.buf, l, (l + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (l + n >> 0));
		return [n, $ifaceNil];
	};
	Builder.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Builder.ptr.prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.copyCheck();
		b.buf = $appendSlice(b.buf, s);
		return [s.length, $ifaceNil];
	};
	Builder.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Builder.ptr.prototype.String = function() {
		var b;
		b = this;
		return ($bytesToString(b.buf));
	};
	Builder.prototype.String = function() { return this.$val.String(); };
	Builder.ptr.prototype.copyCheck = function() {
		var b;
		b = this;
		if (b.addr === ptrType$1.nil) {
			b.addr = b;
		} else if (!(b.addr === b)) {
			$panic(new $String("strings: illegal use of non-zero Builder copied by value"));
		}
	};
	Builder.prototype.copyCheck = function() { return this.$val.copyCheck(); };
	ptrType$10.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$1.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "strings", typ: $funcType([$Int], [], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "copyCheck", name: "copyCheck", pkg: "strings", typ: $funcType([], [], false)}];
	Reader.init("strings", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", embedded: false, exported: false, typ: $Int, tag: ""}]);
	Builder.init("strings", [{prop: "addr", name: "addr", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/big"] = (function() {
	var $pkg = {}, $init, bytes, binary, errors, fmt, nosync, io, math, bits, rand, strconv, strings, divisor, nat, byteReader, Int, Word, arrayType, structType$1, sliceType, sliceType$1, ptrType$2, sliceType$2, ptrType$3, sliceType$3, sliceType$4, ptrType$4, arrayType$1, ptrType$5, errNoDigits, errInvalSep, leafSize, cacheBase10, natOne, natTwo, karatsubaThreshold, basicSqrThreshold, karatsubaSqrThreshold, natPool, intOne, divWVW, greaterThan, maxPow, pow, divisors, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, basicSqr, karatsubaSqr, getNat, putNat, same, bigEndianWord, writeMultiple, scanSign, NewInt, low64, lehmerSimulate, lehmerUpdate, euclidUpdate, Jacobi, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, mulWW, mulAddWWW_g, nlz, addVV_g, subVV_g, addVW_g, addVWlarge, subVW_g, subVWlarge, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWW, reciprocalWord;
	bytes = $packages["bytes"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	rand = $packages["math/rand"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	divisor = $pkg.divisor = $newType(0, $kindStruct, "big.divisor", true, "math/big", false, function(bbb_, nbits_, ndigits_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bbb = nat.nil;
			this.nbits = 0;
			this.ndigits = 0;
			return;
		}
		this.bbb = bbb_;
		this.nbits = nbits_;
		this.ndigits = ndigits_;
	});
	nat = $pkg.nat = $newType(12, $kindSlice, "big.nat", true, "math/big", false, null);
	byteReader = $pkg.byteReader = $newType(0, $kindStruct, "big.byteReader", true, "math/big", false, function(ScanState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ScanState = $ifaceNil;
			return;
		}
		this.ScanState = ScanState_;
	});
	Int = $pkg.Int = $newType(0, $kindStruct, "big.Int", true, "math/big", true, function(neg_, abs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.neg = false;
			this.abs = nat.nil;
			return;
		}
		this.neg = neg_;
		this.abs = abs_;
	});
	Word = $pkg.Word = $newType(4, $kindUintptr, "big.Word", true, "math/big", true, null);
	arrayType = $arrayType(divisor, 64);
	structType$1 = $structType("math/big", [{prop: "Mutex", name: "Mutex", embedded: true, exported: true, typ: nosync.Mutex, tag: ""}, {prop: "table", name: "table", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(Int);
	sliceType$2 = $sliceType(Word);
	ptrType$3 = $ptrType(nat);
	sliceType$3 = $sliceType(ptrType$3);
	sliceType$4 = $sliceType(divisor);
	ptrType$4 = $ptrType(Word);
	arrayType$1 = $arrayType(nat, 16);
	ptrType$5 = $ptrType(rand.Rand);
	Int.ptr.prototype.ProbablyPrime = function(n) {
		var {$24r, _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _v, n, r, rA, rB, w, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (n < 0) {
			$panic(new $String("negative n for ProbablyPrime"));
		}
		if (x.neg || (x.abs.$length === 0)) {
			$s = -1; return false;
		}
		w = (x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		if ((x.abs.$length === 1) && w < 64) {
			$s = -1; return !((x$2 = (x$3 = $shiftLeft64(new $Uint64(0, 1), w), new $Uint64(673221152 & x$3.$high, (2693408940 & x$3.$low) >>> 0)), (x$2.$high === 0 && x$2.$low === 0)));
		}
		if (((w & 1) >>> 0) === 0) {
			$s = -1; return false;
		}
		_tmp = 0;
		_tmp$1 = 0;
		rA = _tmp;
		rB = _tmp$1;
		_1 = 32;
		if (_1 === (32)) {
			rA = ((x.abs.modW(4127218095) >>> 0));
			rB = ((x.abs.modW(3948078067) >>> 0));
		} else if (_1 === (64)) {
			r = x.abs.modW(820596253);
			rA = (((_r = r % 4127218095, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0));
			rB = (((_r$1 = r % 3948078067, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0));
		} else {
			$panic(new $String("math/big: invalid word size"));
		}
		if (((_r$2 = rA % 3, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$3 = rA % 5, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$4 = rA % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$5 = rA % 11, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = rA % 13, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = rA % 17, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = rA % 19, _r$8 === _r$8 ? _r$8 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = rA % 23, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$10 = rA % 37, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$11 = rB % 29, _r$11 === _r$11 ? _r$11 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$12 = rB % 31, _r$12 === _r$12 ? _r$12 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$13 = rB % 41, _r$13 === _r$13 ? _r$13 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$14 = rB % 43, _r$14 === _r$14 ? _r$14 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$15 = rB % 47, _r$15 === _r$15 ? _r$15 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$16 = rB % 53, _r$16 === _r$16 ? _r$16 : $throwRuntimeError("integer divide by zero")) === 0)) {
			$s = -1; return false;
		}
		_r$17 = x.abs.probablyPrimeMillerRabin(n + 1 >> 0, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		if (!(_r$17)) { _v = false; $s = 1; continue s; }
		_r$18 = x.abs.probablyPrimeLucas(); /* */ $s = 3; case 3: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_v = _r$18; case 1:
		$24r = _v;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.ProbablyPrime, $c: true, $r, $24r, _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _v, n, r, rA, rB, w, x, x$1, x$2, x$3, $s};return $f;
	};
	Int.prototype.ProbablyPrime = function(n) { return this.$val.ProbablyPrime(n); };
	nat.prototype.probablyPrimeMillerRabin = function(reps, force2) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tuple, force2, i, j, k, n, nm1, nm3, nm3Len, q, quotient, rand$1, reps, x, x$1, y, $s, $r, $c} = $restore(this, {reps, force2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		_r = (nat.nil).sub(n, natOne); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm1 = _r;
		k = nm1.trailingZeroBits();
		q = (nat.nil).shr(nm1, k);
		_r$1 = (nat.nil).sub(nm1, natTwo); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		nm3 = _r$1;
		rand$1 = rand.New(rand.NewSource(((x = (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]), new $Int64(0, x.constructor === Number ? x : 1)))));
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		_tmp$2 = nat.nil;
		x$1 = _tmp;
		y = _tmp$1;
		quotient = _tmp$2;
		nm3Len = nm3.bitLen();
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < reps)) { break; } */ if(!(i < reps)) { $s = 4; continue; }
			/* */ if ((i === (reps - 1 >> 0)) && force2) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((i === (reps - 1 >> 0)) && force2) { */ case 5:
				x$1 = x$1.set(natTwo);
				$s = 7; continue;
			/* } else { */ case 6:
				_r$2 = x$1.random(rand$1, nm3, nm3Len); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x$1 = _r$2;
				_r$3 = x$1.add(x$1, natTwo); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				x$1 = _r$3;
			/* } */ case 7:
			_r$4 = y.expNN(x$1, q, n); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			y = _r$4;
			if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) {
				i = i + (1) >> 0;
				/* continue; */ $s = 3; continue;
			}
			j = 1;
			/* while (true) { */ case 11:
				/* if (!(j < k)) { break; } */ if(!(j < k)) { $s = 12; continue; }
				_r$5 = y.sqr(y); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				y = _r$5;
				_r$6 = quotient.div(y, y, n); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6;
				quotient = _tuple[0];
				y = _tuple[1];
				if (y.cmp(nm1) === 0) {
					i = i + (1) >> 0;
					/* continue NextRandom; */ $s = 3; continue s;
				}
				if (y.cmp(natOne) === 0) {
					$s = -1; return false;
				}
				j = j + (1) >>> 0;
			$s = 11; continue;
			case 12:
			$s = -1; return false;
		case 4:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: nat.prototype.probablyPrimeMillerRabin, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tuple, force2, i, j, k, n, nm1, nm3, nm3Len, q, quotient, rand$1, reps, x, x$1, y, $s};return $f;
	};
	$ptrType(nat).prototype.probablyPrimeMillerRabin = function(reps, force2) { return this.$get().probablyPrimeMillerRabin(reps, force2); };
	nat.prototype.probablyPrimeLucas = function() {
		var {_r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, d, i, intD, intN, j, n, natP, nm2, p, r, s, t, t1, t1$1, t2, t2$1, t3, vk, vk1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		if ((n.$length === 0) || (n.cmp(natOne) === 0)) {
			$s = -1; return false;
		}
		if ((((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) & 1) >>> 0) === 0) {
			$s = -1; return n.cmp(natTwo) === 0;
		}
		p = 3;
		d = new nat([1]);
		t1 = (nat.nil);
		intD = new Int.ptr(false, d);
		intN = new Int.ptr(false, n);
		/* while (true) { */ case 1:
			/* */ if (p > 10000) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p > 10000) { */ case 3:
				_r = intN.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(new $String("math/big: internal error: cannot find (D/n) = -1 for " + _r));
			/* } */ case 4:
			(0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0] = (($imul(p, p) >>> 0) - 4 >>> 0));
			_r$1 = Jacobi(intD, intN); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			j = _r$1;
			if (j === -1) {
				/* break; */ $s = 2; continue;
			}
			if (j === 0) {
				$s = -1; return (n.$length === 1) && ((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) === (p + 2 >>> 0));
			}
			/* */ if (p === 40) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (p === 40) { */ case 7:
				_r$2 = t1.sqrt(n); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				t1 = _r$2;
				_r$3 = t1.sqr(t1); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t1 = _r$3;
				if (t1.cmp(n) === 0) {
					$s = -1; return false;
				}
			/* } */ case 8:
			p = p + (1) >>> 0;
		$s = 1; continue;
		case 2:
		_r$4 = (nat.nil).add(n, natOne); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		s = _r$4;
		r = ((s.trailingZeroBits() >> 0));
		s = s.shr(s, ((r >>> 0)));
		_r$5 = (nat.nil).sub(n, natTwo); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		nm2 = _r$5;
		natP = (nat.nil).setWord(p);
		vk = (nat.nil).setWord(2);
		vk1 = (nat.nil).setWord(p);
		t2 = (nat.nil);
		i = (s.bitLen());
		/* while (true) { */ case 13:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 14; continue; }
			/* */ if (!((s.bit(((i >>> 0))) === 0))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!((s.bit(((i >>> 0))) === 0))) { */ case 15:
				_r$6 = t1.mul(vk, vk1); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				t1 = _r$6;
				_r$7 = t1.add(t1, n); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				t1 = _r$7;
				_r$8 = t1.sub(t1, natP); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				t1 = _r$8;
				_r$9 = t2.div(vk, t1, n); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple = _r$9;
				t2 = _tuple[0];
				vk = _tuple[1];
				_r$10 = t1.sqr(vk1); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				t1 = _r$10;
				_r$11 = t1.add(t1, nm2); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				t1 = _r$11;
				_r$12 = t2.div(vk1, t1, n); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$1 = _r$12;
				t2 = _tuple$1[0];
				vk1 = _tuple$1[1];
				$s = 17; continue;
			/* } else { */ case 16:
				_r$13 = t1.mul(vk, vk1); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				t1 = _r$13;
				_r$14 = t1.add(t1, n); /* */ $s = 26; case 26: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				t1 = _r$14;
				_r$15 = t1.sub(t1, natP); /* */ $s = 27; case 27: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				t1 = _r$15;
				_r$16 = t2.div(vk1, t1, n); /* */ $s = 28; case 28: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_tuple$2 = _r$16;
				t2 = _tuple$2[0];
				vk1 = _tuple$2[1];
				_r$17 = t1.sqr(vk); /* */ $s = 29; case 29: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				t1 = _r$17;
				_r$18 = t1.add(t1, nm2); /* */ $s = 30; case 30: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				t1 = _r$18;
				_r$19 = t2.div(vk, t1, n); /* */ $s = 31; case 31: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_tuple$3 = _r$19;
				t2 = _tuple$3[0];
				vk = _tuple$3[1];
			/* } */ case 17:
			i = i - (1) >> 0;
		$s = 13; continue;
		case 14:
		/* */ if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { */ case 32:
			_r$20 = t1.mul(vk, natP); /* */ $s = 34; case 34: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			t1$1 = _r$20;
			t2$1 = t2.shl(vk1, 1);
			if (t1$1.cmp(t2$1) < 0) {
				_tmp = t2$1;
				_tmp$1 = t1$1;
				t1$1 = _tmp;
				t2$1 = _tmp$1;
			}
			_r$21 = t1$1.sub(t1$1, t2$1); /* */ $s = 35; case 35: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			t1$1 = _r$21;
			t3 = vk1;
			vk1 = nat.nil;
			$unused(vk1);
			_r$22 = t2$1.div(t3, t1$1, n); /* */ $s = 36; case 36: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_tuple$4 = _r$22;
			t2$1 = _tuple$4[0];
			t3 = _tuple$4[1];
			if (t3.$length === 0) {
				$s = -1; return true;
			}
		/* } */ case 33:
		t = 0;
		/* while (true) { */ case 37:
			/* if (!(t < (r - 1 >> 0))) { break; } */ if(!(t < (r - 1 >> 0))) { $s = 38; continue; }
			if (vk.$length === 0) {
				$s = -1; return true;
			}
			if ((vk.$length === 1) && ((0 >= vk.$length ? ($throwRuntimeError("index out of range"), undefined) : vk.$array[vk.$offset + 0]) === 2)) {
				$s = -1; return false;
			}
			_r$23 = t1.sqr(vk); /* */ $s = 39; case 39: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			t1 = _r$23;
			_r$24 = t1.sub(t1, natTwo); /* */ $s = 40; case 40: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			t1 = _r$24;
			_r$25 = t2.div(vk, t1, n); /* */ $s = 41; case 41: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_tuple$5 = _r$25;
			t2 = _tuple$5[0];
			vk = _tuple$5[1];
			t = t + (1) >> 0;
		$s = 37; continue;
		case 38:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: nat.prototype.probablyPrimeLucas, $c: true, $r, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, d, i, intD, intN, j, n, natP, nm2, p, r, s, t, t1, t1$1, t2, t2$1, t3, vk, vk1, $s};return $f;
	};
	$ptrType(nat).prototype.probablyPrimeLucas = function() { return this.$get().probablyPrimeLucas(); };
	nat.prototype.div = function(z2, u, v) {
		var {_r, _tuple, _tuple$1, q, r, r2, u, v, z, z2, $s, $r, $c} = $restore(this, {z2, u, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		if (v.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = $subslice(z, 0, 0);
			r = z2.set(u);
			$s = -1; return [q, r];
		}
		if (v.$length === 1) {
			r2 = 0;
			_tuple = z.divW(u, (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]));
			q = _tuple[0];
			r2 = _tuple[1];
			r = z2.setWord(r2);
			$s = -1; return [q, r];
		}
		_r = z.divLarge(z2, u, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		q = _tuple$1[0];
		r = _tuple$1[1];
		$s = -1; return [q, r];
		/* */ } return; } var $f = {$blk: nat.prototype.div, $c: true, $r, _r, _tuple, _tuple$1, q, r, r2, u, v, z, z2, $s};return $f;
	};
	$ptrType(nat).prototype.div = function(z2, u, v) { return this.$get().div(z2, u, v); };
	nat.prototype.divW = function(x, y) {
		var m, q, r, x, y, z;
		q = nat.nil;
		r = 0;
		z = this;
		m = x.$length;
		if ((y === 0)) {
			$panic(new $String("division by zero"));
		} else if ((y === 1)) {
			q = z.set(x);
			return [q, r];
		} else if ((m === 0)) {
			q = $subslice(z, 0, 0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW($convertSliceType(z, sliceType$2), 0, $convertSliceType(x, sliceType$2), y);
		q = z.norm();
		return [q, r];
	};
	$ptrType(nat).prototype.divW = function(x, y) { return this.$get().divW(x, y); };
	nat.prototype.modW = function(d) {
		var d, q, r, x;
		r = 0;
		x = this;
		q = nat.nil;
		q = q.make(x.$length);
		r = divWVW($convertSliceType(q, sliceType$2), 0, $convertSliceType(x, sliceType$2), d);
		return r;
	};
	$ptrType(nat).prototype.modW = function(d) { return this.$get().modW(d); };
	divWVW = function(z, xn, x, y) {
		var _tuple, _tuple$1, i, qq, r, rec, rr, x, xn, y, z;
		r = 0;
		r = xn;
		if (x.$length === 1) {
			_tuple = bits.Div(((r >>> 0)), (((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]) >>> 0)), ((y >>> 0)));
			qq = _tuple[0];
			rr = _tuple[1];
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((qq >>> 0)));
			r = ((rr >>> 0));
			return r;
		}
		rec = reciprocalWord(y);
		i = z.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			_tuple$1 = divWW(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, rec);
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple$1[0]);
			r = _tuple$1[1];
			i = i - (1) >> 0;
		}
		r = r;
		return r;
	};
	nat.prototype.divLarge = function(u, uIn, vIn) {
		var {_r, _tmp, _tmp$1, m, n, q, r, shift, u, uIn, v, vIn, vp, x, x$1, z, $s, $r, $c} = $restore(this, {u, uIn, vIn});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		n = vIn.$length;
		m = uIn.$length - n >> 0;
		shift = nlz((x = n - 1 >> 0, ((x < 0 || x >= vIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : vIn.$array[vIn.$offset + x])));
		_r = getNat(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		vp = _r;
		v = vp.$get();
		shlVU($convertSliceType(v, sliceType$2), $convertSliceType(vIn, sliceType$2), shift);
		u = u.make(uIn.$length + 1 >> 0);
		(x$1 = uIn.$length, ((x$1 < 0 || x$1 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$1] = shlVU($convertSliceType($subslice(u, 0, uIn.$length), sliceType$2), $convertSliceType(uIn, sliceType$2), shift)));
		if (alias(z, u)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		/* */ if (n < 100) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (n < 100) { */ case 2:
			$r = q.divBasic(u, v); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			$r = q.divRecursive(u, v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		putNat(vp);
		q = q.norm();
		shrVU($convertSliceType(u, sliceType$2), $convertSliceType(u, sliceType$2), shift);
		r = u.norm();
		_tmp = q;
		_tmp$1 = r;
		q = _tmp;
		r = _tmp$1;
		$s = -1; return [q, r];
		/* */ } return; } var $f = {$blk: nat.prototype.divLarge, $c: true, $r, _r, _tmp, _tmp$1, m, n, q, r, shift, u, uIn, v, vIn, vp, x, x$1, z, $s};return $f;
	};
	$ptrType(nat).prototype.divLarge = function(u, uIn, vIn) { return this.$get().divLarge(u, uIn, vIn); };
	nat.prototype.divBasic = function(u, v) {
		var {_index, _r, _tuple, _tuple$1, _tuple$2, c, c$1, j, m, n, prevRhat, q, qhat, qhatv, qhatvp, qhl, rec, rhat, u, ujn, ujn2, v, vn1, vn2, x, x$1, x$2, x$3, x$4, x1, x2, $s, $r, $c} = $restore(this, {u, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		n = v.$length;
		m = u.$length - n >> 0;
		_r = getNat(n + 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		qhatvp = _r;
		qhatv = qhatvp.$get();
		vn1 = (x = n - 1 >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]));
		rec = reciprocalWord(vn1);
		j = m;
		while (true) {
			if (!(j >= 0)) { break; }
			qhat = 4294967295;
			ujn = 0;
			if ((j + n >> 0) < u.$length) {
				ujn = (x$1 = j + n >> 0, ((x$1 < 0 || x$1 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$1]));
			}
			if (!((ujn === vn1))) {
				rhat = 0;
				_tuple = divWW(ujn, (x$2 = (j + n >> 0) - 1 >> 0, ((x$2 < 0 || x$2 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$2])), vn1, rec);
				qhat = _tuple[0];
				rhat = _tuple[1];
				vn2 = (x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$3]));
				_tuple$1 = mulWW(qhat, vn2);
				x1 = _tuple$1[0];
				x2 = _tuple$1[1];
				ujn2 = (x$4 = (j + n >> 0) - 2 >> 0, ((x$4 < 0 || x$4 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$4]));
				while (true) {
					if (!(greaterThan(x1, x2, rhat, ujn2))) { break; }
					qhat = qhat - (1) >>> 0;
					prevRhat = rhat;
					rhat = rhat + (vn1) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, vn2);
					x1 = _tuple$2[0];
					x2 = _tuple$2[1];
				}
			}
			((n < 0 || n >= qhatv.$length) ? ($throwRuntimeError("index out of range"), undefined) : qhatv.$array[qhatv.$offset + n] = mulAddVWW($convertSliceType($subslice(qhatv, 0, n), sliceType$2), $convertSliceType(v, sliceType$2), qhat, 0));
			qhl = qhatv.$length;
			if ((j + qhl >> 0) > u.$length && (((n < 0 || n >= qhatv.$length) ? ($throwRuntimeError("index out of range"), undefined) : qhatv.$array[qhatv.$offset + n]) === 0)) {
				qhl = qhl - (1) >> 0;
			}
			c = subVV($convertSliceType($subslice(u, j, (j + qhl >> 0)), sliceType$2), $convertSliceType($subslice(u, j), sliceType$2), $convertSliceType(qhatv, sliceType$2));
			if (!((c === 0))) {
				c$1 = addVV($convertSliceType($subslice(u, j, (j + n >> 0)), sliceType$2), $convertSliceType($subslice(u, j), sliceType$2), $convertSliceType(v, sliceType$2));
				if (n < qhl) {
					_index = j + n >> 0;
					((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index] = (((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index]) + (c$1) >>> 0));
				}
				qhat = qhat - (1) >>> 0;
			}
			if ((j === m) && (m === q.$length) && (qhat === 0)) {
				j = j - (1) >> 0;
				continue;
			}
			((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j] = qhat);
			j = j - (1) >> 0;
		}
		putNat(qhatvp);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: nat.prototype.divBasic, $c: true, $r, _index, _r, _tuple, _tuple$1, _tuple$2, c, c$1, j, m, n, prevRhat, q, qhat, qhatv, qhatvp, qhl, rec, rhat, u, ujn, ujn2, v, vn1, vn2, x, x$1, x$2, x$3, x$4, x1, x2, $s};return $f;
	};
	$ptrType(nat).prototype.divBasic = function(u, v) { return this.$get().divBasic(u, v); };
	greaterThan = function(x1, x2, y1, y2) {
		var x1, x2, y1, y2;
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.divRecursive = function(u, v) {
		var {_i, _r, _ref, n, recDepth, temps, tmp, u, v, z, $s, $r, $c} = $restore(this, {u, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		recDepth = $imul(2, bits.Len(((v.$length >>> 0))));
		_r = getNat($imul(3, v.$length)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tmp = _r;
		temps = $makeSlice(sliceType$3, recDepth);
		z.clear();
		$r = z.divRecursiveStep(u, v, 0, tmp, temps); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = temps;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(n === ptrType$3.nil)) {
				putNat(n);
			}
			_i++;
		}
		putNat(tmp);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: nat.prototype.divRecursive, $c: true, $r, _i, _r, _ref, n, recDepth, temps, tmp, u, v, z, $s};return $f;
	};
	$ptrType(nat).prototype.divRecursive = function(u, v) { return this.$get().divRecursive(u, v); };
	nat.prototype.divRecursiveStep = function(u, v, depth, tmp, temps) {
		var {B, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, c, c$1, c$2, c$3, depth, e, e$1, i, i$1, j, m, n, qhat, qhat$1, qhatv, qhatv$1, s, s$1, temps, tmp, u, uu, v, z, $s, $r, $c} = $restore(this, {u, v, depth, tmp, temps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		u = u.norm();
		v = v.norm();
		if (u.$length === 0) {
			z.clear();
			$s = -1; return;
		}
		n = v.$length;
		/* */ if (n < 100) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n < 100) { */ case 1:
			$r = z.divBasic(u, v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		m = u.$length - n >> 0;
		if (m < 0) {
			$s = -1; return;
		}
		B = (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ if (((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]) === ptrType$3.nil) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]) === ptrType$3.nil) { */ case 4:
			_r = getNat(n); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth] = _r);
			$s = 6; continue;
		/* } else { */ case 5:
			((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]).$set(((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]).make(B + 1 >> 0));
		/* } */ case 6:
		j = m;
		/* while (true) { */ case 8:
			/* if (!(j > B)) { break; } */ if(!(j > B)) { $s = 9; continue; }
			s = (B - 1 >> 0);
			uu = $subslice(u, (j - B >> 0));
			qhat = ((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]).$get();
			qhat.clear();
			$r = qhat.divRecursiveStep($subslice(uu, s, (B + n >> 0)), $subslice(v, s), depth + 1 >> 0, tmp, temps); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			qhat = qhat.norm();
			qhatv = tmp.make($imul(3, n));
			qhatv.clear();
			_r$1 = qhatv.mul(qhat, $subslice(v, 0, s)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			qhatv = _r$1;
			i = 0;
			/* while (true) { */ case 12:
				/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 13; continue; }
				e = qhatv.cmp(uu.norm());
				if (e <= 0) {
					/* break; */ $s = 13; continue;
				}
				_r$2 = subVW($convertSliceType(qhat, sliceType$2), $convertSliceType(qhat, sliceType$2), 1); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				c = subVV($convertSliceType($subslice(qhatv, 0, s), sliceType$2), $convertSliceType($subslice(qhatv, 0, s), sliceType$2), $convertSliceType($subslice(v, 0, s), sliceType$2));
				/* */ if (qhatv.$length > s) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (qhatv.$length > s) { */ case 15:
					_r$3 = subVW($convertSliceType($subslice(qhatv, s), sliceType$2), $convertSliceType($subslice(qhatv, s), sliceType$2), c); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 16:
				$r = addAt($subslice(uu, s), $subslice(v, s), 0); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			$s = 12; continue;
			case 13:
			if (qhatv.cmp(uu.norm()) > 0) {
				$panic(new $String("impossible"));
			}
			c$1 = subVV($convertSliceType($subslice(uu, 0, qhatv.$length), sliceType$2), $convertSliceType($subslice(uu, 0, qhatv.$length), sliceType$2), $convertSliceType(qhatv, sliceType$2));
			/* */ if (c$1 > 0) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (c$1 > 0) { */ case 19:
				_r$4 = subVW($convertSliceType($subslice(uu, qhatv.$length), sliceType$2), $convertSliceType($subslice(uu, qhatv.$length), sliceType$2), c$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 20:
			$r = addAt(z, qhat, j - B >> 0); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j = j - (B) >> 0;
		$s = 8; continue;
		case 9:
		s$1 = B - 1 >> 0;
		qhat$1 = ((depth < 0 || depth >= temps.$length) ? ($throwRuntimeError("index out of range"), undefined) : temps.$array[temps.$offset + depth]).$get();
		qhat$1.clear();
		$r = qhat$1.divRecursiveStep($subslice(u, s$1).norm(), $subslice(v, s$1), depth + 1 >> 0, tmp, temps); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		qhat$1 = qhat$1.norm();
		qhatv$1 = tmp.make($imul(3, n));
		qhatv$1.clear();
		_r$5 = qhatv$1.mul(qhat$1, $subslice(v, 0, s$1)); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		qhatv$1 = _r$5;
		i$1 = 0;
		/* while (true) { */ case 25:
			/* if (!(i$1 < 2)) { break; } */ if(!(i$1 < 2)) { $s = 26; continue; }
			e$1 = qhatv$1.cmp(u.norm());
			/* */ if (e$1 > 0) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (e$1 > 0) { */ case 27:
				_r$6 = subVW($convertSliceType(qhat$1, sliceType$2), $convertSliceType(qhat$1, sliceType$2), 1); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				c$2 = subVV($convertSliceType($subslice(qhatv$1, 0, s$1), sliceType$2), $convertSliceType($subslice(qhatv$1, 0, s$1), sliceType$2), $convertSliceType($subslice(v, 0, s$1), sliceType$2));
				/* */ if (qhatv$1.$length > s$1) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (qhatv$1.$length > s$1) { */ case 30:
					_r$7 = subVW($convertSliceType($subslice(qhatv$1, s$1), sliceType$2), $convertSliceType($subslice(qhatv$1, s$1), sliceType$2), c$2); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 31:
				$r = addAt($subslice(u, s$1), $subslice(v, s$1), 0); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 28:
			i$1 = i$1 + (1) >> 0;
		$s = 25; continue;
		case 26:
		if (qhatv$1.cmp(u.norm()) > 0) {
			$panic(new $String("impossible"));
		}
		c$3 = subVV($convertSliceType($subslice(u, 0, qhatv$1.$length), sliceType$2), $convertSliceType($subslice(u, 0, qhatv$1.$length), sliceType$2), $convertSliceType(qhatv$1, sliceType$2));
		/* */ if (c$3 > 0) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (c$3 > 0) { */ case 34:
			_r$8 = subVW($convertSliceType($subslice(u, qhatv$1.$length), sliceType$2), $convertSliceType($subslice(u, qhatv$1.$length), sliceType$2), c$3); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			c$3 = _r$8;
		/* } */ case 35:
		if (c$3 > 0) {
			$panic(new $String("impossible"));
		}
		$r = addAt(z, qhat$1.norm(), 0); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: nat.prototype.divRecursiveStep, $c: true, $r, B, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, c, c$1, c$2, c$3, depth, e, e$1, i, i$1, j, m, n, qhat, qhat$1, qhatv, qhatv$1, s, s$1, temps, tmp, u, uu, v, z, $s};return $f;
	};
	$ptrType(nat).prototype.divRecursiveStep = function(u, v, depth, tmp, temps) { return this.$get().divRecursiveStep(u, v, depth, tmp, temps); };
	maxPow = function(b) {
		var _q, _tmp, _tmp$1, b, max$1, n, p;
		p = 0;
		n = 0;
		_tmp = b;
		_tmp$1 = 1;
		p = _tmp;
		n = _tmp$1;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(p <= max$1)) { break; }
			p = $imul(p, (b)) >>> 0;
			n = n + (1) >> 0;
		}
		return [p, n];
	};
	pow = function(x, n) {
		var n, p, x;
		p = 0;
		p = 1;
		while (true) {
			if (!(n > 0)) { break; }
			if (!(((n & 1) === 0))) {
				p = $imul(p, (x)) >>> 0;
			}
			x = $imul(x, (x)) >>> 0;
			n = (n >> $min((1), 31)) >> 0;
		}
		return p;
	};
	nat.prototype.scan = function(r, base, fracOk) {
		var {_1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b1, base, baseOk, bn, ch, count, d1, di, dp, err, fracOk, i, invalSep, n, prefix, prev, r, res, z, $s, $r, $c} = $restore(this, {r, base, fracOk});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		res = nat.nil;
		b = 0;
		count = 0;
		err = $ifaceNil;
		z = this;
		baseOk = (base === 0) || !fracOk && 2 <= base && base <= 62 || fracOk && ((base === 2) || (base === 8) || (base === 10) || (base === 16));
		/* */ if (!baseOk) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!baseOk) { */ case 1:
			_r = fmt.Sprintf("invalid number base %d", new sliceType([new $Int(base)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		prev = 46;
		invalSep = false;
		_r$1 = r.ReadByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		ch = _tuple[0];
		err = _tuple[1];
		_tmp = base;
		_tmp$1 = 0;
		b = _tmp;
		prefix = _tmp$1;
		/* */ if (base === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (base === 0) { */ case 5:
			b = 10;
			/* */ if ($interfaceIsEqual(err, $ifaceNil) && (ch === 48)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil) && (ch === 48)) { */ case 7:
				prev = 48;
				count = 1;
				_r$2 = r.ReadByte(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				ch = _tuple$1[0];
				err = _tuple$1[1];
				/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 10:
					_1 = ch;
					if ((_1 === (98)) || (_1 === (66))) {
						_tmp$2 = 2;
						_tmp$3 = 98;
						b = _tmp$2;
						prefix = _tmp$3;
					} else if ((_1 === (111)) || (_1 === (79))) {
						_tmp$4 = 8;
						_tmp$5 = 111;
						b = _tmp$4;
						prefix = _tmp$5;
					} else if ((_1 === (120)) || (_1 === (88))) {
						_tmp$6 = 16;
						_tmp$7 = 120;
						b = _tmp$6;
						prefix = _tmp$7;
					} else if (!fracOk) {
						_tmp$8 = 8;
						_tmp$9 = 48;
						b = _tmp$8;
						prefix = _tmp$9;
					}
					/* */ if (!((prefix === 0))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!((prefix === 0))) { */ case 12:
						count = 0;
						/* */ if (!((prefix === 48))) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (!((prefix === 48))) { */ case 14:
							_r$3 = r.ReadByte(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_tuple$2 = _r$3;
							ch = _tuple$2[0];
							err = _tuple$2[1];
						/* } */ case 15:
					/* } */ case 13:
				/* } */ case 11:
			/* } */ case 8:
		/* } */ case 6:
		z = $subslice(z, 0, 0);
		b1 = ((b >>> 0));
		_tuple$3 = maxPow(b1);
		bn = _tuple$3[0];
		n = _tuple$3[1];
		di = 0;
		i = 0;
		dp = -1;
		/* while (true) { */ case 17:
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!($interfaceIsEqual(err, $ifaceNil))) { $s = 18; continue; }
			/* */ if ((ch === 46) && fracOk) { $s = 19; continue; }
			/* */ if ((ch === 95) && (base === 0)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((ch === 46) && fracOk) { */ case 19:
				fracOk = false;
				if (prev === 95) {
					invalSep = true;
				}
				prev = 46;
				dp = count;
				$s = 22; continue;
			/* } else if ((ch === 95) && (base === 0)) { */ case 20:
				if (!((prev === 48))) {
					invalSep = true;
				}
				prev = 95;
				$s = 22; continue;
			/* } else { */ case 21:
				d1 = 0;
				if (48 <= ch && ch <= 57) {
					d1 = (((ch - 48 << 24 >>> 24) >>> 0));
				} else if (97 <= ch && ch <= 122) {
					d1 = ((((ch - 97 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
				} else if (65 <= ch && ch <= 90) {
					if (b <= 36) {
						d1 = ((((ch - 65 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
					} else {
						d1 = ((((ch - 65 << 24 >>> 24) + 36 << 24 >>> 24) >>> 0));
					}
				} else {
					d1 = 63;
				}
				/* */ if (d1 >= b1) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (d1 >= b1) { */ case 23:
					_r$4 = r.UnreadByte(); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					/* break; */ $s = 18; continue;
				/* } */ case 24:
				prev = 48;
				count = count + (1) >> 0;
				di = ($imul(di, b1) >>> 0) + d1 >>> 0;
				i = i + (1) >> 0;
				if (i === n) {
					z = z.mulAddWW(z, bn, di);
					di = 0;
					i = 0;
				}
			/* } */ case 22:
			_r$5 = r.ReadByte(); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$4 = _r$5;
			ch = _tuple$4[0];
			err = _tuple$4[1];
		$s = 17; continue;
		case 18:
		if ($interfaceIsEqual(err, io.EOF)) {
			err = $ifaceNil;
		}
		if ($interfaceIsEqual(err, $ifaceNil) && (invalSep || (prev === 95))) {
			err = errInvalSep;
		}
		if (count === 0) {
			if (prefix === 48) {
				_tmp$10 = $subslice(z, 0, 0);
				_tmp$11 = 10;
				_tmp$12 = 1;
				_tmp$13 = err;
				res = _tmp$10;
				b = _tmp$11;
				count = _tmp$12;
				err = _tmp$13;
				$s = -1; return [res, b, count, err];
			}
			err = errNoDigits;
		}
		if (i > 0) {
			z = z.mulAddWW(z, pow(b1, i), di);
		}
		res = z.norm();
		if (dp >= 0) {
			count = dp - count >> 0;
		}
		$s = -1; return [res, b, count, err];
		/* */ } return; } var $f = {$blk: nat.prototype.scan, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b1, base, baseOk, bn, ch, count, d1, di, dp, err, fracOk, i, invalSep, n, prefix, prev, r, res, z, $s};return $f;
	};
	$ptrType(nat).prototype.scan = function(r, base, fracOk) { return this.$get().scan(r, base, fracOk); };
	nat.prototype.utoa = function(base) {
		var {$24r, _r, base, x, $s, $r, $c} = $restore(this, {base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.itoa(false, base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: nat.prototype.utoa, $c: true, $r, $24r, _r, base, x, $s};return $f;
	};
	$ptrType(nat).prototype.utoa = function(base) { return this.$get().utoa(base); };
	nat.prototype.itoa = function(neg, base) {
		var {_r, _tuple, b, base, bb, i, k, mask, nbits, ndigits, neg, q, s, shift, table, w, x, y, y$1, y$2, y$3, y$4, $s, $r, $c} = $restore(this, {neg, base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (base < 2 || base > 62) {
			$panic(new $String("invalid base"));
		}
		if (x.$length === 0) {
			$s = -1; return (new sliceType$1($stringToBytes("0")));
		}
		i = (((x.bitLen()) / math.Log2((base)) >> 0)) + 1 >> 0;
		if (neg) {
			i = i + (1) >> 0;
		}
		s = $makeSlice(sliceType$1, i);
		b = ((base >>> 0));
		/* */ if (b === ((b & (-b >>> 0)) >>> 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b === ((b & (-b >>> 0)) >>> 0)) { */ case 1:
			shift = ((bits.TrailingZeros(((b >>> 0))) >>> 0));
			mask = ((((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0));
			w = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			nbits = 32;
			k = 1;
			while (true) {
				if (!(k < x.$length)) { break; }
				while (true) {
					if (!(nbits >= shift)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]);
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) << y$2) : 0) >>> 0))) >>> 0;
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + (1) >> 0;
			}
			while (true) {
				if (!(!((w === 0)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_tuple = maxPow(b);
			bb = _tuple[0];
			ndigits = _tuple[1];
			_r = divisors(x.$length, b, ndigits, bb); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			table = _r;
			q = (nat.nil).set(x);
			$r = q.convertWords(s, b, ndigits, bb, table); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === 48)) { break; }
				i = i + (1) >> 0;
			}
		/* } */ case 3:
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 45);
		}
		$s = -1; return $subslice(s, i);
		/* */ } return; } var $f = {$blk: nat.prototype.itoa, $c: true, $r, _r, _tuple, b, base, bb, i, k, mask, nbits, ndigits, neg, q, s, shift, table, w, x, y, y$1, y$2, y$3, y$4, $s};return $f;
	};
	$ptrType(nat).prototype.itoa = function(neg, base) { return this.$get().itoa(neg, base); };
	nat.prototype.convertWords = function(s, b, ndigits, bb, table) {
		var {_q, _q$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, b, bb, h, i, index, j, j$1, maxLength, minLength, ndigits, q, r, r$1, s, t, table, x, $s, $r, $c} = $restore(this, {s, b, ndigits, bb, table});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (!(table === sliceType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(table === sliceType$4.nil)) { */ case 1:
			r = nat.nil;
			index = table.$length - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(q.$length > leafSize)) { break; } */ if(!(q.$length > leafSize)) { $s = 4; continue; }
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (true) {
					if (!(index > 0 && (x = index - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).nbits > minLength)) { break; }
					index = index - (1) >> 0;
				}
				if (((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).nbits >= maxLength && ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb.cmp(q) >= 0) {
					index = index - (1) >> 0;
					if (index < 0) {
						$panic(new $String("internal inconsistency"));
					}
				}
				_r = q.div(r, q, ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				q = _tuple[0];
				r = _tuple[1];
				h = s.$length - ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).ndigits >> 0;
				$r = r.convertWords($subslice(s, h), b, ndigits, bb, $subslice(table, 0, index)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s = $subslice(s, 0, h);
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		i = s.$length;
		r$1 = 0;
		if (b === 10) {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$1 = q.divW(q, bb);
				q = _tuple$1[0];
				r$1 = _tuple$1[1];
				j = 0;
				while (true) {
					if (!(j < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = (48 + (((r$1 - ($imul(t, 10) >>> 0) >>> 0) << 24 >>> 24)) << 24 >>> 24));
					r$1 = t;
					j = j + (1) >> 0;
				}
			}
		} else {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$2 = q.divW(q, bb);
				q = _tuple$2[0];
				r$1 = _tuple$2[1];
				j$1 = 0;
				while (true) {
					if (!(j$1 < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt((_r$1 = r$1 % b, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))));
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + (1) >> 0;
				}
			}
		}
		while (true) {
			if (!(i > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 48);
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: nat.prototype.convertWords, $c: true, $r, _q, _q$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, b, bb, h, i, index, j, j$1, maxLength, minLength, ndigits, q, r, r$1, s, t, table, x, $s};return $f;
	};
	$ptrType(nat).prototype.convertWords = function(s, b, ndigits, bb, table) { return this.$get().convertWords(s, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var {$24r, _r, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.expNN((nat.nil).setWord(x), (nat.nil).setWord(y), nat.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: nat.prototype.expWW, $c: true, $r, $24r, _r, x, y, z, $s};return $f;
	};
	$ptrType(nat).prototype.expWW = function(x, y) { return this.$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var {_r, _r$1, b, bb, i, k, larger, m, ndigits, table, words, x, x$1, x$2, y, $s, $r, $c} = $restore(this, {m, b, ndigits, bb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ((leafSize === 0) || m <= leafSize) {
			$s = -1; return sliceType$4.nil;
		}
		k = 1;
		words = leafSize;
		while (true) {
			if (!(words < (m >> 1 >> 0) && k < 64)) { break; }
			k = k + (1) >> 0;
			words = (y = (1), y < 32 ? (words << y) : 0) >> 0;
		}
		table = sliceType$4.nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = $subslice(new sliceType$4(cacheBase10.table), 0, k);
		} else {
			table = $makeSlice(sliceType$4, k);
		}
		/* */ if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { */ case 1:
			larger = nat.nil;
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < k)) { break; } */ if(!(i < k)) { $s = 4; continue; }
				/* */ if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { */ case 5:
					/* */ if (i === 0) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (i === 0) { */ case 7:
						_r = (nat.nil).expWW(bb, ((leafSize >>> 0))); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).bbb = _r;
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).ndigits = $imul(ndigits, leafSize);
						$s = 9; continue;
					/* } else { */ case 8:
						_r$1 = (nat.nil).sqr((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$1])).bbb); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = _r$1;
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = $imul(2, (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$2])).ndigits);
					/* } */ case 9:
					larger = (nat.nil).set(((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb);
					while (true) {
						if (!(mulAddVWW($convertSliceType(larger, sliceType$2), $convertSliceType(larger, sliceType$2), b, 0) === 0)) { break; }
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.set(larger);
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits + (1) >> 0;
					}
					((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).nbits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.bitLen();
				/* } */ case 6:
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		$s = -1; return table;
		/* */ } return; } var $f = {$blk: divisors, $c: true, $r, _r, _r$1, b, bb, i, k, larger, m, ndigits, table, words, x, x$1, x$2, y, $s};return $f;
	};
	nat.prototype.clear = function() {
		var _i, _ref, i, z;
		z = this;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = 0);
			_i++;
		}
	};
	$ptrType(nat).prototype.clear = function() { return this.$get().clear(); };
	nat.prototype.norm = function() {
		var i, x, z;
		z = this;
		i = z.$length;
		while (true) {
			if (!(i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x])) === 0))) { break; }
			i = i - (1) >> 0;
		}
		return $subslice(z, 0, i);
	};
	$ptrType(nat).prototype.norm = function() { return this.$get().norm(); };
	nat.prototype.make = function(n) {
		var n, z;
		z = this;
		if (n <= z.$capacity) {
			return $subslice(z, 0, n);
		}
		if (n === 1) {
			return $makeSlice(nat, 1);
		}
		return $makeSlice(nat, n, (n + 4 >> 0));
	};
	$ptrType(nat).prototype.make = function(n) { return this.$get().make(n); };
	nat.prototype.setWord = function(x) {
		var x, z;
		z = this;
		if (x === 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(1);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = x);
		return z;
	};
	$ptrType(nat).prototype.setWord = function(x) { return this.$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var w, x, x$1, z;
		z = this;
		w = ((x.$low >>> 0));
		if ((x$1 = (new $Uint64(0, w.constructor === Number ? w : 1)), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			return z.setWord(w);
		}
		z = z.make(2);
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = (($shiftRightUint64(x, 32).$low >>> 0)));
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((x.$low >>> 0)));
		return z;
	};
	$ptrType(nat).prototype.setUint64 = function(x) { return this.$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var x, z;
		z = this;
		z = z.make(x.$length);
		$copySlice(z, x);
		return z;
	};
	$ptrType(nat).prototype.set = function(x) { return this.$get().set(x); };
	nat.prototype.add = function(x, y) {
		var {$24r, _r, _r$1, c, m, n, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		m = x.$length;
		n = y.$length;
			/* */ if (m < n) { $s = 2; continue; }
			/* */ if ((m === 0)) { $s = 3; continue; }
			/* */ if ((n === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (m < n) { */ case 2:
				_r = z.add(y, x); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if ((m === 0)) { */ case 3:
				$s = -1; return $subslice(z, 0, 0);
			/* } else if ((n === 0)) { */ case 4:
				$s = -1; return z.set(x);
			/* } */ case 5:
		case 1:
		z = z.make(m + 1 >> 0);
		c = addVV($convertSliceType($subslice(z, 0, n), sliceType$2), $convertSliceType(x, sliceType$2), $convertSliceType(y, sliceType$2));
		/* */ if (m > n) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (m > n) { */ case 8:
			_r$1 = addVW($convertSliceType($subslice(z, n, m), sliceType$2), $convertSliceType($subslice(x, n), sliceType$2), c); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			c = _r$1;
		/* } */ case 9:
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = c);
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.add, $c: true, $r, $24r, _r, _r$1, c, m, n, x, y, z, $s};return $f;
	};
	$ptrType(nat).prototype.add = function(x, y) { return this.$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var {_r, c, m, n, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			$panic(new $String("underflow"));
		} else if ((m === 0)) {
			$s = -1; return $subslice(z, 0, 0);
		} else if ((n === 0)) {
			$s = -1; return z.set(x);
		}
		z = z.make(m);
		c = subVV($convertSliceType($subslice(z, 0, n), sliceType$2), $convertSliceType(x, sliceType$2), $convertSliceType(y, sliceType$2));
		/* */ if (m > n) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (m > n) { */ case 1:
			_r = subVW($convertSliceType($subslice(z, n), sliceType$2), $convertSliceType($subslice(x, n), sliceType$2), c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
		/* } */ case 2:
		if (!((c === 0))) {
			$panic(new $String("underflow"));
		}
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.sub, $c: true, $r, _r, c, m, n, x, y, z, $s};return $f;
	};
	$ptrType(nat).prototype.sub = function(x, y) { return this.$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var i, m, n, r, x, y;
		r = 0;
		x = this;
		m = x.$length;
		n = y.$length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (true) {
			if (!(i > 0 && (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])))) { break; }
			i = i - (1) >> 0;
		}
		if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) < ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = -1;
		} else if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) > ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = 1;
		}
		return r;
	};
	$ptrType(nat).prototype.cmp = function(y) { return this.$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var m, r, x, y, z;
		z = this;
		m = x.$length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = mulAddVWW($convertSliceType($subslice(z, 0, m), sliceType$2), $convertSliceType(x, sliceType$2), y, r));
		return z.norm();
	};
	$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var _i, _ref, d, i, x, x$1, y, z;
		$subslice(z, 0, (x.$length + y.$length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((d === 0))) {
				(x$1 = x.$length + i >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = addMulVVW($convertSliceType($subslice(z, i, (i + x.$length >> 0)), sliceType$2), $convertSliceType(x, sliceType$2), d)));
			}
			_i++;
		}
	};
	nat.prototype.montgomery = function(x, y, m, k, n) {
		var c, c2, c3, cx, cy, d, i, k, m, n, t, x, x$1, y, z;
		z = this;
		if (!((x.$length === n)) || !((y.$length === n)) || !((m.$length === n))) {
			$panic(new $String("math/big: mismatched montgomery number lengths"));
		}
		z = z.make($imul(n, 2));
		z.clear();
		c = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			c2 = addMulVVW($convertSliceType($subslice(z, i, (n + i >> 0)), sliceType$2), $convertSliceType(x, sliceType$2), d);
			t = $imul(((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i]), k) >>> 0;
			c3 = addMulVVW($convertSliceType($subslice(z, i, (n + i >> 0)), sliceType$2), $convertSliceType(m, sliceType$2), t);
			cx = c + c2 >>> 0;
			cy = cx + c3 >>> 0;
			(x$1 = n + i >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = cy));
			if (cx < c2 || cy < c3) {
				c = 1;
			} else {
				c = 0;
			}
			i = i + (1) >> 0;
		}
		if (!((c === 0))) {
			subVV($convertSliceType($subslice(z, 0, n), sliceType$2), $convertSliceType($subslice(z, n), sliceType$2), $convertSliceType(m, sliceType$2));
		} else {
			$copySlice($subslice(z, 0, n), $subslice(z, n));
		}
		return $subslice(z, 0, n);
	};
	$ptrType(nat).prototype.montgomery = function(x, y, m, k, n) { return this.$get().montgomery(x, y, m, k, n); };
	karatsubaAdd = function(z, x, n) {
		var {_r, c, n, x, z, $s, $r, $c} = $restore(this, {z, x, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = addVV($convertSliceType($subslice(z, 0, n), sliceType$2), $convertSliceType(z, sliceType$2), $convertSliceType(x, sliceType$2));
		/* */ if (!((c === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((c === 0))) { */ case 1:
			_r = addVW($convertSliceType($subslice(z, n, (n + (n >> 1 >> 0) >> 0)), sliceType$2), $convertSliceType($subslice(z, n), sliceType$2), c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: karatsubaAdd, $c: true, $r, _r, c, n, x, z, $s};return $f;
	};
	karatsubaSub = function(z, x, n) {
		var {_r, c, n, x, z, $s, $r, $c} = $restore(this, {z, x, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = subVV($convertSliceType($subslice(z, 0, n), sliceType$2), $convertSliceType(z, sliceType$2), $convertSliceType(x, sliceType$2));
		/* */ if (!((c === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((c === 0))) { */ case 1:
			_r = subVW($convertSliceType($subslice(z, n, (n + (n >> 1 >> 0) >> 0)), sliceType$2), $convertSliceType($subslice(z, n), sliceType$2), c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: karatsubaSub, $c: true, $r, _r, c, n, x, z, $s};return $f;
	};
	karatsuba = function(z, x, y) {
		var {_tmp, _tmp$1, _tmp$2, _tmp$3, n, n2, p, r, s, x, x0, x1, xd, y, y0, y1, yd, z, $s, $r, $c} = $restore(this, {z, x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = y.$length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			$s = -1; return;
		}
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2);
		_tmp$1 = $subslice(x, 0, n2);
		x1 = _tmp;
		x0 = _tmp$1;
		_tmp$2 = $subslice(y, n2);
		_tmp$3 = $subslice(y, 0, n2);
		y1 = _tmp$2;
		y0 = _tmp$3;
		$r = karatsuba(z, x0, y0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = karatsuba($subslice(z, n), x1, y1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = 1;
		xd = $subslice(z, ($imul(2, n)), (($imul(2, n)) + n2 >> 0));
		if (!((subVV($convertSliceType(xd, sliceType$2), $convertSliceType(x1, sliceType$2), $convertSliceType(x0, sliceType$2)) === 0))) {
			s = -s;
			subVV($convertSliceType(xd, sliceType$2), $convertSliceType(x0, sliceType$2), $convertSliceType(x1, sliceType$2));
		}
		yd = $subslice(z, (($imul(2, n)) + n2 >> 0), ($imul(3, n)));
		if (!((subVV($convertSliceType(yd, sliceType$2), $convertSliceType(y0, sliceType$2), $convertSliceType(y1, sliceType$2)) === 0))) {
			s = -s;
			subVV($convertSliceType(yd, sliceType$2), $convertSliceType(y1, sliceType$2), $convertSliceType(y0, sliceType$2));
		}
		p = $subslice(z, ($imul(n, 3)));
		$r = karatsuba(p, xd, yd); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = $subslice(z, ($imul(n, 4)));
		$copySlice(r, $subslice(z, 0, ($imul(n, 2))));
		$r = karatsubaAdd($subslice(z, n2), r, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = karatsubaAdd($subslice(z, n2), $subslice(r, n), n); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (s > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (s > 0) { */ case 6:
			$r = karatsubaAdd($subslice(z, n2), p, n); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else { */ case 7:
			$r = karatsubaSub($subslice(z, n2), p, n); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: karatsuba, $c: true, $r, _tmp, _tmp$1, _tmp$2, _tmp$3, n, n2, p, r, s, x, x0, x1, xd, y, y0, y1, yd, z, $s};return $f;
	};
	alias = function(x, y) {
		var x, x$1, x$2, y;
		return x.$capacity > 0 && y.$capacity > 0 && (x$1 = $subslice(x, 0, x.$capacity), $indexPtr(x$1.$array, x$1.$offset + (x.$capacity - 1 >> 0), ptrType$4)) === (x$2 = $subslice(y, 0, y.$capacity), $indexPtr(x$2.$array, x$2.$offset + (y.$capacity - 1 >> 0), ptrType$4));
	};
	addAt = function(z, x, i) {
		var {_r, c, i, j, n, x, z, $s, $r, $c} = $restore(this, {z, x, i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = x.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			c = addVV($convertSliceType($subslice(z, i, (i + n >> 0)), sliceType$2), $convertSliceType($subslice(z, i), sliceType$2), $convertSliceType(x, sliceType$2));
			/* */ if (!((c === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((c === 0))) { */ case 3:
				j = i + n >> 0;
				/* */ if (j < z.$length) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (j < z.$length) { */ case 5:
					_r = addVW($convertSliceType($subslice(z, j), sliceType$2), $convertSliceType($subslice(z, j), sliceType$2), c); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
				/* } */ case 6:
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: addAt, $c: true, $r, _r, c, i, j, n, x, z, $s};return $f;
	};
	max = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n, threshold) {
		var i, n, threshold, y;
		i = 0;
		while (true) {
			if (!(n > threshold)) { break; }
			n = (n >> $min((1), 31)) >> 0;
			i = i + (1) >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, i, k, m, n, t, tp, x, x0, x0$1, xi, y, y0, y0$1, y1, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		m = x.$length;
		n = y.$length;
			/* */ if (m < n) { $s = 2; continue; }
			/* */ if ((m === 0) || (n === 0)) { $s = 3; continue; }
			/* */ if ((n === 1)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (m < n) { */ case 2:
				_r = z.mul(y, x); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if ((m === 0) || (n === 0)) { */ case 3:
				$s = -1; return $subslice(z, 0, 0);
			/* } else if ((n === 1)) { */ case 4:
				$s = -1; return z.mulAddWW(x, (0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]), 0);
			/* } */ case 5:
		case 1:
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			$s = -1; return z.norm();
		}
		k = karatsubaLen(n, karatsubaThreshold);
		x0 = $subslice(x, 0, k);
		y0 = $subslice(y, 0, k);
		z = z.make(max($imul(6, k), m + n >> 0));
		$r = karatsuba(z, x0, y0); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z = $subslice(z, 0, (m + n >> 0));
		$subslice(z, ($imul(2, k))).clear();
		/* */ if (k < n || !((m === n))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (k < n || !((m === n))) { */ case 9:
			_r$1 = getNat($imul(3, k)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			tp = _r$1;
			t = tp.$get();
			x0$1 = x0.norm();
			y1 = $subslice(y, k);
			_r$2 = t.mul(x0$1, y1); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = _r$2;
			$r = addAt(z, t, k); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			y0$1 = y0.norm();
			i = k;
			/* while (true) { */ case 14:
				/* if (!(i < x.$length)) { break; } */ if(!(i < x.$length)) { $s = 15; continue; }
				xi = $subslice(x, i);
				if (xi.$length > k) {
					xi = $subslice(xi, 0, k);
				}
				xi = xi.norm();
				_r$3 = t.mul(xi, y0$1); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t = _r$3;
				$r = addAt(z, t, i); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = t.mul(xi, y1); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				t = _r$4;
				$r = addAt(z, t, i + k >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (k) >> 0;
			$s = 14; continue;
			case 15:
			putNat(tp);
		/* } */ case 10:
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.mul, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, i, k, m, n, t, tp, x, x0, x0$1, xi, y, y0, y0$1, y1, z, $s};return $f;
	};
	$ptrType(nat).prototype.mul = function(x, y) { return this.$get().mul(x, y); };
	basicSqr = function(z, x) {
		var {_r, _tuple, _tuple$1, d, i, n, t, tp, x, x$1, x$2, x$3, x$4, z, $s, $r, $c} = $restore(this, {z, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = x.$length;
		_r = getNat($imul(2, n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tp = _r;
		t = tp.$get();
		t.clear();
		_tuple = mulWW((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
		i = 1;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			_tuple$1 = mulWW(d, d);
			(x$1 = ($imul(2, i)) + 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = _tuple$1[0]));
			(x$2 = $imul(2, i), ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = _tuple$1[1]));
			(x$3 = $imul(2, i), ((x$3 < 0 || x$3 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$3] = addMulVVW($convertSliceType($subslice(t, i, ($imul(2, i))), sliceType$2), $convertSliceType($subslice(x, 0, i), sliceType$2), d)));
			i = i + (1) >> 0;
		}
		(x$4 = ($imul(2, n)) - 1 >> 0, ((x$4 < 0 || x$4 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$4] = shlVU($convertSliceType($subslice(t, 1, (($imul(2, n)) - 1 >> 0)), sliceType$2), $convertSliceType($subslice(t, 1, (($imul(2, n)) - 1 >> 0)), sliceType$2), 1)));
		addVV($convertSliceType(z, sliceType$2), $convertSliceType(z, sliceType$2), $convertSliceType(t, sliceType$2));
		putNat(tp);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: basicSqr, $c: true, $r, _r, _tuple, _tuple$1, d, i, n, t, tp, x, x$1, x$2, x$3, x$4, z, $s};return $f;
	};
	karatsubaSqr = function(z, x) {
		var {_tmp, _tmp$1, n, n2, p, r, x, x0, x1, xd, z, $s, $r, $c} = $restore(this, {z, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = x.$length;
		/* */ if (!(((n & 1) === 0)) || n < karatsubaSqrThreshold || n < 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((n & 1) === 0)) || n < karatsubaSqrThreshold || n < 2) { */ case 1:
			$r = basicSqr($subslice(z, 0, ($imul(2, n))), x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2);
		_tmp$1 = $subslice(x, 0, n2);
		x1 = _tmp;
		x0 = _tmp$1;
		$r = karatsubaSqr(z, x0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = karatsubaSqr($subslice(z, n), x1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		xd = $subslice(z, ($imul(2, n)), (($imul(2, n)) + n2 >> 0));
		if (!((subVV($convertSliceType(xd, sliceType$2), $convertSliceType(x1, sliceType$2), $convertSliceType(x0, sliceType$2)) === 0))) {
			subVV($convertSliceType(xd, sliceType$2), $convertSliceType(x0, sliceType$2), $convertSliceType(x1, sliceType$2));
		}
		p = $subslice(z, ($imul(n, 3)));
		$r = karatsubaSqr(p, xd); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = $subslice(z, ($imul(n, 4)));
		$copySlice(r, $subslice(z, 0, ($imul(n, 2))));
		$r = karatsubaAdd($subslice(z, n2), r, n); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = karatsubaAdd($subslice(z, n2), $subslice(r, n), n); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = karatsubaSub($subslice(z, n2), p, n); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: karatsubaSqr, $c: true, $r, _tmp, _tmp$1, n, n2, p, r, x, x0, x1, xd, z, $s};return $f;
	};
	nat.prototype.sqr = function(x) {
		var {_r, _r$1, _r$2, _tuple, d, k, n, t, tp, x, x0, x0$1, x1, z, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		n = x.$length;
		if ((n === 0)) {
			$s = -1; return $subslice(z, 0, 0);
		} else if ((n === 1)) {
			d = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			z = z.make(2);
			_tuple = mulWW(d, d);
			(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
			$s = -1; return z.norm();
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		if (n < basicSqrThreshold) {
			z = z.make($imul(2, n));
			basicMul(z, x, x);
			$s = -1; return z.norm();
		}
		/* */ if (n < karatsubaSqrThreshold) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n < karatsubaSqrThreshold) { */ case 1:
			z = z.make($imul(2, n));
			$r = basicSqr(z, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z.norm();
		/* } */ case 2:
		k = karatsubaLen(n, karatsubaSqrThreshold);
		x0 = $subslice(x, 0, k);
		z = z.make(max($imul(6, k), $imul(2, n)));
		$r = karatsubaSqr(z, x0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z = $subslice(z, 0, ($imul(2, n)));
		$subslice(z, ($imul(2, k))).clear();
		/* */ if (k < n) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (k < n) { */ case 5:
			_r = getNat($imul(2, k)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tp = _r;
			t = tp.$get();
			x0$1 = x0.norm();
			x1 = $subslice(x, k);
			_r$1 = t.mul(x0$1, x1); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = _r$1;
			$r = addAt(z, t, k); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = addAt(z, t, k); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = t.sqr(x1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = _r$2;
			$r = addAt(z, t, $imul(2, k)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			putNat(tp);
		/* } */ case 6:
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.sqr, $c: true, $r, _r, _r$1, _r$2, _tuple, d, k, n, t, tp, x, x0, x0$1, x1, z, $s};return $f;
	};
	$ptrType(nat).prototype.sqr = function(x) { return this.$get().sqr(x); };
	nat.prototype.mulRange = function(a, b) {
		var {$24r, $24r$1, _arg, _arg$1, _r, _r$1, _r$2, _r$3, a, b, m, x, z, $s, $r, $c} = $restore(this, {a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
			/* */ if ((a.$high === 0 && a.$low === 0)) { $s = 2; continue; }
			/* */ if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) { $s = 3; continue; }
			/* */ if ((a.$high === b.$high && a.$low === b.$low)) { $s = 4; continue; }
			/* */ if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((a.$high === 0 && a.$low === 0)) { */ case 2:
				$s = -1; return z.setUint64(new $Uint64(0, 0));
			/* } else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) { */ case 3:
				$s = -1; return z.setUint64(new $Uint64(0, 1));
			/* } else if ((a.$high === b.$high && a.$low === b.$low)) { */ case 4:
				$s = -1; return z.setUint64(a);
			/* } else if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) { */ case 5:
				_r = z.mul((nat.nil).setUint64(a), (nat.nil).setUint64(b)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } */ case 6:
		case 1:
		m = $div64((new $Uint64(a.$high + b.$high, a.$low + b.$low)), new $Uint64(0, 2), false);
		_r$1 = (nat.nil).mulRange(a, m); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = _r$1;
		_r$2 = (nat.nil).mulRange(new $Uint64(m.$high + 0, m.$low + 1), b); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = z.mul(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 12; case 12: return $24r$1;
		/* */ } return; } var $f = {$blk: nat.prototype.mulRange, $c: true, $r, $24r, $24r$1, _arg, _arg$1, _r, _r$1, _r$2, _r$3, a, b, m, x, z, $s};return $f;
	};
	$ptrType(nat).prototype.mulRange = function(a, b) { return this.$get().mulRange(a, b); };
	getNat = function(n) {
		var {_r, n, v, z, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = ptrType$3.nil;
		_r = natPool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		if (!($interfaceIsEqual(v, $ifaceNil))) {
			z = $assertType(v, ptrType$3);
		}
		if (z === ptrType$3.nil) {
			z = $newDataPointer(nat.nil, ptrType$3);
		}
		z.$set(z.make(n));
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: getNat, $c: true, $r, _r, n, v, z, $s};return $f;
	};
	putNat = function(x) {
		var x;
		natPool.Put(x);
	};
	nat.prototype.bitLen = function() {
		var i, x;
		x = this;
		i = x.$length - 1 >> 0;
		if (i >= 0) {
			return ($imul(i, 32)) + bits.Len(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >> 0;
		}
		return 0;
	};
	$ptrType(nat).prototype.bitLen = function() { return this.$get().bitLen(); };
	nat.prototype.trailingZeroBits = function() {
		var i, x;
		x = this;
		if (x.$length === 0) {
			return 0;
		}
		i = 0;
		while (true) {
			if (!(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === 0)) { break; }
			i = i + (1) >>> 0;
		}
		return (i * 32 >>> 0) + ((bits.TrailingZeros(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >>> 0)) >>> 0;
	};
	$ptrType(nat).prototype.trailingZeroBits = function() { return this.$get().trailingZeroBits(); };
	same = function(x, y) {
		var x, y;
		return (x.$length === y.$length) && x.$length > 0 && $indexPtr(x.$array, x.$offset + 0, ptrType$4) === $indexPtr(y.$array, y.$offset + 0, ptrType$4);
	};
	nat.prototype.shl = function(x, s) {
		var _q, _r, m, n, s, x, z;
		z = this;
		if (s === 0) {
			if (same(z, x)) {
				return z;
			}
			if (!alias(z, x)) {
				return z.set(x);
			}
		}
		m = x.$length;
		if (m === 0) {
			return $subslice(z, 0, 0);
		}
		n = m + (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		z = z.make(n + 1 >> 0);
		((n < 0 || n >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + n] = shlVU($convertSliceType($subslice(z, (n - m >> 0), n), sliceType$2), $convertSliceType(x, sliceType$2), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	$ptrType(nat).prototype.shl = function(x, s) { return this.$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var _q, _r, m, n, s, x, z;
		z = this;
		if (s === 0) {
			if (same(z, x)) {
				return z;
			}
			if (!alias(z, x)) {
				return z.set(x);
			}
		}
		m = x.$length;
		n = m - (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		if (n <= 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(n);
		shrVU($convertSliceType(z, sliceType$2), $convertSliceType($subslice(x, (m - n >> 0)), sliceType$2), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	$ptrType(nat).prototype.shr = function(x, s) { return this.$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var _1, _q, _r, b, i, j, m, n, x, y, z;
		z = this;
		j = (((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		m = (y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.$length;
		_1 = b;
		if (_1 === (0)) {
			z = z.make(n);
			$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) & ~(m)) >>> 0));
			return z.norm();
		} else if (_1 === (1)) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			$copySlice(z, x);
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) | (m)) >>> 0));
			return z;
		}
		$panic(new $String("set bit is not 0 or 1"));
	};
	$ptrType(nat).prototype.setBit = function(x, i, b) { return this.$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var _q, _r, i, j, x, y;
		x = this;
		j = (_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (j >= ((x.$length >>> 0))) {
			return 0;
		}
		return ((((((y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0));
	};
	$ptrType(nat).prototype.bit = function(i) { return this.$get().bit(i); };
	nat.prototype.and = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < m)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.and = function(x, y) { return this.$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ~((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(x, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.andNot = function(x, y) { return this.$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) | ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.or = function(x, y) { return this.$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.xor = function(x, y) { return this.$get().xor(x, y); };
	nat.prototype.random = function(rand$1, limit, n) {
		var {_1, _i, _i$1, _index, _r, _r$1, _r$2, _ref, _ref$1, bitLengthOfMSW, i, i$1, limit, mask, n, rand$1, y, z, $s, $r, $c} = $restore(this, {rand$1, limit, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.$length);
		bitLengthOfMSW = (((_r = n % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = (((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0));
		/* while (true) { */ case 1:
				_1 = 32;
				/* */ if (_1 === (32)) { $s = 4; continue; }
				/* */ if (_1 === (64)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (32)) { */ case 4:
					_ref = z;
					_i = 0;
					/* while (true) { */ case 8:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
						i = _i;
						_r$1 = rand$1.Uint32(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((_r$1 >>> 0)));
						_i++;
					$s = 8; continue;
					case 9:
					$s = 7; continue;
				/* } else if (_1 === (64)) { */ case 5:
					_ref$1 = z;
					_i$1 = 0;
					/* while (true) { */ case 11:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
						i$1 = _i$1;
						_r$2 = rand$1.Uint32(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = ((((_r$2 >>> 0)) | 0) >>> 0));
						_i$1++;
					$s = 11; continue;
					case 12:
					$s = 7; continue;
				/* } else { */ case 6:
					$panic(new $String("unknown word size"));
				/* } */ case 7:
			case 3:
			_index = limit.$length - 1 >> 0;
			((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index] = ((((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index]) & (mask)) >>> 0));
			if (z.cmp(limit) < 0) {
				/* break; */ $s = 2; continue;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.random, $c: true, $r, _1, _i, _i$1, _index, _r, _r$1, _r$2, _ref, _ref$1, bitLengthOfMSW, i, i$1, limit, mask, n, rand$1, y, z, $s};return $f;
	};
	$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, i, j, j$1, m, q, r, shift, v, w, x, x$1, y, y$1, y$2, y$3, z, zz, $s, $r, $c} = $restore(this, {x, y, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if ((m.$length === 1) && ((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) === 1)) {
			$s = -1; return z.setWord(0);
		}
		if (y.$length === 0) {
			$s = -1; return z.setWord(1);
		}
		/* */ if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { */ case 1:
			_r = (nat.nil).div(z, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			z = _tuple[1];
			$s = -1; return z;
		/* } */ case 2:
		if (!((m.$length === 0))) {
			z = z.make(m.$length);
		}
		z = z.set(x);
		/* */ if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { */ case 4:
			/* */ if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { */ case 6:
				_r$1 = z.expNNMontgomery(x, y, m); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r = _r$1;
				$s = 9; case 9: return $24r;
			/* } */ case 7:
			_r$2 = z.expNNWindowed(x, y, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r$1 = _r$2;
			$s = 11; case 11: return $24r$1;
		/* } */ case 5:
		v = (x$1 = y.$length - 1 >> 0, ((x$1 < 0 || x$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + x$1]));
		shift = nlz(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - ((shift >> 0)) >> 0;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		j = 0;
		/* while (true) { */ case 12:
			/* if (!(j < w)) { break; } */ if(!(j < w)) { $s = 13; continue; }
			_r$3 = zz.sqr(z); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			zz = _r$3;
			_tmp$2 = z;
			_tmp$3 = zz;
			zz = _tmp$2;
			z = _tmp$3;
			/* */ if (!((((v & 2147483648) >>> 0) === 0))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!((((v & 2147483648) >>> 0) === 0))) { */ case 15:
				_r$4 = zz.mul(z, x); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				zz = _r$4;
				_tmp$4 = z;
				_tmp$5 = zz;
				zz = _tmp$4;
				z = _tmp$5;
			/* } */ case 16:
			/* */ if (!((m.$length === 0))) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!((m.$length === 0))) { */ case 18:
				_r$5 = zz.div(r, z, m); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$1 = _r$5;
				zz = _tuple$1[0];
				r = _tuple$1[1];
				_tmp$6 = q;
				_tmp$7 = z;
				_tmp$8 = zz;
				_tmp$9 = r;
				zz = _tmp$6;
				r = _tmp$7;
				q = _tmp$8;
				z = _tmp$9;
			/* } */ case 19:
			v = (y$2 = (1), y$2 < 32 ? (v << y$2) : 0) >>> 0;
			j = j + (1) >> 0;
		$s = 12; continue;
		case 13:
		i = y.$length - 2 >> 0;
		/* while (true) { */ case 21:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 22; continue; }
			v = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			j$1 = 0;
			/* while (true) { */ case 23:
				/* if (!(j$1 < 32)) { break; } */ if(!(j$1 < 32)) { $s = 24; continue; }
				_r$6 = zz.sqr(z); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				zz = _r$6;
				_tmp$10 = z;
				_tmp$11 = zz;
				zz = _tmp$10;
				z = _tmp$11;
				/* */ if (!((((v & 2147483648) >>> 0) === 0))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!((((v & 2147483648) >>> 0) === 0))) { */ case 26:
					_r$7 = zz.mul(z, x); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					zz = _r$7;
					_tmp$12 = z;
					_tmp$13 = zz;
					zz = _tmp$12;
					z = _tmp$13;
				/* } */ case 27:
				/* */ if (!((m.$length === 0))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!((m.$length === 0))) { */ case 29:
					_r$8 = zz.div(r, z, m); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$2 = _r$8;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$14 = q;
					_tmp$15 = z;
					_tmp$16 = zz;
					_tmp$17 = r;
					zz = _tmp$14;
					r = _tmp$15;
					q = _tmp$16;
					z = _tmp$17;
				/* } */ case 30:
				v = (y$3 = (1), y$3 < 32 ? (v << y$3) : 0) >>> 0;
				j$1 = j$1 + (1) >> 0;
			$s = 23; continue;
			case 24:
			i = i - (1) >> 0;
		$s = 21; continue;
		case 22:
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.expNN, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, i, j, j$1, m, q, r, shift, v, w, x, x$1, y, y$1, y$2, y$3, z, zz, $s};return $f;
	};
	$ptrType(nat).prototype.expNN = function(x, y, m) { return this.$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var {_q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, i, i$1, j, m, p, p1, p2, powers, r, x, x$1, y, y$1, yi, z, zz, $s, $r, $c} = $restore(this, {x, y, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		powers = arrayType$1.zero();
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		/* while (true) { */ case 1:
			/* if (!(i < 16)) { break; } */ if(!(i < 16)) { $s = 2; continue; }
			_tmp$2 = $indexPtr(powers, (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ptrType$3);
			_tmp$3 = $indexPtr(powers, i, ptrType$3);
			_tmp$4 = $indexPtr(powers, (i + 1 >> 0), ptrType$3);
			p2 = _tmp$2;
			p = _tmp$3;
			p1 = _tmp$4;
			_r = p.sqr(p2.$get()); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.$set(_r);
			_r$1 = zz.div(r, p.$get(), m); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			zz = _tuple[0];
			r = _tuple[1];
			_tmp$5 = r;
			_tmp$6 = p.$get();
			p.$set(_tmp$5);
			r = _tmp$6;
			_r$2 = p1.mul(p.$get(), x); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			p1.$set(_r$2);
			_r$3 = zz.div(r, p1.$get(), m); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			zz = _tuple$1[0];
			r = _tuple$1[1];
			_tmp$7 = r;
			_tmp$8 = p1.$get();
			p1.$set(_tmp$7);
			r = _tmp$8;
			i = i + (2) >> 0;
		$s = 1; continue;
		case 2:
		z = z.setWord(1);
		i$1 = y.$length - 1 >> 0;
		/* while (true) { */ case 7:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 8; continue; }
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			j = 0;
			/* while (true) { */ case 9:
				/* if (!(j < 32)) { break; } */ if(!(j < 32)) { $s = 10; continue; }
				/* */ if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { */ case 11:
					_r$4 = zz.sqr(z); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					zz = _r$4;
					_tmp$9 = z;
					_tmp$10 = zz;
					zz = _tmp$9;
					z = _tmp$10;
					_r$5 = zz.div(r, z, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$11 = r;
					_tmp$12 = z;
					z = _tmp$11;
					r = _tmp$12;
					_r$6 = zz.sqr(z); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					zz = _r$6;
					_tmp$13 = z;
					_tmp$14 = zz;
					zz = _tmp$13;
					z = _tmp$14;
					_r$7 = zz.div(r, z, m); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$3 = _r$7;
					zz = _tuple$3[0];
					r = _tuple$3[1];
					_tmp$15 = r;
					_tmp$16 = z;
					z = _tmp$15;
					r = _tmp$16;
					_r$8 = zz.sqr(z); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					zz = _r$8;
					_tmp$17 = z;
					_tmp$18 = zz;
					zz = _tmp$17;
					z = _tmp$18;
					_r$9 = zz.div(r, z, m); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$4 = _r$9;
					zz = _tuple$4[0];
					r = _tuple$4[1];
					_tmp$19 = r;
					_tmp$20 = z;
					z = _tmp$19;
					r = _tmp$20;
					_r$10 = zz.sqr(z); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					zz = _r$10;
					_tmp$21 = z;
					_tmp$22 = zz;
					zz = _tmp$21;
					z = _tmp$22;
					_r$11 = zz.div(r, z, m); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$5 = _r$11;
					zz = _tuple$5[0];
					r = _tuple$5[1];
					_tmp$23 = r;
					_tmp$24 = z;
					z = _tmp$23;
					r = _tmp$24;
				/* } */ case 12:
				_r$12 = zz.mul(z, (x$1 = yi >>> 28 >>> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1]))); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				zz = _r$12;
				_tmp$25 = z;
				_tmp$26 = zz;
				zz = _tmp$25;
				z = _tmp$26;
				_r$13 = zz.div(r, z, m); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tuple$6 = _r$13;
				zz = _tuple$6[0];
				r = _tuple$6[1];
				_tmp$27 = r;
				_tmp$28 = z;
				z = _tmp$27;
				r = _tmp$28;
				yi = (y$1 = (4), y$1 < 32 ? (yi << y$1) : 0) >>> 0;
				j = j + (4) >> 0;
			$s = 9; continue;
			case 10:
			i$1 = i$1 - (1) >> 0;
		$s = 7; continue;
		case 8:
		$s = -1; return z.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.expNNWindowed, $c: true, $r, _q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, i, i$1, j, m, p, p1, p2, powers, r, x, x$1, y, y$1, yi, z, zz, $s};return $f;
	};
	$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.$get().expNNWindowed(x, y, m); };
	nat.prototype.expNNMontgomery = function(x, y, m) {
		var {RR, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, i, i$1, i$2, j, k0, m, numWords, one, powers, rr, t, x, x$1, x$2, y, y$1, y$2, yi, z, zz, $s, $r, $c} = $restore(this, {x, y, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		numWords = m.$length;
		/* */ if (x.$length > numWords) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.$length > numWords) { */ case 1:
			_r = (nat.nil).div(nat.nil, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[1];
		/* } */ case 2:
		if (x.$length < numWords) {
			rr = $makeSlice(nat, numWords);
			$copySlice(rr, x);
			x = rr;
		}
		k0 = 2 - (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) >>> 0;
		t = (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) - 1 >>> 0;
		i = 1;
		while (true) {
			if (!(i < 32)) { break; }
			t = $imul(t, (t)) >>> 0;
			k0 = $imul(k0, (((t + 1 >>> 0)))) >>> 0;
			i = (y$1 = (1), y$1 < 32 ? (i << y$1) : 0) >> 0;
		}
		k0 = -k0 >>> 0;
		RR = (nat.nil).setWord(1);
		zz = (nat.nil).shl(RR, ((($imul(($imul(2, numWords)), 32)) >>> 0)));
		_r$1 = (nat.nil).div(RR, zz, m); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		RR = _tuple$1[1];
		if (RR.$length < numWords) {
			zz = zz.make(numWords);
			$copySlice(zz, RR);
			RR = zz;
		}
		one = $makeSlice(nat, numWords);
		(0 >= one.$length ? ($throwRuntimeError("index out of range"), undefined) : one.$array[one.$offset + 0] = 1);
		powers = arrayType$1.zero();
		powers[0] = powers[0].montgomery(one, RR, m, k0, numWords);
		powers[1] = powers[1].montgomery(x, RR, m, k0, numWords);
		i$1 = 2;
		while (true) {
			if (!(i$1 < 16)) { break; }
			((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1] = ((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1]).montgomery((x$1 = i$1 - 1 >> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1])), powers[1], m, k0, numWords));
			i$1 = i$1 + (1) >> 0;
		}
		z = z.make(numWords);
		$copySlice(z, powers[0]);
		zz = zz.make(numWords);
		i$2 = y.$length - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			yi = ((i$2 < 0 || i$2 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$2]);
			j = 0;
			while (true) {
				if (!(j < 32)) { break; }
				if (!((i$2 === (y.$length - 1 >> 0))) || !((j === 0))) {
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
				}
				zz = zz.montgomery(z, (x$2 = yi >>> 28 >>> 0, ((x$2 < 0 || x$2 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$2])), m, k0, numWords);
				_tmp = zz;
				_tmp$1 = z;
				z = _tmp;
				zz = _tmp$1;
				yi = (y$2 = (4), y$2 < 32 ? (yi << y$2) : 0) >>> 0;
				j = j + (4) >> 0;
			}
			i$2 = i$2 - (1) >> 0;
		}
		zz = zz.montgomery(z, one, m, k0, numWords);
		/* */ if (zz.cmp(m) >= 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (zz.cmp(m) >= 0) { */ case 5:
			_r$2 = zz.sub(zz, m); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			zz = _r$2;
			/* */ if (zz.cmp(m) >= 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (zz.cmp(m) >= 0) { */ case 8:
				_r$3 = (nat.nil).div(nat.nil, zz, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$2 = _r$3;
				zz = _tuple$2[1];
			/* } */ case 9:
		/* } */ case 6:
		$s = -1; return zz.norm();
		/* */ } return; } var $f = {$blk: nat.prototype.expNNMontgomery, $c: true, $r, RR, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, i, i$1, i$2, j, k0, m, numWords, one, powers, rr, t, x, x$1, x$2, y, y$1, y$2, yi, z, zz, $s};return $f;
	};
	$ptrType(nat).prototype.expNNMontgomery = function(x, y, m) { return this.$get().expNNMontgomery(x, y, m); };
	nat.prototype.bytes = function(buf) {
		var _i, _ref, buf, d, i, j, y, z;
		i = 0;
		z = this;
		i = buf.$length;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < 4)) { break; }
				i = i - (1) >> 0;
				if (i >= 0) {
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((d << 24 >>> 24)));
				} else if (!((((d << 24 >>> 24)) === 0))) {
					$panic(new $String("math/big: buffer too small to fit value"));
				}
				d = (y = (8), y < 32 ? (d >>> y) : 0) >>> 0;
				j = j + (1) >> 0;
			}
			_i++;
		}
		if (i < 0) {
			i = 0;
		}
		while (true) {
			if (!(i < buf.$length && (((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		return i;
	};
	$ptrType(nat).prototype.bytes = function(buf) { return this.$get().bytes(buf); };
	bigEndianWord = function(buf) {
		var buf;
		if (false) {
			return (($clone(binary.BigEndian, binary.bigEndian).Uint64(buf).$low >>> 0));
		}
		return (($clone(binary.BigEndian, binary.bigEndian).Uint32(buf) >>> 0));
	};
	nat.prototype.setBytes = function(buf) {
		var _q, buf, d, i, k, s, x, x$1, y, z;
		z = this;
		z = z.make((_q = (((buf.$length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		i = buf.$length;
		k = 0;
		while (true) {
			if (!(i >= 4)) { break; }
			((k < 0 || k >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + k] = bigEndianWord($subslice(buf, (i - 4 >> 0), i)));
			i = i - (4) >> 0;
			k = k + (1) >> 0;
		}
		if (i > 0) {
			d = 0;
			s = 0;
			while (true) {
				if (!(i > 0)) { break; }
				d = (d | (((y = s, y < 32 ? ((((x = i - 1 >> 0, ((x < 0 || x >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + x])) >>> 0)) << y) : 0) >>> 0))) >>> 0;
				i = i - (1) >> 0;
				s = s + (8) >>> 0;
			}
			(x$1 = z.$length - 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = d));
		}
		return z.norm();
	};
	$ptrType(nat).prototype.setBytes = function(buf) { return this.$get().setBytes(buf); };
	nat.prototype.sqrt = function(x) {
		var {_q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, n, x, z, z1, z2, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.cmp(natOne) <= 0) {
			$s = -1; return z.set(x);
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		z1 = _tmp;
		z2 = _tmp$1;
		z1 = z;
		z1 = z1.setUint64(new $Uint64(0, 1));
		z1 = z1.shl(z1, (_q = (((x.bitLen() + 1 >> 0) >>> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")));
		n = 0;
		/* while (true) { */ case 1:
			_r = z2.div(nat.nil, x, z1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			z2 = _tuple[0];
			_r$1 = z2.add(z2, z1); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			z2 = _r$1;
			z2 = z2.shr(z2, 1);
			if (z2.cmp(z1) >= 0) {
				if ((n & 1) === 0) {
					$s = -1; return z1;
				}
				$s = -1; return z.set(z1);
			}
			_tmp$2 = z2;
			_tmp$3 = z1;
			z1 = _tmp$2;
			z2 = _tmp$3;
			n = n + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return nat.nil;
		/* */ } return; } var $f = {$blk: nat.prototype.sqrt, $c: true, $r, _q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, n, x, z, z1, z2, $s};return $f;
	};
	$ptrType(nat).prototype.sqrt = function(x) { return this.$get().sqrt(x); };
	Int.ptr.prototype.GobEncode = function() {
		var b, buf, i, x;
		x = this;
		if (x === ptrType$2.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType$1, (1 + ($imul(x.abs.$length, 4)) >> 0));
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = b);
		return [$subslice(buf, i), $ifaceNil];
	};
	Int.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Int.ptr.prototype.GobDecode = function(buf) {
		var {$24r, _r, b, buf, z, $s, $r, $c} = $restore(this, {buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Int.copy(z, new Int.ptr(false, nat.nil));
			$s = -1; return $ifaceNil;
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r = fmt.Errorf("Int.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes($subslice(buf, 1));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.GobDecode, $c: true, $r, $24r, _r, b, buf, z, $s};return $f;
	};
	Int.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Int.ptr.prototype.MarshalText = function() {
		var {$24r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, err, text, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		if (x === ptrType$2.nil) {
			_tmp = (new sliceType$1($stringToBytes("<nil>")));
			_tmp$1 = $ifaceNil;
			text = _tmp;
			err = _tmp$1;
			$s = -1; return [text, err];
		}
		_r = x.abs.itoa(x.neg, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$2 = _r;
		_tmp$3 = $ifaceNil;
		text = _tmp$2;
		err = _tmp$3;
		$24r = [text, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.MarshalText, $c: true, $r, $24r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, err, text, x, $s};return $f;
	};
	Int.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Int.ptr.prototype.UnmarshalText = function(text) {
		var {$24r, _r, _r$1, _tuple, ok, text, z, $s, $r, $c} = $restore(this, {text});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.setFromScanner(bytes.NewReader(text), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$1 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new sliceType([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.UnmarshalText, $c: true, $r, $24r, _r, _r$1, _tuple, ok, text, z, $s};return $f;
	};
	Int.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Int.ptr.prototype.MarshalJSON = function() {
		var {$24r, _r, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$2.nil) {
			$s = -1; return [(new sliceType$1($stringToBytes("null"))), $ifaceNil];
		}
		_r = x.abs.itoa(x.neg, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = [_r, $ifaceNil];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.MarshalJSON, $c: true, $r, $24r, _r, x, $s};return $f;
	};
	Int.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Int.ptr.prototype.UnmarshalJSON = function(text) {
		var {$24r, _r, text, z, $s, $r, $c} = $restore(this, {text});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (($bytesToString(text)) === "null") {
			$s = -1; return $ifaceNil;
		}
		_r = z.UnmarshalText(text); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.UnmarshalJSON, $c: true, $r, $24r, _r, text, z, $s};return $f;
	};
	Int.prototype.UnmarshalJSON = function(text) { return this.$val.UnmarshalJSON(text); };
	Int.ptr.prototype.Text = function(base) {
		var {$24r, _r, base, x, $s, $r, $c} = $restore(this, {base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$2.nil) {
			$s = -1; return "<nil>";
		}
		_r = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = ($bytesToString(_r));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Text, $c: true, $r, $24r, _r, base, x, $s};return $f;
	};
	Int.prototype.Text = function(base) { return this.$val.Text(base); };
	Int.ptr.prototype.Append = function(buf, base) {
		var {$24r, _arg, _arg$1, _r, base, buf, x, $s, $r, $c} = $restore(this, {buf, base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$2.nil) {
			$s = -1; return $appendSlice(buf, "<nil>");
		}
		_arg = buf;
		_r = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$24r = $appendSlice(_arg, _arg$1);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Append, $c: true, $r, $24r, _arg, _arg$1, _r, base, buf, x, $s};return $f;
	};
	Int.prototype.Append = function(buf, base) { return this.$val.Append(buf, base); };
	Int.ptr.prototype.String = function() {
		var {$24r, _r, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Text(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.String, $c: true, $r, $24r, _r, x, $s};return $f;
	};
	Int.prototype.String = function() { return this.$val.String(); };
	writeMultiple = function(s, text, count) {
		var {_r, b, count, s, text, $s, $r, $c} = $restore(this, {s, text, count});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (text.length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (text.length > 0) { */ case 1:
			b = (new sliceType$1($stringToBytes(text)));
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				_r = s.Write(b); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				count = count - (1) >> 0;
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: writeMultiple, $c: true, $r, _r, b, count, s, text, $s};return $f;
	};
	Int.ptr.prototype.Format = function(s, ch) {
		var {_1, _2, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, base, ch, d, d$1, digits, i, left, length, precision, precisionSet, prefix, right, s, sign, width, widthSet, x, zeros, $s, $r, $c} = $restore(this, {s, ch});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		base = 0;
			_1 = ch;
			/* */ if (_1 === (98)) { $s = 2; continue; }
			/* */ if ((_1 === (111)) || (_1 === (79))) { $s = 3; continue; }
			/* */ if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { $s = 4; continue; }
			/* */ if ((_1 === (120)) || (_1 === (88))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (98)) { */ case 2:
				base = 2;
				$s = 7; continue;
			/* } else if ((_1 === (111)) || (_1 === (79))) { */ case 3:
				base = 8;
				$s = 7; continue;
			/* } else if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { */ case 4:
				base = 10;
				$s = 7; continue;
			/* } else if ((_1 === (120)) || (_1 === (88))) { */ case 5:
				base = 16;
				$s = 7; continue;
			/* } else { */ case 6:
				_arg = s;
				_arg$1 = new $Int32(ch);
				_r = x.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r);
				_r$1 = fmt.Fprintf(_arg, "%%!%c(big.Int=%s)", new sliceType([_arg$1, _arg$2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = -1; return;
			/* } */ case 7:
		case 1:
		/* */ if (x === ptrType$2.nil) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (x === ptrType$2.nil) { */ case 10:
			_r$2 = fmt.Fprint(s, new sliceType([new $String("<nil>")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = -1; return;
		/* } */ case 11:
		sign = "";
			/* */ if (x.neg) { $s = 14; continue; }
			_r$3 = s.Flag(43); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 15; continue; }
			_r$4 = s.Flag(32); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (x.neg) { */ case 14:
				sign = "-";
				$s = 17; continue;
			/* } else if (_r$3) { */ case 15:
				sign = "+";
				$s = 17; continue;
			/* } else if (_r$4) { */ case 16:
				sign = " ";
			/* } */ case 17:
		case 13:
		prefix = "";
		_r$5 = s.Flag(35); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (_r$5) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_r$5) { */ case 20:
			_2 = ch;
			if (_2 === (98)) {
				prefix = "0b";
			} else if (_2 === (111)) {
				prefix = "0";
			} else if (_2 === (120)) {
				prefix = "0x";
			} else if (_2 === (88)) {
				prefix = "0X";
			}
		/* } */ case 21:
		if (ch === 79) {
			prefix = "0o";
		}
		_r$6 = x.abs.utoa(base); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		digits = _r$6;
		if (ch === 88) {
			_ref = digits;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (97 <= d && d <= 122) {
					((i < 0 || i >= digits.$length) ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + i] = (65 + ((d - 97 << 24 >>> 24)) << 24 >>> 24));
				}
				_i++;
			}
		}
		left = 0;
		zeros = 0;
		right = 0;
		_r$7 = s.Precision(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = _r$7;
		precision = _tuple[0];
		precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.$length < precision) {
				zeros = precision - digits.$length >> 0;
			} else if ((digits.$length === 1) && ((0 >= digits.$length ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + 0]) === 48) && (precision === 0)) {
				$s = -1; return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeros >> 0) + digits.$length >> 0;
		_r$8 = s.Width(); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$1 = _r$8;
		width = _tuple$1[0];
		widthSet = _tuple$1[1];
		/* */ if (widthSet && length < width) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (widthSet && length < width) { */ case 26:
				d$1 = width - length >> 0;
				_r$9 = s.Flag(45); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (_r$9) { $s = 29; continue; }
				_r$10 = s.Flag(48); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ if (_r$10 && !precisionSet) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_r$9) { */ case 29:
					right = d$1;
					$s = 32; continue;
				/* } else if (_r$10 && !precisionSet) { */ case 30:
					zeros = d$1;
					$s = 32; continue;
				/* } else { */ case 31:
					left = d$1;
				/* } */ case 32:
			case 28:
		/* } */ case 27:
		$r = writeMultiple(s, " ", left); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, sign, 1); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, prefix, 1); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, "0", zeros); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$11 = s.Write(digits); /* */ $s = 39; case 39: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		$r = writeMultiple(s, " ", right); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Format, $c: true, $r, _1, _2, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, base, ch, d, d$1, digits, i, left, length, precision, precisionSet, prefix, right, s, sign, width, widthSet, x, zeros, $s};return $f;
	};
	Int.prototype.Format = function(s, ch) { return this.$val.Format(s, ch); };
	Int.ptr.prototype.scan = function(r, base) {
		var {_r, _r$1, _tuple, _tuple$1, base, err, neg, r, z, $s, $r, $c} = $restore(this, {r, base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = scanSign(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		neg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, 0, err];
		}
		_r$1 = z.abs.scan(r, base, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		z.abs = _tuple$1[0];
		base = _tuple$1[1];
		err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, base, err];
		}
		z.neg = z.abs.$length > 0 && neg;
		$s = -1; return [z, base, $ifaceNil];
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.scan, $c: true, $r, _r, _r$1, _tuple, _tuple$1, base, err, neg, r, z, $s};return $f;
	};
	Int.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	scanSign = function(r) {
		var {_1, _r, _r$1, _tmp, _tmp$1, _tuple, ch, err, neg, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		neg = false;
		err = $ifaceNil;
		ch = 0;
		_r = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = false;
			_tmp$1 = err;
			neg = _tmp;
			err = _tmp$1;
			$s = -1; return [neg, err];
		}
			_1 = ch;
			/* */ if (_1 === (45)) { $s = 3; continue; }
			/* */ if (_1 === (43)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (45)) { */ case 3:
				neg = true;
				$s = 6; continue;
			/* } else if (_1 === (43)) { */ case 4:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = r.UnreadByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 6:
		case 2:
		$s = -1; return [neg, err];
		/* */ } return; } var $f = {$blk: scanSign, $c: true, $r, _1, _r, _r$1, _tmp, _tmp$1, _tuple, ch, err, neg, r, $s};return $f;
	};
	byteReader.ptr.prototype.ReadByte = function() {
		var {_r, _r$1, _tuple, ch, err, r, size, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.ScanState.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ch = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		/* */ if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { */ case 2:
			_r$1 = fmt.Errorf("invalid rune %#U", new sliceType([new $Int32(ch)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err = _r$1;
		/* } */ case 3:
		$s = -1; return [((ch << 24 >>> 24)), err];
		/* */ } return; } var $f = {$blk: byteReader.ptr.prototype.ReadByte, $c: true, $r, _r, _r$1, _tuple, ch, err, r, size, $s};return $f;
	};
	byteReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	byteReader.ptr.prototype.UnreadByte = function() {
		var {$24r, _r, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.ScanState.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: byteReader.ptr.prototype.UnreadByte, $c: true, $r, $24r, _r, r, $s};return $f;
	};
	byteReader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Int.ptr.prototype.Scan = function(s, ch) {
		var {_1, _r, _tuple, base, ch, err, s, x, z, $s, $r, $c} = $restore(this, {s, ch});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		base = 0;
		_1 = ch;
		if (_1 === (98)) {
			base = 2;
		} else if (_1 === (111)) {
			base = 8;
		} else if (_1 === (100)) {
			base = 10;
		} else if ((_1 === (120)) || (_1 === (88))) {
			base = 16;
		} else if ((_1 === (115)) || (_1 === (118))) {
		} else {
			$s = -1; return errors.New("Int.Scan: invalid verb");
		}
		_r = z.scan((x = new byteReader.ptr(s), new x.constructor.elem(x)), base); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[2];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Scan, $c: true, $r, _1, _r, _tuple, base, ch, err, s, x, z, $s};return $f;
	};
	Int.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Int.ptr.prototype.Sign = function() {
		var x;
		x = this;
		if (x.abs.$length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.$val.Sign(); };
	Int.ptr.prototype.SetInt64 = function(x) {
		var neg, x, z;
		z = this;
		neg = false;
		if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
			neg = true;
			x = new $Int64(-x.$high, -x.$low);
		}
		z.abs = z.abs.setUint64((new $Uint64(x.$high, x.$low)));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Int.ptr.prototype.SetUint64 = function(x) {
		var x, z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	NewInt = function(x) {
		var x;
		return new Int.ptr(false, nat.nil).SetInt64(x);
	};
	$pkg.NewInt = NewInt;
	Int.ptr.prototype.Set = function(x) {
		var x, z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.$val.Set(x); };
	Int.ptr.prototype.Bits = function() {
		var x;
		x = this;
		return $convertSliceType(x.abs, sliceType$2);
	};
	Int.prototype.Bits = function() { return this.$val.Bits(); };
	Int.ptr.prototype.SetBits = function(abs) {
		var abs, z;
		z = this;
		z.abs = ($convertSliceType(abs, nat)).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.$val.SetBits(abs); };
	Int.ptr.prototype.Abs = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Int.ptr.prototype.Neg = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = z.abs.$length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Int.ptr.prototype.Add = function(x, y) {
		var {_r, _r$1, _r$2, neg, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		neg = x.neg;
		/* */ if (x.neg === y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg === y.neg) { */ case 1:
			_r = z.abs.add(x.abs, y.abs); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.abs = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (x.abs.cmp(y.abs) >= 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (x.abs.cmp(y.abs) >= 0) { */ case 5:
				_r$1 = z.abs.sub(x.abs, y.abs); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				z.abs = _r$1;
				$s = 7; continue;
			/* } else { */ case 6:
				neg = !neg;
				_r$2 = z.abs.sub(y.abs, x.abs); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				z.abs = _r$2;
			/* } */ case 7:
		/* } */ case 3:
		z.neg = z.abs.$length > 0 && neg;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Add, $c: true, $r, _r, _r$1, _r$2, neg, x, y, z, $s};return $f;
	};
	Int.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Int.ptr.prototype.Sub = function(x, y) {
		var {_r, _r$1, _r$2, neg, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		neg = x.neg;
		/* */ if (!(x.neg === y.neg)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(x.neg === y.neg)) { */ case 1:
			_r = z.abs.add(x.abs, y.abs); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.abs = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (x.abs.cmp(y.abs) >= 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (x.abs.cmp(y.abs) >= 0) { */ case 5:
				_r$1 = z.abs.sub(x.abs, y.abs); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				z.abs = _r$1;
				$s = 7; continue;
			/* } else { */ case 6:
				neg = !neg;
				_r$2 = z.abs.sub(y.abs, x.abs); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				z.abs = _r$2;
			/* } */ case 7:
		/* } */ case 3:
		z.neg = z.abs.$length > 0 && neg;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Sub, $c: true, $r, _r, _r$1, _r$2, neg, x, y, z, $s};return $f;
	};
	Int.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Int.ptr.prototype.Mul = function(x, y) {
		var {_r, _r$1, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x === y) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x === y) { */ case 1:
			_r = z.abs.sqr(x.abs); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.abs = _r;
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		_r$1 = z.abs.mul(x.abs, y.abs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.abs = _r$1;
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Mul, $c: true, $r, _r, _r$1, x, y, z, $s};return $f;
	};
	Int.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Int.ptr.prototype.MulRange = function(a, b) {
		var {_r, _tmp, _tmp$1, a, b, neg, x, x$1, z, $s, $r, $c} = $restore(this, {a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			$s = -1; return z.SetInt64(new $Int64(0, 1));
		} else if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0)) && (b.$high > 0 || (b.$high === 0 && b.$low >= 0))) {
			$s = -1; return z.SetInt64(new $Int64(0, 0));
		}
		neg = false;
		if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
			neg = (x = (x$1 = new $Int64(b.$high - a.$high, b.$low - a.$low), new $Int64(x$1.$high & 0, (x$1.$low & 1) >>> 0)), (x.$high === 0 && x.$low === 0));
			_tmp = new $Int64(-b.$high, -b.$low);
			_tmp$1 = new $Int64(-a.$high, -a.$low);
			a = _tmp;
			b = _tmp$1;
		}
		_r = z.abs.mulRange((new $Uint64(a.$high, a.$low)), (new $Uint64(b.$high, b.$low))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.abs = _r;
		z.neg = neg;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.MulRange, $c: true, $r, _r, _tmp, _tmp$1, a, b, neg, x, x$1, z, $s};return $f;
	};
	Int.prototype.MulRange = function(a, b) { return this.$val.MulRange(a, b); };
	Int.ptr.prototype.Binomial = function(n, k) {
		var {$24r, _r, _r$1, _r$2, _tmp, _tmp$1, a, b, k, n, x, x$1, z, $s, $r, $c} = $restore(this, {n, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		z = this;
		if ((x = $div64(n, new $Int64(0, 2), false), (x.$high < k.$high || (x.$high === k.$high && x.$low < k.$low))) && (k.$high < n.$high || (k.$high === n.$high && k.$low <= n.$low))) {
			k = new $Int64(n.$high - k.$high, n.$low - k.$low);
		}
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		_r = a[0].MulRange((x$1 = new $Int64(n.$high - k.$high, n.$low - k.$low), new $Int64(x$1.$high + 0, x$1.$low + 1)), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = b[0].MulRange(new $Int64(0, 1), k); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = z.Quo(a[0], b[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Binomial, $c: true, $r, $24r, _r, _r$1, _r$2, _tmp, _tmp$1, a, b, k, n, x, x$1, z, $s};return $f;
	};
	Int.prototype.Binomial = function(n, k) { return this.$val.Binomial(n, k); };
	Int.ptr.prototype.Quo = function(x, y) {
		var {_r, _tuple, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.abs.div(nat.nil, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		z.abs = _tuple[0];
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Quo, $c: true, $r, _r, _tuple, x, y, z, $s};return $f;
	};
	Int.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Int.ptr.prototype.Rem = function(x, y) {
		var {_r, _tuple, x, y, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = (nat.nil).div(z.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		z.abs = _tuple[1];
		z.neg = z.abs.$length > 0 && x.neg;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Rem, $c: true, $r, _r, _tuple, x, y, z, $s};return $f;
	};
	Int.prototype.Rem = function(x, y) { return this.$val.Rem(x, y); };
	Int.ptr.prototype.QuoRem = function(x, y, r) {
		var {_r, _tmp, _tmp$1, _tuple, r, x, y, z, $s, $r, $c} = $restore(this, {x, y, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.abs.div(r.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		z.abs = _tuple[0];
		r.abs = _tuple[1];
		_tmp = z.abs.$length > 0 && !(x.neg === y.neg);
		_tmp$1 = r.abs.$length > 0 && x.neg;
		z.neg = _tmp;
		r.neg = _tmp$1;
		$s = -1; return [z, r];
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.QuoRem, $c: true, $r, _r, _tmp, _tmp$1, _tuple, r, x, y, z, $s};return $f;
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.$val.QuoRem(x, y, r); };
	Int.ptr.prototype.Div = function(x, y) {
		var {_r, _r$1, _r$2, r, x, y, y_neg, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = [r];
		z = this;
		y_neg = y.neg;
		r[0] = new Int.ptr(false, nat.nil);
		_r = z.QuoRem(x, y, r[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (r[0].neg) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (r[0].neg) { */ case 2:
			/* */ if (y_neg) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (y_neg) { */ case 4:
				_r$1 = z.Add(z, intOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$2 = z.Sub(z, intOne); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Div, $c: true, $r, _r, _r$1, _r$2, r, x, y, y_neg, z, $s};return $f;
	};
	Int.prototype.Div = function(x, y) { return this.$val.Div(x, y); };
	Int.ptr.prototype.Mod = function(x, y) {
		var {_r, _r$1, _r$2, q, x, y, y0, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		q = new Int.ptr(false, nat.nil);
		_r = q.QuoRem(x, y, z); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (z.neg) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (z.neg) { */ case 2:
			/* */ if (y0.neg) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (y0.neg) { */ case 4:
				_r$1 = z.Sub(z, y0); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$2 = z.Add(z, y0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Mod, $c: true, $r, _r, _r$1, _r$2, q, x, y, y0, z, $s};return $f;
	};
	Int.prototype.Mod = function(x, y) { return this.$val.Mod(x, y); };
	Int.ptr.prototype.DivMod = function(x, y, m) {
		var {_r, _r$1, _r$2, _r$3, _r$4, m, x, y, y0, z, $s, $r, $c} = $restore(this, {x, y, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		_r = z.QuoRem(x, y, m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (m.neg) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (m.neg) { */ case 2:
			/* */ if (y0.neg) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (y0.neg) { */ case 4:
				_r$1 = z.Add(z, intOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_r$2 = m.Sub(m, y0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = z.Sub(z, intOne); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_r$4 = m.Add(m, y0); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return [z, m];
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.DivMod, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, m, x, y, y0, z, $s};return $f;
	};
	Int.prototype.DivMod = function(x, y, m) { return this.$val.DivMod(x, y, m); };
	Int.ptr.prototype.Cmp = function(y) {
		var r, x, y;
		r = 0;
		x = this;
		if (x === y) {
		} else if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Int.ptr.prototype.CmpAbs = function(y) {
		var x, y;
		x = this;
		return x.abs.cmp(y.abs);
	};
	Int.prototype.CmpAbs = function(y) { return this.$val.CmpAbs(y); };
	low64 = function(x) {
		var v, x, x$1, x$2, x$3;
		if (x.$length === 0) {
			return new $Uint64(0, 0);
		}
		v = ((x$1 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), new $Uint64(0, x$1.constructor === Number ? x$1 : 1)));
		if (true && x.$length > 1) {
			return (x$2 = $shiftLeft64(((x$3 = (1 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 1]), new $Uint64(0, x$3.constructor === Number ? x$3 : 1))), 32), new $Uint64(x$2.$high | v.$high, (x$2.$low | v.$low) >>> 0));
		}
		return v;
	};
	Int.ptr.prototype.Int64 = function() {
		var v, x, x$1;
		x = this;
		v = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
		if (x.neg) {
			v = new $Int64(-v.$high, -v.$low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.$val.Int64(); };
	Int.ptr.prototype.Uint64 = function() {
		var x;
		x = this;
		return low64(x.abs);
	};
	Int.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Int.ptr.prototype.IsInt64 = function() {
		var w, x, x$1, x$2;
		x = this;
		if (x.abs.$length <= 2) {
			w = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
			return (w.$high > 0 || (w.$high === 0 && w.$low >= 0)) || x.neg && (x$2 = new $Int64(-w.$high, -w.$low), (w.$high === x$2.$high && w.$low === x$2.$low));
		}
		return false;
	};
	Int.prototype.IsInt64 = function() { return this.$val.IsInt64(); };
	Int.ptr.prototype.IsUint64 = function() {
		var x;
		x = this;
		return !x.neg && x.abs.$length <= 2;
	};
	Int.prototype.IsUint64 = function() { return this.$val.IsUint64(); };
	Int.ptr.prototype.SetString = function(s, base) {
		var {$24r, _r, base, s, z, $s, $r, $c} = $restore(this, {s, base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.setFromScanner(strings.NewReader(s), base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.SetString, $c: true, $r, $24r, _r, base, s, z, $s};return $f;
	};
	Int.prototype.SetString = function(s, base) { return this.$val.SetString(s, base); };
	Int.ptr.prototype.setFromScanner = function(r, base) {
		var {_r, _r$1, _tuple, _tuple$1, base, err, err$1, r, z, $s, $r, $c} = $restore(this, {r, base});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		_r$1 = r.ReadByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, io.EOF))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		$s = -1; return [z, true];
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.setFromScanner, $c: true, $r, _r, _r$1, _tuple, _tuple$1, base, err, err$1, r, z, $s};return $f;
	};
	Int.prototype.setFromScanner = function(r, base) { return this.$val.setFromScanner(r, base); };
	Int.ptr.prototype.SetBytes = function(buf) {
		var buf, z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.$val.SetBytes(buf); };
	Int.ptr.prototype.Bytes = function() {
		var buf, x;
		x = this;
		buf = $makeSlice(sliceType$1, ($imul(x.abs.$length, 4)));
		return $subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.$val.Bytes(); };
	Int.ptr.prototype.FillBytes = function(buf) {
		var _i, _ref, buf, i, x;
		x = this;
		_ref = buf;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 0);
			_i++;
		}
		x.abs.bytes(buf);
		return buf;
	};
	Int.prototype.FillBytes = function(buf) { return this.$val.FillBytes(buf); };
	Int.ptr.prototype.BitLen = function() {
		var x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.$val.BitLen(); };
	Int.ptr.prototype.TrailingZeroBits = function() {
		var x;
		x = this;
		return x.abs.trailingZeroBits();
	};
	Int.prototype.TrailingZeroBits = function() { return this.$val.TrailingZeroBits(); };
	Int.ptr.prototype.Exp = function(x, y, m) {
		var {_r, _r$1, _r$2, inverse, m, mWords, x, xWords, y, yWords, z, $s, $r, $c} = $restore(this, {x, y, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		xWords = x.abs;
		/* */ if (y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (y.neg) { */ case 1:
			if (m === ptrType$2.nil || (m.abs.$length === 0)) {
				$s = -1; return z.SetInt64(new $Int64(0, 1));
			}
			_r = new Int.ptr(false, nat.nil).ModInverse(x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			inverse = _r;
			if (inverse === ptrType$2.nil) {
				$s = -1; return ptrType$2.nil;
			}
			xWords = inverse.abs;
		/* } */ case 2:
		yWords = y.abs;
		mWords = nat.nil;
		if (!(m === ptrType$2.nil)) {
			if (z === m || alias(z.abs, m.abs)) {
				m = new Int.ptr(false, nat.nil).Set(m);
			}
			mWords = m.abs;
		}
		_r$1 = z.abs.expNN(xWords, yWords, mWords); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.abs = _r$1;
		z.neg = z.abs.$length > 0 && x.neg && yWords.$length > 0 && ((((0 >= yWords.$length ? ($throwRuntimeError("index out of range"), undefined) : yWords.$array[yWords.$offset + 0]) & 1) >>> 0) === 1);
		/* */ if (z.neg && mWords.$length > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (z.neg && mWords.$length > 0) { */ case 5:
			_r$2 = z.abs.sub(mWords, z.abs); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			z.abs = _r$2;
			z.neg = false;
		/* } */ case 6:
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Exp, $c: true, $r, _r, _r$1, _r$2, inverse, m, mWords, x, xWords, y, yWords, z, $s};return $f;
	};
	Int.prototype.Exp = function(x, y, m) { return this.$val.Exp(x, y, m); };
	Int.ptr.prototype.GCD = function(x, y, a, b) {
		var {$24r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, lenA, lenB, negA, negB, x, y, z, $s, $r, $c} = $restore(this, {x, y, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if ((a.abs.$length === 0) || (b.abs.$length === 0)) {
			_tmp = a.abs.$length;
			_tmp$1 = b.abs.$length;
			_tmp$2 = a.neg;
			_tmp$3 = b.neg;
			lenA = _tmp;
			lenB = _tmp$1;
			negA = _tmp$2;
			negB = _tmp$3;
			if (lenA === 0) {
				z.Set(b);
			} else {
				z.Set(a);
			}
			z.neg = false;
			if (!(x === ptrType$2.nil)) {
				if (lenA === 0) {
					x.SetUint64(new $Uint64(0, 0));
				} else {
					x.SetUint64(new $Uint64(0, 1));
					x.neg = negA;
				}
			}
			if (!(y === ptrType$2.nil)) {
				if (lenB === 0) {
					y.SetUint64(new $Uint64(0, 0));
				} else {
					y.SetUint64(new $Uint64(0, 1));
					y.neg = negB;
				}
			}
			$s = -1; return z;
		}
		_r = z.lehmerGCD(x, y, a, b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.GCD, $c: true, $r, $24r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, lenA, lenB, negA, negB, x, y, z, $s};return $f;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.$val.GCD(x, y, a, b); };
	lehmerSimulate = function(A, B) {
		var A, B, _q, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a1, a2, even, h, m, n, q, r, u0, u1, u2, v0, v1, v2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4;
		u0 = 0;
		u1 = 0;
		v0 = 0;
		v1 = 0;
		even = false;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		a1 = _tmp;
		a2 = _tmp$1;
		u2 = _tmp$2;
		v2 = _tmp$3;
		m = B.abs.$length;
		n = A.abs.$length;
		h = nlz((x = A.abs, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
		a1 = (((y = h, y < 32 ? ((x$2 = A.abs, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << y) : 0) >>> 0) | ((y$1 = ((32 - h >>> 0)), y$1 < 32 ? ((x$4 = A.abs, x$5 = n - 2 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) >>> y$1) : 0) >>> 0)) >>> 0;
		if ((n === m)) {
			a2 = (((y$2 = h, y$2 < 32 ? ((x$6 = B.abs, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) << y$2) : 0) >>> 0) | ((y$3 = ((32 - h >>> 0)), y$3 < 32 ? ((x$8 = B.abs, x$9 = n - 2 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) >>> y$3) : 0) >>> 0)) >>> 0;
		} else if ((n === (m + 1 >> 0))) {
			a2 = (y$4 = ((32 - h >>> 0)), y$4 < 32 ? ((x$10 = B.abs, x$11 = n - 2 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])) >>> y$4) : 0) >>> 0;
		} else {
			a2 = 0;
		}
		even = false;
		_tmp$4 = 0;
		_tmp$5 = 1;
		_tmp$6 = 0;
		u0 = _tmp$4;
		u1 = _tmp$5;
		u2 = _tmp$6;
		_tmp$7 = 0;
		_tmp$8 = 0;
		_tmp$9 = 1;
		v0 = _tmp$7;
		v1 = _tmp$8;
		v2 = _tmp$9;
		while (true) {
			if (!(a2 >= v2 && (a1 - a2 >>> 0) >= (v1 + v2 >>> 0))) { break; }
			_tmp$10 = (_q = a1 / a2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$11 = (_r = a1 % a2, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			q = _tmp$10;
			r = _tmp$11;
			_tmp$12 = a2;
			_tmp$13 = r;
			a1 = _tmp$12;
			a2 = _tmp$13;
			_tmp$14 = u1;
			_tmp$15 = u2;
			_tmp$16 = u1 + ($imul(q, u2) >>> 0) >>> 0;
			u0 = _tmp$14;
			u1 = _tmp$15;
			u2 = _tmp$16;
			_tmp$17 = v1;
			_tmp$18 = v2;
			_tmp$19 = v1 + ($imul(q, v2) >>> 0) >>> 0;
			v0 = _tmp$17;
			v1 = _tmp$18;
			v2 = _tmp$19;
			even = !even;
		}
		return [u0, u1, v0, v1, even];
	};
	lehmerUpdate = function(A, B, q, r, s, t, u0, u1, v0, v1, even) {
		var {A, B, _r, _r$1, _r$2, _r$3, _r$4, _r$5, even, q, r, s, t, u0, u1, v0, v1, $s, $r, $c} = $restore(this, {A, B, q, r, s, t, u0, u1, v0, v1, even});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t.abs = t.abs.setWord(u0);
		s.abs = s.abs.setWord(v0);
		t.neg = !even;
		s.neg = even;
		_r = t.Mul(A, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = s.Mul(B, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		r.abs = r.abs.setWord(u1);
		q.abs = q.abs.setWord(v1);
		r.neg = even;
		q.neg = !even;
		_r$2 = r.Mul(A, r); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = q.Mul(B, q); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = A.Add(t, s); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = B.Add(r, q); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: lehmerUpdate, $c: true, $r, A, B, _r, _r$1, _r$2, _r$3, _r$4, _r$5, even, q, r, s, t, u0, u1, v0, v1, $s};return $f;
	};
	euclidUpdate = function(A, B, Ua, Ub, q, r, s, t, extended) {
		var {A, B, Ua, Ub, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tuple, extended, q, r, s, t, $s, $r, $c} = $restore(this, {A, B, Ua, Ub, q, r, s, t, extended});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = q.QuoRem(A, B, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		q = _tuple[0];
		r = _tuple[1];
		_tmp = $clone(B, Int);
		_tmp$1 = $clone(r, Int);
		_tmp$2 = $clone(A, Int);
		Int.copy(A, _tmp);
		Int.copy(B, _tmp$1);
		Int.copy(r, _tmp$2);
		/* */ if (extended) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (extended) { */ case 2:
			t.Set(Ub);
			_r$1 = s.Mul(Ub, q); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = Ub.Sub(Ua, s); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			Ua.Set(t);
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: euclidUpdate, $c: true, $r, A, B, Ua, Ub, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tuple, extended, q, r, s, t, $s};return $f;
	};
	Int.ptr.prototype.lehmerGCD = function(x, y, a, b) {
		var {A, B, Ua, Ub, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, aWord, b, bWord, even, even$1, extended, negA, q, q$1, r, r$1, s, t, u0, u1, ua, ub, v0, v1, va, vb, x, x$1, x$2, x$3, y, z, $s, $r, $c} = $restore(this, {x, y, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_tmp = ptrType$2.nil;
		_tmp$1 = ptrType$2.nil;
		_tmp$2 = ptrType$2.nil;
		_tmp$3 = ptrType$2.nil;
		A = _tmp;
		B = _tmp$1;
		Ua = _tmp$2;
		Ub = _tmp$3;
		A = new Int.ptr(false, nat.nil).Abs(a);
		B = new Int.ptr(false, nat.nil).Abs(b);
		extended = !(x === ptrType$2.nil) || !(y === ptrType$2.nil);
		if (extended) {
			Ua = new Int.ptr(false, nat.nil).SetInt64(new $Int64(0, 1));
			Ub = new Int.ptr(false, nat.nil);
		}
		q = new Int.ptr(false, nat.nil);
		r = new Int.ptr(false, nat.nil);
		s = new Int.ptr(false, nat.nil);
		t = new Int.ptr(false, nat.nil);
		if (A.abs.cmp(B.abs) < 0) {
			_tmp$4 = B;
			_tmp$5 = A;
			A = _tmp$4;
			B = _tmp$5;
			_tmp$6 = Ua;
			_tmp$7 = Ub;
			Ub = _tmp$6;
			Ua = _tmp$7;
		}
		/* while (true) { */ case 1:
			/* if (!(B.abs.$length > 1)) { break; } */ if(!(B.abs.$length > 1)) { $s = 2; continue; }
			_tuple = lehmerSimulate(A, B);
			u0 = _tuple[0];
			u1 = _tuple[1];
			v0 = _tuple[2];
			v1 = _tuple[3];
			even = _tuple[4];
			/* */ if (!((v0 === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((v0 === 0))) { */ case 3:
				$r = lehmerUpdate(A, B, q, r, s, t, u0, u1, v0, v1, even); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (extended) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (extended) { */ case 7:
					$r = lehmerUpdate(Ua, Ub, q, r, s, t, u0, u1, v0, v1, even); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 8:
				$s = 5; continue;
			/* } else { */ case 4:
				$r = euclidUpdate(A, B, Ua, Ub, q, r, s, t, extended); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		/* */ if (B.abs.$length > 0) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (B.abs.$length > 0) { */ case 11:
			/* */ if (A.abs.$length > 1) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (A.abs.$length > 1) { */ case 13:
				$r = euclidUpdate(A, B, Ua, Ub, q, r, s, t, extended); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			/* */ if (B.abs.$length > 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (B.abs.$length > 0) { */ case 16:
				_tmp$8 = (x$1 = A.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
				_tmp$9 = (x$2 = B.abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
				aWord = _tmp$8;
				bWord = _tmp$9;
				/* */ if (extended) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (extended) { */ case 18:
					_tmp$10 = 0;
					_tmp$11 = 0;
					_tmp$12 = 0;
					_tmp$13 = 0;
					ua = _tmp$10;
					ub = _tmp$11;
					va = _tmp$12;
					vb = _tmp$13;
					_tmp$14 = 1;
					_tmp$15 = 0;
					ua = _tmp$14;
					ub = _tmp$15;
					_tmp$16 = 0;
					_tmp$17 = 1;
					va = _tmp$16;
					vb = _tmp$17;
					even$1 = true;
					while (true) {
						if (!(!((bWord === 0)))) { break; }
						_tmp$18 = (_q = aWord / bWord, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						_tmp$19 = (_r = aWord % bWord, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
						q$1 = _tmp$18;
						r$1 = _tmp$19;
						_tmp$20 = bWord;
						_tmp$21 = r$1;
						aWord = _tmp$20;
						bWord = _tmp$21;
						_tmp$22 = ub;
						_tmp$23 = ua + ($imul(q$1, ub) >>> 0) >>> 0;
						ua = _tmp$22;
						ub = _tmp$23;
						_tmp$24 = vb;
						_tmp$25 = va + ($imul(q$1, vb) >>> 0) >>> 0;
						va = _tmp$24;
						vb = _tmp$25;
						even$1 = !even$1;
					}
					t.abs = t.abs.setWord(ua);
					s.abs = s.abs.setWord(va);
					t.neg = !even$1;
					s.neg = even$1;
					_r$1 = t.Mul(Ua, t); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					_r$2 = s.Mul(Ub, s); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					_r$3 = Ua.Add(t, s); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
					$s = 20; continue;
				/* } else { */ case 19:
					while (true) {
						if (!(!((bWord === 0)))) { break; }
						_tmp$26 = bWord;
						_tmp$27 = (_r$4 = aWord % bWord, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
						aWord = _tmp$26;
						bWord = _tmp$27;
					}
				/* } */ case 20:
				(x$3 = A.abs, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = aWord));
			/* } */ case 17:
		/* } */ case 12:
		negA = a.neg;
		/* */ if (!(y === ptrType$2.nil)) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!(y === ptrType$2.nil)) { */ case 24:
			if (y === b) {
				B.Set(b);
			} else {
				B = b;
			}
			_r$5 = y.Mul(a, Ua); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			if (negA) {
				y.neg = !y.neg;
			}
			_r$6 = y.Sub(A, y); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = y.Div(y, B); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 25:
		if (!(x === ptrType$2.nil)) {
			Int.copy(x, Ua);
			if (negA) {
				x.neg = !x.neg;
			}
		}
		Int.copy(z, A);
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.lehmerGCD, $c: true, $r, A, B, Ua, Ub, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, aWord, b, bWord, even, even$1, extended, negA, q, q$1, r, r$1, s, t, u0, u1, ua, ub, v0, v1, va, vb, x, x$1, x$2, x$3, y, z, $s};return $f;
	};
	Int.prototype.lehmerGCD = function(x, y, a, b) { return this.$val.lehmerGCD(x, y, a, b); };
	Int.ptr.prototype.Rand = function(rnd, n) {
		var {_r, n, rnd, z, $s, $r, $c} = $restore(this, {rnd, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (n.neg || (n.abs.$length === 0)) {
			z.neg = false;
			z.abs = nat.nil;
			$s = -1; return z;
		}
		z.neg = false;
		_r = z.abs.random(rnd, n.abs, n.abs.bitLen()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.abs = _r;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Rand, $c: true, $r, _r, n, rnd, z, $s};return $f;
	};
	Int.prototype.Rand = function(rnd, n) { return this.$val.Rand(rnd, n); };
	Int.ptr.prototype.ModInverse = function(g, n) {
		var {_r, _r$1, _r$2, _tmp, _tmp$1, d, g, g2, n, n2, x, z, $s, $r, $c} = $restore(this, {g, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = [x];
		z = this;
		if (n.neg) {
			n2 = new Int.ptr(false, nat.nil);
			n = n2.Neg(n);
		}
		/* */ if (g.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.neg) { */ case 1:
			g2 = new Int.ptr(false, nat.nil);
			_r = g2.Mod(g, n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			g = _r;
		/* } */ case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		d = $clone(_tmp, Int);
		x[0] = $clone(_tmp$1, Int);
		_r$1 = d.GCD(x[0], ptrType$2.nil, g, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!((d.Cmp(intOne) === 0))) {
			$s = -1; return ptrType$2.nil;
		}
		/* */ if (x[0].neg) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (x[0].neg) { */ case 5:
			_r$2 = z.Add(x[0], n); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 7; continue;
		/* } else { */ case 6:
			z.Set(x[0]);
		/* } */ case 7:
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.ModInverse, $c: true, $r, _r, _r$1, _r$2, _tmp, _tmp$1, d, g, g2, n, n2, x, z, $s};return $f;
	};
	Int.prototype.ModInverse = function(g, n) { return this.$val.ModInverse(g, n); };
	Jacobi = function(x, y) {
		var {_arg, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, a, b, bmod8, c, j, s, x, x$1, x$2, x$3, x$4, y, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		c = [c];
		/* */ if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { */ case 1:
			_r = y.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg = new $String(_r);
			_r$1 = fmt.Sprintf("big: invalid 2nd argument to Int.Jacobi: need odd integer but got %s", new sliceType([_arg])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		c[0] = $clone(_tmp$2, Int);
		a[0].Set(x);
		b[0].Set(y);
		j = 1;
		if (b[0].neg) {
			if (a[0].neg) {
				j = -1;
			}
			b[0].neg = false;
		}
		/* while (true) { */ case 5:
			if (b[0].Cmp(intOne) === 0) {
				$s = -1; return j;
			}
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			_r$2 = a[0].Mod(a[0], b[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			s = a[0].abs.trailingZeroBits();
			if (!((((s & 1) >>> 0) === 0))) {
				bmod8 = ((x$2 = b[0].abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) & 7) >>> 0;
				if ((bmod8 === 3) || (bmod8 === 5)) {
					j = -j;
				}
			}
			_r$3 = c[0].Rsh(a[0], s); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			if (((((x$3 = b[0].abs, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) & 3) >>> 0) === 3) && ((((x$4 = c[0].abs, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) & 3) >>> 0) === 3)) {
				j = -j;
			}
			a[0].Set(b[0]);
			b[0].Set(c[0]);
		$s = 5; continue;
		case 6:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Jacobi, $c: true, $r, _arg, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, a, b, bmod8, c, j, s, x, x$1, x$2, x$3, x$4, y, $s};return $f;
	};
	$pkg.Jacobi = Jacobi;
	Int.ptr.prototype.modSqrt3Mod4Prime = function(x, p) {
		var {_r, _r$1, _r$2, e, p, x, z, $s, $r, $c} = $restore(this, {x, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = new Int.ptr(false, nat.nil).Add(p, intOne); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		_r$1 = e.Rsh(e, 2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = z.Exp(x, e, p); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.modSqrt3Mod4Prime, $c: true, $r, _r, _r$1, _r$2, e, p, x, z, $s};return $f;
	};
	Int.prototype.modSqrt3Mod4Prime = function(x, p) { return this.$val.modSqrt3Mod4Prime(x, p); };
	Int.ptr.prototype.modSqrt5Mod8Prime = function(x, p) {
		var {_r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alpha, beta, e, p, tx, x, z, $s, $r, $c} = $restore(this, {x, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		_r = new Int.ptr(false, nat.nil).Rsh(p, 3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		tx = new Int.ptr(false, nat.nil).Lsh(x, 1);
		_r$1 = new Int.ptr(false, nat.nil).Exp(tx, e, p); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		alpha = _r$1;
		_r$2 = new Int.ptr(false, nat.nil).Mul(alpha, alpha); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		beta = _r$2;
		_r$3 = beta.Mod(beta, p); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = beta.Mul(beta, tx); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = beta.Mod(beta, p); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = beta.Sub(beta, intOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = beta.Mul(beta, x); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = beta.Mod(beta, p); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = beta.Mul(beta, alpha); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		_r$10 = z.Mod(beta, p); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.modSqrt5Mod8Prime, $c: true, $r, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alpha, beta, e, p, tx, x, z, $s};return $f;
	};
	Int.prototype.modSqrt5Mod8Prime = function(x, p) { return this.$val.modSqrt5Mod8Prime(x, p); };
	Int.ptr.prototype.modSqrtTonelliShanks = function(x, p) {
		var {_r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, b, e, g, m, n, p, r, s, t, x, y, z, $s, $r, $c} = $restore(this, {x, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = [b];
		g = [g];
		n = [n];
		s = [s];
		t = [t];
		y = [y];
		z = this;
		s[0] = new Int.ptr(false, nat.nil);
		_r = s[0].Sub(p, intOne); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		e = s[0].abs.trailingZeroBits();
		_r$1 = s[0].Rsh(s[0], e); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		n[0] = new Int.ptr(false, nat.nil);
		n[0].SetInt64(new $Int64(0, 2));
		/* while (true) { */ case 3:
			_r$2 = Jacobi(n[0], p); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(!((_r$2 === -1)))) { break; } */ if(!(!((_r$2 === -1)))) { $s = 4; continue; }
			_r$3 = n[0].Add(n[0], intOne); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		$s = 3; continue;
		case 4:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		_tmp$3 = new Int.ptr(false, nat.nil);
		y[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		g[0] = $clone(_tmp$2, Int);
		t[0] = $clone(_tmp$3, Int);
		_r$4 = y[0].Add(s[0], intOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = y[0].Rsh(y[0], 1); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = y[0].Exp(x, y[0], p); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = b[0].Exp(x, s[0], p); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = g[0].Exp(n[0], s[0], p); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		r = e;
		/* while (true) { */ case 12:
			m = 0;
			t[0].Set(b[0]);
			/* while (true) { */ case 14:
				/* if (!(!((t[0].Cmp(intOne) === 0)))) { break; } */ if(!(!((t[0].Cmp(intOne) === 0)))) { $s = 15; continue; }
				_r$9 = t[0].Mul(t[0], t[0]); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = _r$9.Mod(t[0], p); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				m = m + (1) >>> 0;
			$s = 14; continue;
			case 15:
			if (m === 0) {
				$s = -1; return z.Set(y[0]);
			}
			_r$11 = t[0].SetInt64(new $Int64(0, 0)).SetBit(t[0], ((((r - m >>> 0) - 1 >>> 0) >> 0)), 1); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$12 = _r$11.Exp(g[0], t[0], p); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			_r$13 = g[0].Mul(t[0], t[0]); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.Mod(g[0], p); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			_r$15 = y[0].Mul(y[0], t[0]); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.Mod(y[0], p); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			_r$17 = b[0].Mul(b[0], g[0]); /* */ $s = 24; case 24: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = _r$17.Mod(b[0], p); /* */ $s = 25; case 25: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
			r = m;
		$s = 12; continue;
		case 13:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.modSqrtTonelliShanks, $c: true, $r, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, b, e, g, m, n, p, r, s, t, x, y, z, $s};return $f;
	};
	Int.prototype.modSqrtTonelliShanks = function(x, p) { return this.$val.modSqrtTonelliShanks(x, p); };
	Int.ptr.prototype.ModSqrt = function(x, p) {
		var {$24r, $24r$1, $24r$2, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, p, x, x$1, x$2, z, $s, $r, $c} = $restore(this, {x, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
			_r = Jacobi(x, p); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (-1)) {
				$s = -1; return ptrType$2.nil;
			} else if (_1 === (0)) {
				$s = -1; return z.SetInt64(new $Int64(0, 0));
			} else if (_1 === (1)) {
				/* break; */ $s = 1; continue;
			}
		case 1:
		/* */ if (x.neg || x.Cmp(p) >= 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (x.neg || x.Cmp(p) >= 0) { */ case 3:
			_r$1 = new Int.ptr(false, nat.nil).Mod(x, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			x = _r$1;
		/* } */ case 4:
			/* */ if (((_r$2 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 3)) { $s = 7; continue; }
			/* */ if (((_r$3 = (x$2 = p.abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) % 8, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 5)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (((_r$2 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 3)) { */ case 7:
				_r$4 = z.modSqrt3Mod4Prime(x, p); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$24r = _r$4;
				$s = 12; case 12: return $24r;
			/* } else if (((_r$3 = (x$2 = p.abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) % 8, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 5)) { */ case 8:
				_r$5 = z.modSqrt5Mod8Prime(x, p); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$24r$1 = _r$5;
				$s = 14; case 14: return $24r$1;
			/* } else { */ case 9:
				_r$6 = z.modSqrtTonelliShanks(x, p); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$24r$2 = _r$6;
				$s = 16; case 16: return $24r$2;
			/* } */ case 10:
		case 6:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.ModSqrt, $c: true, $r, $24r, $24r$1, $24r$2, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, p, x, x$1, x$2, z, $s};return $f;
	};
	Int.prototype.ModSqrt = function(x, p) { return this.$val.ModSqrt(x, p); };
	Int.ptr.prototype.Lsh = function(x, n) {
		var n, x, z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.$val.Lsh(x, n); };
	Int.ptr.prototype.Rsh = function(x, n) {
		var {_r, _r$1, n, t, x, z, $s, $r, $c} = $restore(this, {x, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg) { */ case 1:
			_r = z.abs.sub(x.abs, natOne); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			t = _r;
			t = t.shr(t, n);
			_r$1 = t.add(t, natOne); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			z.abs = _r$1;
			z.neg = true;
			$s = -1; return z;
		/* } */ case 2:
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Rsh, $c: true, $r, _r, _r$1, n, t, x, z, $s};return $f;
	};
	Int.prototype.Rsh = function(x, n) { return this.$val.Rsh(x, n); };
	Int.ptr.prototype.Bit = function(i) {
		var {_r, i, t, x, x$1, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		if (i === 0) {
			if (x.abs.$length > 0) {
				$s = -1; return (((((x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) >>> 0));
			}
			$s = -1; return 0;
		}
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		/* */ if (x.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg) { */ case 1:
			_r = (nat.nil).sub(x.abs, natOne); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			t = _r;
			$s = -1; return (t.bit(((i >>> 0))) ^ 1) >>> 0;
		/* } */ case 2:
		$s = -1; return x.abs.bit(((i >>> 0)));
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Bit, $c: true, $r, _r, i, t, x, x$1, $s};return $f;
	};
	Int.prototype.Bit = function(i) { return this.$val.Bit(i); };
	Int.ptr.prototype.SetBit = function(x, i, b) {
		var {_r, _r$1, b, i, t, x, z, $s, $r, $c} = $restore(this, {x, i, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		/* */ if (x.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg) { */ case 1:
			_r = z.abs.sub(x.abs, natOne); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			t = _r;
			t = t.setBit(t, ((i >>> 0)), (b ^ 1) >>> 0);
			_r$1 = t.add(t, natOne); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			z.abs = _r$1;
			z.neg = z.abs.$length > 0;
			$s = -1; return z;
		/* } */ case 2:
		z.abs = z.abs.setBit(x.abs, ((i >>> 0)), b);
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.SetBit, $c: true, $r, _r, _r$1, b, i, t, x, z, $s};return $f;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.$val.SetBit(x, i, b); };
	Int.ptr.prototype.And = function(x, y) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg === y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg === y.neg) { */ case 1:
			/* */ if (x.neg) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (x.neg) { */ case 3:
				_r = (nat.nil).sub(x.abs, natOne); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				x1 = _r;
				_r$1 = (nat.nil).sub(y.abs, natOne); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				y1 = _r$1;
				_r$2 = z.abs.add(z.abs.or(x1, y1), natOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				z.abs = _r$2;
				z.neg = true;
				$s = -1; return z;
			/* } */ case 4:
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		_r$3 = (nat.nil).sub(y.abs, natOne); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		y1$1 = _r$3;
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.And, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s};return $f;
	};
	Int.prototype.And = function(x, y) { return this.$val.And(x, y); };
	Int.ptr.prototype.AndNot = function(x, y) {
		var {_r, _r$1, _r$2, _r$3, _r$4, x, x1, x1$1, y, y1, y1$1, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg === y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg === y.neg) { */ case 1:
			/* */ if (x.neg) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (x.neg) { */ case 3:
				_r = (nat.nil).sub(x.abs, natOne); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				x1 = _r;
				_r$1 = (nat.nil).sub(y.abs, natOne); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				y1 = _r$1;
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				$s = -1; return z;
			/* } */ case 4:
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		/* */ if (x.neg) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (x.neg) { */ case 7:
			_r$2 = (nat.nil).sub(x.abs, natOne); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x1$1 = _r$2;
			_r$3 = z.abs.add(z.abs.or(x1$1, y.abs), natOne); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			z.abs = _r$3;
			z.neg = true;
			$s = -1; return z;
		/* } */ case 8:
		_r$4 = (nat.nil).sub(y.abs, natOne); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		y1$1 = _r$4;
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.AndNot, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, x, x1, x1$1, y, y1, y1$1, z, $s};return $f;
	};
	Int.prototype.AndNot = function(x, y) { return this.$val.AndNot(x, y); };
	Int.ptr.prototype.Or = function(x, y) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg === y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg === y.neg) { */ case 1:
			/* */ if (x.neg) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (x.neg) { */ case 3:
				_r = (nat.nil).sub(x.abs, natOne); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				x1 = _r;
				_r$1 = (nat.nil).sub(y.abs, natOne); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				y1 = _r$1;
				_r$2 = z.abs.add(z.abs.and(x1, y1), natOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				z.abs = _r$2;
				z.neg = true;
				$s = -1; return z;
			/* } */ case 4:
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		_r$3 = (nat.nil).sub(y.abs, natOne); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		y1$1 = _r$3;
		_r$4 = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		z.abs = _r$4;
		z.neg = true;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Or, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s};return $f;
	};
	Int.prototype.Or = function(x, y) { return this.$val.Or(x, y); };
	Int.ptr.prototype.Xor = function(x, y) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg === y.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg === y.neg) { */ case 1:
			/* */ if (x.neg) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (x.neg) { */ case 3:
				_r = (nat.nil).sub(x.abs, natOne); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				x1 = _r;
				_r$1 = (nat.nil).sub(y.abs, natOne); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				y1 = _r$1;
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				$s = -1; return z;
			/* } */ case 4:
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		_r$2 = (nat.nil).sub(y.abs, natOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		y1$1 = _r$2;
		_r$3 = z.abs.add(z.abs.xor(x.abs, y1$1), natOne); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		z.neg = true;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Xor, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, x, x1, y, y1, y1$1, z, $s};return $f;
	};
	Int.prototype.Xor = function(x, y) { return this.$val.Xor(x, y); };
	Int.ptr.prototype.Not = function(x) {
		var {_r, _r$1, x, z, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (x.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.neg) { */ case 1:
			_r = z.abs.sub(x.abs, natOne); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.abs = _r;
			z.neg = false;
			$s = -1; return z;
		/* } */ case 2:
		_r$1 = z.abs.add(x.abs, natOne); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.abs = _r$1;
		z.neg = true;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Not, $c: true, $r, _r, _r$1, x, z, $s};return $f;
	};
	Int.prototype.Not = function(x) { return this.$val.Not(x); };
	Int.ptr.prototype.Sqrt = function(x) {
		var {_r, x, z, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.neg) {
			$panic(new $String("square root of negative number"));
		}
		z.neg = false;
		_r = z.abs.sqrt(x.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.abs = _r;
		$s = -1; return z;
		/* */ } return; } var $f = {$blk: Int.ptr.prototype.Sqrt, $c: true, $r, _r, x, z, $s};return $f;
	};
	Int.prototype.Sqrt = function(x) { return this.$val.Sqrt(x); };
	addVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addVV_g(z, x, y);
		return c;
	};
	subVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = subVV_g(z, x, y);
		return c;
	};
	addVW = function(z, x, y) {
		var {$24r, _r, c, fn, x, y, z, $s, $r, $c} = $restore(this, {z, x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = 0;
		fn = addVW_g;
		if (z.$length > 32) {
			fn = addVWlarge;
		}
		_r = fn(z, x, y); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		$24r = c;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: addVW, $c: true, $r, $24r, _r, c, fn, x, y, z, $s};return $f;
	};
	subVW = function(z, x, y) {
		var {$24r, _r, c, fn, x, y, z, $s, $r, $c} = $restore(this, {z, x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = 0;
		fn = subVW_g;
		if (z.$length > 32) {
			fn = subVWlarge;
		}
		_r = fn(z, x, y); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		$24r = c;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: subVW, $c: true, $r, $24r, _r, c, fn, x, y, z, $s};return $f;
	};
	shlVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shlVU_g(z, x, s);
		return c;
	};
	shrVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shrVU_g(z, x, s);
		return c;
	};
	mulAddVWW = function(z, x, y, r) {
		var c, r, x, y, z;
		c = 0;
		c = mulAddVWW_g(z, x, y, r);
		return c;
	};
	addMulVVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addMulVVW_g(z, x, y);
		return c;
	};
	mulWW = function(x, y) {
		var _tmp, _tmp$1, _tuple, hi, lo, x, y, z0, z1;
		z1 = 0;
		z0 = 0;
		_tuple = bits.Mul(((x >>> 0)), ((y >>> 0)));
		hi = _tuple[0];
		lo = _tuple[1];
		_tmp = ((hi >>> 0));
		_tmp$1 = ((lo >>> 0));
		z1 = _tmp;
		z0 = _tmp$1;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var _tmp, _tmp$1, _tuple, _tuple$1, c, cc, hi, lo, x, y, z0, z1;
		z1 = 0;
		z0 = 0;
		_tuple = bits.Mul(((x >>> 0)), ((y >>> 0)));
		hi = _tuple[0];
		lo = _tuple[1];
		cc = 0;
		_tuple$1 = bits.Add(lo, ((c >>> 0)), 0);
		lo = _tuple$1[0];
		cc = _tuple$1[1];
		_tmp = (((hi + cc >>> 0) >>> 0));
		_tmp$1 = ((lo >>> 0));
		z1 = _tmp;
		z0 = _tmp$1;
		return [z1, z0];
	};
	nlz = function(x) {
		var x;
		return ((bits.LeadingZeros(((x >>> 0))) >>> 0));
	};
	addVV_g = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length && i < y.$length)) { break; }
			_tuple = bits.Add(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]) >>> 0)), ((c >>> 0)));
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length && i < y.$length)) { break; }
			_tuple = bits.Sub(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]) >>> 0)), ((c >>> 0)));
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		c = y;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			_tuple = bits.Add(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((c >>> 0)), 0);
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	addVWlarge = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		c = y;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			if (c === 0) {
				$copySlice($subslice(z, i), $subslice(x, i));
				return c;
			}
			_tuple = bits.Add(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((c >>> 0)), 0);
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		c = y;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			_tuple = bits.Sub(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((c >>> 0)), 0);
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	subVWlarge = function(z, x, y) {
		var _tuple, c, cc, i, x, y, z, zi;
		c = 0;
		c = y;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			if (c === 0) {
				$copySlice($subslice(z, i), $subslice(x, i));
				return c;
			}
			_tuple = bits.Sub(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0)), ((c >>> 0)), 0);
			zi = _tuple[0];
			cc = _tuple[1];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((zi >>> 0)));
			c = ((cc >>> 0));
			i = i + (1) >> 0;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var $C5$9D, c, i, s, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		if (s === 0) {
			$copySlice(z, x);
			return c;
		}
		if (z.$length === 0) {
			return c;
		}
		s = (s & (31)) >>> 0;
		$C5$9D = 32 - s >>> 0;
		$C5$9D = ($C5$9D & (31)) >>> 0;
		c = (y = $C5$9D, y < 32 ? ((x$1 = z.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >>> y) : 0) >>> 0;
		i = z.$length - 1 >> 0;
		while (true) {
			if (!(i > 0)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((y$1 = s, y$1 < 32 ? (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) << y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? ((x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2])) >>> y$2) : 0) >>> 0)) >>> 0));
			i = i - (1) >> 0;
		}
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((y$3 = s, y$3 < 32 ? ((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]) << y$3) : 0) >>> 0));
		return c;
	};
	shrVU_g = function(z, x, s) {
		var $C5$9D, c, i, s, x, x$1, x$2, x$3, x$4, y, y$1, y$2, y$3, z;
		c = 0;
		if (s === 0) {
			$copySlice(z, x);
			return c;
		}
		if (z.$length === 0) {
			return c;
		}
		if (!((x.$length === z.$length))) {
			$panic(new $String("len(x) != len(z)"));
		}
		s = (s & (31)) >>> 0;
		$C5$9D = 32 - s >>> 0;
		$C5$9D = ($C5$9D & (31)) >>> 0;
		c = (y = $C5$9D, y < 32 ? ((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]) << y) : 0) >>> 0;
		i = 1;
		while (true) {
			if (!(i < z.$length)) { break; }
			(x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = ((((y$1 = s, y$1 < 32 ? ((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >>> y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) << y$2) : 0) >>> 0)) >>> 0)));
			i = i + (1) >> 0;
		}
		(x$4 = z.$length - 1 >> 0, ((x$4 < 0 || x$4 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$4] = ((y$3 = s, y$3 < 32 ? ((x$3 = z.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$3])) >>> y$3) : 0) >>> 0)));
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var _tuple, c, i, r, x, y, z;
		c = 0;
		c = r;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, c);
			c = _tuple[0];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
			i = i + (1) >> 0;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var _tmp, _tmp$1, _tuple, _tuple$1, c, cc, i, lo, x, y, z, z0, z1;
		c = 0;
		i = 0;
		while (true) {
			if (!(i < z.$length && i < x.$length)) { break; }
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, ((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i]));
			z1 = _tuple[0];
			z0 = _tuple[1];
			_tuple$1 = bits.Add(((z0 >>> 0)), ((c >>> 0)), 0);
			lo = _tuple$1[0];
			cc = _tuple$1[1];
			_tmp = ((cc >>> 0));
			_tmp$1 = ((lo >>> 0));
			c = _tmp;
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tmp$1);
			c = c + (z1) >>> 0;
			i = i + (1) >> 0;
		}
		return c;
	};
	divWW = function(x1, x0, y, m) {
		var _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, c, d, dq0, dq1, m, q, qq, r, r0, r1, s, t0, t1, x0, x1, y, y$1, y$2, y$3, y$4, y$5;
		q = 0;
		r = 0;
		s = nlz(y);
		if (!((s === 0))) {
			x1 = (((y$1 = s, y$1 < 32 ? (x1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (x0 >>> y$2) : 0) >>> 0)) >>> 0;
			x0 = (y$3 = (s), y$3 < 32 ? (x0 << y$3) : 0) >>> 0;
			y = (y$4 = (s), y$4 < 32 ? (y << y$4) : 0) >>> 0;
		}
		d = ((y >>> 0));
		_tuple = bits.Mul(((m >>> 0)), ((x1 >>> 0)));
		t1 = _tuple[0];
		t0 = _tuple[1];
		_tuple$1 = bits.Add(t0, ((x0 >>> 0)), 0);
		c = _tuple$1[1];
		_tuple$2 = bits.Add(t1, ((x1 >>> 0)), c);
		t1 = _tuple$2[0];
		qq = t1;
		_tuple$3 = bits.Mul(d, qq);
		dq1 = _tuple$3[0];
		dq0 = _tuple$3[1];
		_tuple$4 = bits.Sub(((x0 >>> 0)), dq0, 0);
		r0 = _tuple$4[0];
		b = _tuple$4[1];
		_tuple$5 = bits.Sub(((x1 >>> 0)), dq1, b);
		r1 = _tuple$5[0];
		if (!((r1 === 0))) {
			qq = qq + (1) >>> 0;
			r0 = r0 - (d) >>> 0;
		}
		if (r0 >= d) {
			qq = qq + (1) >>> 0;
			r0 = r0 - (d) >>> 0;
		}
		_tmp = ((qq >>> 0));
		_tmp$1 = ((((y$5 = s, y$5 < 32 ? (r0 >>> y$5) : 0) >>> 0) >>> 0));
		q = _tmp;
		r = _tmp$1;
		return [q, r];
	};
	reciprocalWord = function(d1) {
		var _tuple, d1, rec, u, x0, x1, y;
		u = ((((y = nlz(d1), y < 32 ? (d1 << y) : 0) >>> 0) >>> 0));
		x1 = ~u >>> 0;
		x0 = 4294967295;
		_tuple = bits.Div(x1, x0, u);
		rec = _tuple[0];
		return ((rec >>> 0));
	};
	nat.methods = [{prop: "probablyPrimeMillerRabin", name: "probablyPrimeMillerRabin", pkg: "math/big", typ: $funcType([$Int, $Bool], [$Bool], false)}, {prop: "probablyPrimeLucas", name: "probablyPrimeLucas", pkg: "math/big", typ: $funcType([], [$Bool], false)}, {prop: "div", name: "div", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "divW", name: "divW", pkg: "math/big", typ: $funcType([nat, Word], [nat, Word], false)}, {prop: "modW", name: "modW", pkg: "math/big", typ: $funcType([Word], [Word], false)}, {prop: "divLarge", name: "divLarge", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "divBasic", name: "divBasic", pkg: "math/big", typ: $funcType([nat, nat], [], false)}, {prop: "divRecursive", name: "divRecursive", pkg: "math/big", typ: $funcType([nat, nat], [], false)}, {prop: "divRecursiveStep", name: "divRecursiveStep", pkg: "math/big", typ: $funcType([nat, nat, $Int, ptrType$3, sliceType$3], [], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int, $Bool], [nat, $Int, $Int, $error], false)}, {prop: "utoa", name: "utoa", pkg: "math/big", typ: $funcType([$Int], [sliceType$1], false)}, {prop: "itoa", name: "itoa", pkg: "math/big", typ: $funcType([$Bool, $Int], [sliceType$1], false)}, {prop: "convertWords", name: "convertWords", pkg: "math/big", typ: $funcType([sliceType$1, Word, $Int, Word, sliceType$4], [], false)}, {prop: "expWW", name: "expWW", pkg: "math/big", typ: $funcType([Word, Word], [nat], false)}, {prop: "clear", name: "clear", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [nat], false)}, {prop: "make", name: "make", pkg: "math/big", typ: $funcType([$Int], [nat], false)}, {prop: "setWord", name: "setWord", pkg: "math/big", typ: $funcType([Word], [nat], false)}, {prop: "setUint64", name: "setUint64", pkg: "math/big", typ: $funcType([$Uint64], [nat], false)}, {prop: "set", name: "set", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "add", name: "add", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sub", name: "sub", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "cmp", name: "cmp", pkg: "math/big", typ: $funcType([nat], [$Int], false)}, {prop: "mulAddWW", name: "mulAddWW", pkg: "math/big", typ: $funcType([nat, Word, Word], [nat], false)}, {prop: "montgomery", name: "montgomery", pkg: "math/big", typ: $funcType([nat, nat, nat, Word, $Int], [nat], false)}, {prop: "mul", name: "mul", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sqr", name: "sqr", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "mulRange", name: "mulRange", pkg: "math/big", typ: $funcType([$Uint64, $Uint64], [nat], false)}, {prop: "bitLen", name: "bitLen", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "trailingZeroBits", name: "trailingZeroBits", pkg: "math/big", typ: $funcType([], [$Uint], false)}, {prop: "shl", name: "shl", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "shr", name: "shr", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "setBit", name: "setBit", pkg: "math/big", typ: $funcType([nat, $Uint, $Uint], [nat], false)}, {prop: "bit", name: "bit", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "sticky", name: "sticky", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "and", name: "and", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "andNot", name: "andNot", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "or", name: "or", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "xor", name: "xor", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "random", name: "random", pkg: "math/big", typ: $funcType([ptrType$5, nat, $Int], [nat], false)}, {prop: "expNN", name: "expNN", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNWindowed", name: "expNNWindowed", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNMontgomery", name: "expNNMontgomery", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "bytes", name: "bytes", pkg: "math/big", typ: $funcType([sliceType$1], [$Int], false)}, {prop: "setBytes", name: "setBytes", pkg: "math/big", typ: $funcType([sliceType$1], [nat], false)}, {prop: "sqrt", name: "sqrt", pkg: "math/big", typ: $funcType([nat], [nat], false)}];
	byteReader.methods = [{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$2.methods = [{prop: "scaleDenom", name: "scaleDenom", pkg: "math/big", typ: $funcType([ptrType$2, nat], [], false)}, {prop: "ProbablyPrime", name: "ProbablyPrime", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$1, $Int], [sliceType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$2, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType$2], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType$2], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "SetBits", name: "SetBits", pkg: "", typ: $funcType([sliceType$2], [ptrType$2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "MulRange", name: "MulRange", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$2], false)}, {prop: "Binomial", name: "Binomial", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$2], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Rem", name: "Rem", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "QuoRem", name: "QuoRem", pkg: "", typ: $funcType([ptrType$2, ptrType$2, ptrType$2], [ptrType$2, ptrType$2], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "DivMod", name: "DivMod", pkg: "", typ: $funcType([ptrType$2, ptrType$2, ptrType$2], [ptrType$2, ptrType$2], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType$2], [$Int], false)}, {prop: "CmpAbs", name: "CmpAbs", pkg: "", typ: $funcType([ptrType$2], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "IsInt64", name: "IsInt64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUint64", name: "IsUint64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String, $Int], [ptrType$2, $Bool], false)}, {prop: "setFromScanner", name: "setFromScanner", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$2, $Bool], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$1], [ptrType$2], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "FillBytes", name: "FillBytes", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "BitLen", name: "BitLen", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "TrailingZeroBits", name: "TrailingZeroBits", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Exp", name: "Exp", pkg: "", typ: $funcType([ptrType$2, ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "GCD", name: "GCD", pkg: "", typ: $funcType([ptrType$2, ptrType$2, ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "lehmerGCD", name: "lehmerGCD", pkg: "math/big", typ: $funcType([ptrType$2, ptrType$2, ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Rand", name: "Rand", pkg: "", typ: $funcType([ptrType$5, ptrType$2], [ptrType$2], false)}, {prop: "ModInverse", name: "ModInverse", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "modSqrt3Mod4Prime", name: "modSqrt3Mod4Prime", pkg: "math/big", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "modSqrt5Mod8Prime", name: "modSqrt5Mod8Prime", pkg: "math/big", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "modSqrtTonelliShanks", name: "modSqrtTonelliShanks", pkg: "math/big", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "ModSqrt", name: "ModSqrt", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Lsh", name: "Lsh", pkg: "", typ: $funcType([ptrType$2, $Uint], [ptrType$2], false)}, {prop: "Rsh", name: "Rsh", pkg: "", typ: $funcType([ptrType$2, $Uint], [ptrType$2], false)}, {prop: "Bit", name: "Bit", pkg: "", typ: $funcType([$Int], [$Uint], false)}, {prop: "SetBit", name: "SetBit", pkg: "", typ: $funcType([ptrType$2, $Int, $Uint], [ptrType$2], false)}, {prop: "And", name: "And", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "AndNot", name: "AndNot", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Or", name: "Or", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Xor", name: "Xor", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Sqrt", name: "Sqrt", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}];
	divisor.init("math/big", [{prop: "bbb", name: "bbb", embedded: false, exported: false, typ: nat, tag: ""}, {prop: "nbits", name: "nbits", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "ndigits", name: "ndigits", embedded: false, exported: false, typ: $Int, tag: ""}]);
	nat.init(Word);
	byteReader.init("", [{prop: "ScanState", name: "ScanState", embedded: true, exported: true, typ: fmt.ScanState, tag: ""}]);
	Int.init("math/big", [{prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "abs", name: "abs", embedded: false, exported: false, typ: nat, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cacheBase10 = new structType$1.ptr(new nosync.Mutex.ptr(false, false, false, false, 0), arrayType.zero());
		natPool = new nosync.Pool.ptr(sliceType.nil, $throwNilPointerError);
		errNoDigits = errors.New("number has no digits");
		errInvalSep = errors.New("'_' must separate successive digits");
		leafSize = 8;
		natOne = new nat([1]);
		natTwo = new nat([2]);
		karatsubaThreshold = 40;
		basicSqrThreshold = 20;
		karatsubaSqrThreshold = 260;
		intOne = new Int.ptr(false, natOne);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/rand"] = (function() {
	var $pkg = {}, $init, randutil, errors, js$1, io, big, js, reader, ptrType, sliceType, ptrType$1, jsCrypto, uint8Array, Prime, Int, init;
	randutil = $packages["crypto/internal/randutil"];
	errors = $packages["errors"];
	js$1 = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	big = $packages["math/big"];
	js = $packages["syscall/js"];
	reader = $pkg.reader = $newType(0, $kindStruct, "rand.reader", true, "crypto/rand", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(big.Int);
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(reader);
	Prime = function(rand, bits) {
		var {_index, _q, _r, _r$1, _r$2, _tuple, b, bits, bytes, err, p, rand, y, y$1, $s, $r, $c} = $restore(this, {rand, bits});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (bits < 2) {
			$s = -1; return [ptrType.nil, errors.New("crypto/rand: prime size must be at least 2-bit")];
		}
		$r = randutil.MaybeReadByte(rand); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		b = (((_r = bits % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (b === 0) {
			b = 8;
		}
		bytes = $makeSlice(sliceType, (_q = ((bits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		p = new big.Int.ptr(false, big.nat.nil);
		/* while (true) { */ case 2:
			_r$1 = io.ReadFull(rand, bytes); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType.nil, err];
			}
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) & (((((((y = b, y < 32 ? (1 << y) : 0) >> 0)) - 1 >> 0) << 24 >>> 24)))) >>> 0));
			if (b >= 2) {
				(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) | (((y$1 = ((b - 2 >>> 0)), y$1 < 32 ? (3 << y$1) : 0) << 24 >>> 24))) >>> 0));
			} else {
				(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) | (1)) >>> 0));
				if (bytes.$length > 1) {
					(1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1] = (((1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1]) | (128)) >>> 0));
				}
			}
			_index = bytes.$length - 1 >> 0;
			((_index < 0 || _index >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + _index] = ((((_index < 0 || _index >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + _index]) | (1)) >>> 0));
			p.SetBytes(bytes);
			_r$2 = p.ProbablyPrime(20); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$2) { */ case 5:
				$s = -1; return [p, $ifaceNil];
			/* } */ case 6:
		$s = 2; continue;
		case 3:
		$s = -1; return [ptrType.nil, $ifaceNil];
		/* */ } return; } var $f = {$blk: Prime, $c: true, $r, _index, _q, _r, _r$1, _r$2, _tuple, b, bits, bytes, err, p, rand, y, y$1, $s};return $f;
	};
	$pkg.Prime = Prime;
	Int = function(rand, max) {
		var {_q, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, b, bitLen, bytes, err, k, max, n, rand, y, $s, $r, $c} = $restore(this, {rand, max});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = ptrType.nil;
		err = $ifaceNil;
		if (max.Sign() <= 0) {
			$panic(new $String("crypto/rand: argument to Int is <= 0"));
		}
		n = new big.Int.ptr(false, big.nat.nil);
		_r = n.Sub(max, n.SetUint64(new $Uint64(0, 1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		bitLen = n.BitLen();
		if (bitLen === 0) {
			$s = -1; return [n, err];
		}
		k = (_q = ((bitLen + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		b = (((_r$1 = bitLen % 8, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (b === 0) {
			b = 8;
		}
		bytes = $makeSlice(sliceType, k);
		/* while (true) { */ case 2:
			_r$2 = io.ReadFull(rand, bytes); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = ptrType.nil;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) & (((((((y = b, y < 32 ? (1 << y) : 0) >> 0)) - 1 >> 0) << 24 >>> 24)))) >>> 0));
			n.SetBytes(bytes);
			if (n.Cmp(max) < 0) {
				$s = -1; return [n, err];
			}
		$s = 2; continue;
		case 3:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Int, $c: true, $r, _q, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, b, bitLen, bytes, err, k, max, n, rand, y, $s};return $f;
	};
	$pkg.Int = Int;
	init = function() {
		$pkg.Reader = new reader.ptr();
	};
	reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, array, b, crypto, err, n, offset, r, randomBytes, require;
		n = 0;
		err = $ifaceNil;
		r = this;
		array = b.$array;
		offset = $parseInt(b.$offset) >> 0;
		crypto = $global.crypto;
		if (crypto === undefined) {
			crypto = $global.msCrypto;
		}
		if (!(crypto === undefined)) {
			if (!(crypto.getRandomValues === undefined)) {
				n = b.$length;
				if (n > 65536) {
					n = 65536;
				}
				crypto.getRandomValues(array.subarray(offset, offset + n >> 0));
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		}
		require = $global.require;
		if (!(require === undefined)) {
			randomBytes = require($externalize("crypto", $String)).randomBytes;
			if (!(randomBytes === undefined)) {
				array.set(randomBytes(b.$length), offset);
				_tmp$2 = b.$length;
				_tmp$3 = $ifaceNil;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
		}
		_tmp$4 = 0;
		_tmp$5 = errors.New("crypto/rand not available in this environment");
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	reader.prototype.Read = function(b) { return this.$val.Read(b); };
	ptrType$1.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	reader.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = randutil.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js$1.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Reader = $ifaceNil;
		jsCrypto = $clone($clone(js.Global(), js.Value).Get("crypto"), js.Value);
		uint8Array = $clone($clone(js.Global(), js.Value).Get("Uint8Array"), js.Value);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash, sliceType;
	io = $packages["io"];
	Hash = $pkg.Hash = $newType(8, $kindInterface, "hash.Hash", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto"] = (function() {
	var $pkg = {}, $init, hash, io, strconv, Hash, PublicKey, PrivateKey, Signer, SignerOpts, DecrypterOpts, sliceType, funcType, sliceType$1, digestSizes, hashes, RegisterHash;
	hash = $packages["hash"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	Hash = $pkg.Hash = $newType(4, $kindUint, "crypto.Hash", true, "crypto", true, null);
	PublicKey = $pkg.PublicKey = $newType(8, $kindInterface, "crypto.PublicKey", true, "crypto", true, null);
	PrivateKey = $pkg.PrivateKey = $newType(8, $kindInterface, "crypto.PrivateKey", true, "crypto", true, null);
	Signer = $pkg.Signer = $newType(8, $kindInterface, "crypto.Signer", true, "crypto", true, null);
	SignerOpts = $pkg.SignerOpts = $newType(8, $kindInterface, "crypto.SignerOpts", true, "crypto", true, null);
	DecrypterOpts = $pkg.DecrypterOpts = $newType(8, $kindInterface, "crypto.DecrypterOpts", true, "crypto", true, null);
	sliceType = $sliceType($Uint8);
	funcType = $funcType([], [hash.Hash], false);
	sliceType$1 = $sliceType(funcType);
	Hash.prototype.HashFunc = function() {
		var h;
		h = this.$val;
		return h;
	};
	$ptrType(Hash).prototype.HashFunc = function() { return new Hash(this.$get()).HashFunc(); };
	Hash.prototype.String = function() {
		var _1, h;
		h = this.$val;
		_1 = h;
		if (_1 === (1)) {
			return "MD4";
		} else if (_1 === (2)) {
			return "MD5";
		} else if (_1 === (3)) {
			return "SHA-1";
		} else if (_1 === (4)) {
			return "SHA-224";
		} else if (_1 === (5)) {
			return "SHA-256";
		} else if (_1 === (6)) {
			return "SHA-384";
		} else if (_1 === (7)) {
			return "SHA-512";
		} else if (_1 === (8)) {
			return "MD5+SHA1";
		} else if (_1 === (9)) {
			return "RIPEMD-160";
		} else if (_1 === (10)) {
			return "SHA3-224";
		} else if (_1 === (11)) {
			return "SHA3-256";
		} else if (_1 === (12)) {
			return "SHA3-384";
		} else if (_1 === (13)) {
			return "SHA3-512";
		} else if (_1 === (14)) {
			return "SHA-512/224";
		} else if (_1 === (15)) {
			return "SHA-512/256";
		} else if (_1 === (16)) {
			return "BLAKE2s-256";
		} else if (_1 === (17)) {
			return "BLAKE2b-256";
		} else if (_1 === (18)) {
			return "BLAKE2b-384";
		} else if (_1 === (19)) {
			return "BLAKE2b-512";
		} else {
			return "unknown hash value " + strconv.Itoa(((h >> 0)));
		}
	};
	$ptrType(Hash).prototype.String = function() { return new Hash(this.$get()).String(); };
	Hash.prototype.Size = function() {
		var h;
		h = this.$val;
		if (h > 0 && h < 20) {
			return ((((h < 0 || h >= digestSizes.$length) ? ($throwRuntimeError("index out of range"), undefined) : digestSizes.$array[digestSizes.$offset + h]) >> 0));
		}
		$panic(new $String("crypto: Size of unknown hash function"));
	};
	$ptrType(Hash).prototype.Size = function() { return new Hash(this.$get()).Size(); };
	Hash.prototype.New = function() {
		var {$24r, _r, f, h, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		h = this.$val;
		/* */ if (h > 0 && h < 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (h > 0 && h < 20) { */ case 1:
			f = ((h < 0 || h >= hashes.$length) ? ($throwRuntimeError("index out of range"), undefined) : hashes.$array[hashes.$offset + h]);
			/* */ if (!(f === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(f === $throwNilPointerError)) { */ case 3:
				_r = f(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
		/* } */ case 2:
		$panic(new $String("crypto: requested hash function #" + strconv.Itoa(((h >> 0))) + " is unavailable"));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Hash.prototype.New, $c: true, $r, $24r, _r, f, h, $s};return $f;
	};
	$ptrType(Hash).prototype.New = function() { return new Hash(this.$get()).New(); };
	Hash.prototype.Available = function() {
		var h;
		h = this.$val;
		return h < 20 && !(((h < 0 || h >= hashes.$length) ? ($throwRuntimeError("index out of range"), undefined) : hashes.$array[hashes.$offset + h]) === $throwNilPointerError);
	};
	$ptrType(Hash).prototype.Available = function() { return new Hash(this.$get()).Available(); };
	RegisterHash = function(h, f) {
		var f, h;
		if (h >= 20) {
			$panic(new $String("crypto: RegisterHash of unknown hash function"));
		}
		((h < 0 || h >= hashes.$length) ? ($throwRuntimeError("index out of range"), undefined) : hashes.$array[hashes.$offset + h] = f);
	};
	$pkg.RegisterHash = RegisterHash;
	Hash.methods = [{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [Hash], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([], [hash.Hash], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Bool], false)}];
	PublicKey.init([]);
	PrivateKey.init([]);
	Signer.init([{prop: "Public", name: "Public", pkg: "", typ: $funcType([], [PublicKey], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([io.Reader, sliceType, SignerOpts], [sliceType, $error], false)}]);
	SignerOpts.init([{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [Hash], false)}]);
	DecrypterOpts.init([]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		digestSizes = new sliceType([0, 16, 16, 20, 28, 32, 48, 64, 36, 20, 28, 32, 48, 64, 28, 32, 32, 32, 48, 64]);
		hashes = $makeSlice(sliceType$1, 20);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/subtle"] = (function() {
	var $pkg = {}, $init, js;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/subtle"] = (function() {
	var $pkg = {}, $init, ConstantTimeCompare, ConstantTimeSelect, ConstantTimeByteEq, ConstantTimeEq, ConstantTimeCopy, ConstantTimeLessOrEq;
	ConstantTimeCompare = function(x, y) {
		var i, v, x, y;
		if (!((x.$length === y.$length))) {
			return 0;
		}
		v = 0;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			v = (v | (((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) << 24 >>> 24))) >>> 0;
			i = i + (1) >> 0;
		}
		return ConstantTimeByteEq(v, 0);
	};
	$pkg.ConstantTimeCompare = ConstantTimeCompare;
	ConstantTimeSelect = function(v, x, y) {
		var v, x, y;
		return ((~((v - 1 >> 0)) >> 0) & x) | (((v - 1 >> 0)) & y);
	};
	$pkg.ConstantTimeSelect = ConstantTimeSelect;
	ConstantTimeByteEq = function(x, y) {
		var x, y;
		return (((((((((x ^ y) << 24 >>> 24) >>> 0)) - 1 >>> 0)) >>> 31 >>> 0) >> 0));
	};
	$pkg.ConstantTimeByteEq = ConstantTimeByteEq;
	ConstantTimeEq = function(x, y) {
		var x, x$1, y;
		return (($shiftRightUint64(((x$1 = (new $Uint64(0, ((((x ^ y) >> 0) >>> 0)))), new $Uint64(x$1.$high - 0, x$1.$low - 1))), 63).$low >> 0));
	};
	$pkg.ConstantTimeEq = ConstantTimeEq;
	ConstantTimeCopy = function(v, x, y) {
		var i, v, x, xmask, y, ymask;
		if (!((x.$length === y.$length))) {
			$panic(new $String("subtle: slices have different lengths"));
		}
		xmask = (((v - 1 >> 0) << 24 >>> 24));
		ymask = (((~((v - 1 >> 0)) >> 0) << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = ((((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & xmask) >>> 0) | ((((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]) & ymask) >>> 0)) >>> 0));
			i = i + (1) >> 0;
		}
	};
	$pkg.ConstantTimeCopy = ConstantTimeCopy;
	ConstantTimeLessOrEq = function(x, y) {
		var x, x32, y, y32;
		x32 = ((x >> 0));
		y32 = ((y >> 0));
		return ((((((((x32 - y32 >> 0) - 1 >> 0)) >> 31 >> 0)) & 1) >> 0));
	};
	$pkg.ConstantTimeLessOrEq = ConstantTimeLessOrEq;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/cipher"] = (function() {
	var $pkg = {}, $init, subtle, subtle$1, binary, errors, io, runtime, errOpen;
	subtle = $packages["crypto/internal/subtle"];
	subtle$1 = $packages["crypto/subtle"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = subtle.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle$1.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errOpen = errors.New("cipher: message authentication failed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/boring/sig"] = (function() {
	var $pkg = {}, $init, StandardCrypto;
	StandardCrypto = function() {
	};
	$pkg.StandardCrypto = StandardCrypto;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/boring"] = (function() {
	var $pkg = {}, $init, crypto, cipher, sig, hash, randReader, PrivateKeyRSA, BigInt, sliceType, Unreachable, UnreachableExceptTests, NewSHA224, NewSHA256, NewSHA384, NewSHA512, SHA224, VerifyECDSA, DecryptRSAOAEP, DecryptRSAPKCS1, DecryptRSANoPadding, GenerateKeyRSA, SignRSAPKCS1v15, SignRSAPSS, VerifyRSAPKCS1v15, VerifyRSAPSS;
	crypto = $packages["crypto"];
	cipher = $packages["crypto/cipher"];
	sig = $packages["crypto/internal/boring/sig"];
	hash = $packages["hash"];
	randReader = $pkg.randReader = $newType(4, $kindInt, "boring.randReader", true, "crypto/internal/boring", false, null);
	PrivateKeyRSA = $pkg.PrivateKeyRSA = $newType(0, $kindStruct, "boring.PrivateKeyRSA", true, "crypto/internal/boring", true, function(_$0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._$0 = 0;
			return;
		}
		this._$0 = _$0_;
	});
	BigInt = $pkg.BigInt = $newType(12, $kindSlice, "boring.BigInt", true, "crypto/internal/boring", true, null);
	sliceType = $sliceType($Uint8);
	Unreachable = function() {
		sig.StandardCrypto();
	};
	$pkg.Unreachable = Unreachable;
	UnreachableExceptTests = function() {
	};
	$pkg.UnreachableExceptTests = UnreachableExceptTests;
	randReader.prototype.Read = function(b) {
		var b;
		$panic(new $String("boringcrypto: not available"));
	};
	$ptrType(randReader).prototype.Read = function(b) { return new randReader(this.$get()).Read(b); };
	NewSHA224 = function() {
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.NewSHA224 = NewSHA224;
	NewSHA256 = function() {
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.NewSHA256 = NewSHA256;
	NewSHA384 = function() {
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.NewSHA384 = NewSHA384;
	NewSHA512 = function() {
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.NewSHA512 = NewSHA512;
	SHA224 = function(param) {
		var param;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.SHA224 = SHA224;
	VerifyECDSA = function(pub, hash$1, sig$1) {
		var hash$1, pub, sig$1;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.VerifyECDSA = VerifyECDSA;
	DecryptRSAOAEP = function(h, priv, ciphertext, label) {
		var ciphertext, h, label, priv;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.DecryptRSAOAEP = DecryptRSAOAEP;
	DecryptRSAPKCS1 = function(priv, ciphertext) {
		var ciphertext, priv;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.DecryptRSAPKCS1 = DecryptRSAPKCS1;
	DecryptRSANoPadding = function(priv, ciphertext) {
		var ciphertext, priv;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.DecryptRSANoPadding = DecryptRSANoPadding;
	GenerateKeyRSA = function(bits) {
		var D, Dp, Dq, E, N, P, Q, Qinv, bits, err;
		N = BigInt.nil;
		E = BigInt.nil;
		D = BigInt.nil;
		P = BigInt.nil;
		Q = BigInt.nil;
		Dp = BigInt.nil;
		Dq = BigInt.nil;
		Qinv = BigInt.nil;
		err = $ifaceNil;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.GenerateKeyRSA = GenerateKeyRSA;
	SignRSAPKCS1v15 = function(priv, h, hashed) {
		var h, hashed, priv;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.SignRSAPKCS1v15 = SignRSAPKCS1v15;
	SignRSAPSS = function(priv, h, hashed, saltLen) {
		var h, hashed, priv, saltLen;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.SignRSAPSS = SignRSAPSS;
	VerifyRSAPKCS1v15 = function(pub, h, hashed, sig$1) {
		var h, hashed, pub, sig$1;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.VerifyRSAPKCS1v15 = VerifyRSAPKCS1v15;
	VerifyRSAPSS = function(pub, h, hashed, sig$1, saltLen) {
		var h, hashed, pub, saltLen, sig$1;
		$panic(new $String("boringcrypto: not available"));
	};
	$pkg.VerifyRSAPSS = VerifyRSAPSS;
	randReader.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	PrivateKeyRSA.init("crypto/internal/boring", [{prop: "_$0", name: "_", embedded: false, exported: false, typ: $Int, tag: ""}]);
	BigInt.init($Uint);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cipher.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sig.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/boring/bbig"] = (function() {
	var $pkg = {}, $init, boring, big, ptrType, sliceType, Dec;
	boring = $packages["crypto/internal/boring"];
	big = $packages["math/big"];
	ptrType = $ptrType(big.Int);
	sliceType = $sliceType(big.Word);
	Dec = function(b) {
		var _i, _ref, b, i, w, x;
		if (b === boring.BigInt.nil) {
			return ptrType.nil;
		}
		if (b.$length === 0) {
			return new big.Int.ptr(false, big.nat.nil);
		}
		x = $makeSlice(sliceType, b.$length);
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			w = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = ((w >>> 0)));
			_i++;
		}
		return new big.Int.ptr(false, big.nat.nil).SetBits(x);
	};
	$pkg.Dec = Dec;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = boring.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/rsa"] = (function() {
	var $pkg = {}, $init, bytes, crypto, boring, bbig, randutil, rand, subtle, errors, hash, io, math, big, PublicKey, OAEPOptions, PrivateKey, PrecomputedValues, CRTValue, PSSOptions, PKCS1v15DecryptOptions, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$1, sliceType$2, arrayType, arrayType$1, ptrType$7, bigZero, bigOne, errPublicModulus, errPublicExponentSmall, errPublicExponentLarge, hashPrefixes, checkPub, GenerateKey, GenerateMultiPrimeKey, incCounter, mgf1XOR, encrypt, decrypt, decryptAndCheck, DecryptOAEP, emsaPSSEncode, emsaPSSVerify, signPSSWithSalt, SignPSS, VerifyPSS, DecryptPKCS1v15, DecryptPKCS1v15SessionKey, decryptPKCS1v15, SignPKCS1v15, VerifyPKCS1v15, pkcs1v15HashInfo, boringPublicKey, boringPrivateKey;
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	boring = $packages["crypto/internal/boring"];
	bbig = $packages["crypto/internal/boring/bbig"];
	randutil = $packages["crypto/internal/randutil"];
	rand = $packages["crypto/rand"];
	subtle = $packages["crypto/subtle"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	io = $packages["io"];
	math = $packages["math"];
	big = $packages["math/big"];
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "rsa.PublicKey", true, "crypto/rsa", true, function(N_, E_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.N = ptrType$1.nil;
			this.E = 0;
			return;
		}
		this.N = N_;
		this.E = E_;
	});
	OAEPOptions = $pkg.OAEPOptions = $newType(0, $kindStruct, "rsa.OAEPOptions", true, "crypto/rsa", true, function(Hash_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hash = 0;
			this.Label = sliceType.nil;
			return;
		}
		this.Hash = Hash_;
		this.Label = Label_;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, $kindStruct, "rsa.PrivateKey", true, "crypto/rsa", true, function(PublicKey_, D_, Primes_, Precomputed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PublicKey = new PublicKey.ptr(ptrType$1.nil, 0);
			this.D = ptrType$1.nil;
			this.Primes = sliceType$1.nil;
			this.Precomputed = new PrecomputedValues.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, sliceType$2.nil);
			return;
		}
		this.PublicKey = PublicKey_;
		this.D = D_;
		this.Primes = Primes_;
		this.Precomputed = Precomputed_;
	});
	PrecomputedValues = $pkg.PrecomputedValues = $newType(0, $kindStruct, "rsa.PrecomputedValues", true, "crypto/rsa", true, function(Dp_, Dq_, Qinv_, CRTValues_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dp = ptrType$1.nil;
			this.Dq = ptrType$1.nil;
			this.Qinv = ptrType$1.nil;
			this.CRTValues = sliceType$2.nil;
			return;
		}
		this.Dp = Dp_;
		this.Dq = Dq_;
		this.Qinv = Qinv_;
		this.CRTValues = CRTValues_;
	});
	CRTValue = $pkg.CRTValue = $newType(0, $kindStruct, "rsa.CRTValue", true, "crypto/rsa", true, function(Exp_, Coeff_, R_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Exp = ptrType$1.nil;
			this.Coeff = ptrType$1.nil;
			this.R = ptrType$1.nil;
			return;
		}
		this.Exp = Exp_;
		this.Coeff = Coeff_;
		this.R = R_;
	});
	PSSOptions = $pkg.PSSOptions = $newType(0, $kindStruct, "rsa.PSSOptions", true, "crypto/rsa", true, function(SaltLength_, Hash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SaltLength = 0;
			this.Hash = 0;
			return;
		}
		this.SaltLength = SaltLength_;
		this.Hash = Hash_;
	});
	PKCS1v15DecryptOptions = $pkg.PKCS1v15DecryptOptions = $newType(0, $kindStruct, "rsa.PKCS1v15DecryptOptions", true, "crypto/rsa", true, function(SessionKeyLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SessionKeyLen = 0;
			return;
		}
		this.SessionKeyLen = SessionKeyLen_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(PublicKey);
	ptrType$1 = $ptrType(big.Int);
	ptrType$2 = $ptrType(PrivateKey);
	ptrType$3 = $ptrType(PSSOptions);
	ptrType$4 = $ptrType(OAEPOptions);
	ptrType$5 = $ptrType(PKCS1v15DecryptOptions);
	sliceType$1 = $sliceType(ptrType$1);
	sliceType$2 = $sliceType(CRTValue);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 8);
	ptrType$7 = $ptrType(boring.PrivateKeyRSA);
	PublicKey.ptr.prototype.Size = function() {
		var _q, pub;
		pub = this;
		return (_q = ((pub.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	PublicKey.prototype.Size = function() { return this.$val.Size(); };
	PublicKey.ptr.prototype.Equal = function(x) {
		var _tuple, ok, pub, x, xx;
		pub = this;
		_tuple = $assertType(x, ptrType, true);
		xx = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		return (pub.N.Cmp(xx.N) === 0) && (pub.E === xx.E);
	};
	PublicKey.prototype.Equal = function(x) { return this.$val.Equal(x); };
	checkPub = function(pub) {
		var pub;
		if (pub.N === ptrType$1.nil) {
			return errPublicModulus;
		}
		if (pub.E < 2) {
			return errPublicExponentSmall;
		}
		if (pub.E > 2147483647) {
			return errPublicExponentLarge;
		}
		return $ifaceNil;
	};
	PrivateKey.ptr.prototype.Public = function() {
		var priv;
		priv = this;
		return priv.PublicKey;
	};
	PrivateKey.prototype.Public = function() { return this.$val.Public(); };
	PrivateKey.ptr.prototype.Equal = function(x) {
		var _i, _ref, _tuple, i, ok, priv, x, x$1, x$2, xx;
		priv = this;
		_tuple = $assertType(x, ptrType$2, true);
		xx = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		if (!priv.PublicKey.Equal(xx.PublicKey) || !((priv.D.Cmp(xx.D) === 0))) {
			return false;
		}
		if (!((priv.Primes.$length === xx.Primes.$length))) {
			return false;
		}
		_ref = priv.Primes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (!(((x$1 = priv.Primes, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).Cmp((x$2 = xx.Primes, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]))) === 0))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	PrivateKey.prototype.Equal = function(x) { return this.$val.Equal(x); };
	PrivateKey.ptr.prototype.Sign = function(rand$1, digest, opts) {
		var {$24r, $24r$1, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _tuple, digest, ok, opts, priv, pssOpts, rand$1, $s, $r, $c} = $restore(this, {rand$1, digest, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		priv = this;
		_tuple = $assertType(opts, ptrType$3, true);
		pssOpts = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = SignPSS(rand$1, priv, pssOpts.Hash, digest, pssOpts); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_arg = rand$1;
		_arg$1 = priv;
		_r$1 = opts.HashFunc(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = _r$1;
		_arg$3 = digest;
		_r$2 = SignPKCS1v15(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r$1 = _r$2;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: PrivateKey.ptr.prototype.Sign, $c: true, $r, $24r, $24r$1, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _tuple, digest, ok, opts, priv, pssOpts, rand$1, $s};return $f;
	};
	PrivateKey.prototype.Sign = function(rand$1, digest, opts) { return this.$val.Sign(rand$1, digest, opts); };
	PrivateKey.ptr.prototype.Decrypt = function(rand$1, ciphertext, opts) {
		var {$24r, $24r$1, $24r$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, ciphertext, err, err$1, err$2, l, opts, opts$1, opts$2, opts$3, plaintext, priv, rand$1, $s, $r, $c} = $restore(this, {rand$1, ciphertext, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		plaintext = sliceType.nil;
		err = $ifaceNil;
		priv = this;
		/* */ if ($interfaceIsEqual(opts, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(opts, $ifaceNil)) { */ case 1:
			_r = DecryptPKCS1v15(rand$1, priv, ciphertext); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			plaintext = _tuple[0];
			err = _tuple[1];
			$24r = [plaintext, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_ref = opts;
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 5:
			opts$1 = _ref.$val;
			_r$1 = new crypto.Hash(opts$1.Hash).New(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = DecryptOAEP(_r$1, rand$1, priv, ciphertext, opts$1.Label); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			plaintext = _tuple$1[0];
			err = _tuple$1[1];
			$24r$1 = [plaintext, err];
			$s = 11; case 11: return $24r$1;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 6:
			opts$2 = _ref.$val;
			l = opts$2.SessionKeyLen;
			/* */ if (l > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (l > 0) { */ case 12:
				plaintext = $makeSlice(sliceType, l);
				_r$3 = io.ReadFull(rand$1, plaintext); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$2 = _r$3;
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = sliceType.nil;
					_tmp$1 = err$1;
					plaintext = _tmp;
					err = _tmp$1;
					$s = -1; return [plaintext, err];
				}
				_r$4 = DecryptPKCS1v15SessionKey(rand$1, priv, ciphertext, plaintext); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err$2 = _r$4;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$2 = sliceType.nil;
					_tmp$3 = err$2;
					plaintext = _tmp$2;
					err = _tmp$3;
					$s = -1; return [plaintext, err];
				}
				_tmp$4 = plaintext;
				_tmp$5 = $ifaceNil;
				plaintext = _tmp$4;
				err = _tmp$5;
				$s = -1; return [plaintext, err];
			/* } else { */ case 13:
				_r$5 = DecryptPKCS1v15(rand$1, priv, ciphertext); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$3 = _r$5;
				plaintext = _tuple$3[0];
				err = _tuple$3[1];
				$24r$2 = [plaintext, err];
				$s = 18; case 18: return $24r$2;
			/* } */ case 14:
			$s = 8; continue;
		/* } else { */ case 7:
			opts$3 = _ref;
			_tmp$6 = sliceType.nil;
			_tmp$7 = errors.New("crypto/rsa: invalid options for Decrypt");
			plaintext = _tmp$6;
			err = _tmp$7;
			$s = -1; return [plaintext, err];
		/* } */ case 8:
		$s = -1; return [plaintext, err];
		/* */ } return; } var $f = {$blk: PrivateKey.ptr.prototype.Decrypt, $c: true, $r, $24r, $24r$1, $24r$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, ciphertext, err, err$1, err$2, l, opts, opts$1, opts$2, opts$3, plaintext, priv, rand$1, $s};return $f;
	};
	PrivateKey.prototype.Decrypt = function(rand$1, ciphertext, opts) { return this.$val.Decrypt(rand$1, ciphertext, opts); };
	PrivateKey.ptr.prototype.Validate = function() {
		var {_i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, congruence, de, err, modulus, pminus1, prime, prime$1, priv, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		priv = this;
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		modulus = new big.Int.ptr(false, big.nat.nil).Set(bigOne);
		_ref = priv.Primes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			prime = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (prime.Cmp(bigOne) <= 0) {
				$s = -1; return errors.New("crypto/rsa: invalid prime value");
			}
			_r = modulus.Mul(modulus, prime); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_i++;
		$s = 1; continue;
		case 2:
		if (!((modulus.Cmp(priv.PublicKey.N) === 0))) {
			$s = -1; return errors.New("crypto/rsa: invalid modulus");
		}
		congruence = new big.Int.ptr(false, big.nat.nil);
		de = new big.Int.ptr(false, big.nat.nil).SetInt64((new $Int64(0, priv.PublicKey.E)));
		_r$1 = de.Mul(de, priv.D); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_ref$1 = priv.Primes;
		_i$1 = 0;
		/* while (true) { */ case 5:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
			prime$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$2 = new big.Int.ptr(false, big.nat.nil).Sub(prime$1, bigOne); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			pminus1 = _r$2;
			_r$3 = congruence.Mod(de, pminus1); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			if (!((congruence.Cmp(bigOne) === 0))) {
				$s = -1; return errors.New("crypto/rsa: invalid exponents");
			}
			_i$1++;
		$s = 5; continue;
		case 6:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: PrivateKey.ptr.prototype.Validate, $c: true, $r, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, congruence, de, err, modulus, pminus1, prime, prime$1, priv, $s};return $f;
	};
	PrivateKey.prototype.Validate = function() { return this.$val.Validate(); };
	GenerateKey = function(random, bits) {
		var {$24r, _r, bits, random, $s, $r, $c} = $restore(this, {random, bits});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = GenerateMultiPrimeKey(random, 2, bits); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: GenerateKey, $c: true, $r, $24r, _r, bits, random, $s};return $f;
	};
	$pkg.GenerateKey = GenerateKey;
	GenerateMultiPrimeKey = function(random, nprimes, bits) {
		var {D, Dp, Dq, E, N, P, Q, Qinv, _i, _i$1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, bD, bDp, bDq, bE, bN, bP, bQ, bQinv, bits, e, e64, err, err$1, i, i$1, j, key, n, nprimes, ok, pi, pminus1, prime, prime$1, primeLimit, primes, priv, random, todo, totient, x, $s, $r, $c} = $restore(this, {random, nprimes, bits});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = randutil.MaybeReadByte(random); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false && $interfaceIsEqual(random, new boring.randReader(0)) && (nprimes === 2) && ((bits === 2048) || (bits === 3072))) {
			_tuple = boring.GenerateKeyRSA(bits);
			bN = _tuple[0];
			bE = _tuple[1];
			bD = _tuple[2];
			bP = _tuple[3];
			bQ = _tuple[4];
			bDp = _tuple[5];
			bDq = _tuple[6];
			bQinv = _tuple[7];
			err = _tuple[8];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, err];
			}
			N = bbig.Dec(bN);
			E = bbig.Dec(bE);
			D = bbig.Dec(bD);
			P = bbig.Dec(bP);
			Q = bbig.Dec(bQ);
			Dp = bbig.Dec(bDp);
			Dq = bbig.Dec(bDq);
			Qinv = bbig.Dec(bQinv);
			e64 = E.Int64();
			if (!E.IsInt64() || !((x = (new $Int64(0, (((e64.$low + ((e64.$high >> 31) * 4294967296)) >> 0)))), (x.$high === e64.$high && x.$low === e64.$low)))) {
				$s = -1; return [ptrType$2.nil, errors.New("crypto/rsa: generated key exponent too large")];
			}
			key = new PrivateKey.ptr($clone(new PublicKey.ptr(N, (((e64.$low + ((e64.$high >> 31) * 4294967296)) >> 0))), PublicKey), D, new sliceType$1([P, Q]), $clone(new PrecomputedValues.ptr(Dp, Dq, Qinv, $makeSlice(sliceType$2, 0)), PrecomputedValues));
			$s = -1; return [key, $ifaceNil];
		}
		priv = new PrivateKey.ptr(new PublicKey.ptr(ptrType$1.nil, 0), ptrType$1.nil, sliceType$1.nil, new PrecomputedValues.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, sliceType$2.nil));
		priv.PublicKey.E = 65537;
		if (nprimes < 2) {
			$s = -1; return [ptrType$2.nil, errors.New("crypto/rsa: GenerateMultiPrimeKey: nprimes must be >= 2")];
		}
		if (bits < 64) {
			primeLimit = ($flatten64($shiftLeft64(new $Uint64(0, 1), (((_q = bits / nprimes, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)))));
			pi = primeLimit / (math.Log(primeLimit) - 1);
			pi = pi / (4);
			pi = pi / (2);
			if (pi <= (nprimes)) {
				$s = -1; return [ptrType$2.nil, errors.New("crypto/rsa: too few primes of given length to generate an RSA key")];
			}
		}
		primes = $makeSlice(sliceType$1, nprimes);
		/* while (true) { */ case 2:
			todo = bits;
			if (nprimes >= 7) {
				todo = todo + ((_q$1 = ((nprimes - 2 >> 0)) / 5, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < nprimes)) { break; } */ if(!(i < nprimes)) { $s = 5; continue; }
				err$1 = $ifaceNil;
				_r = rand.Prime(random, (_q$2 = todo / ((nprimes - i >> 0)), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				((i < 0 || i >= primes.$length) ? ($throwRuntimeError("index out of range"), undefined) : primes.$array[primes.$offset + i] = _tuple$1[0]);
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [ptrType$2.nil, err$1];
				}
				todo = todo - (((i < 0 || i >= primes.$length) ? ($throwRuntimeError("index out of range"), undefined) : primes.$array[primes.$offset + i]).BitLen()) >> 0;
				i = i + (1) >> 0;
			$s = 4; continue;
			case 5:
			_ref = primes;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				prime = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				j = 0;
				while (true) {
					if (!(j < i$1)) { break; }
					if (prime.Cmp(((j < 0 || j >= primes.$length) ? ($throwRuntimeError("index out of range"), undefined) : primes.$array[primes.$offset + j])) === 0) {
						/* continue NextSetOfPrimes; */ $s = 2; continue s;
					}
					j = j + (1) >> 0;
				}
				_i++;
			}
			n = new big.Int.ptr(false, big.nat.nil).Set(bigOne);
			totient = new big.Int.ptr(false, big.nat.nil).Set(bigOne);
			pminus1 = new big.Int.ptr(false, big.nat.nil);
			_ref$1 = primes;
			_i$1 = 0;
			/* while (true) { */ case 7:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
				prime$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$1 = n.Mul(n, prime$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_r$2 = pminus1.Sub(prime$1, bigOne); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_r$3 = totient.Mul(totient, pminus1); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_i$1++;
			$s = 7; continue;
			case 8:
			if (!((n.BitLen() === bits))) {
				/* continue NextSetOfPrimes; */ $s = 2; continue s;
			}
			priv.D = new big.Int.ptr(false, big.nat.nil);
			e = big.NewInt((new $Int64(0, priv.PublicKey.E)));
			_r$4 = priv.D.ModInverse(e, totient); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			ok = _r$4;
			if (!(ok === ptrType$1.nil)) {
				priv.Primes = primes;
				priv.PublicKey.N = n;
				/* break; */ $s = 3; continue;
			}
		$s = 2; continue;
		case 3:
		$r = priv.Precompute(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [priv, $ifaceNil];
		/* */ } return; } var $f = {$blk: GenerateMultiPrimeKey, $c: true, $r, D, Dp, Dq, E, N, P, Q, Qinv, _i, _i$1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, bD, bDp, bDq, bE, bN, bP, bQ, bQinv, bits, e, e64, err, err$1, i, i$1, j, key, n, nprimes, ok, pi, pminus1, prime, prime$1, primeLimit, primes, priv, random, todo, totient, x, $s};return $f;
	};
	$pkg.GenerateMultiPrimeKey = GenerateMultiPrimeKey;
	incCounter = function(c) {
		var c;
		c[3] = (c[3] + (1) << 24 >>> 24);
		if (!((c[3] === 0))) {
			return;
		}
		c[2] = (c[2] + (1) << 24 >>> 24);
		if (!((c[2] === 0))) {
			return;
		}
		c[1] = (c[1] + (1) << 24 >>> 24);
		if (!((c[1] === 0))) {
			return;
		}
		c[0] = (c[0] + (1) << 24 >>> 24);
	};
	mgf1XOR = function(out, hash$1, seed) {
		var {_r, _r$1, _r$2, counter, digest, done, hash$1, i, out, seed, $s, $r, $c} = $restore(this, {out, hash$1, seed});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		counter = [counter];
		counter[0] = arrayType.zero();
		digest = sliceType.nil;
		done = 0;
		/* while (true) { */ case 1:
			/* if (!(done < out.$length)) { break; } */ if(!(done < out.$length)) { $s = 2; continue; }
			_r = hash$1.Write(seed); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_r$1 = hash$1.Write($subslice(new sliceType(counter[0]), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = hash$1.Sum($subslice(digest, 0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			digest = _r$2;
			$r = hash$1.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(i < digest.$length && done < out.$length)) { break; }
				((done < 0 || done >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + done] = ((((done < 0 || done >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + done]) ^ (((i < 0 || i >= digest.$length) ? ($throwRuntimeError("index out of range"), undefined) : digest.$array[digest.$offset + i]))) << 24 >>> 24));
				done = done + (1) >> 0;
				i = i + (1) >> 0;
			}
			incCounter(counter[0]);
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: mgf1XOR, $c: true, $r, _r, _r$1, _r$2, counter, digest, done, hash$1, i, out, seed, $s};return $f;
	};
	encrypt = function(c, pub, m) {
		var {_r, c, e, m, pub, $s, $r, $c} = $restore(this, {c, pub, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		boring.Unreachable();
		e = big.NewInt((new $Int64(0, pub.E)));
		_r = c.Exp(m, e, pub.N); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return c;
		/* */ } return; } var $f = {$blk: encrypt, $c: true, $r, _r, c, e, m, pub, $s};return $f;
	};
	PrivateKey.ptr.prototype.Precompute = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, i, prime, priv, r, values, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		priv = this;
		if (!(priv.Precomputed.Dp === ptrType$1.nil)) {
			$s = -1; return;
		}
		_r = new big.Int.ptr(false, big.nat.nil).Sub((x = priv.Primes, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), bigOne); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		priv.Precomputed.Dp = _r;
		_r$1 = priv.Precomputed.Dp.Mod(priv.D, priv.Precomputed.Dp); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = new big.Int.ptr(false, big.nat.nil).Sub((x$1 = priv.Primes, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])), bigOne); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		priv.Precomputed.Dq = _r$2;
		_r$3 = priv.Precomputed.Dq.Mod(priv.D, priv.Precomputed.Dq); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = new big.Int.ptr(false, big.nat.nil).ModInverse((x$2 = priv.Primes, (1 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 1])), (x$3 = priv.Primes, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]))); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		priv.Precomputed.Qinv = _r$4;
		_r$5 = new big.Int.ptr(false, big.nat.nil).Mul((x$4 = priv.Primes, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])), (x$5 = priv.Primes, (1 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 1]))); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		r = _r$5;
		priv.Precomputed.CRTValues = $makeSlice(sliceType$2, (priv.Primes.$length - 2 >> 0));
		i = 2;
		/* while (true) { */ case 7:
			/* if (!(i < priv.Primes.$length)) { break; } */ if(!(i < priv.Primes.$length)) { $s = 8; continue; }
			prime = (x$6 = priv.Primes, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i]));
			values = (x$7 = priv.Precomputed.CRTValues, x$8 = i - 2 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
			_r$6 = new big.Int.ptr(false, big.nat.nil).Sub(prime, bigOne); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			values.Exp = _r$6;
			_r$7 = values.Exp.Mod(priv.D, values.Exp); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			values.R = new big.Int.ptr(false, big.nat.nil).Set(r);
			_r$8 = new big.Int.ptr(false, big.nat.nil).ModInverse(r, prime); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			values.Coeff = _r$8;
			_r$9 = r.Mul(r, prime); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			i = i + (1) >> 0;
		$s = 7; continue;
		case 8:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: PrivateKey.ptr.prototype.Precompute, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, i, prime, priv, r, values, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s};return $f;
	};
	PrivateKey.prototype.Precompute = function() { return this.$val.Precompute(); };
	decrypt = function(random, priv, c) {
		var {_i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tuple, bigE, c, cCopy, err, i, ir, m, m2, ok, prime, priv, r, random, rpowe, values, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {random, priv, c});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = ptrType$1.nil;
		err = $ifaceNil;
		if (priv.Primes.$length <= 2) {
			boring.Unreachable();
		}
		if (c.Cmp(priv.PublicKey.N) > 0) {
			err = $pkg.ErrDecryption;
			$s = -1; return [m, err];
		}
		if (priv.PublicKey.N.Sign() === 0) {
			_tmp = ptrType$1.nil;
			_tmp$1 = $pkg.ErrDecryption;
			m = _tmp;
			err = _tmp$1;
			$s = -1; return [m, err];
		}
		ir = ptrType$1.nil;
		/* */ if (!($interfaceIsEqual(random, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(random, $ifaceNil))) { */ case 1:
			$r = randutil.MaybeReadByte(random); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			r = ptrType$1.nil;
			ir = new big.Int.ptr(false, big.nat.nil);
			/* while (true) { */ case 4:
				_r = rand.Int(random, priv.PublicKey.N); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				r = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [m, err];
				}
				if (r.Cmp(bigZero) === 0) {
					r = bigOne;
				}
				_r$1 = ir.ModInverse(r, priv.PublicKey.N); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ok = _r$1;
				if (!(ok === ptrType$1.nil)) {
					/* break; */ $s = 5; continue;
				}
			$s = 4; continue;
			case 5:
			bigE = big.NewInt((new $Int64(0, priv.PublicKey.E)));
			_r$2 = new big.Int.ptr(false, big.nat.nil).Exp(r, bigE, priv.PublicKey.N); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			rpowe = _r$2;
			cCopy = new big.Int.ptr(false, big.nat.nil).Set(c);
			_r$3 = cCopy.Mul(cCopy, rpowe); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = cCopy.Mod(cCopy, priv.PublicKey.N); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			c = cCopy;
		/* } */ case 2:
		/* */ if (priv.Precomputed.Dp === ptrType$1.nil) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (priv.Precomputed.Dp === ptrType$1.nil) { */ case 11:
			_r$5 = new big.Int.ptr(false, big.nat.nil).Exp(c, priv.D, priv.PublicKey.N); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			m = _r$5;
			$s = 13; continue;
		/* } else { */ case 12:
			_r$6 = new big.Int.ptr(false, big.nat.nil).Exp(c, priv.Precomputed.Dp, (x = priv.Primes, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			m = _r$6;
			_r$7 = new big.Int.ptr(false, big.nat.nil).Exp(c, priv.Precomputed.Dq, (x$1 = priv.Primes, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1]))); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			m2 = _r$7;
			_r$8 = m.Sub(m, m2); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			/* */ if (m.Sign() < 0) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (m.Sign() < 0) { */ case 18:
				_r$9 = m.Add(m, (x$2 = priv.Primes, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 19:
			_r$10 = m.Mul(m, priv.Precomputed.Qinv); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = m.Mod(m, (x$3 = priv.Primes, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]))); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			_r$12 = m.Mul(m, (x$4 = priv.Primes, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1]))); /* */ $s = 23; case 23: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			_r$13 = m.Add(m, m2); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
			_ref = priv.Precomputed.CRTValues;
			_i = 0;
			/* while (true) { */ case 25:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 26; continue; }
				i = _i;
				values = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), CRTValue);
				prime = (x$5 = priv.Primes, x$6 = 2 + i >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
				_r$14 = m2.Exp(c, values.Exp, prime); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
				_r$15 = m2.Sub(m2, m); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				_r$16 = m2.Mul(m2, values.Coeff); /* */ $s = 29; case 29: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_r$16;
				_r$17 = m2.Mod(m2, prime); /* */ $s = 30; case 30: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				/* */ if (m2.Sign() < 0) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (m2.Sign() < 0) { */ case 31:
					_r$18 = m2.Add(m2, prime); /* */ $s = 33; case 33: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
				/* } */ case 32:
				_r$19 = m2.Mul(m2, values.R); /* */ $s = 34; case 34: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
				_r$20 = m.Add(m, m2); /* */ $s = 35; case 35: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
				_i++;
			$s = 25; continue;
			case 26:
		/* } */ case 13:
		/* */ if (!(ir === ptrType$1.nil)) { $s = 36; continue; }
		/* */ $s = 37; continue;
		/* if (!(ir === ptrType$1.nil)) { */ case 36:
			_r$21 = m.Mul(m, ir); /* */ $s = 38; case 38: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$21;
			_r$22 = m.Mod(m, priv.PublicKey.N); /* */ $s = 39; case 39: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$22;
		/* } */ case 37:
		$s = -1; return [m, err];
		/* */ } return; } var $f = {$blk: decrypt, $c: true, $r, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tuple, bigE, c, cCopy, err, i, ir, m, m2, ok, prime, priv, r, random, rpowe, values, x, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	decryptAndCheck = function(random, priv, c) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, check, err, m, priv, random, $s, $r, $c} = $restore(this, {random, priv, c});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = ptrType$1.nil;
		err = $ifaceNil;
		_r = decrypt(random, priv, c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err;
			m = _tmp;
			err = _tmp$1;
			$s = -1; return [m, err];
		}
		_r$1 = encrypt(new big.Int.ptr(false, big.nat.nil), priv.PublicKey, m); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		check = _r$1;
		if (!((c.Cmp(check) === 0))) {
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = errors.New("rsa: internal error");
			m = _tmp$2;
			err = _tmp$3;
			$s = -1; return [m, err];
		}
		_tmp$4 = m;
		_tmp$5 = $ifaceNil;
		m = _tmp$4;
		err = _tmp$5;
		$s = -1; return [m, err];
		/* */ } return; } var $f = {$blk: decryptAndCheck, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, check, err, m, priv, random, $s};return $f;
	};
	DecryptOAEP = function(hash$1, random, priv, ciphertext, label) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, _v, bkey, c, ciphertext, db, em, equals0, equals1, err, err$1, err$2, firstByteIsZero, hash$1, i, index, invalid, k, lHash, lHash2, lHash2Good, label, lookingForIndex, m, out, priv, random, rest, seed, $s, $r, $c} = $restore(this, {hash$1, random, priv, ciphertext, label});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		k = priv.PublicKey.Size();
		if (ciphertext.$length > k) { _v = true; $s = 3; continue s; }
		_r = hash$1.Size(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = k < (($imul(_r, 2)) + 2 >> 0); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return [sliceType.nil, $pkg.ErrDecryption];
		/* } */ case 2:
		if (false) {
			_tuple = boringPrivateKey(priv);
			bkey = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			_tuple$1 = boring.DecryptRSAOAEP(hash$1, bkey, ciphertext, label);
			out = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, $pkg.ErrDecryption];
			}
			$s = -1; return [out, $ifaceNil];
		}
		c = new big.Int.ptr(false, big.nat.nil).SetBytes(ciphertext);
		_r$1 = decrypt(random, priv, c); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		m = _tuple$2[0];
		err$2 = _tuple$2[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err$2];
		}
		_r$2 = hash$1.Write(label); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = hash$1.Sum(sliceType.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		lHash = _r$3;
		$r = hash$1.Reset(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		em = m.FillBytes($makeSlice(sliceType, k));
		firstByteIsZero = subtle.ConstantTimeByteEq((0 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 0]), 0);
		_r$4 = hash$1.Size(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		seed = $subslice(em, 1, (_r$4 + 1 >> 0));
		_r$5 = hash$1.Size(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		db = $subslice(em, (_r$5 + 1 >> 0));
		$r = mgf1XOR(seed, hash$1, db); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mgf1XOR(db, hash$1, seed); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$6 = hash$1.Size(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		lHash2 = $subslice(db, 0, _r$6);
		lHash2Good = subtle.ConstantTimeCompare(lHash, lHash2);
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		lookingForIndex = _tmp;
		index = _tmp$1;
		invalid = _tmp$2;
		lookingForIndex = 1;
		_r$7 = hash$1.Size(); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		rest = $subslice(db, _r$7);
		i = 0;
		while (true) {
			if (!(i < rest.$length)) { break; }
			equals0 = subtle.ConstantTimeByteEq(((i < 0 || i >= rest.$length) ? ($throwRuntimeError("index out of range"), undefined) : rest.$array[rest.$offset + i]), 0);
			equals1 = subtle.ConstantTimeByteEq(((i < 0 || i >= rest.$length) ? ($throwRuntimeError("index out of range"), undefined) : rest.$array[rest.$offset + i]), 1);
			index = subtle.ConstantTimeSelect(lookingForIndex & equals1, i, index);
			lookingForIndex = subtle.ConstantTimeSelect(equals1, 0, lookingForIndex);
			invalid = subtle.ConstantTimeSelect((lookingForIndex & ~equals0) >> 0, 1, invalid);
			i = i + (1) >> 0;
		}
		if (!(((((((firstByteIsZero & lHash2Good) & ~invalid) >> 0) & ~lookingForIndex) >> 0) === 1))) {
			$s = -1; return [sliceType.nil, $pkg.ErrDecryption];
		}
		$s = -1; return [$subslice(rest, (index + 1 >> 0)), $ifaceNil];
		/* */ } return; } var $f = {$blk: DecryptOAEP, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, _v, bkey, c, ciphertext, db, em, equals0, equals1, err, err$1, err$2, firstByteIsZero, hash$1, i, index, invalid, k, lHash, lHash2, lHash2Good, label, lookingForIndex, m, out, priv, random, rest, seed, $s};return $f;
	};
	$pkg.DecryptOAEP = DecryptOAEP;
	emsaPSSEncode = function(mHash, emBits, salt, hash$1) {
		var {_q, _r, _r$1, _r$2, _r$3, _r$4, db, em, emBits, emLen, h, hLen, hash$1, mHash, prefix, psLen, sLen, salt, x, y, $s, $r, $c} = $restore(this, {mHash, emBits, salt, hash$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = hash$1.Size(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hLen = _r;
		sLen = salt.$length;
		emLen = (_q = ((emBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (!((mHash.$length === hLen))) {
			$s = -1; return [sliceType.nil, errors.New("crypto/rsa: input must be hashed with given hash")];
		}
		if (emLen < ((hLen + sLen >> 0) + 2 >> 0)) {
			$s = -1; return [sliceType.nil, errors.New("crypto/rsa: key size too small for PSS signature")];
		}
		em = $makeSlice(sliceType, emLen);
		psLen = ((emLen - sLen >> 0) - hLen >> 0) - 2 >> 0;
		db = $subslice(em, 0, ((psLen + 1 >> 0) + sLen >> 0));
		h = $subslice(em, ((psLen + 1 >> 0) + sLen >> 0), (emLen - 1 >> 0));
		prefix = arrayType$1.zero();
		_r$1 = hash$1.Write(new sliceType(prefix)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = hash$1.Write(mHash); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = hash$1.Write(salt); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = hash$1.Sum($subslice(h, 0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		h = _r$4;
		$r = hash$1.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		((psLen < 0 || psLen >= db.$length) ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + psLen] = 1);
		$copySlice($subslice(db, (psLen + 1 >> 0)), salt);
		$r = mgf1XOR(db, hash$1, h); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(0 >= db.$length ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + 0] = (((0 >= db.$length ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + 0]) & (((y = ((($imul(8, emLen)) - emBits >> 0)), y < 32 ? (255 >>> y) : 0) << 24 >>> 24))) >>> 0));
		(x = emLen - 1 >> 0, ((x < 0 || x >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + x] = 188));
		$s = -1; return [em, $ifaceNil];
		/* */ } return; } var $f = {$blk: emsaPSSEncode, $c: true, $r, _q, _r, _r$1, _r$2, _r$3, _r$4, db, em, emBits, emLen, h, hLen, hash$1, mHash, prefix, psLen, sLen, salt, x, y, $s};return $f;
	};
	emsaPSSVerify = function(mHash, em, emBits, sLen, hash$1) {
		var {_i, _q, _r, _r$1, _r$2, _r$3, _r$4, _ref, bitMask, db, e, em, emBits, emLen, h, h0, hLen, hash$1, mHash, prefix, psLen, psLen$1, sLen, salt, x, y, $s, $r, $c} = $restore(this, {mHash, em, emBits, sLen, hash$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = hash$1.Size(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hLen = _r;
		if (sLen === -1) {
			sLen = hLen;
		}
		emLen = (_q = ((emBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (!((emLen === em.$length))) {
			$s = -1; return errors.New("rsa: internal error: inconsistent length");
		}
		if (!((hLen === mHash.$length))) {
			$s = -1; return $pkg.ErrVerification;
		}
		if (emLen < ((hLen + sLen >> 0) + 2 >> 0)) {
			$s = -1; return $pkg.ErrVerification;
		}
		if (!(((x = emLen - 1 >> 0, ((x < 0 || x >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + x])) === 188))) {
			$s = -1; return $pkg.ErrVerification;
		}
		db = $subslice(em, 0, ((emLen - hLen >> 0) - 1 >> 0));
		h = $subslice(em, ((emLen - hLen >> 0) - 1 >> 0), (emLen - 1 >> 0));
		bitMask = (y = ((($imul(8, emLen)) - emBits >> 0)), y < 32 ? (255 >>> y) : 0) << 24 >>> 24;
		if (!(((((0 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 0]) & (~bitMask << 24 >>> 24)) >>> 0) === 0))) {
			$s = -1; return $pkg.ErrVerification;
		}
		$r = mgf1XOR(db, hash$1, h); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(0 >= db.$length ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + 0] = (((0 >= db.$length ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + 0]) & (bitMask)) >>> 0));
		if (sLen === 0) {
			psLen = bytes.IndexByte(db, 1);
			if (psLen < 0) {
				$s = -1; return $pkg.ErrVerification;
			}
			sLen = (db.$length - psLen >> 0) - 1 >> 0;
		}
		psLen$1 = ((emLen - hLen >> 0) - sLen >> 0) - 2 >> 0;
		_ref = $subslice(db, 0, psLen$1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((e === 0))) {
				$s = -1; return $pkg.ErrVerification;
			}
			_i++;
		}
		if (!((((psLen$1 < 0 || psLen$1 >= db.$length) ? ($throwRuntimeError("index out of range"), undefined) : db.$array[db.$offset + psLen$1]) === 1))) {
			$s = -1; return $pkg.ErrVerification;
		}
		salt = $subslice(db, (db.$length - sLen >> 0));
		prefix = arrayType$1.zero();
		_r$1 = hash$1.Write(new sliceType(prefix)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = hash$1.Write(mHash); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = hash$1.Write(salt); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = hash$1.Sum(sliceType.nil); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		h0 = _r$4;
		if (!bytes.Equal(h0, h)) {
			$s = -1; return $pkg.ErrVerification;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: emsaPSSVerify, $c: true, $r, _i, _q, _r, _r$1, _r$2, _r$3, _r$4, _ref, bitMask, db, e, em, emBits, emLen, h, h0, hLen, hash$1, mHash, prefix, psLen, psLen$1, sLen, salt, x, y, $s};return $f;
	};
	signPSSWithSalt = function(rand$1, priv, hash$1, hashed, salt) {
		var {_arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, bkey, c, em, emBits, err, err$1, hash$1, hashed, m, priv, rand$1, s, s$1, salt, $s, $r, $c} = $restore(this, {rand$1, priv, hash$1, hashed, salt});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		emBits = priv.PublicKey.N.BitLen() - 1 >> 0;
		_arg = hashed;
		_arg$1 = emBits;
		_arg$2 = salt;
		_r = new crypto.Hash(hash$1).New(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$3 = _r;
		_r$1 = emsaPSSEncode(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		em = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		if (false) {
			_tuple$1 = boringPrivateKey(priv);
			bkey = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			_tuple$2 = boring.DecryptRSANoPadding(bkey, em);
			s = _tuple$2[0];
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			$s = -1; return [s, $ifaceNil];
		}
		m = new big.Int.ptr(false, big.nat.nil).SetBytes(em);
		_r$2 = decryptAndCheck(rand$1, priv, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$3 = _r$2;
		c = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		s$1 = $makeSlice(sliceType, priv.PublicKey.Size());
		$s = -1; return [c.FillBytes(s$1), $ifaceNil];
		/* */ } return; } var $f = {$blk: signPSSWithSalt, $c: true, $r, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, bkey, c, em, emBits, err, err$1, hash$1, hashed, m, priv, rand$1, s, s$1, salt, $s};return $f;
	};
	PSSOptions.ptr.prototype.HashFunc = function() {
		var opts;
		opts = this;
		return opts.Hash;
	};
	PSSOptions.prototype.HashFunc = function() { return this.$val.HashFunc(); };
	PSSOptions.ptr.prototype.saltLength = function() {
		var opts;
		opts = this;
		if (opts === ptrType$3.nil) {
			return 0;
		}
		return opts.SaltLength;
	};
	PSSOptions.prototype.saltLength = function() { return this.$val.saltLength(); };
	SignPSS = function(rand$1, priv, hash$1, digest, opts) {
		var {$24r, _1, _q, _r, _r$1, _tuple, _tuple$1, bkey, digest, err, err$1, hash$1, opts, priv, rand$1, salt, saltLength, $s, $r, $c} = $restore(this, {rand$1, priv, hash$1, digest, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(opts === ptrType$3.nil) && !((opts.Hash === 0))) {
			hash$1 = opts.Hash;
		}
		saltLength = opts.saltLength();
		_1 = saltLength;
		if (_1 === (0)) {
			saltLength = ((_q = (((priv.PublicKey.N.BitLen() - 1 >> 0) + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 2 >> 0) - new crypto.Hash(hash$1).Size() >> 0;
		} else if (_1 === (-1)) {
			saltLength = new crypto.Hash(hash$1).Size();
		}
		if (false && $interfaceIsEqual(rand$1, new boring.randReader(0))) {
			_tuple = boringPrivateKey(priv);
			bkey = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err];
			}
			$s = -1; return boring.SignRSAPSS(bkey, hash$1, digest, saltLength);
		}
		boring.UnreachableExceptTests();
		salt = $makeSlice(sliceType, saltLength);
		_r = io.ReadFull(rand$1, salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err$1];
		}
		_r$1 = signPSSWithSalt(rand$1, priv, hash$1, digest, salt); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: SignPSS, $c: true, $r, $24r, _1, _q, _r, _r$1, _tuple, _tuple$1, bkey, digest, err, err$1, hash$1, opts, priv, rand$1, salt, saltLength, $s};return $f;
	};
	$pkg.SignPSS = SignPSS;
	VerifyPSS = function(pub, hash$1, digest, sig, opts) {
		var {$24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _q, _r, _r$1, _r$2, _tuple, bkey, digest, em, emBits, emLen, err, err$1, hash$1, m, opts, pub, s, sig, $s, $r, $c} = $restore(this, {pub, hash$1, digest, sig, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (false) {
			_tuple = boringPublicKey(pub);
			bkey = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			err$1 = boring.VerifyRSAPSS(bkey, hash$1, digest, sig, opts.saltLength());
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return $pkg.ErrVerification;
			}
			$s = -1; return $ifaceNil;
		}
		if (!((sig.$length === pub.Size()))) {
			$s = -1; return $pkg.ErrVerification;
		}
		s = new big.Int.ptr(false, big.nat.nil).SetBytes(sig);
		_r = encrypt(new big.Int.ptr(false, big.nat.nil), pub, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		emBits = pub.N.BitLen() - 1 >> 0;
		emLen = (_q = ((emBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (m.BitLen() > ($imul(emLen, 8))) {
			$s = -1; return $pkg.ErrVerification;
		}
		em = m.FillBytes($makeSlice(sliceType, emLen));
		_arg = digest;
		_arg$1 = em;
		_arg$2 = emBits;
		_arg$3 = opts.saltLength();
		_r$1 = new crypto.Hash(hash$1).New(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$4 = _r$1;
		_r$2 = emsaPSSVerify(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: VerifyPSS, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _q, _r, _r$1, _r$2, _tuple, bkey, digest, em, emBits, emLen, err, err$1, hash$1, m, opts, pub, s, sig, $s};return $f;
	};
	$pkg.VerifyPSS = VerifyPSS;
	DecryptPKCS1v15 = function(random, priv, ciphertext) {
		var {_r, _tuple, _tuple$1, _tuple$2, bkey, ciphertext, err, err$1, err$2, index, out, out$1, priv, random, valid, $s, $r, $c} = $restore(this, {random, priv, ciphertext});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		if (false) {
			_tuple = boringPrivateKey(priv);
			bkey = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			_tuple$1 = boring.DecryptRSAPKCS1(bkey, ciphertext);
			out = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, $pkg.ErrDecryption];
			}
			$s = -1; return [out, $ifaceNil];
		}
		_r = decryptPKCS1v15(random, priv, ciphertext); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$2 = _r;
		valid = _tuple$2[0];
		out$1 = _tuple$2[1];
		index = _tuple$2[2];
		err$2 = _tuple$2[3];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err$2];
		}
		if (valid === 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrDecryption];
		}
		$s = -1; return [$subslice(out$1, index), $ifaceNil];
		/* */ } return; } var $f = {$blk: DecryptPKCS1v15, $c: true, $r, _r, _tuple, _tuple$1, _tuple$2, bkey, ciphertext, err, err$1, err$2, index, out, out$1, priv, random, valid, $s};return $f;
	};
	$pkg.DecryptPKCS1v15 = DecryptPKCS1v15;
	DecryptPKCS1v15SessionKey = function(random, priv, ciphertext, key) {
		var {_r, _tuple, ciphertext, em, err, err$1, index, k, key, priv, random, valid, $s, $r, $c} = $restore(this, {random, priv, ciphertext, key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		k = priv.PublicKey.Size();
		if ((k - (((key.$length + 3 >> 0) + 8 >> 0)) >> 0) < 0) {
			$s = -1; return $pkg.ErrDecryption;
		}
		_r = decryptPKCS1v15(random, priv, ciphertext); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		valid = _tuple[0];
		em = _tuple[1];
		index = _tuple[2];
		err$1 = _tuple[3];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		if (!((em.$length === k))) {
			$s = -1; return $pkg.ErrDecryption;
		}
		valid = valid & (subtle.ConstantTimeEq((((em.$length - index >> 0) >> 0)), ((key.$length >> 0))));
		subtle.ConstantTimeCopy(valid, key, $subslice(em, (em.$length - key.$length >> 0)));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: DecryptPKCS1v15SessionKey, $c: true, $r, _r, _tuple, ciphertext, em, err, err$1, index, k, key, priv, random, valid, $s};return $f;
	};
	$pkg.DecryptPKCS1v15SessionKey = DecryptPKCS1v15SessionKey;
	decryptPKCS1v15 = function(random, priv, ciphertext) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, bkey, c, ciphertext, em, equals0, err, firstByteIsZero, i, index, k, lookingForIndex, m, priv, random, secondByteIsTwo, valid, validPS, $s, $r, $c} = $restore(this, {random, priv, ciphertext});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		valid = 0;
		em = sliceType.nil;
		index = 0;
		err = $ifaceNil;
		k = priv.PublicKey.Size();
		if (k < 11) {
			err = $pkg.ErrDecryption;
			$s = -1; return [valid, em, index, err];
		}
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			bkey = ptrType$7.nil;
			_tuple = boringPrivateKey(priv);
			bkey = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [valid, em, index, err];
			}
			_tuple$1 = boring.DecryptRSANoPadding(bkey, ciphertext);
			em = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [valid, em, index, err];
			}
			$s = 3; continue;
		/* } else { */ case 2:
			c = new big.Int.ptr(false, big.nat.nil).SetBytes(ciphertext);
			m = ptrType$1.nil;
			_r = decrypt(random, priv, c); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			m = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [valid, em, index, err];
			}
			em = m.FillBytes($makeSlice(sliceType, k));
		/* } */ case 3:
		firstByteIsZero = subtle.ConstantTimeByteEq((0 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 0]), 0);
		secondByteIsTwo = subtle.ConstantTimeByteEq((1 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 1]), 2);
		lookingForIndex = 1;
		i = 2;
		while (true) {
			if (!(i < em.$length)) { break; }
			equals0 = subtle.ConstantTimeByteEq(((i < 0 || i >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + i]), 0);
			index = subtle.ConstantTimeSelect(lookingForIndex & equals0, i, index);
			lookingForIndex = subtle.ConstantTimeSelect(equals0, 0, lookingForIndex);
			i = i + (1) >> 0;
		}
		validPS = subtle.ConstantTimeLessOrEq(10, index);
		valid = ((firstByteIsZero & secondByteIsTwo) & (((~lookingForIndex >> 0) & 1))) & validPS;
		index = subtle.ConstantTimeSelect(valid, index + 1 >> 0, 0);
		_tmp = valid;
		_tmp$1 = em;
		_tmp$2 = index;
		_tmp$3 = $ifaceNil;
		valid = _tmp;
		em = _tmp$1;
		index = _tmp$2;
		err = _tmp$3;
		$s = -1; return [valid, em, index, err];
		/* */ } return; } var $f = {$blk: decryptPKCS1v15, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, bkey, c, ciphertext, em, equals0, err, firstByteIsZero, i, index, k, lookingForIndex, m, priv, random, secondByteIsTwo, valid, validPS, $s};return $f;
	};
	SignPKCS1v15 = function(random, priv, hash$1, hashed) {
		var {_r, _tuple, _tuple$1, _tuple$2, bkey, c, em, err, err$1, hash$1, hashLen, hashed, i, k, m, prefix, priv, random, tLen, $s, $r, $c} = $restore(this, {random, priv, hash$1, hashed});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = pkcs1v15HashInfo(hash$1, hashed.$length);
		hashLen = _tuple[0];
		prefix = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		tLen = prefix.$length + hashLen >> 0;
		k = priv.PublicKey.Size();
		if (k < (tLen + 11 >> 0)) {
			$s = -1; return [sliceType.nil, $pkg.ErrMessageTooLong];
		}
		if (false) {
			_tuple$1 = boringPrivateKey(priv);
			bkey = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			$s = -1; return boring.SignRSAPKCS1v15(bkey, hash$1, hashed);
		}
		em = $makeSlice(sliceType, k);
		(1 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 1] = 1);
		i = 2;
		while (true) {
			if (!(i < ((k - tLen >> 0) - 1 >> 0))) { break; }
			((i < 0 || i >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + i] = 255);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix);
		$copySlice($subslice(em, (k - hashLen >> 0), k), hashed);
		m = new big.Int.ptr(false, big.nat.nil).SetBytes(em);
		_r = decryptAndCheck(random, priv, m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$2 = _r;
		c = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		$s = -1; return [c.FillBytes(em), $ifaceNil];
		/* */ } return; } var $f = {$blk: SignPKCS1v15, $c: true, $r, _r, _tuple, _tuple$1, _tuple$2, bkey, c, em, err, err$1, hash$1, hashLen, hashed, i, k, m, prefix, priv, random, tLen, $s};return $f;
	};
	$pkg.SignPKCS1v15 = SignPKCS1v15;
	VerifyPKCS1v15 = function(pub, hash$1, hashed, sig) {
		var {_r, _tuple, _tuple$1, bkey, c, em, err, err$1, err$2, hash$1, hashLen, hashed, i, k, m, ok, prefix, pub, sig, tLen, x, $s, $r, $c} = $restore(this, {pub, hash$1, hashed, sig});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (false) {
			_tuple = boringPublicKey(pub);
			bkey = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			err$1 = boring.VerifyRSAPKCS1v15(bkey, hash$1, hashed, sig);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return $pkg.ErrVerification;
			}
			$s = -1; return $ifaceNil;
		}
		_tuple$1 = pkcs1v15HashInfo(hash$1, hashed.$length);
		hashLen = _tuple$1[0];
		prefix = _tuple$1[1];
		err$2 = _tuple$1[2];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return err$2;
		}
		tLen = prefix.$length + hashLen >> 0;
		k = pub.Size();
		if (k < (tLen + 11 >> 0)) {
			$s = -1; return $pkg.ErrVerification;
		}
		if (!((k === sig.$length))) {
			$s = -1; return $pkg.ErrVerification;
		}
		c = new big.Int.ptr(false, big.nat.nil).SetBytes(sig);
		_r = encrypt(new big.Int.ptr(false, big.nat.nil), pub, c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		em = m.FillBytes($makeSlice(sliceType, k));
		ok = subtle.ConstantTimeByteEq((0 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 0]), 0);
		ok = ok & (subtle.ConstantTimeByteEq((1 >= em.$length ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + 1]), 1));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - hashLen >> 0), k), hashed));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix));
		ok = ok & (subtle.ConstantTimeByteEq((x = (k - tLen >> 0) - 1 >> 0, ((x < 0 || x >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + x])), 0));
		i = 2;
		while (true) {
			if (!(i < ((k - tLen >> 0) - 1 >> 0))) { break; }
			ok = ok & (subtle.ConstantTimeByteEq(((i < 0 || i >= em.$length) ? ($throwRuntimeError("index out of range"), undefined) : em.$array[em.$offset + i]), 255));
			i = i + (1) >> 0;
		}
		if (!((ok === 1))) {
			$s = -1; return $pkg.ErrVerification;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: VerifyPKCS1v15, $c: true, $r, _r, _tuple, _tuple$1, bkey, c, em, err, err$1, err$2, hash$1, hashLen, hashed, i, k, m, ok, prefix, pub, sig, tLen, x, $s};return $f;
	};
	$pkg.VerifyPKCS1v15 = VerifyPKCS1v15;
	pkcs1v15HashInfo = function(hash$1, inLen) {
		var _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, err, hash$1, hashLen, inLen, ok, prefix;
		hashLen = 0;
		prefix = sliceType.nil;
		err = $ifaceNil;
		if (hash$1 === 0) {
			_tmp = inLen;
			_tmp$1 = sliceType.nil;
			_tmp$2 = $ifaceNil;
			hashLen = _tmp;
			prefix = _tmp$1;
			err = _tmp$2;
			return [hashLen, prefix, err];
		}
		hashLen = new crypto.Hash(hash$1).Size();
		if (!((inLen === hashLen))) {
			_tmp$3 = 0;
			_tmp$4 = sliceType.nil;
			_tmp$5 = errors.New("crypto/rsa: input must be hashed message");
			hashLen = _tmp$3;
			prefix = _tmp$4;
			err = _tmp$5;
			return [hashLen, prefix, err];
		}
		_tuple = (_entry = $mapIndex(hashPrefixes,crypto.Hash.keyFor(hash$1)), _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]);
		prefix = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$6 = 0;
			_tmp$7 = sliceType.nil;
			_tmp$8 = errors.New("crypto/rsa: unsupported hash function");
			hashLen = _tmp$6;
			prefix = _tmp$7;
			err = _tmp$8;
			return [hashLen, prefix, err];
		}
		return [hashLen, prefix, err];
	};
	boringPublicKey = function(param) {
		var param;
		$panic(new $String("boringcrypto: not available"));
	};
	boringPrivateKey = function(param) {
		var param;
		$panic(new $String("boringcrypto: not available"));
	};
	ptrType.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PublicKey], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Public", name: "Public", pkg: "", typ: $funcType([], [crypto.PublicKey], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PrivateKey], [$Bool], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([io.Reader, sliceType, crypto.SignerOpts], [sliceType, $error], false)}, {prop: "Decrypt", name: "Decrypt", pkg: "", typ: $funcType([io.Reader, sliceType, crypto.DecrypterOpts], [sliceType, $error], false)}, {prop: "Validate", name: "Validate", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Precompute", name: "Precompute", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [crypto.Hash], false)}, {prop: "saltLength", name: "saltLength", pkg: "crypto/rsa", typ: $funcType([], [$Int], false)}];
	PublicKey.init("", [{prop: "N", name: "N", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "E", name: "E", embedded: false, exported: true, typ: $Int, tag: ""}]);
	OAEPOptions.init("", [{prop: "Hash", name: "Hash", embedded: false, exported: true, typ: crypto.Hash, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	PrivateKey.init("", [{prop: "PublicKey", name: "PublicKey", embedded: true, exported: true, typ: PublicKey, tag: ""}, {prop: "D", name: "D", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Primes", name: "Primes", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Precomputed", name: "Precomputed", embedded: false, exported: true, typ: PrecomputedValues, tag: ""}]);
	PrecomputedValues.init("", [{prop: "Dp", name: "Dp", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Dq", name: "Dq", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Qinv", name: "Qinv", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "CRTValues", name: "CRTValues", embedded: false, exported: true, typ: sliceType$2, tag: ""}]);
	CRTValue.init("", [{prop: "Exp", name: "Exp", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Coeff", name: "Coeff", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "R", name: "R", embedded: false, exported: true, typ: ptrType$1, tag: ""}]);
	PSSOptions.init("", [{prop: "SaltLength", name: "SaltLength", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Hash", name: "Hash", embedded: false, exported: true, typ: crypto.Hash, tag: ""}]);
	PKCS1v15DecryptOptions.init("", [{prop: "SessionKeyLen", name: "SessionKeyLen", embedded: false, exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = boring.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bbig.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = randutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bigZero = big.NewInt(new $Int64(0, 0));
		bigOne = big.NewInt(new $Int64(0, 1));
		errPublicModulus = errors.New("crypto/rsa: missing public modulus");
		errPublicExponentSmall = errors.New("crypto/rsa: public exponent too small");
		errPublicExponentLarge = errors.New("crypto/rsa: public exponent too large");
		$pkg.ErrMessageTooLong = errors.New("crypto/rsa: message too long for RSA public key size");
		$pkg.ErrDecryption = errors.New("crypto/rsa: decryption error");
		$pkg.ErrVerification = errors.New("crypto/rsa: verification error");
		hashPrefixes = $makeMap(crypto.Hash.keyFor, [{ k: 2, v: new sliceType([48, 32, 48, 12, 6, 8, 42, 134, 72, 134, 247, 13, 2, 5, 5, 0, 4, 16]) }, { k: 3, v: new sliceType([48, 33, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 4, 20]) }, { k: 4, v: new sliceType([48, 45, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 4, 5, 0, 4, 28]) }, { k: 5, v: new sliceType([48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32]) }, { k: 6, v: new sliceType([48, 65, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 4, 48]) }, { k: 7, v: new sliceType([48, 81, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 4, 64]) }, { k: 8, v: new sliceType([]) }, { k: 9, v: new sliceType([48, 32, 48, 8, 6, 6, 40, 207, 6, 3, 0, 49, 4, 20]) }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/aes"] = (function() {
	var $pkg = {}, $init, cipher, boring, subtle, binary, strconv;
	cipher = $packages["crypto/cipher"];
	boring = $packages["crypto/internal/boring"];
	subtle = $packages["crypto/internal/subtle"];
	binary = $packages["encoding/binary"];
	strconv = $packages["strconv"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cipher.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = boring.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/des"] = (function() {
	var $pkg = {}, $init, cipher, subtle, binary, strconv, sync;
	cipher = $packages["crypto/cipher"];
	subtle = $packages["crypto/internal/subtle"];
	binary = $packages["encoding/binary"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cipher.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/dsa"] = (function() {
	var $pkg = {}, $init, randutil, errors, io, big, Parameters, PublicKey, ptrType;
	randutil = $packages["crypto/internal/randutil"];
	errors = $packages["errors"];
	io = $packages["io"];
	big = $packages["math/big"];
	Parameters = $pkg.Parameters = $newType(0, $kindStruct, "dsa.Parameters", true, "crypto/dsa", true, function(P_, Q_, G_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.P = ptrType.nil;
			this.Q = ptrType.nil;
			this.G = ptrType.nil;
			return;
		}
		this.P = P_;
		this.Q = Q_;
		this.G = G_;
	});
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "dsa.PublicKey", true, "crypto/dsa", true, function(Parameters_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Parameters = new Parameters.ptr(ptrType.nil, ptrType.nil, ptrType.nil);
			this.Y = ptrType.nil;
			return;
		}
		this.Parameters = Parameters_;
		this.Y = Y_;
	});
	ptrType = $ptrType(big.Int);
	Parameters.init("", [{prop: "P", name: "P", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "Q", name: "Q", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "G", name: "G", embedded: false, exported: true, typ: ptrType, tag: ""}]);
	PublicKey.init("", [{prop: "Parameters", name: "Parameters", embedded: true, exported: true, typ: Parameters, tag: ""}, {prop: "Y", name: "Y", embedded: false, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = randutil.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidPublicKey = errors.New("crypto/dsa: invalid public key");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/nistec/fiat"] = (function() {
	var $pkg = {}, $init, subtle, errors, bits, p521Uint1, p521MontgomeryDomainFieldElement, P521Element, p384Uint1, p384MontgomeryDomainFieldElement, P384Element, p256Uint1, p256MontgomeryDomainFieldElement, P256Element, p224Uint1, p224MontgomeryDomainFieldElement, P224Element, arrayType, arrayType$1, arrayType$2, ptrType, arrayType$3, sliceType, ptrType$1, arrayType$4, ptrType$2, arrayType$5, ptrType$3, arrayType$6, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, p521ZeroEncoding, p521MinusOneEncoding, p384ZeroEncoding, p384MinusOneEncoding, p256ZeroEncoding, p256MinusOneEncoding, p224ZeroEncoding, p224MinusOneEncoding, p521CmovznzU64, p521Mul, p521Square, p521Add, p521Sub, p521SetOne, p521FromMontgomery, p521ToMontgomery, p521Selectznz, p521ToBytes, p521FromBytes, p521InvertEndianness, p384CmovznzU64, p384Mul, p384Square, p384Add, p384Sub, p384SetOne, p384FromMontgomery, p384ToMontgomery, p384Selectznz, p384ToBytes, p384FromBytes, p384InvertEndianness, p256CmovznzU64, p256Mul, p256Square, p256Add, p256Sub, p256SetOne, p256FromMontgomery, p256ToMontgomery, p256Selectznz, p256ToBytes, p256FromBytes, p256InvertEndianness, p224CmovznzU64, p224Mul, p224Square, p224Add, p224Sub, p224SetOne, p224FromMontgomery, p224ToMontgomery, p224Selectznz, p224ToBytes, p224FromBytes, p224InvertEndianness;
	subtle = $packages["crypto/subtle"];
	errors = $packages["errors"];
	bits = $packages["math/bits"];
	p521Uint1 = $pkg.p521Uint1 = $newType(8, $kindUint64, "fiat.p521Uint1", true, "crypto/internal/nistec/fiat", false, null);
	p521MontgomeryDomainFieldElement = $pkg.p521MontgomeryDomainFieldElement = $newType(72, $kindArray, "fiat.p521MontgomeryDomainFieldElement", true, "crypto/internal/nistec/fiat", false, null);
	P521Element = $pkg.P521Element = $newType(0, $kindStruct, "fiat.P521Element", true, "crypto/internal/nistec/fiat", true, function(x_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = arrayType.zero();
			return;
		}
		this.x = x_;
	});
	p384Uint1 = $pkg.p384Uint1 = $newType(8, $kindUint64, "fiat.p384Uint1", true, "crypto/internal/nistec/fiat", false, null);
	p384MontgomeryDomainFieldElement = $pkg.p384MontgomeryDomainFieldElement = $newType(48, $kindArray, "fiat.p384MontgomeryDomainFieldElement", true, "crypto/internal/nistec/fiat", false, null);
	P384Element = $pkg.P384Element = $newType(0, $kindStruct, "fiat.P384Element", true, "crypto/internal/nistec/fiat", true, function(x_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = arrayType$1.zero();
			return;
		}
		this.x = x_;
	});
	p256Uint1 = $pkg.p256Uint1 = $newType(8, $kindUint64, "fiat.p256Uint1", true, "crypto/internal/nistec/fiat", false, null);
	p256MontgomeryDomainFieldElement = $pkg.p256MontgomeryDomainFieldElement = $newType(32, $kindArray, "fiat.p256MontgomeryDomainFieldElement", true, "crypto/internal/nistec/fiat", false, null);
	P256Element = $pkg.P256Element = $newType(0, $kindStruct, "fiat.P256Element", true, "crypto/internal/nistec/fiat", true, function(x_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = arrayType$2.zero();
			return;
		}
		this.x = x_;
	});
	p224Uint1 = $pkg.p224Uint1 = $newType(8, $kindUint64, "fiat.p224Uint1", true, "crypto/internal/nistec/fiat", false, null);
	p224MontgomeryDomainFieldElement = $pkg.p224MontgomeryDomainFieldElement = $newType(32, $kindArray, "fiat.p224MontgomeryDomainFieldElement", true, "crypto/internal/nistec/fiat", false, null);
	P224Element = $pkg.P224Element = $newType(0, $kindStruct, "fiat.P224Element", true, "crypto/internal/nistec/fiat", true, function(x_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = arrayType$2.zero();
			return;
		}
		this.x = x_;
	});
	arrayType = $arrayType($Uint64, 9);
	arrayType$1 = $arrayType($Uint64, 6);
	arrayType$2 = $arrayType($Uint64, 4);
	ptrType = $ptrType($Uint64);
	arrayType$3 = $arrayType($Uint8, 66);
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(P521Element);
	arrayType$4 = $arrayType($Uint8, 48);
	ptrType$2 = $ptrType(P384Element);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(P256Element);
	arrayType$6 = $arrayType($Uint8, 28);
	ptrType$4 = $ptrType(P224Element);
	ptrType$5 = $ptrType(arrayType$3);
	ptrType$6 = $ptrType(arrayType$4);
	ptrType$7 = $ptrType(arrayType$5);
	ptrType$8 = $ptrType(arrayType$6);
	P521Element.ptr.prototype.Invert = function(x) {
		var e, s, s$1, s$2, s$3, s$4, s$5, s$6, s$7, s$8, t0, x, z;
		e = this;
		z = new P521Element.ptr(arrayType.zero()).Set(e);
		t0 = new P521Element.ptr(arrayType.zero());
		z.Square(x);
		z.Mul(x, z);
		t0.Square(z);
		s = 1;
		while (true) {
			if (!(s < 2)) { break; }
			t0.Square(t0);
			s = s + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$1 = 1;
		while (true) {
			if (!(s$1 < 4)) { break; }
			t0.Square(t0);
			s$1 = s$1 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$2 = 1;
		while (true) {
			if (!(s$2 < 8)) { break; }
			t0.Square(t0);
			s$2 = s$2 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$3 = 1;
		while (true) {
			if (!(s$3 < 16)) { break; }
			t0.Square(t0);
			s$3 = s$3 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$4 = 1;
		while (true) {
			if (!(s$4 < 32)) { break; }
			t0.Square(t0);
			s$4 = s$4 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		t0.Mul(x, t0);
		s$5 = 0;
		while (true) {
			if (!(s$5 < 64)) { break; }
			t0.Square(t0);
			s$5 = s$5 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		t0.Mul(x, t0);
		s$6 = 0;
		while (true) {
			if (!(s$6 < 129)) { break; }
			t0.Square(t0);
			s$6 = s$6 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		t0.Mul(x, t0);
		s$7 = 0;
		while (true) {
			if (!(s$7 < 259)) { break; }
			t0.Square(t0);
			s$7 = s$7 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$8 = 0;
		while (true) {
			if (!(s$8 < 2)) { break; }
			z.Square(z);
			s$8 = s$8 + (1) >> 0;
		}
		z.Mul(x, z);
		return e.Set(z);
	};
	P521Element.prototype.Invert = function(x) { return this.$val.Invert(x); };
	p521CmovznzU64 = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x, x$1, x$2, x1, x2;
		x1 = $mul64((new $Uint64(arg1.$high, arg1.$low)), new $Uint64(4294967295, 4294967295));
		x2 = (x = new $Uint64(x1.$high & arg3.$high, (x1.$low & arg3.$low) >>> 0), x$1 = (x$2 = new $Uint64(~x1.$high, ~x1.$low >>> 0), new $Uint64(x$2.$high & arg2.$high, (x$2.$low & arg2.$low) >>> 0)), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		out1.$set(x2);
	};
	p521Mul = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$222, _tuple$223, _tuple$224, _tuple$225, _tuple$226, _tuple$227, _tuple$228, _tuple$229, _tuple$23, _tuple$230, _tuple$231, _tuple$232, _tuple$233, _tuple$234, _tuple$235, _tuple$236, _tuple$237, _tuple$238, _tuple$239, _tuple$24, _tuple$240, _tuple$241, _tuple$242, _tuple$243, _tuple$244, _tuple$245, _tuple$246, _tuple$247, _tuple$248, _tuple$249, _tuple$25, _tuple$250, _tuple$251, _tuple$252, _tuple$253, _tuple$254, _tuple$255, _tuple$256, _tuple$257, _tuple$258, _tuple$259, _tuple$26, _tuple$260, _tuple$261, _tuple$262, _tuple$263, _tuple$264, _tuple$265, _tuple$266, _tuple$267, _tuple$268, _tuple$269, _tuple$27, _tuple$270, _tuple$271, _tuple$272, _tuple$273, _tuple$274, _tuple$275, _tuple$276, _tuple$277, _tuple$278, _tuple$279, _tuple$28, _tuple$280, _tuple$281, _tuple$282, _tuple$283, _tuple$284, _tuple$285, _tuple$286, _tuple$287, _tuple$288, _tuple$289, _tuple$29, _tuple$290, _tuple$291, _tuple$292, _tuple$293, _tuple$294, _tuple$295, _tuple$296, _tuple$297, _tuple$298, _tuple$299, _tuple$3, _tuple$30, _tuple$300, _tuple$301, _tuple$302, _tuple$303, _tuple$304, _tuple$305, _tuple$306, _tuple$307, _tuple$308, _tuple$309, _tuple$31, _tuple$310, _tuple$311, _tuple$312, _tuple$313, _tuple$314, _tuple$315, _tuple$316, _tuple$317, _tuple$318, _tuple$319, _tuple$32, _tuple$320, _tuple$321, _tuple$322, _tuple$323, _tuple$324, _tuple$325, _tuple$326, _tuple$327, _tuple$328, _tuple$329, _tuple$33, _tuple$330, _tuple$331, _tuple$332, _tuple$333, _tuple$334, _tuple$335, _tuple$336, _tuple$337, _tuple$338, _tuple$339, _tuple$34, _tuple$340, _tuple$341, _tuple$342, _tuple$343, _tuple$344, _tuple$345, _tuple$346, _tuple$347, _tuple$348, _tuple$349, _tuple$35, _tuple$350, _tuple$351, _tuple$352, _tuple$353, _tuple$354, _tuple$355, _tuple$356, _tuple$357, _tuple$358, _tuple$359, _tuple$36, _tuple$360, _tuple$361, _tuple$362, _tuple$363, _tuple$364, _tuple$365, _tuple$366, _tuple$367, _tuple$368, _tuple$369, _tuple$37, _tuple$370, _tuple$371, _tuple$372, _tuple$373, _tuple$374, _tuple$375, _tuple$376, _tuple$377, _tuple$378, _tuple$379, _tuple$38, _tuple$380, _tuple$381, _tuple$382, _tuple$383, _tuple$384, _tuple$385, _tuple$386, _tuple$387, _tuple$388, _tuple$389, _tuple$39, _tuple$390, _tuple$391, _tuple$392, _tuple$393, _tuple$394, _tuple$395, _tuple$396, _tuple$397, _tuple$398, _tuple$399, _tuple$4, _tuple$40, _tuple$400, _tuple$401, _tuple$402, _tuple$403, _tuple$404, _tuple$405, _tuple$406, _tuple$407, _tuple$408, _tuple$409, _tuple$41, _tuple$410, _tuple$411, _tuple$412, _tuple$413, _tuple$414, _tuple$415, _tuple$416, _tuple$417, _tuple$418, _tuple$419, _tuple$42, _tuple$420, _tuple$421, _tuple$422, _tuple$423, _tuple$424, _tuple$425, _tuple$426, _tuple$427, _tuple$428, _tuple$429, _tuple$43, _tuple$430, _tuple$431, _tuple$432, _tuple$433, _tuple$434, _tuple$435, _tuple$436, _tuple$437, _tuple$438, _tuple$439, _tuple$44, _tuple$440, _tuple$441, _tuple$442, _tuple$443, _tuple$444, _tuple$445, _tuple$446, _tuple$447, _tuple$448, _tuple$449, _tuple$45, _tuple$450, _tuple$451, _tuple$452, _tuple$453, _tuple$454, _tuple$455, _tuple$456, _tuple$457, _tuple$458, _tuple$459, _tuple$46, _tuple$460, _tuple$461, _tuple$462, _tuple$463, _tuple$464, _tuple$465, _tuple$466, _tuple$467, _tuple$468, _tuple$469, _tuple$47, _tuple$470, _tuple$471, _tuple$472, _tuple$473, _tuple$474, _tuple$475, _tuple$476, _tuple$477, _tuple$478, _tuple$479, _tuple$48, _tuple$480, _tuple$481, _tuple$482, _tuple$483, _tuple$484, _tuple$485, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, arg2, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$289, x$29, x$290, x$291, x$292, x$293, x$294, x$295, x$296, x$297, x$298, x$299, x$3, x$30, x$300, x$301, x$302, x$303, x$304, x$305, x$306, x$307, x$308, x$309, x$31, x$310, x$311, x$312, x$313, x$314, x$315, x$316, x$317, x$318, x$319, x$32, x$320, x$321, x$322, x$323, x$324, x$325, x$326, x$327, x$328, x$329, x$33, x$330, x$331, x$332, x$333, x$334, x$335, x$336, x$337, x$338, x$339, x$34, x$340, x$341, x$342, x$343, x$344, x$345, x$346, x$347, x$348, x$349, x$35, x$350, x$351, x$352, x$353, x$354, x$355, x$356, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x1000, x1001, x1002, x1003, x1004, x1005, x1007, x1008, x1008$24ptr, x1009, x1009$24ptr, x101, x1010, x1010$24ptr, x1011, x1011$24ptr, x1012, x1012$24ptr, x1013, x1013$24ptr, x1014, x1014$24ptr, x1015, x1015$24ptr, x1016, x1016$24ptr, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x302, x303, x304, x305, x306, x307, x308, x309, x31, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x36, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x41, x410, x411, x413, x414, x415, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x439, x44, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x466, x467, x468, x469, x47, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x48, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x49, x490, x491, x492, x493, x494, x495, x496, x497, x498, x499, x5, x50, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x51, x510, x511, x512, x513, x514, x515, x516, x517, x518, x519, x52, x520, x521, x522, x524, x525, x526, x527, x528, x529, x53, x530, x531, x532, x533, x534, x535, x536, x537, x538, x539, x54, x540, x541, x542, x543, x544, x545, x546, x547, x548, x549, x55, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559, x56, x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, x57, x570, x571, x572, x573, x574, x575, x576, x577, x578, x579, x58, x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x59, x590, x591, x592, x593, x594, x595, x596, x597, x598, x599, x6, x60, x600, x601, x602, x603, x604, x605, x606, x607, x608, x609, x61, x610, x611, x612, x613, x614, x615, x616, x617, x618, x619, x62, x620, x621, x622, x623, x624, x625, x626, x627, x628, x629, x63, x630, x631, x632, x633, x635, x636, x637, x638, x639, x64, x640, x641, x642, x643, x644, x645, x646, x647, x648, x649, x65, x650, x651, x652, x653, x654, x655, x656, x657, x658, x659, x66, x660, x661, x662, x663, x664, x665, x666, x667, x668, x669, x67, x670, x671, x672, x673, x674, x675, x676, x677, x678, x679, x68, x680, x681, x682, x683, x684, x685, x686, x687, x688, x689, x69, x690, x691, x692, x693, x694, x695, x696, x697, x698, x699, x7, x70, x700, x701, x702, x703, x704, x705, x706, x707, x708, x709, x71, x710, x711, x712, x713, x714, x715, x716, x717, x718, x719, x72, x720, x721, x722, x723, x724, x725, x726, x727, x728, x729, x73, x730, x731, x732, x733, x734, x735, x736, x737, x738, x739, x74, x740, x741, x742, x743, x744, x746, x747, x748, x749, x75, x750, x751, x752, x753, x754, x755, x756, x757, x758, x759, x76, x760, x761, x762, x763, x764, x765, x766, x767, x768, x769, x77, x770, x771, x772, x773, x774, x775, x776, x777, x778, x779, x78, x780, x781, x782, x783, x784, x785, x786, x787, x788, x789, x79, x790, x791, x792, x793, x794, x795, x796, x797, x798, x799, x8, x800, x801, x802, x803, x804, x805, x806, x807, x808, x809, x81, x810, x811, x812, x813, x814, x815, x816, x817, x818, x819, x82, x820, x821, x822, x823, x824, x825, x826, x827, x828, x829, x83, x830, x831, x832, x833, x834, x835, x836, x837, x838, x839, x84, x840, x841, x842, x843, x844, x845, x846, x847, x848, x849, x85, x850, x851, x852, x853, x854, x855, x857, x858, x859, x86, x860, x861, x862, x863, x864, x865, x866, x867, x868, x869, x87, x870, x871, x872, x873, x874, x875, x876, x877, x878, x879, x88, x880, x881, x882, x883, x884, x885, x886, x887, x888, x889, x89, x890, x891, x892, x893, x894, x895, x896, x897, x898, x899, x9, x90, x900, x901, x902, x903, x904, x905, x906, x907, x908, x909, x91, x910, x911, x912, x913, x914, x915, x916, x917, x918, x919, x92, x920, x921, x922, x923, x924, x925, x926, x927, x928, x929, x93, x930, x931, x932, x933, x934, x935, x936, x937, x938, x939, x94, x940, x941, x942, x943, x944, x945, x946, x947, x948, x949, x95, x950, x951, x952, x953, x954, x955, x956, x957, x958, x959, x96, x960, x961, x962, x963, x964, x965, x966, x968, x969, x97, x970, x971, x972, x973, x974, x975, x976, x977, x978, x979, x98, x980, x981, x982, x983, x984, x985, x986, x987, x988, x989, x99, x990, x991, x992, x993, x994, x995, x996, x997, x998, x999;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[4];
		x5 = arg1[5];
		x6 = arg1[6];
		x7 = arg1[7];
		x8 = arg1[8];
		x9 = arg1[0];
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x9, arg2[8]);
		x11 = _tuple[0];
		x10 = _tuple[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x9, arg2[7]);
		x13 = _tuple$1[0];
		x12 = _tuple$1[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x9, arg2[6]);
		x15 = _tuple$2[0];
		x14 = _tuple$2[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x9, arg2[5]);
		x17 = _tuple$3[0];
		x16 = _tuple$3[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x9, arg2[4]);
		x19 = _tuple$4[0];
		x18 = _tuple$4[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x9, arg2[3]);
		x21 = _tuple$5[0];
		x20 = _tuple$5[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$6 = bits.Mul64(x9, arg2[2]);
		x23 = _tuple$6[0];
		x22 = _tuple$6[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x9, arg2[1]);
		x25 = _tuple$7[0];
		x24 = _tuple$7[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x9, arg2[0]);
		x27 = _tuple$8[0];
		x26 = _tuple$8[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x27, x24, new $Uint64(0, 0));
		x28 = _tuple$9[0];
		x29 = _tuple$9[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x25, x22, ((x = (new p521Uint1(x29.$high, x29.$low)), new $Uint64(x.$high, x.$low))));
		x30 = _tuple$10[0];
		x31 = _tuple$10[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x23, x20, ((x$1 = (new p521Uint1(x31.$high, x31.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x32 = _tuple$11[0];
		x33 = _tuple$11[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x21, x18, ((x$2 = (new p521Uint1(x33.$high, x33.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x34 = _tuple$12[0];
		x35 = _tuple$12[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x19, x16, ((x$3 = (new p521Uint1(x35.$high, x35.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x36 = _tuple$13[0];
		x37 = _tuple$13[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x17, x14, ((x$4 = (new p521Uint1(x37.$high, x37.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x38 = _tuple$14[0];
		x39 = _tuple$14[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x15, x12, ((x$5 = (new p521Uint1(x39.$high, x39.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x40 = _tuple$15[0];
		x41 = _tuple$15[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x13, x10, ((x$6 = (new p521Uint1(x41.$high, x41.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x42 = _tuple$16[0];
		x43 = _tuple$16[1];
		x44 = (x$7 = ((x$8 = (new p521Uint1(x43.$high, x43.$low)), new $Uint64(x$8.$high, x$8.$low))), new $Uint64(x$7.$high + x11.$high, x$7.$low + x11.$low));
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x26, new $Uint64(0, 511));
		x46 = _tuple$17[0];
		x45 = _tuple$17[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x48 = _tuple$18[0];
		x47 = _tuple$18[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x50 = _tuple$19[0];
		x49 = _tuple$19[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x52 = _tuple$20[0];
		x51 = _tuple$20[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$21 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x54 = _tuple$21[0];
		x53 = _tuple$21[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$22 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x56 = _tuple$22[0];
		x55 = _tuple$22[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$23 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x58 = _tuple$23[0];
		x57 = _tuple$23[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$24 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x60 = _tuple$24[0];
		x59 = _tuple$24[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$25 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x62 = _tuple$25[0];
		x61 = _tuple$25[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x62, x59, new $Uint64(0, 0));
		x63 = _tuple$26[0];
		x64 = _tuple$26[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x60, x57, ((x$9 = (new p521Uint1(x64.$high, x64.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x65 = _tuple$27[0];
		x66 = _tuple$27[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x58, x55, ((x$10 = (new p521Uint1(x66.$high, x66.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x67 = _tuple$28[0];
		x68 = _tuple$28[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(x56, x53, ((x$11 = (new p521Uint1(x68.$high, x68.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x69 = _tuple$29[0];
		x70 = _tuple$29[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x54, x51, ((x$12 = (new p521Uint1(x70.$high, x70.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x71 = _tuple$30[0];
		x72 = _tuple$30[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x52, x49, ((x$13 = (new p521Uint1(x72.$high, x72.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x73 = _tuple$31[0];
		x74 = _tuple$31[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x50, x47, ((x$14 = (new p521Uint1(x74.$high, x74.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x75 = _tuple$32[0];
		x76 = _tuple$32[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x48, x45, ((x$15 = (new p521Uint1(x76.$high, x76.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x77 = _tuple$33[0];
		x78 = _tuple$33[1];
		x79 = (x$16 = ((x$17 = (new p521Uint1(x78.$high, x78.$low)), new $Uint64(x$17.$high, x$17.$low))), new $Uint64(x$16.$high + x46.$high, x$16.$low + x46.$low));
		x81 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x26, x61, new $Uint64(0, 0));
		x81 = _tuple$34[1];
		x82 = new $Uint64(0, 0);
		x83 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x28, x63, ((x$18 = (new p521Uint1(x81.$high, x81.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x82 = _tuple$35[0];
		x83 = _tuple$35[1];
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x30, x65, ((x$19 = (new p521Uint1(x83.$high, x83.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x84 = _tuple$36[0];
		x85 = _tuple$36[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x32, x67, ((x$20 = (new p521Uint1(x85.$high, x85.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x86 = _tuple$37[0];
		x87 = _tuple$37[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x34, x69, ((x$21 = (new p521Uint1(x87.$high, x87.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x88 = _tuple$38[0];
		x89 = _tuple$38[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x36, x71, ((x$22 = (new p521Uint1(x89.$high, x89.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x90 = _tuple$39[0];
		x91 = _tuple$39[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x38, x73, ((x$23 = (new p521Uint1(x91.$high, x91.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x92 = _tuple$40[0];
		x93 = _tuple$40[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x40, x75, ((x$24 = (new p521Uint1(x93.$high, x93.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x94 = _tuple$41[0];
		x95 = _tuple$41[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x42, x77, ((x$25 = (new p521Uint1(x95.$high, x95.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x96 = _tuple$42[0];
		x97 = _tuple$42[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x44, x79, ((x$26 = (new p521Uint1(x97.$high, x97.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x98 = _tuple$43[0];
		x99 = _tuple$43[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x1, arg2[8]);
		x101 = _tuple$44[0];
		x100 = _tuple$44[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$45 = bits.Mul64(x1, arg2[7]);
		x103 = _tuple$45[0];
		x102 = _tuple$45[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$46 = bits.Mul64(x1, arg2[6]);
		x105 = _tuple$46[0];
		x104 = _tuple$46[1];
		x106 = new $Uint64(0, 0);
		x107 = new $Uint64(0, 0);
		_tuple$47 = bits.Mul64(x1, arg2[5]);
		x107 = _tuple$47[0];
		x106 = _tuple$47[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$48 = bits.Mul64(x1, arg2[4]);
		x109 = _tuple$48[0];
		x108 = _tuple$48[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x1, arg2[3]);
		x111 = _tuple$49[0];
		x110 = _tuple$49[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x1, arg2[2]);
		x113 = _tuple$50[0];
		x112 = _tuple$50[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x1, arg2[1]);
		x115 = _tuple$51[0];
		x114 = _tuple$51[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x1, arg2[0]);
		x117 = _tuple$52[0];
		x116 = _tuple$52[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x117, x114, new $Uint64(0, 0));
		x118 = _tuple$53[0];
		x119 = _tuple$53[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x115, x112, ((x$27 = (new p521Uint1(x119.$high, x119.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x120 = _tuple$54[0];
		x121 = _tuple$54[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x113, x110, ((x$28 = (new p521Uint1(x121.$high, x121.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x122 = _tuple$55[0];
		x123 = _tuple$55[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x111, x108, ((x$29 = (new p521Uint1(x123.$high, x123.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x124 = _tuple$56[0];
		x125 = _tuple$56[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x109, x106, ((x$30 = (new p521Uint1(x125.$high, x125.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x126 = _tuple$57[0];
		x127 = _tuple$57[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x107, x104, ((x$31 = (new p521Uint1(x127.$high, x127.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x128 = _tuple$58[0];
		x129 = _tuple$58[1];
		x130 = new $Uint64(0, 0);
		x131 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x105, x102, ((x$32 = (new p521Uint1(x129.$high, x129.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x130 = _tuple$59[0];
		x131 = _tuple$59[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x103, x100, ((x$33 = (new p521Uint1(x131.$high, x131.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x132 = _tuple$60[0];
		x133 = _tuple$60[1];
		x134 = (x$34 = ((x$35 = (new p521Uint1(x133.$high, x133.$low)), new $Uint64(x$35.$high, x$35.$low))), new $Uint64(x$34.$high + x101.$high, x$34.$low + x101.$low));
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x82, x116, new $Uint64(0, 0));
		x135 = _tuple$61[0];
		x136 = _tuple$61[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x84, x118, ((x$36 = (new p521Uint1(x136.$high, x136.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x137 = _tuple$62[0];
		x138 = _tuple$62[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x86, x120, ((x$37 = (new p521Uint1(x138.$high, x138.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x139 = _tuple$63[0];
		x140 = _tuple$63[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x88, x122, ((x$38 = (new p521Uint1(x140.$high, x140.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x141 = _tuple$64[0];
		x142 = _tuple$64[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x90, x124, ((x$39 = (new p521Uint1(x142.$high, x142.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x143 = _tuple$65[0];
		x144 = _tuple$65[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x92, x126, ((x$40 = (new p521Uint1(x144.$high, x144.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x145 = _tuple$66[0];
		x146 = _tuple$66[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x94, x128, ((x$41 = (new p521Uint1(x146.$high, x146.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x147 = _tuple$67[0];
		x148 = _tuple$67[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x96, x130, ((x$42 = (new p521Uint1(x148.$high, x148.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x149 = _tuple$68[0];
		x150 = _tuple$68[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x98, x132, ((x$43 = (new p521Uint1(x150.$high, x150.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x151 = _tuple$69[0];
		x152 = _tuple$69[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(((x$44 = (new p521Uint1(x99.$high, x99.$low)), new $Uint64(x$44.$high, x$44.$low))), x134, ((x$45 = (new p521Uint1(x152.$high, x152.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x153 = _tuple$70[0];
		x154 = _tuple$70[1];
		x155 = new $Uint64(0, 0);
		x156 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x135, new $Uint64(0, 511));
		x156 = _tuple$71[0];
		x155 = _tuple$71[1];
		x157 = new $Uint64(0, 0);
		x158 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x158 = _tuple$72[0];
		x157 = _tuple$72[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$73 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x160 = _tuple$73[0];
		x159 = _tuple$73[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$74 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x162 = _tuple$74[0];
		x161 = _tuple$74[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x164 = _tuple$75[0];
		x163 = _tuple$75[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x166 = _tuple$76[0];
		x165 = _tuple$76[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x168 = _tuple$77[0];
		x167 = _tuple$77[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x170 = _tuple$78[0];
		x169 = _tuple$78[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x172 = _tuple$79[0];
		x171 = _tuple$79[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x172, x169, new $Uint64(0, 0));
		x173 = _tuple$80[0];
		x174 = _tuple$80[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x170, x167, ((x$46 = (new p521Uint1(x174.$high, x174.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x175 = _tuple$81[0];
		x176 = _tuple$81[1];
		x177 = new $Uint64(0, 0);
		x178 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x168, x165, ((x$47 = (new p521Uint1(x176.$high, x176.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x177 = _tuple$82[0];
		x178 = _tuple$82[1];
		x179 = new $Uint64(0, 0);
		x180 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x166, x163, ((x$48 = (new p521Uint1(x178.$high, x178.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x179 = _tuple$83[0];
		x180 = _tuple$83[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x164, x161, ((x$49 = (new p521Uint1(x180.$high, x180.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x181 = _tuple$84[0];
		x182 = _tuple$84[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x162, x159, ((x$50 = (new p521Uint1(x182.$high, x182.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x183 = _tuple$85[0];
		x184 = _tuple$85[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x160, x157, ((x$51 = (new p521Uint1(x184.$high, x184.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x185 = _tuple$86[0];
		x186 = _tuple$86[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x158, x155, ((x$52 = (new p521Uint1(x186.$high, x186.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x187 = _tuple$87[0];
		x188 = _tuple$87[1];
		x189 = (x$53 = ((x$54 = (new p521Uint1(x188.$high, x188.$low)), new $Uint64(x$54.$high, x$54.$low))), new $Uint64(x$53.$high + x156.$high, x$53.$low + x156.$low));
		x191 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x135, x171, new $Uint64(0, 0));
		x191 = _tuple$88[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x137, x173, ((x$55 = (new p521Uint1(x191.$high, x191.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x192 = _tuple$89[0];
		x193 = _tuple$89[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x139, x175, ((x$56 = (new p521Uint1(x193.$high, x193.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x194 = _tuple$90[0];
		x195 = _tuple$90[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x141, x177, ((x$57 = (new p521Uint1(x195.$high, x195.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x196 = _tuple$91[0];
		x197 = _tuple$91[1];
		x198 = new $Uint64(0, 0);
		x199 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x143, x179, ((x$58 = (new p521Uint1(x197.$high, x197.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x198 = _tuple$92[0];
		x199 = _tuple$92[1];
		x200 = new $Uint64(0, 0);
		x201 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64(x145, x181, ((x$59 = (new p521Uint1(x199.$high, x199.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x200 = _tuple$93[0];
		x201 = _tuple$93[1];
		x202 = new $Uint64(0, 0);
		x203 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x147, x183, ((x$60 = (new p521Uint1(x201.$high, x201.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x202 = _tuple$94[0];
		x203 = _tuple$94[1];
		x204 = new $Uint64(0, 0);
		x205 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x149, x185, ((x$61 = (new p521Uint1(x203.$high, x203.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x204 = _tuple$95[0];
		x205 = _tuple$95[1];
		x206 = new $Uint64(0, 0);
		x207 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x151, x187, ((x$62 = (new p521Uint1(x205.$high, x205.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x206 = _tuple$96[0];
		x207 = _tuple$96[1];
		x208 = new $Uint64(0, 0);
		x209 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x153, x189, ((x$63 = (new p521Uint1(x207.$high, x207.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x208 = _tuple$97[0];
		x209 = _tuple$97[1];
		x210 = (x$64 = ((x$65 = (new p521Uint1(x209.$high, x209.$low)), new $Uint64(x$65.$high, x$65.$low))), x$66 = ((x$67 = (new p521Uint1(x154.$high, x154.$low)), new $Uint64(x$67.$high, x$67.$low))), new $Uint64(x$64.$high + x$66.$high, x$64.$low + x$66.$low));
		x211 = new $Uint64(0, 0);
		x212 = new $Uint64(0, 0);
		_tuple$98 = bits.Mul64(x2, arg2[8]);
		x212 = _tuple$98[0];
		x211 = _tuple$98[1];
		x213 = new $Uint64(0, 0);
		x214 = new $Uint64(0, 0);
		_tuple$99 = bits.Mul64(x2, arg2[7]);
		x214 = _tuple$99[0];
		x213 = _tuple$99[1];
		x215 = new $Uint64(0, 0);
		x216 = new $Uint64(0, 0);
		_tuple$100 = bits.Mul64(x2, arg2[6]);
		x216 = _tuple$100[0];
		x215 = _tuple$100[1];
		x217 = new $Uint64(0, 0);
		x218 = new $Uint64(0, 0);
		_tuple$101 = bits.Mul64(x2, arg2[5]);
		x218 = _tuple$101[0];
		x217 = _tuple$101[1];
		x219 = new $Uint64(0, 0);
		x220 = new $Uint64(0, 0);
		_tuple$102 = bits.Mul64(x2, arg2[4]);
		x220 = _tuple$102[0];
		x219 = _tuple$102[1];
		x221 = new $Uint64(0, 0);
		x222 = new $Uint64(0, 0);
		_tuple$103 = bits.Mul64(x2, arg2[3]);
		x222 = _tuple$103[0];
		x221 = _tuple$103[1];
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x2, arg2[2]);
		x224 = _tuple$104[0];
		x223 = _tuple$104[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x2, arg2[1]);
		x226 = _tuple$105[0];
		x225 = _tuple$105[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x2, arg2[0]);
		x228 = _tuple$106[0];
		x227 = _tuple$106[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$107 = bits.Add64(x228, x225, new $Uint64(0, 0));
		x229 = _tuple$107[0];
		x230 = _tuple$107[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$108 = bits.Add64(x226, x223, ((x$68 = (new p521Uint1(x230.$high, x230.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x231 = _tuple$108[0];
		x232 = _tuple$108[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$109 = bits.Add64(x224, x221, ((x$69 = (new p521Uint1(x232.$high, x232.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x233 = _tuple$109[0];
		x234 = _tuple$109[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$110 = bits.Add64(x222, x219, ((x$70 = (new p521Uint1(x234.$high, x234.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x235 = _tuple$110[0];
		x236 = _tuple$110[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x220, x217, ((x$71 = (new p521Uint1(x236.$high, x236.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x237 = _tuple$111[0];
		x238 = _tuple$111[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x218, x215, ((x$72 = (new p521Uint1(x238.$high, x238.$low)), new $Uint64(x$72.$high, x$72.$low))));
		x239 = _tuple$112[0];
		x240 = _tuple$112[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x216, x213, ((x$73 = (new p521Uint1(x240.$high, x240.$low)), new $Uint64(x$73.$high, x$73.$low))));
		x241 = _tuple$113[0];
		x242 = _tuple$113[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x214, x211, ((x$74 = (new p521Uint1(x242.$high, x242.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x243 = _tuple$114[0];
		x244 = _tuple$114[1];
		x245 = (x$75 = ((x$76 = (new p521Uint1(x244.$high, x244.$low)), new $Uint64(x$76.$high, x$76.$low))), new $Uint64(x$75.$high + x212.$high, x$75.$low + x212.$low));
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x192, x227, new $Uint64(0, 0));
		x246 = _tuple$115[0];
		x247 = _tuple$115[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x194, x229, ((x$77 = (new p521Uint1(x247.$high, x247.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x248 = _tuple$116[0];
		x249 = _tuple$116[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x196, x231, ((x$78 = (new p521Uint1(x249.$high, x249.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x250 = _tuple$117[0];
		x251 = _tuple$117[1];
		x252 = new $Uint64(0, 0);
		x253 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x198, x233, ((x$79 = (new p521Uint1(x251.$high, x251.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x252 = _tuple$118[0];
		x253 = _tuple$118[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x200, x235, ((x$80 = (new p521Uint1(x253.$high, x253.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x254 = _tuple$119[0];
		x255 = _tuple$119[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x202, x237, ((x$81 = (new p521Uint1(x255.$high, x255.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x256 = _tuple$120[0];
		x257 = _tuple$120[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x204, x239, ((x$82 = (new p521Uint1(x257.$high, x257.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x258 = _tuple$121[0];
		x259 = _tuple$121[1];
		x260 = new $Uint64(0, 0);
		x261 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x206, x241, ((x$83 = (new p521Uint1(x259.$high, x259.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x260 = _tuple$122[0];
		x261 = _tuple$122[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x208, x243, ((x$84 = (new p521Uint1(x261.$high, x261.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x262 = _tuple$123[0];
		x263 = _tuple$123[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x210, x245, ((x$85 = (new p521Uint1(x263.$high, x263.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x264 = _tuple$124[0];
		x265 = _tuple$124[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$125 = bits.Mul64(x246, new $Uint64(0, 511));
		x267 = _tuple$125[0];
		x266 = _tuple$125[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x269 = _tuple$126[0];
		x268 = _tuple$126[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x271 = _tuple$127[0];
		x270 = _tuple$127[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x273 = _tuple$128[0];
		x272 = _tuple$128[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$129 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x275 = _tuple$129[0];
		x274 = _tuple$129[1];
		x276 = new $Uint64(0, 0);
		x277 = new $Uint64(0, 0);
		_tuple$130 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x277 = _tuple$130[0];
		x276 = _tuple$130[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$131 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x279 = _tuple$131[0];
		x278 = _tuple$131[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$132 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x281 = _tuple$132[0];
		x280 = _tuple$132[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$133 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x283 = _tuple$133[0];
		x282 = _tuple$133[1];
		x284 = new $Uint64(0, 0);
		x285 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x283, x280, new $Uint64(0, 0));
		x284 = _tuple$134[0];
		x285 = _tuple$134[1];
		x286 = new $Uint64(0, 0);
		x287 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x281, x278, ((x$86 = (new p521Uint1(x285.$high, x285.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x286 = _tuple$135[0];
		x287 = _tuple$135[1];
		x288 = new $Uint64(0, 0);
		x289 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x279, x276, ((x$87 = (new p521Uint1(x287.$high, x287.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x288 = _tuple$136[0];
		x289 = _tuple$136[1];
		x290 = new $Uint64(0, 0);
		x291 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x277, x274, ((x$88 = (new p521Uint1(x289.$high, x289.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x290 = _tuple$137[0];
		x291 = _tuple$137[1];
		x292 = new $Uint64(0, 0);
		x293 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x275, x272, ((x$89 = (new p521Uint1(x291.$high, x291.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x292 = _tuple$138[0];
		x293 = _tuple$138[1];
		x294 = new $Uint64(0, 0);
		x295 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x273, x270, ((x$90 = (new p521Uint1(x293.$high, x293.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x294 = _tuple$139[0];
		x295 = _tuple$139[1];
		x296 = new $Uint64(0, 0);
		x297 = new $Uint64(0, 0);
		_tuple$140 = bits.Add64(x271, x268, ((x$91 = (new p521Uint1(x295.$high, x295.$low)), new $Uint64(x$91.$high, x$91.$low))));
		x296 = _tuple$140[0];
		x297 = _tuple$140[1];
		x298 = new $Uint64(0, 0);
		x299 = new $Uint64(0, 0);
		_tuple$141 = bits.Add64(x269, x266, ((x$92 = (new p521Uint1(x297.$high, x297.$low)), new $Uint64(x$92.$high, x$92.$low))));
		x298 = _tuple$141[0];
		x299 = _tuple$141[1];
		x300 = (x$93 = ((x$94 = (new p521Uint1(x299.$high, x299.$low)), new $Uint64(x$94.$high, x$94.$low))), new $Uint64(x$93.$high + x267.$high, x$93.$low + x267.$low));
		x302 = new $Uint64(0, 0);
		_tuple$142 = bits.Add64(x246, x282, new $Uint64(0, 0));
		x302 = _tuple$142[1];
		x303 = new $Uint64(0, 0);
		x304 = new $Uint64(0, 0);
		_tuple$143 = bits.Add64(x248, x284, ((x$95 = (new p521Uint1(x302.$high, x302.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x303 = _tuple$143[0];
		x304 = _tuple$143[1];
		x305 = new $Uint64(0, 0);
		x306 = new $Uint64(0, 0);
		_tuple$144 = bits.Add64(x250, x286, ((x$96 = (new p521Uint1(x304.$high, x304.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x305 = _tuple$144[0];
		x306 = _tuple$144[1];
		x307 = new $Uint64(0, 0);
		x308 = new $Uint64(0, 0);
		_tuple$145 = bits.Add64(x252, x288, ((x$97 = (new p521Uint1(x306.$high, x306.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x307 = _tuple$145[0];
		x308 = _tuple$145[1];
		x309 = new $Uint64(0, 0);
		x310 = new $Uint64(0, 0);
		_tuple$146 = bits.Add64(x254, x290, ((x$98 = (new p521Uint1(x308.$high, x308.$low)), new $Uint64(x$98.$high, x$98.$low))));
		x309 = _tuple$146[0];
		x310 = _tuple$146[1];
		x311 = new $Uint64(0, 0);
		x312 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x256, x292, ((x$99 = (new p521Uint1(x310.$high, x310.$low)), new $Uint64(x$99.$high, x$99.$low))));
		x311 = _tuple$147[0];
		x312 = _tuple$147[1];
		x313 = new $Uint64(0, 0);
		x314 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x258, x294, ((x$100 = (new p521Uint1(x312.$high, x312.$low)), new $Uint64(x$100.$high, x$100.$low))));
		x313 = _tuple$148[0];
		x314 = _tuple$148[1];
		x315 = new $Uint64(0, 0);
		x316 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x260, x296, ((x$101 = (new p521Uint1(x314.$high, x314.$low)), new $Uint64(x$101.$high, x$101.$low))));
		x315 = _tuple$149[0];
		x316 = _tuple$149[1];
		x317 = new $Uint64(0, 0);
		x318 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x262, x298, ((x$102 = (new p521Uint1(x316.$high, x316.$low)), new $Uint64(x$102.$high, x$102.$low))));
		x317 = _tuple$150[0];
		x318 = _tuple$150[1];
		x319 = new $Uint64(0, 0);
		x320 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x264, x300, ((x$103 = (new p521Uint1(x318.$high, x318.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x319 = _tuple$151[0];
		x320 = _tuple$151[1];
		x321 = (x$104 = ((x$105 = (new p521Uint1(x320.$high, x320.$low)), new $Uint64(x$105.$high, x$105.$low))), x$106 = ((x$107 = (new p521Uint1(x265.$high, x265.$low)), new $Uint64(x$107.$high, x$107.$low))), new $Uint64(x$104.$high + x$106.$high, x$104.$low + x$106.$low));
		x322 = new $Uint64(0, 0);
		x323 = new $Uint64(0, 0);
		_tuple$152 = bits.Mul64(x3, arg2[8]);
		x323 = _tuple$152[0];
		x322 = _tuple$152[1];
		x324 = new $Uint64(0, 0);
		x325 = new $Uint64(0, 0);
		_tuple$153 = bits.Mul64(x3, arg2[7]);
		x325 = _tuple$153[0];
		x324 = _tuple$153[1];
		x326 = new $Uint64(0, 0);
		x327 = new $Uint64(0, 0);
		_tuple$154 = bits.Mul64(x3, arg2[6]);
		x327 = _tuple$154[0];
		x326 = _tuple$154[1];
		x328 = new $Uint64(0, 0);
		x329 = new $Uint64(0, 0);
		_tuple$155 = bits.Mul64(x3, arg2[5]);
		x329 = _tuple$155[0];
		x328 = _tuple$155[1];
		x330 = new $Uint64(0, 0);
		x331 = new $Uint64(0, 0);
		_tuple$156 = bits.Mul64(x3, arg2[4]);
		x331 = _tuple$156[0];
		x330 = _tuple$156[1];
		x332 = new $Uint64(0, 0);
		x333 = new $Uint64(0, 0);
		_tuple$157 = bits.Mul64(x3, arg2[3]);
		x333 = _tuple$157[0];
		x332 = _tuple$157[1];
		x334 = new $Uint64(0, 0);
		x335 = new $Uint64(0, 0);
		_tuple$158 = bits.Mul64(x3, arg2[2]);
		x335 = _tuple$158[0];
		x334 = _tuple$158[1];
		x336 = new $Uint64(0, 0);
		x337 = new $Uint64(0, 0);
		_tuple$159 = bits.Mul64(x3, arg2[1]);
		x337 = _tuple$159[0];
		x336 = _tuple$159[1];
		x338 = new $Uint64(0, 0);
		x339 = new $Uint64(0, 0);
		_tuple$160 = bits.Mul64(x3, arg2[0]);
		x339 = _tuple$160[0];
		x338 = _tuple$160[1];
		x340 = new $Uint64(0, 0);
		x341 = new $Uint64(0, 0);
		_tuple$161 = bits.Add64(x339, x336, new $Uint64(0, 0));
		x340 = _tuple$161[0];
		x341 = _tuple$161[1];
		x342 = new $Uint64(0, 0);
		x343 = new $Uint64(0, 0);
		_tuple$162 = bits.Add64(x337, x334, ((x$108 = (new p521Uint1(x341.$high, x341.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x342 = _tuple$162[0];
		x343 = _tuple$162[1];
		x344 = new $Uint64(0, 0);
		x345 = new $Uint64(0, 0);
		_tuple$163 = bits.Add64(x335, x332, ((x$109 = (new p521Uint1(x343.$high, x343.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x344 = _tuple$163[0];
		x345 = _tuple$163[1];
		x346 = new $Uint64(0, 0);
		x347 = new $Uint64(0, 0);
		_tuple$164 = bits.Add64(x333, x330, ((x$110 = (new p521Uint1(x345.$high, x345.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x346 = _tuple$164[0];
		x347 = _tuple$164[1];
		x348 = new $Uint64(0, 0);
		x349 = new $Uint64(0, 0);
		_tuple$165 = bits.Add64(x331, x328, ((x$111 = (new p521Uint1(x347.$high, x347.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x348 = _tuple$165[0];
		x349 = _tuple$165[1];
		x350 = new $Uint64(0, 0);
		x351 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x329, x326, ((x$112 = (new p521Uint1(x349.$high, x349.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x350 = _tuple$166[0];
		x351 = _tuple$166[1];
		x352 = new $Uint64(0, 0);
		x353 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x327, x324, ((x$113 = (new p521Uint1(x351.$high, x351.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x352 = _tuple$167[0];
		x353 = _tuple$167[1];
		x354 = new $Uint64(0, 0);
		x355 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x325, x322, ((x$114 = (new p521Uint1(x353.$high, x353.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x354 = _tuple$168[0];
		x355 = _tuple$168[1];
		x356 = (x$115 = ((x$116 = (new p521Uint1(x355.$high, x355.$low)), new $Uint64(x$116.$high, x$116.$low))), new $Uint64(x$115.$high + x323.$high, x$115.$low + x323.$low));
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x303, x338, new $Uint64(0, 0));
		x357 = _tuple$169[0];
		x358 = _tuple$169[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x305, x340, ((x$117 = (new p521Uint1(x358.$high, x358.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x359 = _tuple$170[0];
		x360 = _tuple$170[1];
		x361 = new $Uint64(0, 0);
		x362 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x307, x342, ((x$118 = (new p521Uint1(x360.$high, x360.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x361 = _tuple$171[0];
		x362 = _tuple$171[1];
		x363 = new $Uint64(0, 0);
		x364 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x309, x344, ((x$119 = (new p521Uint1(x362.$high, x362.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x363 = _tuple$172[0];
		x364 = _tuple$172[1];
		x365 = new $Uint64(0, 0);
		x366 = new $Uint64(0, 0);
		_tuple$173 = bits.Add64(x311, x346, ((x$120 = (new p521Uint1(x364.$high, x364.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x365 = _tuple$173[0];
		x366 = _tuple$173[1];
		x367 = new $Uint64(0, 0);
		x368 = new $Uint64(0, 0);
		_tuple$174 = bits.Add64(x313, x348, ((x$121 = (new p521Uint1(x366.$high, x366.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x367 = _tuple$174[0];
		x368 = _tuple$174[1];
		x369 = new $Uint64(0, 0);
		x370 = new $Uint64(0, 0);
		_tuple$175 = bits.Add64(x315, x350, ((x$122 = (new p521Uint1(x368.$high, x368.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x369 = _tuple$175[0];
		x370 = _tuple$175[1];
		x371 = new $Uint64(0, 0);
		x372 = new $Uint64(0, 0);
		_tuple$176 = bits.Add64(x317, x352, ((x$123 = (new p521Uint1(x370.$high, x370.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x371 = _tuple$176[0];
		x372 = _tuple$176[1];
		x373 = new $Uint64(0, 0);
		x374 = new $Uint64(0, 0);
		_tuple$177 = bits.Add64(x319, x354, ((x$124 = (new p521Uint1(x372.$high, x372.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x373 = _tuple$177[0];
		x374 = _tuple$177[1];
		x375 = new $Uint64(0, 0);
		x376 = new $Uint64(0, 0);
		_tuple$178 = bits.Add64(x321, x356, ((x$125 = (new p521Uint1(x374.$high, x374.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x375 = _tuple$178[0];
		x376 = _tuple$178[1];
		x377 = new $Uint64(0, 0);
		x378 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x357, new $Uint64(0, 511));
		x378 = _tuple$179[0];
		x377 = _tuple$179[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$180 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x380 = _tuple$180[0];
		x379 = _tuple$180[1];
		x381 = new $Uint64(0, 0);
		x382 = new $Uint64(0, 0);
		_tuple$181 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x382 = _tuple$181[0];
		x381 = _tuple$181[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$182 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x384 = _tuple$182[0];
		x383 = _tuple$182[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$183 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x386 = _tuple$183[0];
		x385 = _tuple$183[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$184 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x388 = _tuple$184[0];
		x387 = _tuple$184[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$185 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x390 = _tuple$185[0];
		x389 = _tuple$185[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$186 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x392 = _tuple$186[0];
		x391 = _tuple$186[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$187 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x394 = _tuple$187[0];
		x393 = _tuple$187[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x394, x391, new $Uint64(0, 0));
		x395 = _tuple$188[0];
		x396 = _tuple$188[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x392, x389, ((x$126 = (new p521Uint1(x396.$high, x396.$low)), new $Uint64(x$126.$high, x$126.$low))));
		x397 = _tuple$189[0];
		x398 = _tuple$189[1];
		x399 = new $Uint64(0, 0);
		x400 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x390, x387, ((x$127 = (new p521Uint1(x398.$high, x398.$low)), new $Uint64(x$127.$high, x$127.$low))));
		x399 = _tuple$190[0];
		x400 = _tuple$190[1];
		x401 = new $Uint64(0, 0);
		x402 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x388, x385, ((x$128 = (new p521Uint1(x400.$high, x400.$low)), new $Uint64(x$128.$high, x$128.$low))));
		x401 = _tuple$191[0];
		x402 = _tuple$191[1];
		x403 = new $Uint64(0, 0);
		x404 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x386, x383, ((x$129 = (new p521Uint1(x402.$high, x402.$low)), new $Uint64(x$129.$high, x$129.$low))));
		x403 = _tuple$192[0];
		x404 = _tuple$192[1];
		x405 = new $Uint64(0, 0);
		x406 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x384, x381, ((x$130 = (new p521Uint1(x404.$high, x404.$low)), new $Uint64(x$130.$high, x$130.$low))));
		x405 = _tuple$193[0];
		x406 = _tuple$193[1];
		x407 = new $Uint64(0, 0);
		x408 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x382, x379, ((x$131 = (new p521Uint1(x406.$high, x406.$low)), new $Uint64(x$131.$high, x$131.$low))));
		x407 = _tuple$194[0];
		x408 = _tuple$194[1];
		x409 = new $Uint64(0, 0);
		x410 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64(x380, x377, ((x$132 = (new p521Uint1(x408.$high, x408.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x409 = _tuple$195[0];
		x410 = _tuple$195[1];
		x411 = (x$133 = ((x$134 = (new p521Uint1(x410.$high, x410.$low)), new $Uint64(x$134.$high, x$134.$low))), new $Uint64(x$133.$high + x378.$high, x$133.$low + x378.$low));
		x413 = new $Uint64(0, 0);
		_tuple$196 = bits.Add64(x357, x393, new $Uint64(0, 0));
		x413 = _tuple$196[1];
		x414 = new $Uint64(0, 0);
		x415 = new $Uint64(0, 0);
		_tuple$197 = bits.Add64(x359, x395, ((x$135 = (new p521Uint1(x413.$high, x413.$low)), new $Uint64(x$135.$high, x$135.$low))));
		x414 = _tuple$197[0];
		x415 = _tuple$197[1];
		x416 = new $Uint64(0, 0);
		x417 = new $Uint64(0, 0);
		_tuple$198 = bits.Add64(x361, x397, ((x$136 = (new p521Uint1(x415.$high, x415.$low)), new $Uint64(x$136.$high, x$136.$low))));
		x416 = _tuple$198[0];
		x417 = _tuple$198[1];
		x418 = new $Uint64(0, 0);
		x419 = new $Uint64(0, 0);
		_tuple$199 = bits.Add64(x363, x399, ((x$137 = (new p521Uint1(x417.$high, x417.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x418 = _tuple$199[0];
		x419 = _tuple$199[1];
		x420 = new $Uint64(0, 0);
		x421 = new $Uint64(0, 0);
		_tuple$200 = bits.Add64(x365, x401, ((x$138 = (new p521Uint1(x419.$high, x419.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x420 = _tuple$200[0];
		x421 = _tuple$200[1];
		x422 = new $Uint64(0, 0);
		x423 = new $Uint64(0, 0);
		_tuple$201 = bits.Add64(x367, x403, ((x$139 = (new p521Uint1(x421.$high, x421.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x422 = _tuple$201[0];
		x423 = _tuple$201[1];
		x424 = new $Uint64(0, 0);
		x425 = new $Uint64(0, 0);
		_tuple$202 = bits.Add64(x369, x405, ((x$140 = (new p521Uint1(x423.$high, x423.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x424 = _tuple$202[0];
		x425 = _tuple$202[1];
		x426 = new $Uint64(0, 0);
		x427 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x371, x407, ((x$141 = (new p521Uint1(x425.$high, x425.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x426 = _tuple$203[0];
		x427 = _tuple$203[1];
		x428 = new $Uint64(0, 0);
		x429 = new $Uint64(0, 0);
		_tuple$204 = bits.Add64(x373, x409, ((x$142 = (new p521Uint1(x427.$high, x427.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x428 = _tuple$204[0];
		x429 = _tuple$204[1];
		x430 = new $Uint64(0, 0);
		x431 = new $Uint64(0, 0);
		_tuple$205 = bits.Add64(x375, x411, ((x$143 = (new p521Uint1(x429.$high, x429.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x430 = _tuple$205[0];
		x431 = _tuple$205[1];
		x432 = (x$144 = ((x$145 = (new p521Uint1(x431.$high, x431.$low)), new $Uint64(x$145.$high, x$145.$low))), x$146 = ((x$147 = (new p521Uint1(x376.$high, x376.$low)), new $Uint64(x$147.$high, x$147.$low))), new $Uint64(x$144.$high + x$146.$high, x$144.$low + x$146.$low));
		x433 = new $Uint64(0, 0);
		x434 = new $Uint64(0, 0);
		_tuple$206 = bits.Mul64(x4, arg2[8]);
		x434 = _tuple$206[0];
		x433 = _tuple$206[1];
		x435 = new $Uint64(0, 0);
		x436 = new $Uint64(0, 0);
		_tuple$207 = bits.Mul64(x4, arg2[7]);
		x436 = _tuple$207[0];
		x435 = _tuple$207[1];
		x437 = new $Uint64(0, 0);
		x438 = new $Uint64(0, 0);
		_tuple$208 = bits.Mul64(x4, arg2[6]);
		x438 = _tuple$208[0];
		x437 = _tuple$208[1];
		x439 = new $Uint64(0, 0);
		x440 = new $Uint64(0, 0);
		_tuple$209 = bits.Mul64(x4, arg2[5]);
		x440 = _tuple$209[0];
		x439 = _tuple$209[1];
		x441 = new $Uint64(0, 0);
		x442 = new $Uint64(0, 0);
		_tuple$210 = bits.Mul64(x4, arg2[4]);
		x442 = _tuple$210[0];
		x441 = _tuple$210[1];
		x443 = new $Uint64(0, 0);
		x444 = new $Uint64(0, 0);
		_tuple$211 = bits.Mul64(x4, arg2[3]);
		x444 = _tuple$211[0];
		x443 = _tuple$211[1];
		x445 = new $Uint64(0, 0);
		x446 = new $Uint64(0, 0);
		_tuple$212 = bits.Mul64(x4, arg2[2]);
		x446 = _tuple$212[0];
		x445 = _tuple$212[1];
		x447 = new $Uint64(0, 0);
		x448 = new $Uint64(0, 0);
		_tuple$213 = bits.Mul64(x4, arg2[1]);
		x448 = _tuple$213[0];
		x447 = _tuple$213[1];
		x449 = new $Uint64(0, 0);
		x450 = new $Uint64(0, 0);
		_tuple$214 = bits.Mul64(x4, arg2[0]);
		x450 = _tuple$214[0];
		x449 = _tuple$214[1];
		x451 = new $Uint64(0, 0);
		x452 = new $Uint64(0, 0);
		_tuple$215 = bits.Add64(x450, x447, new $Uint64(0, 0));
		x451 = _tuple$215[0];
		x452 = _tuple$215[1];
		x453 = new $Uint64(0, 0);
		x454 = new $Uint64(0, 0);
		_tuple$216 = bits.Add64(x448, x445, ((x$148 = (new p521Uint1(x452.$high, x452.$low)), new $Uint64(x$148.$high, x$148.$low))));
		x453 = _tuple$216[0];
		x454 = _tuple$216[1];
		x455 = new $Uint64(0, 0);
		x456 = new $Uint64(0, 0);
		_tuple$217 = bits.Add64(x446, x443, ((x$149 = (new p521Uint1(x454.$high, x454.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x455 = _tuple$217[0];
		x456 = _tuple$217[1];
		x457 = new $Uint64(0, 0);
		x458 = new $Uint64(0, 0);
		_tuple$218 = bits.Add64(x444, x441, ((x$150 = (new p521Uint1(x456.$high, x456.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x457 = _tuple$218[0];
		x458 = _tuple$218[1];
		x459 = new $Uint64(0, 0);
		x460 = new $Uint64(0, 0);
		_tuple$219 = bits.Add64(x442, x439, ((x$151 = (new p521Uint1(x458.$high, x458.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x459 = _tuple$219[0];
		x460 = _tuple$219[1];
		x461 = new $Uint64(0, 0);
		x462 = new $Uint64(0, 0);
		_tuple$220 = bits.Add64(x440, x437, ((x$152 = (new p521Uint1(x460.$high, x460.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x461 = _tuple$220[0];
		x462 = _tuple$220[1];
		x463 = new $Uint64(0, 0);
		x464 = new $Uint64(0, 0);
		_tuple$221 = bits.Add64(x438, x435, ((x$153 = (new p521Uint1(x462.$high, x462.$low)), new $Uint64(x$153.$high, x$153.$low))));
		x463 = _tuple$221[0];
		x464 = _tuple$221[1];
		x465 = new $Uint64(0, 0);
		x466 = new $Uint64(0, 0);
		_tuple$222 = bits.Add64(x436, x433, ((x$154 = (new p521Uint1(x464.$high, x464.$low)), new $Uint64(x$154.$high, x$154.$low))));
		x465 = _tuple$222[0];
		x466 = _tuple$222[1];
		x467 = (x$155 = ((x$156 = (new p521Uint1(x466.$high, x466.$low)), new $Uint64(x$156.$high, x$156.$low))), new $Uint64(x$155.$high + x434.$high, x$155.$low + x434.$low));
		x468 = new $Uint64(0, 0);
		x469 = new $Uint64(0, 0);
		_tuple$223 = bits.Add64(x414, x449, new $Uint64(0, 0));
		x468 = _tuple$223[0];
		x469 = _tuple$223[1];
		x470 = new $Uint64(0, 0);
		x471 = new $Uint64(0, 0);
		_tuple$224 = bits.Add64(x416, x451, ((x$157 = (new p521Uint1(x469.$high, x469.$low)), new $Uint64(x$157.$high, x$157.$low))));
		x470 = _tuple$224[0];
		x471 = _tuple$224[1];
		x472 = new $Uint64(0, 0);
		x473 = new $Uint64(0, 0);
		_tuple$225 = bits.Add64(x418, x453, ((x$158 = (new p521Uint1(x471.$high, x471.$low)), new $Uint64(x$158.$high, x$158.$low))));
		x472 = _tuple$225[0];
		x473 = _tuple$225[1];
		x474 = new $Uint64(0, 0);
		x475 = new $Uint64(0, 0);
		_tuple$226 = bits.Add64(x420, x455, ((x$159 = (new p521Uint1(x473.$high, x473.$low)), new $Uint64(x$159.$high, x$159.$low))));
		x474 = _tuple$226[0];
		x475 = _tuple$226[1];
		x476 = new $Uint64(0, 0);
		x477 = new $Uint64(0, 0);
		_tuple$227 = bits.Add64(x422, x457, ((x$160 = (new p521Uint1(x475.$high, x475.$low)), new $Uint64(x$160.$high, x$160.$low))));
		x476 = _tuple$227[0];
		x477 = _tuple$227[1];
		x478 = new $Uint64(0, 0);
		x479 = new $Uint64(0, 0);
		_tuple$228 = bits.Add64(x424, x459, ((x$161 = (new p521Uint1(x477.$high, x477.$low)), new $Uint64(x$161.$high, x$161.$low))));
		x478 = _tuple$228[0];
		x479 = _tuple$228[1];
		x480 = new $Uint64(0, 0);
		x481 = new $Uint64(0, 0);
		_tuple$229 = bits.Add64(x426, x461, ((x$162 = (new p521Uint1(x479.$high, x479.$low)), new $Uint64(x$162.$high, x$162.$low))));
		x480 = _tuple$229[0];
		x481 = _tuple$229[1];
		x482 = new $Uint64(0, 0);
		x483 = new $Uint64(0, 0);
		_tuple$230 = bits.Add64(x428, x463, ((x$163 = (new p521Uint1(x481.$high, x481.$low)), new $Uint64(x$163.$high, x$163.$low))));
		x482 = _tuple$230[0];
		x483 = _tuple$230[1];
		x484 = new $Uint64(0, 0);
		x485 = new $Uint64(0, 0);
		_tuple$231 = bits.Add64(x430, x465, ((x$164 = (new p521Uint1(x483.$high, x483.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x484 = _tuple$231[0];
		x485 = _tuple$231[1];
		x486 = new $Uint64(0, 0);
		x487 = new $Uint64(0, 0);
		_tuple$232 = bits.Add64(x432, x467, ((x$165 = (new p521Uint1(x485.$high, x485.$low)), new $Uint64(x$165.$high, x$165.$low))));
		x486 = _tuple$232[0];
		x487 = _tuple$232[1];
		x488 = new $Uint64(0, 0);
		x489 = new $Uint64(0, 0);
		_tuple$233 = bits.Mul64(x468, new $Uint64(0, 511));
		x489 = _tuple$233[0];
		x488 = _tuple$233[1];
		x490 = new $Uint64(0, 0);
		x491 = new $Uint64(0, 0);
		_tuple$234 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x491 = _tuple$234[0];
		x490 = _tuple$234[1];
		x492 = new $Uint64(0, 0);
		x493 = new $Uint64(0, 0);
		_tuple$235 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x493 = _tuple$235[0];
		x492 = _tuple$235[1];
		x494 = new $Uint64(0, 0);
		x495 = new $Uint64(0, 0);
		_tuple$236 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x495 = _tuple$236[0];
		x494 = _tuple$236[1];
		x496 = new $Uint64(0, 0);
		x497 = new $Uint64(0, 0);
		_tuple$237 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x497 = _tuple$237[0];
		x496 = _tuple$237[1];
		x498 = new $Uint64(0, 0);
		x499 = new $Uint64(0, 0);
		_tuple$238 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x499 = _tuple$238[0];
		x498 = _tuple$238[1];
		x500 = new $Uint64(0, 0);
		x501 = new $Uint64(0, 0);
		_tuple$239 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x501 = _tuple$239[0];
		x500 = _tuple$239[1];
		x502 = new $Uint64(0, 0);
		x503 = new $Uint64(0, 0);
		_tuple$240 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x503 = _tuple$240[0];
		x502 = _tuple$240[1];
		x504 = new $Uint64(0, 0);
		x505 = new $Uint64(0, 0);
		_tuple$241 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x505 = _tuple$241[0];
		x504 = _tuple$241[1];
		x506 = new $Uint64(0, 0);
		x507 = new $Uint64(0, 0);
		_tuple$242 = bits.Add64(x505, x502, new $Uint64(0, 0));
		x506 = _tuple$242[0];
		x507 = _tuple$242[1];
		x508 = new $Uint64(0, 0);
		x509 = new $Uint64(0, 0);
		_tuple$243 = bits.Add64(x503, x500, ((x$166 = (new p521Uint1(x507.$high, x507.$low)), new $Uint64(x$166.$high, x$166.$low))));
		x508 = _tuple$243[0];
		x509 = _tuple$243[1];
		x510 = new $Uint64(0, 0);
		x511 = new $Uint64(0, 0);
		_tuple$244 = bits.Add64(x501, x498, ((x$167 = (new p521Uint1(x509.$high, x509.$low)), new $Uint64(x$167.$high, x$167.$low))));
		x510 = _tuple$244[0];
		x511 = _tuple$244[1];
		x512 = new $Uint64(0, 0);
		x513 = new $Uint64(0, 0);
		_tuple$245 = bits.Add64(x499, x496, ((x$168 = (new p521Uint1(x511.$high, x511.$low)), new $Uint64(x$168.$high, x$168.$low))));
		x512 = _tuple$245[0];
		x513 = _tuple$245[1];
		x514 = new $Uint64(0, 0);
		x515 = new $Uint64(0, 0);
		_tuple$246 = bits.Add64(x497, x494, ((x$169 = (new p521Uint1(x513.$high, x513.$low)), new $Uint64(x$169.$high, x$169.$low))));
		x514 = _tuple$246[0];
		x515 = _tuple$246[1];
		x516 = new $Uint64(0, 0);
		x517 = new $Uint64(0, 0);
		_tuple$247 = bits.Add64(x495, x492, ((x$170 = (new p521Uint1(x515.$high, x515.$low)), new $Uint64(x$170.$high, x$170.$low))));
		x516 = _tuple$247[0];
		x517 = _tuple$247[1];
		x518 = new $Uint64(0, 0);
		x519 = new $Uint64(0, 0);
		_tuple$248 = bits.Add64(x493, x490, ((x$171 = (new p521Uint1(x517.$high, x517.$low)), new $Uint64(x$171.$high, x$171.$low))));
		x518 = _tuple$248[0];
		x519 = _tuple$248[1];
		x520 = new $Uint64(0, 0);
		x521 = new $Uint64(0, 0);
		_tuple$249 = bits.Add64(x491, x488, ((x$172 = (new p521Uint1(x519.$high, x519.$low)), new $Uint64(x$172.$high, x$172.$low))));
		x520 = _tuple$249[0];
		x521 = _tuple$249[1];
		x522 = (x$173 = ((x$174 = (new p521Uint1(x521.$high, x521.$low)), new $Uint64(x$174.$high, x$174.$low))), new $Uint64(x$173.$high + x489.$high, x$173.$low + x489.$low));
		x524 = new $Uint64(0, 0);
		_tuple$250 = bits.Add64(x468, x504, new $Uint64(0, 0));
		x524 = _tuple$250[1];
		x525 = new $Uint64(0, 0);
		x526 = new $Uint64(0, 0);
		_tuple$251 = bits.Add64(x470, x506, ((x$175 = (new p521Uint1(x524.$high, x524.$low)), new $Uint64(x$175.$high, x$175.$low))));
		x525 = _tuple$251[0];
		x526 = _tuple$251[1];
		x527 = new $Uint64(0, 0);
		x528 = new $Uint64(0, 0);
		_tuple$252 = bits.Add64(x472, x508, ((x$176 = (new p521Uint1(x526.$high, x526.$low)), new $Uint64(x$176.$high, x$176.$low))));
		x527 = _tuple$252[0];
		x528 = _tuple$252[1];
		x529 = new $Uint64(0, 0);
		x530 = new $Uint64(0, 0);
		_tuple$253 = bits.Add64(x474, x510, ((x$177 = (new p521Uint1(x528.$high, x528.$low)), new $Uint64(x$177.$high, x$177.$low))));
		x529 = _tuple$253[0];
		x530 = _tuple$253[1];
		x531 = new $Uint64(0, 0);
		x532 = new $Uint64(0, 0);
		_tuple$254 = bits.Add64(x476, x512, ((x$178 = (new p521Uint1(x530.$high, x530.$low)), new $Uint64(x$178.$high, x$178.$low))));
		x531 = _tuple$254[0];
		x532 = _tuple$254[1];
		x533 = new $Uint64(0, 0);
		x534 = new $Uint64(0, 0);
		_tuple$255 = bits.Add64(x478, x514, ((x$179 = (new p521Uint1(x532.$high, x532.$low)), new $Uint64(x$179.$high, x$179.$low))));
		x533 = _tuple$255[0];
		x534 = _tuple$255[1];
		x535 = new $Uint64(0, 0);
		x536 = new $Uint64(0, 0);
		_tuple$256 = bits.Add64(x480, x516, ((x$180 = (new p521Uint1(x534.$high, x534.$low)), new $Uint64(x$180.$high, x$180.$low))));
		x535 = _tuple$256[0];
		x536 = _tuple$256[1];
		x537 = new $Uint64(0, 0);
		x538 = new $Uint64(0, 0);
		_tuple$257 = bits.Add64(x482, x518, ((x$181 = (new p521Uint1(x536.$high, x536.$low)), new $Uint64(x$181.$high, x$181.$low))));
		x537 = _tuple$257[0];
		x538 = _tuple$257[1];
		x539 = new $Uint64(0, 0);
		x540 = new $Uint64(0, 0);
		_tuple$258 = bits.Add64(x484, x520, ((x$182 = (new p521Uint1(x538.$high, x538.$low)), new $Uint64(x$182.$high, x$182.$low))));
		x539 = _tuple$258[0];
		x540 = _tuple$258[1];
		x541 = new $Uint64(0, 0);
		x542 = new $Uint64(0, 0);
		_tuple$259 = bits.Add64(x486, x522, ((x$183 = (new p521Uint1(x540.$high, x540.$low)), new $Uint64(x$183.$high, x$183.$low))));
		x541 = _tuple$259[0];
		x542 = _tuple$259[1];
		x543 = (x$184 = ((x$185 = (new p521Uint1(x542.$high, x542.$low)), new $Uint64(x$185.$high, x$185.$low))), x$186 = ((x$187 = (new p521Uint1(x487.$high, x487.$low)), new $Uint64(x$187.$high, x$187.$low))), new $Uint64(x$184.$high + x$186.$high, x$184.$low + x$186.$low));
		x544 = new $Uint64(0, 0);
		x545 = new $Uint64(0, 0);
		_tuple$260 = bits.Mul64(x5, arg2[8]);
		x545 = _tuple$260[0];
		x544 = _tuple$260[1];
		x546 = new $Uint64(0, 0);
		x547 = new $Uint64(0, 0);
		_tuple$261 = bits.Mul64(x5, arg2[7]);
		x547 = _tuple$261[0];
		x546 = _tuple$261[1];
		x548 = new $Uint64(0, 0);
		x549 = new $Uint64(0, 0);
		_tuple$262 = bits.Mul64(x5, arg2[6]);
		x549 = _tuple$262[0];
		x548 = _tuple$262[1];
		x550 = new $Uint64(0, 0);
		x551 = new $Uint64(0, 0);
		_tuple$263 = bits.Mul64(x5, arg2[5]);
		x551 = _tuple$263[0];
		x550 = _tuple$263[1];
		x552 = new $Uint64(0, 0);
		x553 = new $Uint64(0, 0);
		_tuple$264 = bits.Mul64(x5, arg2[4]);
		x553 = _tuple$264[0];
		x552 = _tuple$264[1];
		x554 = new $Uint64(0, 0);
		x555 = new $Uint64(0, 0);
		_tuple$265 = bits.Mul64(x5, arg2[3]);
		x555 = _tuple$265[0];
		x554 = _tuple$265[1];
		x556 = new $Uint64(0, 0);
		x557 = new $Uint64(0, 0);
		_tuple$266 = bits.Mul64(x5, arg2[2]);
		x557 = _tuple$266[0];
		x556 = _tuple$266[1];
		x558 = new $Uint64(0, 0);
		x559 = new $Uint64(0, 0);
		_tuple$267 = bits.Mul64(x5, arg2[1]);
		x559 = _tuple$267[0];
		x558 = _tuple$267[1];
		x560 = new $Uint64(0, 0);
		x561 = new $Uint64(0, 0);
		_tuple$268 = bits.Mul64(x5, arg2[0]);
		x561 = _tuple$268[0];
		x560 = _tuple$268[1];
		x562 = new $Uint64(0, 0);
		x563 = new $Uint64(0, 0);
		_tuple$269 = bits.Add64(x561, x558, new $Uint64(0, 0));
		x562 = _tuple$269[0];
		x563 = _tuple$269[1];
		x564 = new $Uint64(0, 0);
		x565 = new $Uint64(0, 0);
		_tuple$270 = bits.Add64(x559, x556, ((x$188 = (new p521Uint1(x563.$high, x563.$low)), new $Uint64(x$188.$high, x$188.$low))));
		x564 = _tuple$270[0];
		x565 = _tuple$270[1];
		x566 = new $Uint64(0, 0);
		x567 = new $Uint64(0, 0);
		_tuple$271 = bits.Add64(x557, x554, ((x$189 = (new p521Uint1(x565.$high, x565.$low)), new $Uint64(x$189.$high, x$189.$low))));
		x566 = _tuple$271[0];
		x567 = _tuple$271[1];
		x568 = new $Uint64(0, 0);
		x569 = new $Uint64(0, 0);
		_tuple$272 = bits.Add64(x555, x552, ((x$190 = (new p521Uint1(x567.$high, x567.$low)), new $Uint64(x$190.$high, x$190.$low))));
		x568 = _tuple$272[0];
		x569 = _tuple$272[1];
		x570 = new $Uint64(0, 0);
		x571 = new $Uint64(0, 0);
		_tuple$273 = bits.Add64(x553, x550, ((x$191 = (new p521Uint1(x569.$high, x569.$low)), new $Uint64(x$191.$high, x$191.$low))));
		x570 = _tuple$273[0];
		x571 = _tuple$273[1];
		x572 = new $Uint64(0, 0);
		x573 = new $Uint64(0, 0);
		_tuple$274 = bits.Add64(x551, x548, ((x$192 = (new p521Uint1(x571.$high, x571.$low)), new $Uint64(x$192.$high, x$192.$low))));
		x572 = _tuple$274[0];
		x573 = _tuple$274[1];
		x574 = new $Uint64(0, 0);
		x575 = new $Uint64(0, 0);
		_tuple$275 = bits.Add64(x549, x546, ((x$193 = (new p521Uint1(x573.$high, x573.$low)), new $Uint64(x$193.$high, x$193.$low))));
		x574 = _tuple$275[0];
		x575 = _tuple$275[1];
		x576 = new $Uint64(0, 0);
		x577 = new $Uint64(0, 0);
		_tuple$276 = bits.Add64(x547, x544, ((x$194 = (new p521Uint1(x575.$high, x575.$low)), new $Uint64(x$194.$high, x$194.$low))));
		x576 = _tuple$276[0];
		x577 = _tuple$276[1];
		x578 = (x$195 = ((x$196 = (new p521Uint1(x577.$high, x577.$low)), new $Uint64(x$196.$high, x$196.$low))), new $Uint64(x$195.$high + x545.$high, x$195.$low + x545.$low));
		x579 = new $Uint64(0, 0);
		x580 = new $Uint64(0, 0);
		_tuple$277 = bits.Add64(x525, x560, new $Uint64(0, 0));
		x579 = _tuple$277[0];
		x580 = _tuple$277[1];
		x581 = new $Uint64(0, 0);
		x582 = new $Uint64(0, 0);
		_tuple$278 = bits.Add64(x527, x562, ((x$197 = (new p521Uint1(x580.$high, x580.$low)), new $Uint64(x$197.$high, x$197.$low))));
		x581 = _tuple$278[0];
		x582 = _tuple$278[1];
		x583 = new $Uint64(0, 0);
		x584 = new $Uint64(0, 0);
		_tuple$279 = bits.Add64(x529, x564, ((x$198 = (new p521Uint1(x582.$high, x582.$low)), new $Uint64(x$198.$high, x$198.$low))));
		x583 = _tuple$279[0];
		x584 = _tuple$279[1];
		x585 = new $Uint64(0, 0);
		x586 = new $Uint64(0, 0);
		_tuple$280 = bits.Add64(x531, x566, ((x$199 = (new p521Uint1(x584.$high, x584.$low)), new $Uint64(x$199.$high, x$199.$low))));
		x585 = _tuple$280[0];
		x586 = _tuple$280[1];
		x587 = new $Uint64(0, 0);
		x588 = new $Uint64(0, 0);
		_tuple$281 = bits.Add64(x533, x568, ((x$200 = (new p521Uint1(x586.$high, x586.$low)), new $Uint64(x$200.$high, x$200.$low))));
		x587 = _tuple$281[0];
		x588 = _tuple$281[1];
		x589 = new $Uint64(0, 0);
		x590 = new $Uint64(0, 0);
		_tuple$282 = bits.Add64(x535, x570, ((x$201 = (new p521Uint1(x588.$high, x588.$low)), new $Uint64(x$201.$high, x$201.$low))));
		x589 = _tuple$282[0];
		x590 = _tuple$282[1];
		x591 = new $Uint64(0, 0);
		x592 = new $Uint64(0, 0);
		_tuple$283 = bits.Add64(x537, x572, ((x$202 = (new p521Uint1(x590.$high, x590.$low)), new $Uint64(x$202.$high, x$202.$low))));
		x591 = _tuple$283[0];
		x592 = _tuple$283[1];
		x593 = new $Uint64(0, 0);
		x594 = new $Uint64(0, 0);
		_tuple$284 = bits.Add64(x539, x574, ((x$203 = (new p521Uint1(x592.$high, x592.$low)), new $Uint64(x$203.$high, x$203.$low))));
		x593 = _tuple$284[0];
		x594 = _tuple$284[1];
		x595 = new $Uint64(0, 0);
		x596 = new $Uint64(0, 0);
		_tuple$285 = bits.Add64(x541, x576, ((x$204 = (new p521Uint1(x594.$high, x594.$low)), new $Uint64(x$204.$high, x$204.$low))));
		x595 = _tuple$285[0];
		x596 = _tuple$285[1];
		x597 = new $Uint64(0, 0);
		x598 = new $Uint64(0, 0);
		_tuple$286 = bits.Add64(x543, x578, ((x$205 = (new p521Uint1(x596.$high, x596.$low)), new $Uint64(x$205.$high, x$205.$low))));
		x597 = _tuple$286[0];
		x598 = _tuple$286[1];
		x599 = new $Uint64(0, 0);
		x600 = new $Uint64(0, 0);
		_tuple$287 = bits.Mul64(x579, new $Uint64(0, 511));
		x600 = _tuple$287[0];
		x599 = _tuple$287[1];
		x601 = new $Uint64(0, 0);
		x602 = new $Uint64(0, 0);
		_tuple$288 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x602 = _tuple$288[0];
		x601 = _tuple$288[1];
		x603 = new $Uint64(0, 0);
		x604 = new $Uint64(0, 0);
		_tuple$289 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x604 = _tuple$289[0];
		x603 = _tuple$289[1];
		x605 = new $Uint64(0, 0);
		x606 = new $Uint64(0, 0);
		_tuple$290 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x606 = _tuple$290[0];
		x605 = _tuple$290[1];
		x607 = new $Uint64(0, 0);
		x608 = new $Uint64(0, 0);
		_tuple$291 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x608 = _tuple$291[0];
		x607 = _tuple$291[1];
		x609 = new $Uint64(0, 0);
		x610 = new $Uint64(0, 0);
		_tuple$292 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x610 = _tuple$292[0];
		x609 = _tuple$292[1];
		x611 = new $Uint64(0, 0);
		x612 = new $Uint64(0, 0);
		_tuple$293 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x612 = _tuple$293[0];
		x611 = _tuple$293[1];
		x613 = new $Uint64(0, 0);
		x614 = new $Uint64(0, 0);
		_tuple$294 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x614 = _tuple$294[0];
		x613 = _tuple$294[1];
		x615 = new $Uint64(0, 0);
		x616 = new $Uint64(0, 0);
		_tuple$295 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x616 = _tuple$295[0];
		x615 = _tuple$295[1];
		x617 = new $Uint64(0, 0);
		x618 = new $Uint64(0, 0);
		_tuple$296 = bits.Add64(x616, x613, new $Uint64(0, 0));
		x617 = _tuple$296[0];
		x618 = _tuple$296[1];
		x619 = new $Uint64(0, 0);
		x620 = new $Uint64(0, 0);
		_tuple$297 = bits.Add64(x614, x611, ((x$206 = (new p521Uint1(x618.$high, x618.$low)), new $Uint64(x$206.$high, x$206.$low))));
		x619 = _tuple$297[0];
		x620 = _tuple$297[1];
		x621 = new $Uint64(0, 0);
		x622 = new $Uint64(0, 0);
		_tuple$298 = bits.Add64(x612, x609, ((x$207 = (new p521Uint1(x620.$high, x620.$low)), new $Uint64(x$207.$high, x$207.$low))));
		x621 = _tuple$298[0];
		x622 = _tuple$298[1];
		x623 = new $Uint64(0, 0);
		x624 = new $Uint64(0, 0);
		_tuple$299 = bits.Add64(x610, x607, ((x$208 = (new p521Uint1(x622.$high, x622.$low)), new $Uint64(x$208.$high, x$208.$low))));
		x623 = _tuple$299[0];
		x624 = _tuple$299[1];
		x625 = new $Uint64(0, 0);
		x626 = new $Uint64(0, 0);
		_tuple$300 = bits.Add64(x608, x605, ((x$209 = (new p521Uint1(x624.$high, x624.$low)), new $Uint64(x$209.$high, x$209.$low))));
		x625 = _tuple$300[0];
		x626 = _tuple$300[1];
		x627 = new $Uint64(0, 0);
		x628 = new $Uint64(0, 0);
		_tuple$301 = bits.Add64(x606, x603, ((x$210 = (new p521Uint1(x626.$high, x626.$low)), new $Uint64(x$210.$high, x$210.$low))));
		x627 = _tuple$301[0];
		x628 = _tuple$301[1];
		x629 = new $Uint64(0, 0);
		x630 = new $Uint64(0, 0);
		_tuple$302 = bits.Add64(x604, x601, ((x$211 = (new p521Uint1(x628.$high, x628.$low)), new $Uint64(x$211.$high, x$211.$low))));
		x629 = _tuple$302[0];
		x630 = _tuple$302[1];
		x631 = new $Uint64(0, 0);
		x632 = new $Uint64(0, 0);
		_tuple$303 = bits.Add64(x602, x599, ((x$212 = (new p521Uint1(x630.$high, x630.$low)), new $Uint64(x$212.$high, x$212.$low))));
		x631 = _tuple$303[0];
		x632 = _tuple$303[1];
		x633 = (x$213 = ((x$214 = (new p521Uint1(x632.$high, x632.$low)), new $Uint64(x$214.$high, x$214.$low))), new $Uint64(x$213.$high + x600.$high, x$213.$low + x600.$low));
		x635 = new $Uint64(0, 0);
		_tuple$304 = bits.Add64(x579, x615, new $Uint64(0, 0));
		x635 = _tuple$304[1];
		x636 = new $Uint64(0, 0);
		x637 = new $Uint64(0, 0);
		_tuple$305 = bits.Add64(x581, x617, ((x$215 = (new p521Uint1(x635.$high, x635.$low)), new $Uint64(x$215.$high, x$215.$low))));
		x636 = _tuple$305[0];
		x637 = _tuple$305[1];
		x638 = new $Uint64(0, 0);
		x639 = new $Uint64(0, 0);
		_tuple$306 = bits.Add64(x583, x619, ((x$216 = (new p521Uint1(x637.$high, x637.$low)), new $Uint64(x$216.$high, x$216.$low))));
		x638 = _tuple$306[0];
		x639 = _tuple$306[1];
		x640 = new $Uint64(0, 0);
		x641 = new $Uint64(0, 0);
		_tuple$307 = bits.Add64(x585, x621, ((x$217 = (new p521Uint1(x639.$high, x639.$low)), new $Uint64(x$217.$high, x$217.$low))));
		x640 = _tuple$307[0];
		x641 = _tuple$307[1];
		x642 = new $Uint64(0, 0);
		x643 = new $Uint64(0, 0);
		_tuple$308 = bits.Add64(x587, x623, ((x$218 = (new p521Uint1(x641.$high, x641.$low)), new $Uint64(x$218.$high, x$218.$low))));
		x642 = _tuple$308[0];
		x643 = _tuple$308[1];
		x644 = new $Uint64(0, 0);
		x645 = new $Uint64(0, 0);
		_tuple$309 = bits.Add64(x589, x625, ((x$219 = (new p521Uint1(x643.$high, x643.$low)), new $Uint64(x$219.$high, x$219.$low))));
		x644 = _tuple$309[0];
		x645 = _tuple$309[1];
		x646 = new $Uint64(0, 0);
		x647 = new $Uint64(0, 0);
		_tuple$310 = bits.Add64(x591, x627, ((x$220 = (new p521Uint1(x645.$high, x645.$low)), new $Uint64(x$220.$high, x$220.$low))));
		x646 = _tuple$310[0];
		x647 = _tuple$310[1];
		x648 = new $Uint64(0, 0);
		x649 = new $Uint64(0, 0);
		_tuple$311 = bits.Add64(x593, x629, ((x$221 = (new p521Uint1(x647.$high, x647.$low)), new $Uint64(x$221.$high, x$221.$low))));
		x648 = _tuple$311[0];
		x649 = _tuple$311[1];
		x650 = new $Uint64(0, 0);
		x651 = new $Uint64(0, 0);
		_tuple$312 = bits.Add64(x595, x631, ((x$222 = (new p521Uint1(x649.$high, x649.$low)), new $Uint64(x$222.$high, x$222.$low))));
		x650 = _tuple$312[0];
		x651 = _tuple$312[1];
		x652 = new $Uint64(0, 0);
		x653 = new $Uint64(0, 0);
		_tuple$313 = bits.Add64(x597, x633, ((x$223 = (new p521Uint1(x651.$high, x651.$low)), new $Uint64(x$223.$high, x$223.$low))));
		x652 = _tuple$313[0];
		x653 = _tuple$313[1];
		x654 = (x$224 = ((x$225 = (new p521Uint1(x653.$high, x653.$low)), new $Uint64(x$225.$high, x$225.$low))), x$226 = ((x$227 = (new p521Uint1(x598.$high, x598.$low)), new $Uint64(x$227.$high, x$227.$low))), new $Uint64(x$224.$high + x$226.$high, x$224.$low + x$226.$low));
		x655 = new $Uint64(0, 0);
		x656 = new $Uint64(0, 0);
		_tuple$314 = bits.Mul64(x6, arg2[8]);
		x656 = _tuple$314[0];
		x655 = _tuple$314[1];
		x657 = new $Uint64(0, 0);
		x658 = new $Uint64(0, 0);
		_tuple$315 = bits.Mul64(x6, arg2[7]);
		x658 = _tuple$315[0];
		x657 = _tuple$315[1];
		x659 = new $Uint64(0, 0);
		x660 = new $Uint64(0, 0);
		_tuple$316 = bits.Mul64(x6, arg2[6]);
		x660 = _tuple$316[0];
		x659 = _tuple$316[1];
		x661 = new $Uint64(0, 0);
		x662 = new $Uint64(0, 0);
		_tuple$317 = bits.Mul64(x6, arg2[5]);
		x662 = _tuple$317[0];
		x661 = _tuple$317[1];
		x663 = new $Uint64(0, 0);
		x664 = new $Uint64(0, 0);
		_tuple$318 = bits.Mul64(x6, arg2[4]);
		x664 = _tuple$318[0];
		x663 = _tuple$318[1];
		x665 = new $Uint64(0, 0);
		x666 = new $Uint64(0, 0);
		_tuple$319 = bits.Mul64(x6, arg2[3]);
		x666 = _tuple$319[0];
		x665 = _tuple$319[1];
		x667 = new $Uint64(0, 0);
		x668 = new $Uint64(0, 0);
		_tuple$320 = bits.Mul64(x6, arg2[2]);
		x668 = _tuple$320[0];
		x667 = _tuple$320[1];
		x669 = new $Uint64(0, 0);
		x670 = new $Uint64(0, 0);
		_tuple$321 = bits.Mul64(x6, arg2[1]);
		x670 = _tuple$321[0];
		x669 = _tuple$321[1];
		x671 = new $Uint64(0, 0);
		x672 = new $Uint64(0, 0);
		_tuple$322 = bits.Mul64(x6, arg2[0]);
		x672 = _tuple$322[0];
		x671 = _tuple$322[1];
		x673 = new $Uint64(0, 0);
		x674 = new $Uint64(0, 0);
		_tuple$323 = bits.Add64(x672, x669, new $Uint64(0, 0));
		x673 = _tuple$323[0];
		x674 = _tuple$323[1];
		x675 = new $Uint64(0, 0);
		x676 = new $Uint64(0, 0);
		_tuple$324 = bits.Add64(x670, x667, ((x$228 = (new p521Uint1(x674.$high, x674.$low)), new $Uint64(x$228.$high, x$228.$low))));
		x675 = _tuple$324[0];
		x676 = _tuple$324[1];
		x677 = new $Uint64(0, 0);
		x678 = new $Uint64(0, 0);
		_tuple$325 = bits.Add64(x668, x665, ((x$229 = (new p521Uint1(x676.$high, x676.$low)), new $Uint64(x$229.$high, x$229.$low))));
		x677 = _tuple$325[0];
		x678 = _tuple$325[1];
		x679 = new $Uint64(0, 0);
		x680 = new $Uint64(0, 0);
		_tuple$326 = bits.Add64(x666, x663, ((x$230 = (new p521Uint1(x678.$high, x678.$low)), new $Uint64(x$230.$high, x$230.$low))));
		x679 = _tuple$326[0];
		x680 = _tuple$326[1];
		x681 = new $Uint64(0, 0);
		x682 = new $Uint64(0, 0);
		_tuple$327 = bits.Add64(x664, x661, ((x$231 = (new p521Uint1(x680.$high, x680.$low)), new $Uint64(x$231.$high, x$231.$low))));
		x681 = _tuple$327[0];
		x682 = _tuple$327[1];
		x683 = new $Uint64(0, 0);
		x684 = new $Uint64(0, 0);
		_tuple$328 = bits.Add64(x662, x659, ((x$232 = (new p521Uint1(x682.$high, x682.$low)), new $Uint64(x$232.$high, x$232.$low))));
		x683 = _tuple$328[0];
		x684 = _tuple$328[1];
		x685 = new $Uint64(0, 0);
		x686 = new $Uint64(0, 0);
		_tuple$329 = bits.Add64(x660, x657, ((x$233 = (new p521Uint1(x684.$high, x684.$low)), new $Uint64(x$233.$high, x$233.$low))));
		x685 = _tuple$329[0];
		x686 = _tuple$329[1];
		x687 = new $Uint64(0, 0);
		x688 = new $Uint64(0, 0);
		_tuple$330 = bits.Add64(x658, x655, ((x$234 = (new p521Uint1(x686.$high, x686.$low)), new $Uint64(x$234.$high, x$234.$low))));
		x687 = _tuple$330[0];
		x688 = _tuple$330[1];
		x689 = (x$235 = ((x$236 = (new p521Uint1(x688.$high, x688.$low)), new $Uint64(x$236.$high, x$236.$low))), new $Uint64(x$235.$high + x656.$high, x$235.$low + x656.$low));
		x690 = new $Uint64(0, 0);
		x691 = new $Uint64(0, 0);
		_tuple$331 = bits.Add64(x636, x671, new $Uint64(0, 0));
		x690 = _tuple$331[0];
		x691 = _tuple$331[1];
		x692 = new $Uint64(0, 0);
		x693 = new $Uint64(0, 0);
		_tuple$332 = bits.Add64(x638, x673, ((x$237 = (new p521Uint1(x691.$high, x691.$low)), new $Uint64(x$237.$high, x$237.$low))));
		x692 = _tuple$332[0];
		x693 = _tuple$332[1];
		x694 = new $Uint64(0, 0);
		x695 = new $Uint64(0, 0);
		_tuple$333 = bits.Add64(x640, x675, ((x$238 = (new p521Uint1(x693.$high, x693.$low)), new $Uint64(x$238.$high, x$238.$low))));
		x694 = _tuple$333[0];
		x695 = _tuple$333[1];
		x696 = new $Uint64(0, 0);
		x697 = new $Uint64(0, 0);
		_tuple$334 = bits.Add64(x642, x677, ((x$239 = (new p521Uint1(x695.$high, x695.$low)), new $Uint64(x$239.$high, x$239.$low))));
		x696 = _tuple$334[0];
		x697 = _tuple$334[1];
		x698 = new $Uint64(0, 0);
		x699 = new $Uint64(0, 0);
		_tuple$335 = bits.Add64(x644, x679, ((x$240 = (new p521Uint1(x697.$high, x697.$low)), new $Uint64(x$240.$high, x$240.$low))));
		x698 = _tuple$335[0];
		x699 = _tuple$335[1];
		x700 = new $Uint64(0, 0);
		x701 = new $Uint64(0, 0);
		_tuple$336 = bits.Add64(x646, x681, ((x$241 = (new p521Uint1(x699.$high, x699.$low)), new $Uint64(x$241.$high, x$241.$low))));
		x700 = _tuple$336[0];
		x701 = _tuple$336[1];
		x702 = new $Uint64(0, 0);
		x703 = new $Uint64(0, 0);
		_tuple$337 = bits.Add64(x648, x683, ((x$242 = (new p521Uint1(x701.$high, x701.$low)), new $Uint64(x$242.$high, x$242.$low))));
		x702 = _tuple$337[0];
		x703 = _tuple$337[1];
		x704 = new $Uint64(0, 0);
		x705 = new $Uint64(0, 0);
		_tuple$338 = bits.Add64(x650, x685, ((x$243 = (new p521Uint1(x703.$high, x703.$low)), new $Uint64(x$243.$high, x$243.$low))));
		x704 = _tuple$338[0];
		x705 = _tuple$338[1];
		x706 = new $Uint64(0, 0);
		x707 = new $Uint64(0, 0);
		_tuple$339 = bits.Add64(x652, x687, ((x$244 = (new p521Uint1(x705.$high, x705.$low)), new $Uint64(x$244.$high, x$244.$low))));
		x706 = _tuple$339[0];
		x707 = _tuple$339[1];
		x708 = new $Uint64(0, 0);
		x709 = new $Uint64(0, 0);
		_tuple$340 = bits.Add64(x654, x689, ((x$245 = (new p521Uint1(x707.$high, x707.$low)), new $Uint64(x$245.$high, x$245.$low))));
		x708 = _tuple$340[0];
		x709 = _tuple$340[1];
		x710 = new $Uint64(0, 0);
		x711 = new $Uint64(0, 0);
		_tuple$341 = bits.Mul64(x690, new $Uint64(0, 511));
		x711 = _tuple$341[0];
		x710 = _tuple$341[1];
		x712 = new $Uint64(0, 0);
		x713 = new $Uint64(0, 0);
		_tuple$342 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x713 = _tuple$342[0];
		x712 = _tuple$342[1];
		x714 = new $Uint64(0, 0);
		x715 = new $Uint64(0, 0);
		_tuple$343 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x715 = _tuple$343[0];
		x714 = _tuple$343[1];
		x716 = new $Uint64(0, 0);
		x717 = new $Uint64(0, 0);
		_tuple$344 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x717 = _tuple$344[0];
		x716 = _tuple$344[1];
		x718 = new $Uint64(0, 0);
		x719 = new $Uint64(0, 0);
		_tuple$345 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x719 = _tuple$345[0];
		x718 = _tuple$345[1];
		x720 = new $Uint64(0, 0);
		x721 = new $Uint64(0, 0);
		_tuple$346 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x721 = _tuple$346[0];
		x720 = _tuple$346[1];
		x722 = new $Uint64(0, 0);
		x723 = new $Uint64(0, 0);
		_tuple$347 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x723 = _tuple$347[0];
		x722 = _tuple$347[1];
		x724 = new $Uint64(0, 0);
		x725 = new $Uint64(0, 0);
		_tuple$348 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x725 = _tuple$348[0];
		x724 = _tuple$348[1];
		x726 = new $Uint64(0, 0);
		x727 = new $Uint64(0, 0);
		_tuple$349 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x727 = _tuple$349[0];
		x726 = _tuple$349[1];
		x728 = new $Uint64(0, 0);
		x729 = new $Uint64(0, 0);
		_tuple$350 = bits.Add64(x727, x724, new $Uint64(0, 0));
		x728 = _tuple$350[0];
		x729 = _tuple$350[1];
		x730 = new $Uint64(0, 0);
		x731 = new $Uint64(0, 0);
		_tuple$351 = bits.Add64(x725, x722, ((x$246 = (new p521Uint1(x729.$high, x729.$low)), new $Uint64(x$246.$high, x$246.$low))));
		x730 = _tuple$351[0];
		x731 = _tuple$351[1];
		x732 = new $Uint64(0, 0);
		x733 = new $Uint64(0, 0);
		_tuple$352 = bits.Add64(x723, x720, ((x$247 = (new p521Uint1(x731.$high, x731.$low)), new $Uint64(x$247.$high, x$247.$low))));
		x732 = _tuple$352[0];
		x733 = _tuple$352[1];
		x734 = new $Uint64(0, 0);
		x735 = new $Uint64(0, 0);
		_tuple$353 = bits.Add64(x721, x718, ((x$248 = (new p521Uint1(x733.$high, x733.$low)), new $Uint64(x$248.$high, x$248.$low))));
		x734 = _tuple$353[0];
		x735 = _tuple$353[1];
		x736 = new $Uint64(0, 0);
		x737 = new $Uint64(0, 0);
		_tuple$354 = bits.Add64(x719, x716, ((x$249 = (new p521Uint1(x735.$high, x735.$low)), new $Uint64(x$249.$high, x$249.$low))));
		x736 = _tuple$354[0];
		x737 = _tuple$354[1];
		x738 = new $Uint64(0, 0);
		x739 = new $Uint64(0, 0);
		_tuple$355 = bits.Add64(x717, x714, ((x$250 = (new p521Uint1(x737.$high, x737.$low)), new $Uint64(x$250.$high, x$250.$low))));
		x738 = _tuple$355[0];
		x739 = _tuple$355[1];
		x740 = new $Uint64(0, 0);
		x741 = new $Uint64(0, 0);
		_tuple$356 = bits.Add64(x715, x712, ((x$251 = (new p521Uint1(x739.$high, x739.$low)), new $Uint64(x$251.$high, x$251.$low))));
		x740 = _tuple$356[0];
		x741 = _tuple$356[1];
		x742 = new $Uint64(0, 0);
		x743 = new $Uint64(0, 0);
		_tuple$357 = bits.Add64(x713, x710, ((x$252 = (new p521Uint1(x741.$high, x741.$low)), new $Uint64(x$252.$high, x$252.$low))));
		x742 = _tuple$357[0];
		x743 = _tuple$357[1];
		x744 = (x$253 = ((x$254 = (new p521Uint1(x743.$high, x743.$low)), new $Uint64(x$254.$high, x$254.$low))), new $Uint64(x$253.$high + x711.$high, x$253.$low + x711.$low));
		x746 = new $Uint64(0, 0);
		_tuple$358 = bits.Add64(x690, x726, new $Uint64(0, 0));
		x746 = _tuple$358[1];
		x747 = new $Uint64(0, 0);
		x748 = new $Uint64(0, 0);
		_tuple$359 = bits.Add64(x692, x728, ((x$255 = (new p521Uint1(x746.$high, x746.$low)), new $Uint64(x$255.$high, x$255.$low))));
		x747 = _tuple$359[0];
		x748 = _tuple$359[1];
		x749 = new $Uint64(0, 0);
		x750 = new $Uint64(0, 0);
		_tuple$360 = bits.Add64(x694, x730, ((x$256 = (new p521Uint1(x748.$high, x748.$low)), new $Uint64(x$256.$high, x$256.$low))));
		x749 = _tuple$360[0];
		x750 = _tuple$360[1];
		x751 = new $Uint64(0, 0);
		x752 = new $Uint64(0, 0);
		_tuple$361 = bits.Add64(x696, x732, ((x$257 = (new p521Uint1(x750.$high, x750.$low)), new $Uint64(x$257.$high, x$257.$low))));
		x751 = _tuple$361[0];
		x752 = _tuple$361[1];
		x753 = new $Uint64(0, 0);
		x754 = new $Uint64(0, 0);
		_tuple$362 = bits.Add64(x698, x734, ((x$258 = (new p521Uint1(x752.$high, x752.$low)), new $Uint64(x$258.$high, x$258.$low))));
		x753 = _tuple$362[0];
		x754 = _tuple$362[1];
		x755 = new $Uint64(0, 0);
		x756 = new $Uint64(0, 0);
		_tuple$363 = bits.Add64(x700, x736, ((x$259 = (new p521Uint1(x754.$high, x754.$low)), new $Uint64(x$259.$high, x$259.$low))));
		x755 = _tuple$363[0];
		x756 = _tuple$363[1];
		x757 = new $Uint64(0, 0);
		x758 = new $Uint64(0, 0);
		_tuple$364 = bits.Add64(x702, x738, ((x$260 = (new p521Uint1(x756.$high, x756.$low)), new $Uint64(x$260.$high, x$260.$low))));
		x757 = _tuple$364[0];
		x758 = _tuple$364[1];
		x759 = new $Uint64(0, 0);
		x760 = new $Uint64(0, 0);
		_tuple$365 = bits.Add64(x704, x740, ((x$261 = (new p521Uint1(x758.$high, x758.$low)), new $Uint64(x$261.$high, x$261.$low))));
		x759 = _tuple$365[0];
		x760 = _tuple$365[1];
		x761 = new $Uint64(0, 0);
		x762 = new $Uint64(0, 0);
		_tuple$366 = bits.Add64(x706, x742, ((x$262 = (new p521Uint1(x760.$high, x760.$low)), new $Uint64(x$262.$high, x$262.$low))));
		x761 = _tuple$366[0];
		x762 = _tuple$366[1];
		x763 = new $Uint64(0, 0);
		x764 = new $Uint64(0, 0);
		_tuple$367 = bits.Add64(x708, x744, ((x$263 = (new p521Uint1(x762.$high, x762.$low)), new $Uint64(x$263.$high, x$263.$low))));
		x763 = _tuple$367[0];
		x764 = _tuple$367[1];
		x765 = (x$264 = ((x$265 = (new p521Uint1(x764.$high, x764.$low)), new $Uint64(x$265.$high, x$265.$low))), x$266 = ((x$267 = (new p521Uint1(x709.$high, x709.$low)), new $Uint64(x$267.$high, x$267.$low))), new $Uint64(x$264.$high + x$266.$high, x$264.$low + x$266.$low));
		x766 = new $Uint64(0, 0);
		x767 = new $Uint64(0, 0);
		_tuple$368 = bits.Mul64(x7, arg2[8]);
		x767 = _tuple$368[0];
		x766 = _tuple$368[1];
		x768 = new $Uint64(0, 0);
		x769 = new $Uint64(0, 0);
		_tuple$369 = bits.Mul64(x7, arg2[7]);
		x769 = _tuple$369[0];
		x768 = _tuple$369[1];
		x770 = new $Uint64(0, 0);
		x771 = new $Uint64(0, 0);
		_tuple$370 = bits.Mul64(x7, arg2[6]);
		x771 = _tuple$370[0];
		x770 = _tuple$370[1];
		x772 = new $Uint64(0, 0);
		x773 = new $Uint64(0, 0);
		_tuple$371 = bits.Mul64(x7, arg2[5]);
		x773 = _tuple$371[0];
		x772 = _tuple$371[1];
		x774 = new $Uint64(0, 0);
		x775 = new $Uint64(0, 0);
		_tuple$372 = bits.Mul64(x7, arg2[4]);
		x775 = _tuple$372[0];
		x774 = _tuple$372[1];
		x776 = new $Uint64(0, 0);
		x777 = new $Uint64(0, 0);
		_tuple$373 = bits.Mul64(x7, arg2[3]);
		x777 = _tuple$373[0];
		x776 = _tuple$373[1];
		x778 = new $Uint64(0, 0);
		x779 = new $Uint64(0, 0);
		_tuple$374 = bits.Mul64(x7, arg2[2]);
		x779 = _tuple$374[0];
		x778 = _tuple$374[1];
		x780 = new $Uint64(0, 0);
		x781 = new $Uint64(0, 0);
		_tuple$375 = bits.Mul64(x7, arg2[1]);
		x781 = _tuple$375[0];
		x780 = _tuple$375[1];
		x782 = new $Uint64(0, 0);
		x783 = new $Uint64(0, 0);
		_tuple$376 = bits.Mul64(x7, arg2[0]);
		x783 = _tuple$376[0];
		x782 = _tuple$376[1];
		x784 = new $Uint64(0, 0);
		x785 = new $Uint64(0, 0);
		_tuple$377 = bits.Add64(x783, x780, new $Uint64(0, 0));
		x784 = _tuple$377[0];
		x785 = _tuple$377[1];
		x786 = new $Uint64(0, 0);
		x787 = new $Uint64(0, 0);
		_tuple$378 = bits.Add64(x781, x778, ((x$268 = (new p521Uint1(x785.$high, x785.$low)), new $Uint64(x$268.$high, x$268.$low))));
		x786 = _tuple$378[0];
		x787 = _tuple$378[1];
		x788 = new $Uint64(0, 0);
		x789 = new $Uint64(0, 0);
		_tuple$379 = bits.Add64(x779, x776, ((x$269 = (new p521Uint1(x787.$high, x787.$low)), new $Uint64(x$269.$high, x$269.$low))));
		x788 = _tuple$379[0];
		x789 = _tuple$379[1];
		x790 = new $Uint64(0, 0);
		x791 = new $Uint64(0, 0);
		_tuple$380 = bits.Add64(x777, x774, ((x$270 = (new p521Uint1(x789.$high, x789.$low)), new $Uint64(x$270.$high, x$270.$low))));
		x790 = _tuple$380[0];
		x791 = _tuple$380[1];
		x792 = new $Uint64(0, 0);
		x793 = new $Uint64(0, 0);
		_tuple$381 = bits.Add64(x775, x772, ((x$271 = (new p521Uint1(x791.$high, x791.$low)), new $Uint64(x$271.$high, x$271.$low))));
		x792 = _tuple$381[0];
		x793 = _tuple$381[1];
		x794 = new $Uint64(0, 0);
		x795 = new $Uint64(0, 0);
		_tuple$382 = bits.Add64(x773, x770, ((x$272 = (new p521Uint1(x793.$high, x793.$low)), new $Uint64(x$272.$high, x$272.$low))));
		x794 = _tuple$382[0];
		x795 = _tuple$382[1];
		x796 = new $Uint64(0, 0);
		x797 = new $Uint64(0, 0);
		_tuple$383 = bits.Add64(x771, x768, ((x$273 = (new p521Uint1(x795.$high, x795.$low)), new $Uint64(x$273.$high, x$273.$low))));
		x796 = _tuple$383[0];
		x797 = _tuple$383[1];
		x798 = new $Uint64(0, 0);
		x799 = new $Uint64(0, 0);
		_tuple$384 = bits.Add64(x769, x766, ((x$274 = (new p521Uint1(x797.$high, x797.$low)), new $Uint64(x$274.$high, x$274.$low))));
		x798 = _tuple$384[0];
		x799 = _tuple$384[1];
		x800 = (x$275 = ((x$276 = (new p521Uint1(x799.$high, x799.$low)), new $Uint64(x$276.$high, x$276.$low))), new $Uint64(x$275.$high + x767.$high, x$275.$low + x767.$low));
		x801 = new $Uint64(0, 0);
		x802 = new $Uint64(0, 0);
		_tuple$385 = bits.Add64(x747, x782, new $Uint64(0, 0));
		x801 = _tuple$385[0];
		x802 = _tuple$385[1];
		x803 = new $Uint64(0, 0);
		x804 = new $Uint64(0, 0);
		_tuple$386 = bits.Add64(x749, x784, ((x$277 = (new p521Uint1(x802.$high, x802.$low)), new $Uint64(x$277.$high, x$277.$low))));
		x803 = _tuple$386[0];
		x804 = _tuple$386[1];
		x805 = new $Uint64(0, 0);
		x806 = new $Uint64(0, 0);
		_tuple$387 = bits.Add64(x751, x786, ((x$278 = (new p521Uint1(x804.$high, x804.$low)), new $Uint64(x$278.$high, x$278.$low))));
		x805 = _tuple$387[0];
		x806 = _tuple$387[1];
		x807 = new $Uint64(0, 0);
		x808 = new $Uint64(0, 0);
		_tuple$388 = bits.Add64(x753, x788, ((x$279 = (new p521Uint1(x806.$high, x806.$low)), new $Uint64(x$279.$high, x$279.$low))));
		x807 = _tuple$388[0];
		x808 = _tuple$388[1];
		x809 = new $Uint64(0, 0);
		x810 = new $Uint64(0, 0);
		_tuple$389 = bits.Add64(x755, x790, ((x$280 = (new p521Uint1(x808.$high, x808.$low)), new $Uint64(x$280.$high, x$280.$low))));
		x809 = _tuple$389[0];
		x810 = _tuple$389[1];
		x811 = new $Uint64(0, 0);
		x812 = new $Uint64(0, 0);
		_tuple$390 = bits.Add64(x757, x792, ((x$281 = (new p521Uint1(x810.$high, x810.$low)), new $Uint64(x$281.$high, x$281.$low))));
		x811 = _tuple$390[0];
		x812 = _tuple$390[1];
		x813 = new $Uint64(0, 0);
		x814 = new $Uint64(0, 0);
		_tuple$391 = bits.Add64(x759, x794, ((x$282 = (new p521Uint1(x812.$high, x812.$low)), new $Uint64(x$282.$high, x$282.$low))));
		x813 = _tuple$391[0];
		x814 = _tuple$391[1];
		x815 = new $Uint64(0, 0);
		x816 = new $Uint64(0, 0);
		_tuple$392 = bits.Add64(x761, x796, ((x$283 = (new p521Uint1(x814.$high, x814.$low)), new $Uint64(x$283.$high, x$283.$low))));
		x815 = _tuple$392[0];
		x816 = _tuple$392[1];
		x817 = new $Uint64(0, 0);
		x818 = new $Uint64(0, 0);
		_tuple$393 = bits.Add64(x763, x798, ((x$284 = (new p521Uint1(x816.$high, x816.$low)), new $Uint64(x$284.$high, x$284.$low))));
		x817 = _tuple$393[0];
		x818 = _tuple$393[1];
		x819 = new $Uint64(0, 0);
		x820 = new $Uint64(0, 0);
		_tuple$394 = bits.Add64(x765, x800, ((x$285 = (new p521Uint1(x818.$high, x818.$low)), new $Uint64(x$285.$high, x$285.$low))));
		x819 = _tuple$394[0];
		x820 = _tuple$394[1];
		x821 = new $Uint64(0, 0);
		x822 = new $Uint64(0, 0);
		_tuple$395 = bits.Mul64(x801, new $Uint64(0, 511));
		x822 = _tuple$395[0];
		x821 = _tuple$395[1];
		x823 = new $Uint64(0, 0);
		x824 = new $Uint64(0, 0);
		_tuple$396 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x824 = _tuple$396[0];
		x823 = _tuple$396[1];
		x825 = new $Uint64(0, 0);
		x826 = new $Uint64(0, 0);
		_tuple$397 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x826 = _tuple$397[0];
		x825 = _tuple$397[1];
		x827 = new $Uint64(0, 0);
		x828 = new $Uint64(0, 0);
		_tuple$398 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x828 = _tuple$398[0];
		x827 = _tuple$398[1];
		x829 = new $Uint64(0, 0);
		x830 = new $Uint64(0, 0);
		_tuple$399 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x830 = _tuple$399[0];
		x829 = _tuple$399[1];
		x831 = new $Uint64(0, 0);
		x832 = new $Uint64(0, 0);
		_tuple$400 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x832 = _tuple$400[0];
		x831 = _tuple$400[1];
		x833 = new $Uint64(0, 0);
		x834 = new $Uint64(0, 0);
		_tuple$401 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x834 = _tuple$401[0];
		x833 = _tuple$401[1];
		x835 = new $Uint64(0, 0);
		x836 = new $Uint64(0, 0);
		_tuple$402 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x836 = _tuple$402[0];
		x835 = _tuple$402[1];
		x837 = new $Uint64(0, 0);
		x838 = new $Uint64(0, 0);
		_tuple$403 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x838 = _tuple$403[0];
		x837 = _tuple$403[1];
		x839 = new $Uint64(0, 0);
		x840 = new $Uint64(0, 0);
		_tuple$404 = bits.Add64(x838, x835, new $Uint64(0, 0));
		x839 = _tuple$404[0];
		x840 = _tuple$404[1];
		x841 = new $Uint64(0, 0);
		x842 = new $Uint64(0, 0);
		_tuple$405 = bits.Add64(x836, x833, ((x$286 = (new p521Uint1(x840.$high, x840.$low)), new $Uint64(x$286.$high, x$286.$low))));
		x841 = _tuple$405[0];
		x842 = _tuple$405[1];
		x843 = new $Uint64(0, 0);
		x844 = new $Uint64(0, 0);
		_tuple$406 = bits.Add64(x834, x831, ((x$287 = (new p521Uint1(x842.$high, x842.$low)), new $Uint64(x$287.$high, x$287.$low))));
		x843 = _tuple$406[0];
		x844 = _tuple$406[1];
		x845 = new $Uint64(0, 0);
		x846 = new $Uint64(0, 0);
		_tuple$407 = bits.Add64(x832, x829, ((x$288 = (new p521Uint1(x844.$high, x844.$low)), new $Uint64(x$288.$high, x$288.$low))));
		x845 = _tuple$407[0];
		x846 = _tuple$407[1];
		x847 = new $Uint64(0, 0);
		x848 = new $Uint64(0, 0);
		_tuple$408 = bits.Add64(x830, x827, ((x$289 = (new p521Uint1(x846.$high, x846.$low)), new $Uint64(x$289.$high, x$289.$low))));
		x847 = _tuple$408[0];
		x848 = _tuple$408[1];
		x849 = new $Uint64(0, 0);
		x850 = new $Uint64(0, 0);
		_tuple$409 = bits.Add64(x828, x825, ((x$290 = (new p521Uint1(x848.$high, x848.$low)), new $Uint64(x$290.$high, x$290.$low))));
		x849 = _tuple$409[0];
		x850 = _tuple$409[1];
		x851 = new $Uint64(0, 0);
		x852 = new $Uint64(0, 0);
		_tuple$410 = bits.Add64(x826, x823, ((x$291 = (new p521Uint1(x850.$high, x850.$low)), new $Uint64(x$291.$high, x$291.$low))));
		x851 = _tuple$410[0];
		x852 = _tuple$410[1];
		x853 = new $Uint64(0, 0);
		x854 = new $Uint64(0, 0);
		_tuple$411 = bits.Add64(x824, x821, ((x$292 = (new p521Uint1(x852.$high, x852.$low)), new $Uint64(x$292.$high, x$292.$low))));
		x853 = _tuple$411[0];
		x854 = _tuple$411[1];
		x855 = (x$293 = ((x$294 = (new p521Uint1(x854.$high, x854.$low)), new $Uint64(x$294.$high, x$294.$low))), new $Uint64(x$293.$high + x822.$high, x$293.$low + x822.$low));
		x857 = new $Uint64(0, 0);
		_tuple$412 = bits.Add64(x801, x837, new $Uint64(0, 0));
		x857 = _tuple$412[1];
		x858 = new $Uint64(0, 0);
		x859 = new $Uint64(0, 0);
		_tuple$413 = bits.Add64(x803, x839, ((x$295 = (new p521Uint1(x857.$high, x857.$low)), new $Uint64(x$295.$high, x$295.$low))));
		x858 = _tuple$413[0];
		x859 = _tuple$413[1];
		x860 = new $Uint64(0, 0);
		x861 = new $Uint64(0, 0);
		_tuple$414 = bits.Add64(x805, x841, ((x$296 = (new p521Uint1(x859.$high, x859.$low)), new $Uint64(x$296.$high, x$296.$low))));
		x860 = _tuple$414[0];
		x861 = _tuple$414[1];
		x862 = new $Uint64(0, 0);
		x863 = new $Uint64(0, 0);
		_tuple$415 = bits.Add64(x807, x843, ((x$297 = (new p521Uint1(x861.$high, x861.$low)), new $Uint64(x$297.$high, x$297.$low))));
		x862 = _tuple$415[0];
		x863 = _tuple$415[1];
		x864 = new $Uint64(0, 0);
		x865 = new $Uint64(0, 0);
		_tuple$416 = bits.Add64(x809, x845, ((x$298 = (new p521Uint1(x863.$high, x863.$low)), new $Uint64(x$298.$high, x$298.$low))));
		x864 = _tuple$416[0];
		x865 = _tuple$416[1];
		x866 = new $Uint64(0, 0);
		x867 = new $Uint64(0, 0);
		_tuple$417 = bits.Add64(x811, x847, ((x$299 = (new p521Uint1(x865.$high, x865.$low)), new $Uint64(x$299.$high, x$299.$low))));
		x866 = _tuple$417[0];
		x867 = _tuple$417[1];
		x868 = new $Uint64(0, 0);
		x869 = new $Uint64(0, 0);
		_tuple$418 = bits.Add64(x813, x849, ((x$300 = (new p521Uint1(x867.$high, x867.$low)), new $Uint64(x$300.$high, x$300.$low))));
		x868 = _tuple$418[0];
		x869 = _tuple$418[1];
		x870 = new $Uint64(0, 0);
		x871 = new $Uint64(0, 0);
		_tuple$419 = bits.Add64(x815, x851, ((x$301 = (new p521Uint1(x869.$high, x869.$low)), new $Uint64(x$301.$high, x$301.$low))));
		x870 = _tuple$419[0];
		x871 = _tuple$419[1];
		x872 = new $Uint64(0, 0);
		x873 = new $Uint64(0, 0);
		_tuple$420 = bits.Add64(x817, x853, ((x$302 = (new p521Uint1(x871.$high, x871.$low)), new $Uint64(x$302.$high, x$302.$low))));
		x872 = _tuple$420[0];
		x873 = _tuple$420[1];
		x874 = new $Uint64(0, 0);
		x875 = new $Uint64(0, 0);
		_tuple$421 = bits.Add64(x819, x855, ((x$303 = (new p521Uint1(x873.$high, x873.$low)), new $Uint64(x$303.$high, x$303.$low))));
		x874 = _tuple$421[0];
		x875 = _tuple$421[1];
		x876 = (x$304 = ((x$305 = (new p521Uint1(x875.$high, x875.$low)), new $Uint64(x$305.$high, x$305.$low))), x$306 = ((x$307 = (new p521Uint1(x820.$high, x820.$low)), new $Uint64(x$307.$high, x$307.$low))), new $Uint64(x$304.$high + x$306.$high, x$304.$low + x$306.$low));
		x877 = new $Uint64(0, 0);
		x878 = new $Uint64(0, 0);
		_tuple$422 = bits.Mul64(x8, arg2[8]);
		x878 = _tuple$422[0];
		x877 = _tuple$422[1];
		x879 = new $Uint64(0, 0);
		x880 = new $Uint64(0, 0);
		_tuple$423 = bits.Mul64(x8, arg2[7]);
		x880 = _tuple$423[0];
		x879 = _tuple$423[1];
		x881 = new $Uint64(0, 0);
		x882 = new $Uint64(0, 0);
		_tuple$424 = bits.Mul64(x8, arg2[6]);
		x882 = _tuple$424[0];
		x881 = _tuple$424[1];
		x883 = new $Uint64(0, 0);
		x884 = new $Uint64(0, 0);
		_tuple$425 = bits.Mul64(x8, arg2[5]);
		x884 = _tuple$425[0];
		x883 = _tuple$425[1];
		x885 = new $Uint64(0, 0);
		x886 = new $Uint64(0, 0);
		_tuple$426 = bits.Mul64(x8, arg2[4]);
		x886 = _tuple$426[0];
		x885 = _tuple$426[1];
		x887 = new $Uint64(0, 0);
		x888 = new $Uint64(0, 0);
		_tuple$427 = bits.Mul64(x8, arg2[3]);
		x888 = _tuple$427[0];
		x887 = _tuple$427[1];
		x889 = new $Uint64(0, 0);
		x890 = new $Uint64(0, 0);
		_tuple$428 = bits.Mul64(x8, arg2[2]);
		x890 = _tuple$428[0];
		x889 = _tuple$428[1];
		x891 = new $Uint64(0, 0);
		x892 = new $Uint64(0, 0);
		_tuple$429 = bits.Mul64(x8, arg2[1]);
		x892 = _tuple$429[0];
		x891 = _tuple$429[1];
		x893 = new $Uint64(0, 0);
		x894 = new $Uint64(0, 0);
		_tuple$430 = bits.Mul64(x8, arg2[0]);
		x894 = _tuple$430[0];
		x893 = _tuple$430[1];
		x895 = new $Uint64(0, 0);
		x896 = new $Uint64(0, 0);
		_tuple$431 = bits.Add64(x894, x891, new $Uint64(0, 0));
		x895 = _tuple$431[0];
		x896 = _tuple$431[1];
		x897 = new $Uint64(0, 0);
		x898 = new $Uint64(0, 0);
		_tuple$432 = bits.Add64(x892, x889, ((x$308 = (new p521Uint1(x896.$high, x896.$low)), new $Uint64(x$308.$high, x$308.$low))));
		x897 = _tuple$432[0];
		x898 = _tuple$432[1];
		x899 = new $Uint64(0, 0);
		x900 = new $Uint64(0, 0);
		_tuple$433 = bits.Add64(x890, x887, ((x$309 = (new p521Uint1(x898.$high, x898.$low)), new $Uint64(x$309.$high, x$309.$low))));
		x899 = _tuple$433[0];
		x900 = _tuple$433[1];
		x901 = new $Uint64(0, 0);
		x902 = new $Uint64(0, 0);
		_tuple$434 = bits.Add64(x888, x885, ((x$310 = (new p521Uint1(x900.$high, x900.$low)), new $Uint64(x$310.$high, x$310.$low))));
		x901 = _tuple$434[0];
		x902 = _tuple$434[1];
		x903 = new $Uint64(0, 0);
		x904 = new $Uint64(0, 0);
		_tuple$435 = bits.Add64(x886, x883, ((x$311 = (new p521Uint1(x902.$high, x902.$low)), new $Uint64(x$311.$high, x$311.$low))));
		x903 = _tuple$435[0];
		x904 = _tuple$435[1];
		x905 = new $Uint64(0, 0);
		x906 = new $Uint64(0, 0);
		_tuple$436 = bits.Add64(x884, x881, ((x$312 = (new p521Uint1(x904.$high, x904.$low)), new $Uint64(x$312.$high, x$312.$low))));
		x905 = _tuple$436[0];
		x906 = _tuple$436[1];
		x907 = new $Uint64(0, 0);
		x908 = new $Uint64(0, 0);
		_tuple$437 = bits.Add64(x882, x879, ((x$313 = (new p521Uint1(x906.$high, x906.$low)), new $Uint64(x$313.$high, x$313.$low))));
		x907 = _tuple$437[0];
		x908 = _tuple$437[1];
		x909 = new $Uint64(0, 0);
		x910 = new $Uint64(0, 0);
		_tuple$438 = bits.Add64(x880, x877, ((x$314 = (new p521Uint1(x908.$high, x908.$low)), new $Uint64(x$314.$high, x$314.$low))));
		x909 = _tuple$438[0];
		x910 = _tuple$438[1];
		x911 = (x$315 = ((x$316 = (new p521Uint1(x910.$high, x910.$low)), new $Uint64(x$316.$high, x$316.$low))), new $Uint64(x$315.$high + x878.$high, x$315.$low + x878.$low));
		x912 = new $Uint64(0, 0);
		x913 = new $Uint64(0, 0);
		_tuple$439 = bits.Add64(x858, x893, new $Uint64(0, 0));
		x912 = _tuple$439[0];
		x913 = _tuple$439[1];
		x914 = new $Uint64(0, 0);
		x915 = new $Uint64(0, 0);
		_tuple$440 = bits.Add64(x860, x895, ((x$317 = (new p521Uint1(x913.$high, x913.$low)), new $Uint64(x$317.$high, x$317.$low))));
		x914 = _tuple$440[0];
		x915 = _tuple$440[1];
		x916 = new $Uint64(0, 0);
		x917 = new $Uint64(0, 0);
		_tuple$441 = bits.Add64(x862, x897, ((x$318 = (new p521Uint1(x915.$high, x915.$low)), new $Uint64(x$318.$high, x$318.$low))));
		x916 = _tuple$441[0];
		x917 = _tuple$441[1];
		x918 = new $Uint64(0, 0);
		x919 = new $Uint64(0, 0);
		_tuple$442 = bits.Add64(x864, x899, ((x$319 = (new p521Uint1(x917.$high, x917.$low)), new $Uint64(x$319.$high, x$319.$low))));
		x918 = _tuple$442[0];
		x919 = _tuple$442[1];
		x920 = new $Uint64(0, 0);
		x921 = new $Uint64(0, 0);
		_tuple$443 = bits.Add64(x866, x901, ((x$320 = (new p521Uint1(x919.$high, x919.$low)), new $Uint64(x$320.$high, x$320.$low))));
		x920 = _tuple$443[0];
		x921 = _tuple$443[1];
		x922 = new $Uint64(0, 0);
		x923 = new $Uint64(0, 0);
		_tuple$444 = bits.Add64(x868, x903, ((x$321 = (new p521Uint1(x921.$high, x921.$low)), new $Uint64(x$321.$high, x$321.$low))));
		x922 = _tuple$444[0];
		x923 = _tuple$444[1];
		x924 = new $Uint64(0, 0);
		x925 = new $Uint64(0, 0);
		_tuple$445 = bits.Add64(x870, x905, ((x$322 = (new p521Uint1(x923.$high, x923.$low)), new $Uint64(x$322.$high, x$322.$low))));
		x924 = _tuple$445[0];
		x925 = _tuple$445[1];
		x926 = new $Uint64(0, 0);
		x927 = new $Uint64(0, 0);
		_tuple$446 = bits.Add64(x872, x907, ((x$323 = (new p521Uint1(x925.$high, x925.$low)), new $Uint64(x$323.$high, x$323.$low))));
		x926 = _tuple$446[0];
		x927 = _tuple$446[1];
		x928 = new $Uint64(0, 0);
		x929 = new $Uint64(0, 0);
		_tuple$447 = bits.Add64(x874, x909, ((x$324 = (new p521Uint1(x927.$high, x927.$low)), new $Uint64(x$324.$high, x$324.$low))));
		x928 = _tuple$447[0];
		x929 = _tuple$447[1];
		x930 = new $Uint64(0, 0);
		x931 = new $Uint64(0, 0);
		_tuple$448 = bits.Add64(x876, x911, ((x$325 = (new p521Uint1(x929.$high, x929.$low)), new $Uint64(x$325.$high, x$325.$low))));
		x930 = _tuple$448[0];
		x931 = _tuple$448[1];
		x932 = new $Uint64(0, 0);
		x933 = new $Uint64(0, 0);
		_tuple$449 = bits.Mul64(x912, new $Uint64(0, 511));
		x933 = _tuple$449[0];
		x932 = _tuple$449[1];
		x934 = new $Uint64(0, 0);
		x935 = new $Uint64(0, 0);
		_tuple$450 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x935 = _tuple$450[0];
		x934 = _tuple$450[1];
		x936 = new $Uint64(0, 0);
		x937 = new $Uint64(0, 0);
		_tuple$451 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x937 = _tuple$451[0];
		x936 = _tuple$451[1];
		x938 = new $Uint64(0, 0);
		x939 = new $Uint64(0, 0);
		_tuple$452 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x939 = _tuple$452[0];
		x938 = _tuple$452[1];
		x940 = new $Uint64(0, 0);
		x941 = new $Uint64(0, 0);
		_tuple$453 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x941 = _tuple$453[0];
		x940 = _tuple$453[1];
		x942 = new $Uint64(0, 0);
		x943 = new $Uint64(0, 0);
		_tuple$454 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x943 = _tuple$454[0];
		x942 = _tuple$454[1];
		x944 = new $Uint64(0, 0);
		x945 = new $Uint64(0, 0);
		_tuple$455 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x945 = _tuple$455[0];
		x944 = _tuple$455[1];
		x946 = new $Uint64(0, 0);
		x947 = new $Uint64(0, 0);
		_tuple$456 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x947 = _tuple$456[0];
		x946 = _tuple$456[1];
		x948 = new $Uint64(0, 0);
		x949 = new $Uint64(0, 0);
		_tuple$457 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x949 = _tuple$457[0];
		x948 = _tuple$457[1];
		x950 = new $Uint64(0, 0);
		x951 = new $Uint64(0, 0);
		_tuple$458 = bits.Add64(x949, x946, new $Uint64(0, 0));
		x950 = _tuple$458[0];
		x951 = _tuple$458[1];
		x952 = new $Uint64(0, 0);
		x953 = new $Uint64(0, 0);
		_tuple$459 = bits.Add64(x947, x944, ((x$326 = (new p521Uint1(x951.$high, x951.$low)), new $Uint64(x$326.$high, x$326.$low))));
		x952 = _tuple$459[0];
		x953 = _tuple$459[1];
		x954 = new $Uint64(0, 0);
		x955 = new $Uint64(0, 0);
		_tuple$460 = bits.Add64(x945, x942, ((x$327 = (new p521Uint1(x953.$high, x953.$low)), new $Uint64(x$327.$high, x$327.$low))));
		x954 = _tuple$460[0];
		x955 = _tuple$460[1];
		x956 = new $Uint64(0, 0);
		x957 = new $Uint64(0, 0);
		_tuple$461 = bits.Add64(x943, x940, ((x$328 = (new p521Uint1(x955.$high, x955.$low)), new $Uint64(x$328.$high, x$328.$low))));
		x956 = _tuple$461[0];
		x957 = _tuple$461[1];
		x958 = new $Uint64(0, 0);
		x959 = new $Uint64(0, 0);
		_tuple$462 = bits.Add64(x941, x938, ((x$329 = (new p521Uint1(x957.$high, x957.$low)), new $Uint64(x$329.$high, x$329.$low))));
		x958 = _tuple$462[0];
		x959 = _tuple$462[1];
		x960 = new $Uint64(0, 0);
		x961 = new $Uint64(0, 0);
		_tuple$463 = bits.Add64(x939, x936, ((x$330 = (new p521Uint1(x959.$high, x959.$low)), new $Uint64(x$330.$high, x$330.$low))));
		x960 = _tuple$463[0];
		x961 = _tuple$463[1];
		x962 = new $Uint64(0, 0);
		x963 = new $Uint64(0, 0);
		_tuple$464 = bits.Add64(x937, x934, ((x$331 = (new p521Uint1(x961.$high, x961.$low)), new $Uint64(x$331.$high, x$331.$low))));
		x962 = _tuple$464[0];
		x963 = _tuple$464[1];
		x964 = new $Uint64(0, 0);
		x965 = new $Uint64(0, 0);
		_tuple$465 = bits.Add64(x935, x932, ((x$332 = (new p521Uint1(x963.$high, x963.$low)), new $Uint64(x$332.$high, x$332.$low))));
		x964 = _tuple$465[0];
		x965 = _tuple$465[1];
		x966 = (x$333 = ((x$334 = (new p521Uint1(x965.$high, x965.$low)), new $Uint64(x$334.$high, x$334.$low))), new $Uint64(x$333.$high + x933.$high, x$333.$low + x933.$low));
		x968 = new $Uint64(0, 0);
		_tuple$466 = bits.Add64(x912, x948, new $Uint64(0, 0));
		x968 = _tuple$466[1];
		x969 = new $Uint64(0, 0);
		x970 = new $Uint64(0, 0);
		_tuple$467 = bits.Add64(x914, x950, ((x$335 = (new p521Uint1(x968.$high, x968.$low)), new $Uint64(x$335.$high, x$335.$low))));
		x969 = _tuple$467[0];
		x970 = _tuple$467[1];
		x971 = new $Uint64(0, 0);
		x972 = new $Uint64(0, 0);
		_tuple$468 = bits.Add64(x916, x952, ((x$336 = (new p521Uint1(x970.$high, x970.$low)), new $Uint64(x$336.$high, x$336.$low))));
		x971 = _tuple$468[0];
		x972 = _tuple$468[1];
		x973 = new $Uint64(0, 0);
		x974 = new $Uint64(0, 0);
		_tuple$469 = bits.Add64(x918, x954, ((x$337 = (new p521Uint1(x972.$high, x972.$low)), new $Uint64(x$337.$high, x$337.$low))));
		x973 = _tuple$469[0];
		x974 = _tuple$469[1];
		x975 = new $Uint64(0, 0);
		x976 = new $Uint64(0, 0);
		_tuple$470 = bits.Add64(x920, x956, ((x$338 = (new p521Uint1(x974.$high, x974.$low)), new $Uint64(x$338.$high, x$338.$low))));
		x975 = _tuple$470[0];
		x976 = _tuple$470[1];
		x977 = new $Uint64(0, 0);
		x978 = new $Uint64(0, 0);
		_tuple$471 = bits.Add64(x922, x958, ((x$339 = (new p521Uint1(x976.$high, x976.$low)), new $Uint64(x$339.$high, x$339.$low))));
		x977 = _tuple$471[0];
		x978 = _tuple$471[1];
		x979 = new $Uint64(0, 0);
		x980 = new $Uint64(0, 0);
		_tuple$472 = bits.Add64(x924, x960, ((x$340 = (new p521Uint1(x978.$high, x978.$low)), new $Uint64(x$340.$high, x$340.$low))));
		x979 = _tuple$472[0];
		x980 = _tuple$472[1];
		x981 = new $Uint64(0, 0);
		x982 = new $Uint64(0, 0);
		_tuple$473 = bits.Add64(x926, x962, ((x$341 = (new p521Uint1(x980.$high, x980.$low)), new $Uint64(x$341.$high, x$341.$low))));
		x981 = _tuple$473[0];
		x982 = _tuple$473[1];
		x983 = new $Uint64(0, 0);
		x984 = new $Uint64(0, 0);
		_tuple$474 = bits.Add64(x928, x964, ((x$342 = (new p521Uint1(x982.$high, x982.$low)), new $Uint64(x$342.$high, x$342.$low))));
		x983 = _tuple$474[0];
		x984 = _tuple$474[1];
		x985 = new $Uint64(0, 0);
		x986 = new $Uint64(0, 0);
		_tuple$475 = bits.Add64(x930, x966, ((x$343 = (new p521Uint1(x984.$high, x984.$low)), new $Uint64(x$343.$high, x$343.$low))));
		x985 = _tuple$475[0];
		x986 = _tuple$475[1];
		x987 = (x$344 = ((x$345 = (new p521Uint1(x986.$high, x986.$low)), new $Uint64(x$345.$high, x$345.$low))), x$346 = ((x$347 = (new p521Uint1(x931.$high, x931.$low)), new $Uint64(x$347.$high, x$347.$low))), new $Uint64(x$344.$high + x$346.$high, x$344.$low + x$346.$low));
		x988 = new $Uint64(0, 0);
		x989 = new $Uint64(0, 0);
		_tuple$476 = bits.Sub64(x969, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x988 = _tuple$476[0];
		x989 = _tuple$476[1];
		x990 = new $Uint64(0, 0);
		x991 = new $Uint64(0, 0);
		_tuple$477 = bits.Sub64(x971, new $Uint64(4294967295, 4294967295), ((x$348 = (new p521Uint1(x989.$high, x989.$low)), new $Uint64(x$348.$high, x$348.$low))));
		x990 = _tuple$477[0];
		x991 = _tuple$477[1];
		x992 = new $Uint64(0, 0);
		x993 = new $Uint64(0, 0);
		_tuple$478 = bits.Sub64(x973, new $Uint64(4294967295, 4294967295), ((x$349 = (new p521Uint1(x991.$high, x991.$low)), new $Uint64(x$349.$high, x$349.$low))));
		x992 = _tuple$478[0];
		x993 = _tuple$478[1];
		x994 = new $Uint64(0, 0);
		x995 = new $Uint64(0, 0);
		_tuple$479 = bits.Sub64(x975, new $Uint64(4294967295, 4294967295), ((x$350 = (new p521Uint1(x993.$high, x993.$low)), new $Uint64(x$350.$high, x$350.$low))));
		x994 = _tuple$479[0];
		x995 = _tuple$479[1];
		x996 = new $Uint64(0, 0);
		x997 = new $Uint64(0, 0);
		_tuple$480 = bits.Sub64(x977, new $Uint64(4294967295, 4294967295), ((x$351 = (new p521Uint1(x995.$high, x995.$low)), new $Uint64(x$351.$high, x$351.$low))));
		x996 = _tuple$480[0];
		x997 = _tuple$480[1];
		x998 = new $Uint64(0, 0);
		x999 = new $Uint64(0, 0);
		_tuple$481 = bits.Sub64(x979, new $Uint64(4294967295, 4294967295), ((x$352 = (new p521Uint1(x997.$high, x997.$low)), new $Uint64(x$352.$high, x$352.$low))));
		x998 = _tuple$481[0];
		x999 = _tuple$481[1];
		x1000 = new $Uint64(0, 0);
		x1001 = new $Uint64(0, 0);
		_tuple$482 = bits.Sub64(x981, new $Uint64(4294967295, 4294967295), ((x$353 = (new p521Uint1(x999.$high, x999.$low)), new $Uint64(x$353.$high, x$353.$low))));
		x1000 = _tuple$482[0];
		x1001 = _tuple$482[1];
		x1002 = new $Uint64(0, 0);
		x1003 = new $Uint64(0, 0);
		_tuple$483 = bits.Sub64(x983, new $Uint64(4294967295, 4294967295), ((x$354 = (new p521Uint1(x1001.$high, x1001.$low)), new $Uint64(x$354.$high, x$354.$low))));
		x1002 = _tuple$483[0];
		x1003 = _tuple$483[1];
		x1004 = new $Uint64(0, 0);
		x1005 = new $Uint64(0, 0);
		_tuple$484 = bits.Sub64(x985, new $Uint64(0, 511), ((x$355 = (new p521Uint1(x1003.$high, x1003.$low)), new $Uint64(x$355.$high, x$355.$low))));
		x1004 = _tuple$484[0];
		x1005 = _tuple$484[1];
		x1007 = new $Uint64(0, 0);
		_tuple$485 = bits.Sub64(x987, new $Uint64(0, 0), ((x$356 = (new p521Uint1(x1005.$high, x1005.$low)), new $Uint64(x$356.$high, x$356.$low))));
		x1007 = _tuple$485[1];
		x1008 = new $Uint64(0, 0);
		p521CmovznzU64((x1008$24ptr || (x1008$24ptr = new ptrType(function() { return x1008; }, function($v) { x1008 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x988, x969);
		x1009 = new $Uint64(0, 0);
		p521CmovznzU64((x1009$24ptr || (x1009$24ptr = new ptrType(function() { return x1009; }, function($v) { x1009 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x990, x971);
		x1010 = new $Uint64(0, 0);
		p521CmovznzU64((x1010$24ptr || (x1010$24ptr = new ptrType(function() { return x1010; }, function($v) { x1010 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x992, x973);
		x1011 = new $Uint64(0, 0);
		p521CmovznzU64((x1011$24ptr || (x1011$24ptr = new ptrType(function() { return x1011; }, function($v) { x1011 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x994, x975);
		x1012 = new $Uint64(0, 0);
		p521CmovznzU64((x1012$24ptr || (x1012$24ptr = new ptrType(function() { return x1012; }, function($v) { x1012 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x996, x977);
		x1013 = new $Uint64(0, 0);
		p521CmovznzU64((x1013$24ptr || (x1013$24ptr = new ptrType(function() { return x1013; }, function($v) { x1013 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x998, x979);
		x1014 = new $Uint64(0, 0);
		p521CmovznzU64((x1014$24ptr || (x1014$24ptr = new ptrType(function() { return x1014; }, function($v) { x1014 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1000, x981);
		x1015 = new $Uint64(0, 0);
		p521CmovznzU64((x1015$24ptr || (x1015$24ptr = new ptrType(function() { return x1015; }, function($v) { x1015 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1002, x983);
		x1016 = new $Uint64(0, 0);
		p521CmovznzU64((x1016$24ptr || (x1016$24ptr = new ptrType(function() { return x1016; }, function($v) { x1016 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1004, x985);
		out1.nilCheck, out1[0] = x1008;
		out1.nilCheck, out1[1] = x1009;
		out1.nilCheck, out1[2] = x1010;
		out1.nilCheck, out1[3] = x1011;
		out1.nilCheck, out1[4] = x1012;
		out1.nilCheck, out1[5] = x1013;
		out1.nilCheck, out1[6] = x1014;
		out1.nilCheck, out1[7] = x1015;
		out1.nilCheck, out1[8] = x1016;
	};
	p521Square = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$222, _tuple$223, _tuple$224, _tuple$225, _tuple$226, _tuple$227, _tuple$228, _tuple$229, _tuple$23, _tuple$230, _tuple$231, _tuple$232, _tuple$233, _tuple$234, _tuple$235, _tuple$236, _tuple$237, _tuple$238, _tuple$239, _tuple$24, _tuple$240, _tuple$241, _tuple$242, _tuple$243, _tuple$244, _tuple$245, _tuple$246, _tuple$247, _tuple$248, _tuple$249, _tuple$25, _tuple$250, _tuple$251, _tuple$252, _tuple$253, _tuple$254, _tuple$255, _tuple$256, _tuple$257, _tuple$258, _tuple$259, _tuple$26, _tuple$260, _tuple$261, _tuple$262, _tuple$263, _tuple$264, _tuple$265, _tuple$266, _tuple$267, _tuple$268, _tuple$269, _tuple$27, _tuple$270, _tuple$271, _tuple$272, _tuple$273, _tuple$274, _tuple$275, _tuple$276, _tuple$277, _tuple$278, _tuple$279, _tuple$28, _tuple$280, _tuple$281, _tuple$282, _tuple$283, _tuple$284, _tuple$285, _tuple$286, _tuple$287, _tuple$288, _tuple$289, _tuple$29, _tuple$290, _tuple$291, _tuple$292, _tuple$293, _tuple$294, _tuple$295, _tuple$296, _tuple$297, _tuple$298, _tuple$299, _tuple$3, _tuple$30, _tuple$300, _tuple$301, _tuple$302, _tuple$303, _tuple$304, _tuple$305, _tuple$306, _tuple$307, _tuple$308, _tuple$309, _tuple$31, _tuple$310, _tuple$311, _tuple$312, _tuple$313, _tuple$314, _tuple$315, _tuple$316, _tuple$317, _tuple$318, _tuple$319, _tuple$32, _tuple$320, _tuple$321, _tuple$322, _tuple$323, _tuple$324, _tuple$325, _tuple$326, _tuple$327, _tuple$328, _tuple$329, _tuple$33, _tuple$330, _tuple$331, _tuple$332, _tuple$333, _tuple$334, _tuple$335, _tuple$336, _tuple$337, _tuple$338, _tuple$339, _tuple$34, _tuple$340, _tuple$341, _tuple$342, _tuple$343, _tuple$344, _tuple$345, _tuple$346, _tuple$347, _tuple$348, _tuple$349, _tuple$35, _tuple$350, _tuple$351, _tuple$352, _tuple$353, _tuple$354, _tuple$355, _tuple$356, _tuple$357, _tuple$358, _tuple$359, _tuple$36, _tuple$360, _tuple$361, _tuple$362, _tuple$363, _tuple$364, _tuple$365, _tuple$366, _tuple$367, _tuple$368, _tuple$369, _tuple$37, _tuple$370, _tuple$371, _tuple$372, _tuple$373, _tuple$374, _tuple$375, _tuple$376, _tuple$377, _tuple$378, _tuple$379, _tuple$38, _tuple$380, _tuple$381, _tuple$382, _tuple$383, _tuple$384, _tuple$385, _tuple$386, _tuple$387, _tuple$388, _tuple$389, _tuple$39, _tuple$390, _tuple$391, _tuple$392, _tuple$393, _tuple$394, _tuple$395, _tuple$396, _tuple$397, _tuple$398, _tuple$399, _tuple$4, _tuple$40, _tuple$400, _tuple$401, _tuple$402, _tuple$403, _tuple$404, _tuple$405, _tuple$406, _tuple$407, _tuple$408, _tuple$409, _tuple$41, _tuple$410, _tuple$411, _tuple$412, _tuple$413, _tuple$414, _tuple$415, _tuple$416, _tuple$417, _tuple$418, _tuple$419, _tuple$42, _tuple$420, _tuple$421, _tuple$422, _tuple$423, _tuple$424, _tuple$425, _tuple$426, _tuple$427, _tuple$428, _tuple$429, _tuple$43, _tuple$430, _tuple$431, _tuple$432, _tuple$433, _tuple$434, _tuple$435, _tuple$436, _tuple$437, _tuple$438, _tuple$439, _tuple$44, _tuple$440, _tuple$441, _tuple$442, _tuple$443, _tuple$444, _tuple$445, _tuple$446, _tuple$447, _tuple$448, _tuple$449, _tuple$45, _tuple$450, _tuple$451, _tuple$452, _tuple$453, _tuple$454, _tuple$455, _tuple$456, _tuple$457, _tuple$458, _tuple$459, _tuple$46, _tuple$460, _tuple$461, _tuple$462, _tuple$463, _tuple$464, _tuple$465, _tuple$466, _tuple$467, _tuple$468, _tuple$469, _tuple$47, _tuple$470, _tuple$471, _tuple$472, _tuple$473, _tuple$474, _tuple$475, _tuple$476, _tuple$477, _tuple$478, _tuple$479, _tuple$48, _tuple$480, _tuple$481, _tuple$482, _tuple$483, _tuple$484, _tuple$485, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$289, x$29, x$290, x$291, x$292, x$293, x$294, x$295, x$296, x$297, x$298, x$299, x$3, x$30, x$300, x$301, x$302, x$303, x$304, x$305, x$306, x$307, x$308, x$309, x$31, x$310, x$311, x$312, x$313, x$314, x$315, x$316, x$317, x$318, x$319, x$32, x$320, x$321, x$322, x$323, x$324, x$325, x$326, x$327, x$328, x$329, x$33, x$330, x$331, x$332, x$333, x$334, x$335, x$336, x$337, x$338, x$339, x$34, x$340, x$341, x$342, x$343, x$344, x$345, x$346, x$347, x$348, x$349, x$35, x$350, x$351, x$352, x$353, x$354, x$355, x$356, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x1000, x1001, x1002, x1003, x1004, x1005, x1007, x1008, x1008$24ptr, x1009, x1009$24ptr, x101, x1010, x1010$24ptr, x1011, x1011$24ptr, x1012, x1012$24ptr, x1013, x1013$24ptr, x1014, x1014$24ptr, x1015, x1015$24ptr, x1016, x1016$24ptr, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x302, x303, x304, x305, x306, x307, x308, x309, x31, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x36, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x41, x410, x411, x413, x414, x415, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x439, x44, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x466, x467, x468, x469, x47, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x48, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x49, x490, x491, x492, x493, x494, x495, x496, x497, x498, x499, x5, x50, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x51, x510, x511, x512, x513, x514, x515, x516, x517, x518, x519, x52, x520, x521, x522, x524, x525, x526, x527, x528, x529, x53, x530, x531, x532, x533, x534, x535, x536, x537, x538, x539, x54, x540, x541, x542, x543, x544, x545, x546, x547, x548, x549, x55, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559, x56, x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, x57, x570, x571, x572, x573, x574, x575, x576, x577, x578, x579, x58, x580, x581, x582, x583, x584, x585, x586, x587, x588, x589, x59, x590, x591, x592, x593, x594, x595, x596, x597, x598, x599, x6, x60, x600, x601, x602, x603, x604, x605, x606, x607, x608, x609, x61, x610, x611, x612, x613, x614, x615, x616, x617, x618, x619, x62, x620, x621, x622, x623, x624, x625, x626, x627, x628, x629, x63, x630, x631, x632, x633, x635, x636, x637, x638, x639, x64, x640, x641, x642, x643, x644, x645, x646, x647, x648, x649, x65, x650, x651, x652, x653, x654, x655, x656, x657, x658, x659, x66, x660, x661, x662, x663, x664, x665, x666, x667, x668, x669, x67, x670, x671, x672, x673, x674, x675, x676, x677, x678, x679, x68, x680, x681, x682, x683, x684, x685, x686, x687, x688, x689, x69, x690, x691, x692, x693, x694, x695, x696, x697, x698, x699, x7, x70, x700, x701, x702, x703, x704, x705, x706, x707, x708, x709, x71, x710, x711, x712, x713, x714, x715, x716, x717, x718, x719, x72, x720, x721, x722, x723, x724, x725, x726, x727, x728, x729, x73, x730, x731, x732, x733, x734, x735, x736, x737, x738, x739, x74, x740, x741, x742, x743, x744, x746, x747, x748, x749, x75, x750, x751, x752, x753, x754, x755, x756, x757, x758, x759, x76, x760, x761, x762, x763, x764, x765, x766, x767, x768, x769, x77, x770, x771, x772, x773, x774, x775, x776, x777, x778, x779, x78, x780, x781, x782, x783, x784, x785, x786, x787, x788, x789, x79, x790, x791, x792, x793, x794, x795, x796, x797, x798, x799, x8, x800, x801, x802, x803, x804, x805, x806, x807, x808, x809, x81, x810, x811, x812, x813, x814, x815, x816, x817, x818, x819, x82, x820, x821, x822, x823, x824, x825, x826, x827, x828, x829, x83, x830, x831, x832, x833, x834, x835, x836, x837, x838, x839, x84, x840, x841, x842, x843, x844, x845, x846, x847, x848, x849, x85, x850, x851, x852, x853, x854, x855, x857, x858, x859, x86, x860, x861, x862, x863, x864, x865, x866, x867, x868, x869, x87, x870, x871, x872, x873, x874, x875, x876, x877, x878, x879, x88, x880, x881, x882, x883, x884, x885, x886, x887, x888, x889, x89, x890, x891, x892, x893, x894, x895, x896, x897, x898, x899, x9, x90, x900, x901, x902, x903, x904, x905, x906, x907, x908, x909, x91, x910, x911, x912, x913, x914, x915, x916, x917, x918, x919, x92, x920, x921, x922, x923, x924, x925, x926, x927, x928, x929, x93, x930, x931, x932, x933, x934, x935, x936, x937, x938, x939, x94, x940, x941, x942, x943, x944, x945, x946, x947, x948, x949, x95, x950, x951, x952, x953, x954, x955, x956, x957, x958, x959, x96, x960, x961, x962, x963, x964, x965, x966, x968, x969, x97, x970, x971, x972, x973, x974, x975, x976, x977, x978, x979, x98, x980, x981, x982, x983, x984, x985, x986, x987, x988, x989, x99, x990, x991, x992, x993, x994, x995, x996, x997, x998, x999;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[4];
		x5 = arg1[5];
		x6 = arg1[6];
		x7 = arg1[7];
		x8 = arg1[8];
		x9 = arg1[0];
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x9, arg1[8]);
		x11 = _tuple[0];
		x10 = _tuple[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x9, arg1[7]);
		x13 = _tuple$1[0];
		x12 = _tuple$1[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x9, arg1[6]);
		x15 = _tuple$2[0];
		x14 = _tuple$2[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x9, arg1[5]);
		x17 = _tuple$3[0];
		x16 = _tuple$3[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x9, arg1[4]);
		x19 = _tuple$4[0];
		x18 = _tuple$4[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x9, arg1[3]);
		x21 = _tuple$5[0];
		x20 = _tuple$5[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$6 = bits.Mul64(x9, arg1[2]);
		x23 = _tuple$6[0];
		x22 = _tuple$6[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x9, arg1[1]);
		x25 = _tuple$7[0];
		x24 = _tuple$7[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x9, arg1[0]);
		x27 = _tuple$8[0];
		x26 = _tuple$8[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x27, x24, new $Uint64(0, 0));
		x28 = _tuple$9[0];
		x29 = _tuple$9[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x25, x22, ((x = (new p521Uint1(x29.$high, x29.$low)), new $Uint64(x.$high, x.$low))));
		x30 = _tuple$10[0];
		x31 = _tuple$10[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x23, x20, ((x$1 = (new p521Uint1(x31.$high, x31.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x32 = _tuple$11[0];
		x33 = _tuple$11[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x21, x18, ((x$2 = (new p521Uint1(x33.$high, x33.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x34 = _tuple$12[0];
		x35 = _tuple$12[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x19, x16, ((x$3 = (new p521Uint1(x35.$high, x35.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x36 = _tuple$13[0];
		x37 = _tuple$13[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x17, x14, ((x$4 = (new p521Uint1(x37.$high, x37.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x38 = _tuple$14[0];
		x39 = _tuple$14[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x15, x12, ((x$5 = (new p521Uint1(x39.$high, x39.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x40 = _tuple$15[0];
		x41 = _tuple$15[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x13, x10, ((x$6 = (new p521Uint1(x41.$high, x41.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x42 = _tuple$16[0];
		x43 = _tuple$16[1];
		x44 = (x$7 = ((x$8 = (new p521Uint1(x43.$high, x43.$low)), new $Uint64(x$8.$high, x$8.$low))), new $Uint64(x$7.$high + x11.$high, x$7.$low + x11.$low));
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x26, new $Uint64(0, 511));
		x46 = _tuple$17[0];
		x45 = _tuple$17[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x48 = _tuple$18[0];
		x47 = _tuple$18[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x50 = _tuple$19[0];
		x49 = _tuple$19[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x52 = _tuple$20[0];
		x51 = _tuple$20[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$21 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x54 = _tuple$21[0];
		x53 = _tuple$21[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$22 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x56 = _tuple$22[0];
		x55 = _tuple$22[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$23 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x58 = _tuple$23[0];
		x57 = _tuple$23[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$24 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x60 = _tuple$24[0];
		x59 = _tuple$24[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$25 = bits.Mul64(x26, new $Uint64(4294967295, 4294967295));
		x62 = _tuple$25[0];
		x61 = _tuple$25[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x62, x59, new $Uint64(0, 0));
		x63 = _tuple$26[0];
		x64 = _tuple$26[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x60, x57, ((x$9 = (new p521Uint1(x64.$high, x64.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x65 = _tuple$27[0];
		x66 = _tuple$27[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x58, x55, ((x$10 = (new p521Uint1(x66.$high, x66.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x67 = _tuple$28[0];
		x68 = _tuple$28[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(x56, x53, ((x$11 = (new p521Uint1(x68.$high, x68.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x69 = _tuple$29[0];
		x70 = _tuple$29[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x54, x51, ((x$12 = (new p521Uint1(x70.$high, x70.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x71 = _tuple$30[0];
		x72 = _tuple$30[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x52, x49, ((x$13 = (new p521Uint1(x72.$high, x72.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x73 = _tuple$31[0];
		x74 = _tuple$31[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x50, x47, ((x$14 = (new p521Uint1(x74.$high, x74.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x75 = _tuple$32[0];
		x76 = _tuple$32[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x48, x45, ((x$15 = (new p521Uint1(x76.$high, x76.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x77 = _tuple$33[0];
		x78 = _tuple$33[1];
		x79 = (x$16 = ((x$17 = (new p521Uint1(x78.$high, x78.$low)), new $Uint64(x$17.$high, x$17.$low))), new $Uint64(x$16.$high + x46.$high, x$16.$low + x46.$low));
		x81 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x26, x61, new $Uint64(0, 0));
		x81 = _tuple$34[1];
		x82 = new $Uint64(0, 0);
		x83 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x28, x63, ((x$18 = (new p521Uint1(x81.$high, x81.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x82 = _tuple$35[0];
		x83 = _tuple$35[1];
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x30, x65, ((x$19 = (new p521Uint1(x83.$high, x83.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x84 = _tuple$36[0];
		x85 = _tuple$36[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x32, x67, ((x$20 = (new p521Uint1(x85.$high, x85.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x86 = _tuple$37[0];
		x87 = _tuple$37[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x34, x69, ((x$21 = (new p521Uint1(x87.$high, x87.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x88 = _tuple$38[0];
		x89 = _tuple$38[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x36, x71, ((x$22 = (new p521Uint1(x89.$high, x89.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x90 = _tuple$39[0];
		x91 = _tuple$39[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x38, x73, ((x$23 = (new p521Uint1(x91.$high, x91.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x92 = _tuple$40[0];
		x93 = _tuple$40[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x40, x75, ((x$24 = (new p521Uint1(x93.$high, x93.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x94 = _tuple$41[0];
		x95 = _tuple$41[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x42, x77, ((x$25 = (new p521Uint1(x95.$high, x95.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x96 = _tuple$42[0];
		x97 = _tuple$42[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x44, x79, ((x$26 = (new p521Uint1(x97.$high, x97.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x98 = _tuple$43[0];
		x99 = _tuple$43[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x1, arg1[8]);
		x101 = _tuple$44[0];
		x100 = _tuple$44[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$45 = bits.Mul64(x1, arg1[7]);
		x103 = _tuple$45[0];
		x102 = _tuple$45[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$46 = bits.Mul64(x1, arg1[6]);
		x105 = _tuple$46[0];
		x104 = _tuple$46[1];
		x106 = new $Uint64(0, 0);
		x107 = new $Uint64(0, 0);
		_tuple$47 = bits.Mul64(x1, arg1[5]);
		x107 = _tuple$47[0];
		x106 = _tuple$47[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$48 = bits.Mul64(x1, arg1[4]);
		x109 = _tuple$48[0];
		x108 = _tuple$48[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x1, arg1[3]);
		x111 = _tuple$49[0];
		x110 = _tuple$49[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x1, arg1[2]);
		x113 = _tuple$50[0];
		x112 = _tuple$50[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x1, arg1[1]);
		x115 = _tuple$51[0];
		x114 = _tuple$51[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x1, arg1[0]);
		x117 = _tuple$52[0];
		x116 = _tuple$52[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x117, x114, new $Uint64(0, 0));
		x118 = _tuple$53[0];
		x119 = _tuple$53[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x115, x112, ((x$27 = (new p521Uint1(x119.$high, x119.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x120 = _tuple$54[0];
		x121 = _tuple$54[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x113, x110, ((x$28 = (new p521Uint1(x121.$high, x121.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x122 = _tuple$55[0];
		x123 = _tuple$55[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x111, x108, ((x$29 = (new p521Uint1(x123.$high, x123.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x124 = _tuple$56[0];
		x125 = _tuple$56[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x109, x106, ((x$30 = (new p521Uint1(x125.$high, x125.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x126 = _tuple$57[0];
		x127 = _tuple$57[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x107, x104, ((x$31 = (new p521Uint1(x127.$high, x127.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x128 = _tuple$58[0];
		x129 = _tuple$58[1];
		x130 = new $Uint64(0, 0);
		x131 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x105, x102, ((x$32 = (new p521Uint1(x129.$high, x129.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x130 = _tuple$59[0];
		x131 = _tuple$59[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x103, x100, ((x$33 = (new p521Uint1(x131.$high, x131.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x132 = _tuple$60[0];
		x133 = _tuple$60[1];
		x134 = (x$34 = ((x$35 = (new p521Uint1(x133.$high, x133.$low)), new $Uint64(x$35.$high, x$35.$low))), new $Uint64(x$34.$high + x101.$high, x$34.$low + x101.$low));
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x82, x116, new $Uint64(0, 0));
		x135 = _tuple$61[0];
		x136 = _tuple$61[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x84, x118, ((x$36 = (new p521Uint1(x136.$high, x136.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x137 = _tuple$62[0];
		x138 = _tuple$62[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x86, x120, ((x$37 = (new p521Uint1(x138.$high, x138.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x139 = _tuple$63[0];
		x140 = _tuple$63[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x88, x122, ((x$38 = (new p521Uint1(x140.$high, x140.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x141 = _tuple$64[0];
		x142 = _tuple$64[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x90, x124, ((x$39 = (new p521Uint1(x142.$high, x142.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x143 = _tuple$65[0];
		x144 = _tuple$65[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x92, x126, ((x$40 = (new p521Uint1(x144.$high, x144.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x145 = _tuple$66[0];
		x146 = _tuple$66[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x94, x128, ((x$41 = (new p521Uint1(x146.$high, x146.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x147 = _tuple$67[0];
		x148 = _tuple$67[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x96, x130, ((x$42 = (new p521Uint1(x148.$high, x148.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x149 = _tuple$68[0];
		x150 = _tuple$68[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x98, x132, ((x$43 = (new p521Uint1(x150.$high, x150.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x151 = _tuple$69[0];
		x152 = _tuple$69[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(((x$44 = (new p521Uint1(x99.$high, x99.$low)), new $Uint64(x$44.$high, x$44.$low))), x134, ((x$45 = (new p521Uint1(x152.$high, x152.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x153 = _tuple$70[0];
		x154 = _tuple$70[1];
		x155 = new $Uint64(0, 0);
		x156 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x135, new $Uint64(0, 511));
		x156 = _tuple$71[0];
		x155 = _tuple$71[1];
		x157 = new $Uint64(0, 0);
		x158 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x158 = _tuple$72[0];
		x157 = _tuple$72[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$73 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x160 = _tuple$73[0];
		x159 = _tuple$73[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$74 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x162 = _tuple$74[0];
		x161 = _tuple$74[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x164 = _tuple$75[0];
		x163 = _tuple$75[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x166 = _tuple$76[0];
		x165 = _tuple$76[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x168 = _tuple$77[0];
		x167 = _tuple$77[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x170 = _tuple$78[0];
		x169 = _tuple$78[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x135, new $Uint64(4294967295, 4294967295));
		x172 = _tuple$79[0];
		x171 = _tuple$79[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x172, x169, new $Uint64(0, 0));
		x173 = _tuple$80[0];
		x174 = _tuple$80[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x170, x167, ((x$46 = (new p521Uint1(x174.$high, x174.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x175 = _tuple$81[0];
		x176 = _tuple$81[1];
		x177 = new $Uint64(0, 0);
		x178 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x168, x165, ((x$47 = (new p521Uint1(x176.$high, x176.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x177 = _tuple$82[0];
		x178 = _tuple$82[1];
		x179 = new $Uint64(0, 0);
		x180 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x166, x163, ((x$48 = (new p521Uint1(x178.$high, x178.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x179 = _tuple$83[0];
		x180 = _tuple$83[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x164, x161, ((x$49 = (new p521Uint1(x180.$high, x180.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x181 = _tuple$84[0];
		x182 = _tuple$84[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x162, x159, ((x$50 = (new p521Uint1(x182.$high, x182.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x183 = _tuple$85[0];
		x184 = _tuple$85[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x160, x157, ((x$51 = (new p521Uint1(x184.$high, x184.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x185 = _tuple$86[0];
		x186 = _tuple$86[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x158, x155, ((x$52 = (new p521Uint1(x186.$high, x186.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x187 = _tuple$87[0];
		x188 = _tuple$87[1];
		x189 = (x$53 = ((x$54 = (new p521Uint1(x188.$high, x188.$low)), new $Uint64(x$54.$high, x$54.$low))), new $Uint64(x$53.$high + x156.$high, x$53.$low + x156.$low));
		x191 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x135, x171, new $Uint64(0, 0));
		x191 = _tuple$88[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x137, x173, ((x$55 = (new p521Uint1(x191.$high, x191.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x192 = _tuple$89[0];
		x193 = _tuple$89[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x139, x175, ((x$56 = (new p521Uint1(x193.$high, x193.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x194 = _tuple$90[0];
		x195 = _tuple$90[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x141, x177, ((x$57 = (new p521Uint1(x195.$high, x195.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x196 = _tuple$91[0];
		x197 = _tuple$91[1];
		x198 = new $Uint64(0, 0);
		x199 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x143, x179, ((x$58 = (new p521Uint1(x197.$high, x197.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x198 = _tuple$92[0];
		x199 = _tuple$92[1];
		x200 = new $Uint64(0, 0);
		x201 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64(x145, x181, ((x$59 = (new p521Uint1(x199.$high, x199.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x200 = _tuple$93[0];
		x201 = _tuple$93[1];
		x202 = new $Uint64(0, 0);
		x203 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x147, x183, ((x$60 = (new p521Uint1(x201.$high, x201.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x202 = _tuple$94[0];
		x203 = _tuple$94[1];
		x204 = new $Uint64(0, 0);
		x205 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x149, x185, ((x$61 = (new p521Uint1(x203.$high, x203.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x204 = _tuple$95[0];
		x205 = _tuple$95[1];
		x206 = new $Uint64(0, 0);
		x207 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x151, x187, ((x$62 = (new p521Uint1(x205.$high, x205.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x206 = _tuple$96[0];
		x207 = _tuple$96[1];
		x208 = new $Uint64(0, 0);
		x209 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x153, x189, ((x$63 = (new p521Uint1(x207.$high, x207.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x208 = _tuple$97[0];
		x209 = _tuple$97[1];
		x210 = (x$64 = ((x$65 = (new p521Uint1(x209.$high, x209.$low)), new $Uint64(x$65.$high, x$65.$low))), x$66 = ((x$67 = (new p521Uint1(x154.$high, x154.$low)), new $Uint64(x$67.$high, x$67.$low))), new $Uint64(x$64.$high + x$66.$high, x$64.$low + x$66.$low));
		x211 = new $Uint64(0, 0);
		x212 = new $Uint64(0, 0);
		_tuple$98 = bits.Mul64(x2, arg1[8]);
		x212 = _tuple$98[0];
		x211 = _tuple$98[1];
		x213 = new $Uint64(0, 0);
		x214 = new $Uint64(0, 0);
		_tuple$99 = bits.Mul64(x2, arg1[7]);
		x214 = _tuple$99[0];
		x213 = _tuple$99[1];
		x215 = new $Uint64(0, 0);
		x216 = new $Uint64(0, 0);
		_tuple$100 = bits.Mul64(x2, arg1[6]);
		x216 = _tuple$100[0];
		x215 = _tuple$100[1];
		x217 = new $Uint64(0, 0);
		x218 = new $Uint64(0, 0);
		_tuple$101 = bits.Mul64(x2, arg1[5]);
		x218 = _tuple$101[0];
		x217 = _tuple$101[1];
		x219 = new $Uint64(0, 0);
		x220 = new $Uint64(0, 0);
		_tuple$102 = bits.Mul64(x2, arg1[4]);
		x220 = _tuple$102[0];
		x219 = _tuple$102[1];
		x221 = new $Uint64(0, 0);
		x222 = new $Uint64(0, 0);
		_tuple$103 = bits.Mul64(x2, arg1[3]);
		x222 = _tuple$103[0];
		x221 = _tuple$103[1];
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x2, arg1[2]);
		x224 = _tuple$104[0];
		x223 = _tuple$104[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x2, arg1[1]);
		x226 = _tuple$105[0];
		x225 = _tuple$105[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x2, arg1[0]);
		x228 = _tuple$106[0];
		x227 = _tuple$106[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$107 = bits.Add64(x228, x225, new $Uint64(0, 0));
		x229 = _tuple$107[0];
		x230 = _tuple$107[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$108 = bits.Add64(x226, x223, ((x$68 = (new p521Uint1(x230.$high, x230.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x231 = _tuple$108[0];
		x232 = _tuple$108[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$109 = bits.Add64(x224, x221, ((x$69 = (new p521Uint1(x232.$high, x232.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x233 = _tuple$109[0];
		x234 = _tuple$109[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$110 = bits.Add64(x222, x219, ((x$70 = (new p521Uint1(x234.$high, x234.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x235 = _tuple$110[0];
		x236 = _tuple$110[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x220, x217, ((x$71 = (new p521Uint1(x236.$high, x236.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x237 = _tuple$111[0];
		x238 = _tuple$111[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x218, x215, ((x$72 = (new p521Uint1(x238.$high, x238.$low)), new $Uint64(x$72.$high, x$72.$low))));
		x239 = _tuple$112[0];
		x240 = _tuple$112[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x216, x213, ((x$73 = (new p521Uint1(x240.$high, x240.$low)), new $Uint64(x$73.$high, x$73.$low))));
		x241 = _tuple$113[0];
		x242 = _tuple$113[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x214, x211, ((x$74 = (new p521Uint1(x242.$high, x242.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x243 = _tuple$114[0];
		x244 = _tuple$114[1];
		x245 = (x$75 = ((x$76 = (new p521Uint1(x244.$high, x244.$low)), new $Uint64(x$76.$high, x$76.$low))), new $Uint64(x$75.$high + x212.$high, x$75.$low + x212.$low));
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x192, x227, new $Uint64(0, 0));
		x246 = _tuple$115[0];
		x247 = _tuple$115[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x194, x229, ((x$77 = (new p521Uint1(x247.$high, x247.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x248 = _tuple$116[0];
		x249 = _tuple$116[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x196, x231, ((x$78 = (new p521Uint1(x249.$high, x249.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x250 = _tuple$117[0];
		x251 = _tuple$117[1];
		x252 = new $Uint64(0, 0);
		x253 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x198, x233, ((x$79 = (new p521Uint1(x251.$high, x251.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x252 = _tuple$118[0];
		x253 = _tuple$118[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x200, x235, ((x$80 = (new p521Uint1(x253.$high, x253.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x254 = _tuple$119[0];
		x255 = _tuple$119[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x202, x237, ((x$81 = (new p521Uint1(x255.$high, x255.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x256 = _tuple$120[0];
		x257 = _tuple$120[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x204, x239, ((x$82 = (new p521Uint1(x257.$high, x257.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x258 = _tuple$121[0];
		x259 = _tuple$121[1];
		x260 = new $Uint64(0, 0);
		x261 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x206, x241, ((x$83 = (new p521Uint1(x259.$high, x259.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x260 = _tuple$122[0];
		x261 = _tuple$122[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x208, x243, ((x$84 = (new p521Uint1(x261.$high, x261.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x262 = _tuple$123[0];
		x263 = _tuple$123[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x210, x245, ((x$85 = (new p521Uint1(x263.$high, x263.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x264 = _tuple$124[0];
		x265 = _tuple$124[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$125 = bits.Mul64(x246, new $Uint64(0, 511));
		x267 = _tuple$125[0];
		x266 = _tuple$125[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x269 = _tuple$126[0];
		x268 = _tuple$126[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x271 = _tuple$127[0];
		x270 = _tuple$127[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x273 = _tuple$128[0];
		x272 = _tuple$128[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$129 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x275 = _tuple$129[0];
		x274 = _tuple$129[1];
		x276 = new $Uint64(0, 0);
		x277 = new $Uint64(0, 0);
		_tuple$130 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x277 = _tuple$130[0];
		x276 = _tuple$130[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$131 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x279 = _tuple$131[0];
		x278 = _tuple$131[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$132 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x281 = _tuple$132[0];
		x280 = _tuple$132[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$133 = bits.Mul64(x246, new $Uint64(4294967295, 4294967295));
		x283 = _tuple$133[0];
		x282 = _tuple$133[1];
		x284 = new $Uint64(0, 0);
		x285 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x283, x280, new $Uint64(0, 0));
		x284 = _tuple$134[0];
		x285 = _tuple$134[1];
		x286 = new $Uint64(0, 0);
		x287 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x281, x278, ((x$86 = (new p521Uint1(x285.$high, x285.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x286 = _tuple$135[0];
		x287 = _tuple$135[1];
		x288 = new $Uint64(0, 0);
		x289 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x279, x276, ((x$87 = (new p521Uint1(x287.$high, x287.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x288 = _tuple$136[0];
		x289 = _tuple$136[1];
		x290 = new $Uint64(0, 0);
		x291 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x277, x274, ((x$88 = (new p521Uint1(x289.$high, x289.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x290 = _tuple$137[0];
		x291 = _tuple$137[1];
		x292 = new $Uint64(0, 0);
		x293 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x275, x272, ((x$89 = (new p521Uint1(x291.$high, x291.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x292 = _tuple$138[0];
		x293 = _tuple$138[1];
		x294 = new $Uint64(0, 0);
		x295 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x273, x270, ((x$90 = (new p521Uint1(x293.$high, x293.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x294 = _tuple$139[0];
		x295 = _tuple$139[1];
		x296 = new $Uint64(0, 0);
		x297 = new $Uint64(0, 0);
		_tuple$140 = bits.Add64(x271, x268, ((x$91 = (new p521Uint1(x295.$high, x295.$low)), new $Uint64(x$91.$high, x$91.$low))));
		x296 = _tuple$140[0];
		x297 = _tuple$140[1];
		x298 = new $Uint64(0, 0);
		x299 = new $Uint64(0, 0);
		_tuple$141 = bits.Add64(x269, x266, ((x$92 = (new p521Uint1(x297.$high, x297.$low)), new $Uint64(x$92.$high, x$92.$low))));
		x298 = _tuple$141[0];
		x299 = _tuple$141[1];
		x300 = (x$93 = ((x$94 = (new p521Uint1(x299.$high, x299.$low)), new $Uint64(x$94.$high, x$94.$low))), new $Uint64(x$93.$high + x267.$high, x$93.$low + x267.$low));
		x302 = new $Uint64(0, 0);
		_tuple$142 = bits.Add64(x246, x282, new $Uint64(0, 0));
		x302 = _tuple$142[1];
		x303 = new $Uint64(0, 0);
		x304 = new $Uint64(0, 0);
		_tuple$143 = bits.Add64(x248, x284, ((x$95 = (new p521Uint1(x302.$high, x302.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x303 = _tuple$143[0];
		x304 = _tuple$143[1];
		x305 = new $Uint64(0, 0);
		x306 = new $Uint64(0, 0);
		_tuple$144 = bits.Add64(x250, x286, ((x$96 = (new p521Uint1(x304.$high, x304.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x305 = _tuple$144[0];
		x306 = _tuple$144[1];
		x307 = new $Uint64(0, 0);
		x308 = new $Uint64(0, 0);
		_tuple$145 = bits.Add64(x252, x288, ((x$97 = (new p521Uint1(x306.$high, x306.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x307 = _tuple$145[0];
		x308 = _tuple$145[1];
		x309 = new $Uint64(0, 0);
		x310 = new $Uint64(0, 0);
		_tuple$146 = bits.Add64(x254, x290, ((x$98 = (new p521Uint1(x308.$high, x308.$low)), new $Uint64(x$98.$high, x$98.$low))));
		x309 = _tuple$146[0];
		x310 = _tuple$146[1];
		x311 = new $Uint64(0, 0);
		x312 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x256, x292, ((x$99 = (new p521Uint1(x310.$high, x310.$low)), new $Uint64(x$99.$high, x$99.$low))));
		x311 = _tuple$147[0];
		x312 = _tuple$147[1];
		x313 = new $Uint64(0, 0);
		x314 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x258, x294, ((x$100 = (new p521Uint1(x312.$high, x312.$low)), new $Uint64(x$100.$high, x$100.$low))));
		x313 = _tuple$148[0];
		x314 = _tuple$148[1];
		x315 = new $Uint64(0, 0);
		x316 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x260, x296, ((x$101 = (new p521Uint1(x314.$high, x314.$low)), new $Uint64(x$101.$high, x$101.$low))));
		x315 = _tuple$149[0];
		x316 = _tuple$149[1];
		x317 = new $Uint64(0, 0);
		x318 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x262, x298, ((x$102 = (new p521Uint1(x316.$high, x316.$low)), new $Uint64(x$102.$high, x$102.$low))));
		x317 = _tuple$150[0];
		x318 = _tuple$150[1];
		x319 = new $Uint64(0, 0);
		x320 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x264, x300, ((x$103 = (new p521Uint1(x318.$high, x318.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x319 = _tuple$151[0];
		x320 = _tuple$151[1];
		x321 = (x$104 = ((x$105 = (new p521Uint1(x320.$high, x320.$low)), new $Uint64(x$105.$high, x$105.$low))), x$106 = ((x$107 = (new p521Uint1(x265.$high, x265.$low)), new $Uint64(x$107.$high, x$107.$low))), new $Uint64(x$104.$high + x$106.$high, x$104.$low + x$106.$low));
		x322 = new $Uint64(0, 0);
		x323 = new $Uint64(0, 0);
		_tuple$152 = bits.Mul64(x3, arg1[8]);
		x323 = _tuple$152[0];
		x322 = _tuple$152[1];
		x324 = new $Uint64(0, 0);
		x325 = new $Uint64(0, 0);
		_tuple$153 = bits.Mul64(x3, arg1[7]);
		x325 = _tuple$153[0];
		x324 = _tuple$153[1];
		x326 = new $Uint64(0, 0);
		x327 = new $Uint64(0, 0);
		_tuple$154 = bits.Mul64(x3, arg1[6]);
		x327 = _tuple$154[0];
		x326 = _tuple$154[1];
		x328 = new $Uint64(0, 0);
		x329 = new $Uint64(0, 0);
		_tuple$155 = bits.Mul64(x3, arg1[5]);
		x329 = _tuple$155[0];
		x328 = _tuple$155[1];
		x330 = new $Uint64(0, 0);
		x331 = new $Uint64(0, 0);
		_tuple$156 = bits.Mul64(x3, arg1[4]);
		x331 = _tuple$156[0];
		x330 = _tuple$156[1];
		x332 = new $Uint64(0, 0);
		x333 = new $Uint64(0, 0);
		_tuple$157 = bits.Mul64(x3, arg1[3]);
		x333 = _tuple$157[0];
		x332 = _tuple$157[1];
		x334 = new $Uint64(0, 0);
		x335 = new $Uint64(0, 0);
		_tuple$158 = bits.Mul64(x3, arg1[2]);
		x335 = _tuple$158[0];
		x334 = _tuple$158[1];
		x336 = new $Uint64(0, 0);
		x337 = new $Uint64(0, 0);
		_tuple$159 = bits.Mul64(x3, arg1[1]);
		x337 = _tuple$159[0];
		x336 = _tuple$159[1];
		x338 = new $Uint64(0, 0);
		x339 = new $Uint64(0, 0);
		_tuple$160 = bits.Mul64(x3, arg1[0]);
		x339 = _tuple$160[0];
		x338 = _tuple$160[1];
		x340 = new $Uint64(0, 0);
		x341 = new $Uint64(0, 0);
		_tuple$161 = bits.Add64(x339, x336, new $Uint64(0, 0));
		x340 = _tuple$161[0];
		x341 = _tuple$161[1];
		x342 = new $Uint64(0, 0);
		x343 = new $Uint64(0, 0);
		_tuple$162 = bits.Add64(x337, x334, ((x$108 = (new p521Uint1(x341.$high, x341.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x342 = _tuple$162[0];
		x343 = _tuple$162[1];
		x344 = new $Uint64(0, 0);
		x345 = new $Uint64(0, 0);
		_tuple$163 = bits.Add64(x335, x332, ((x$109 = (new p521Uint1(x343.$high, x343.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x344 = _tuple$163[0];
		x345 = _tuple$163[1];
		x346 = new $Uint64(0, 0);
		x347 = new $Uint64(0, 0);
		_tuple$164 = bits.Add64(x333, x330, ((x$110 = (new p521Uint1(x345.$high, x345.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x346 = _tuple$164[0];
		x347 = _tuple$164[1];
		x348 = new $Uint64(0, 0);
		x349 = new $Uint64(0, 0);
		_tuple$165 = bits.Add64(x331, x328, ((x$111 = (new p521Uint1(x347.$high, x347.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x348 = _tuple$165[0];
		x349 = _tuple$165[1];
		x350 = new $Uint64(0, 0);
		x351 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x329, x326, ((x$112 = (new p521Uint1(x349.$high, x349.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x350 = _tuple$166[0];
		x351 = _tuple$166[1];
		x352 = new $Uint64(0, 0);
		x353 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x327, x324, ((x$113 = (new p521Uint1(x351.$high, x351.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x352 = _tuple$167[0];
		x353 = _tuple$167[1];
		x354 = new $Uint64(0, 0);
		x355 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x325, x322, ((x$114 = (new p521Uint1(x353.$high, x353.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x354 = _tuple$168[0];
		x355 = _tuple$168[1];
		x356 = (x$115 = ((x$116 = (new p521Uint1(x355.$high, x355.$low)), new $Uint64(x$116.$high, x$116.$low))), new $Uint64(x$115.$high + x323.$high, x$115.$low + x323.$low));
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x303, x338, new $Uint64(0, 0));
		x357 = _tuple$169[0];
		x358 = _tuple$169[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x305, x340, ((x$117 = (new p521Uint1(x358.$high, x358.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x359 = _tuple$170[0];
		x360 = _tuple$170[1];
		x361 = new $Uint64(0, 0);
		x362 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x307, x342, ((x$118 = (new p521Uint1(x360.$high, x360.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x361 = _tuple$171[0];
		x362 = _tuple$171[1];
		x363 = new $Uint64(0, 0);
		x364 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x309, x344, ((x$119 = (new p521Uint1(x362.$high, x362.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x363 = _tuple$172[0];
		x364 = _tuple$172[1];
		x365 = new $Uint64(0, 0);
		x366 = new $Uint64(0, 0);
		_tuple$173 = bits.Add64(x311, x346, ((x$120 = (new p521Uint1(x364.$high, x364.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x365 = _tuple$173[0];
		x366 = _tuple$173[1];
		x367 = new $Uint64(0, 0);
		x368 = new $Uint64(0, 0);
		_tuple$174 = bits.Add64(x313, x348, ((x$121 = (new p521Uint1(x366.$high, x366.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x367 = _tuple$174[0];
		x368 = _tuple$174[1];
		x369 = new $Uint64(0, 0);
		x370 = new $Uint64(0, 0);
		_tuple$175 = bits.Add64(x315, x350, ((x$122 = (new p521Uint1(x368.$high, x368.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x369 = _tuple$175[0];
		x370 = _tuple$175[1];
		x371 = new $Uint64(0, 0);
		x372 = new $Uint64(0, 0);
		_tuple$176 = bits.Add64(x317, x352, ((x$123 = (new p521Uint1(x370.$high, x370.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x371 = _tuple$176[0];
		x372 = _tuple$176[1];
		x373 = new $Uint64(0, 0);
		x374 = new $Uint64(0, 0);
		_tuple$177 = bits.Add64(x319, x354, ((x$124 = (new p521Uint1(x372.$high, x372.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x373 = _tuple$177[0];
		x374 = _tuple$177[1];
		x375 = new $Uint64(0, 0);
		x376 = new $Uint64(0, 0);
		_tuple$178 = bits.Add64(x321, x356, ((x$125 = (new p521Uint1(x374.$high, x374.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x375 = _tuple$178[0];
		x376 = _tuple$178[1];
		x377 = new $Uint64(0, 0);
		x378 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x357, new $Uint64(0, 511));
		x378 = _tuple$179[0];
		x377 = _tuple$179[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$180 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x380 = _tuple$180[0];
		x379 = _tuple$180[1];
		x381 = new $Uint64(0, 0);
		x382 = new $Uint64(0, 0);
		_tuple$181 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x382 = _tuple$181[0];
		x381 = _tuple$181[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$182 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x384 = _tuple$182[0];
		x383 = _tuple$182[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$183 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x386 = _tuple$183[0];
		x385 = _tuple$183[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$184 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x388 = _tuple$184[0];
		x387 = _tuple$184[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$185 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x390 = _tuple$185[0];
		x389 = _tuple$185[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$186 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x392 = _tuple$186[0];
		x391 = _tuple$186[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$187 = bits.Mul64(x357, new $Uint64(4294967295, 4294967295));
		x394 = _tuple$187[0];
		x393 = _tuple$187[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x394, x391, new $Uint64(0, 0));
		x395 = _tuple$188[0];
		x396 = _tuple$188[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x392, x389, ((x$126 = (new p521Uint1(x396.$high, x396.$low)), new $Uint64(x$126.$high, x$126.$low))));
		x397 = _tuple$189[0];
		x398 = _tuple$189[1];
		x399 = new $Uint64(0, 0);
		x400 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x390, x387, ((x$127 = (new p521Uint1(x398.$high, x398.$low)), new $Uint64(x$127.$high, x$127.$low))));
		x399 = _tuple$190[0];
		x400 = _tuple$190[1];
		x401 = new $Uint64(0, 0);
		x402 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x388, x385, ((x$128 = (new p521Uint1(x400.$high, x400.$low)), new $Uint64(x$128.$high, x$128.$low))));
		x401 = _tuple$191[0];
		x402 = _tuple$191[1];
		x403 = new $Uint64(0, 0);
		x404 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x386, x383, ((x$129 = (new p521Uint1(x402.$high, x402.$low)), new $Uint64(x$129.$high, x$129.$low))));
		x403 = _tuple$192[0];
		x404 = _tuple$192[1];
		x405 = new $Uint64(0, 0);
		x406 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x384, x381, ((x$130 = (new p521Uint1(x404.$high, x404.$low)), new $Uint64(x$130.$high, x$130.$low))));
		x405 = _tuple$193[0];
		x406 = _tuple$193[1];
		x407 = new $Uint64(0, 0);
		x408 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x382, x379, ((x$131 = (new p521Uint1(x406.$high, x406.$low)), new $Uint64(x$131.$high, x$131.$low))));
		x407 = _tuple$194[0];
		x408 = _tuple$194[1];
		x409 = new $Uint64(0, 0);
		x410 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64(x380, x377, ((x$132 = (new p521Uint1(x408.$high, x408.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x409 = _tuple$195[0];
		x410 = _tuple$195[1];
		x411 = (x$133 = ((x$134 = (new p521Uint1(x410.$high, x410.$low)), new $Uint64(x$134.$high, x$134.$low))), new $Uint64(x$133.$high + x378.$high, x$133.$low + x378.$low));
		x413 = new $Uint64(0, 0);
		_tuple$196 = bits.Add64(x357, x393, new $Uint64(0, 0));
		x413 = _tuple$196[1];
		x414 = new $Uint64(0, 0);
		x415 = new $Uint64(0, 0);
		_tuple$197 = bits.Add64(x359, x395, ((x$135 = (new p521Uint1(x413.$high, x413.$low)), new $Uint64(x$135.$high, x$135.$low))));
		x414 = _tuple$197[0];
		x415 = _tuple$197[1];
		x416 = new $Uint64(0, 0);
		x417 = new $Uint64(0, 0);
		_tuple$198 = bits.Add64(x361, x397, ((x$136 = (new p521Uint1(x415.$high, x415.$low)), new $Uint64(x$136.$high, x$136.$low))));
		x416 = _tuple$198[0];
		x417 = _tuple$198[1];
		x418 = new $Uint64(0, 0);
		x419 = new $Uint64(0, 0);
		_tuple$199 = bits.Add64(x363, x399, ((x$137 = (new p521Uint1(x417.$high, x417.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x418 = _tuple$199[0];
		x419 = _tuple$199[1];
		x420 = new $Uint64(0, 0);
		x421 = new $Uint64(0, 0);
		_tuple$200 = bits.Add64(x365, x401, ((x$138 = (new p521Uint1(x419.$high, x419.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x420 = _tuple$200[0];
		x421 = _tuple$200[1];
		x422 = new $Uint64(0, 0);
		x423 = new $Uint64(0, 0);
		_tuple$201 = bits.Add64(x367, x403, ((x$139 = (new p521Uint1(x421.$high, x421.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x422 = _tuple$201[0];
		x423 = _tuple$201[1];
		x424 = new $Uint64(0, 0);
		x425 = new $Uint64(0, 0);
		_tuple$202 = bits.Add64(x369, x405, ((x$140 = (new p521Uint1(x423.$high, x423.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x424 = _tuple$202[0];
		x425 = _tuple$202[1];
		x426 = new $Uint64(0, 0);
		x427 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x371, x407, ((x$141 = (new p521Uint1(x425.$high, x425.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x426 = _tuple$203[0];
		x427 = _tuple$203[1];
		x428 = new $Uint64(0, 0);
		x429 = new $Uint64(0, 0);
		_tuple$204 = bits.Add64(x373, x409, ((x$142 = (new p521Uint1(x427.$high, x427.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x428 = _tuple$204[0];
		x429 = _tuple$204[1];
		x430 = new $Uint64(0, 0);
		x431 = new $Uint64(0, 0);
		_tuple$205 = bits.Add64(x375, x411, ((x$143 = (new p521Uint1(x429.$high, x429.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x430 = _tuple$205[0];
		x431 = _tuple$205[1];
		x432 = (x$144 = ((x$145 = (new p521Uint1(x431.$high, x431.$low)), new $Uint64(x$145.$high, x$145.$low))), x$146 = ((x$147 = (new p521Uint1(x376.$high, x376.$low)), new $Uint64(x$147.$high, x$147.$low))), new $Uint64(x$144.$high + x$146.$high, x$144.$low + x$146.$low));
		x433 = new $Uint64(0, 0);
		x434 = new $Uint64(0, 0);
		_tuple$206 = bits.Mul64(x4, arg1[8]);
		x434 = _tuple$206[0];
		x433 = _tuple$206[1];
		x435 = new $Uint64(0, 0);
		x436 = new $Uint64(0, 0);
		_tuple$207 = bits.Mul64(x4, arg1[7]);
		x436 = _tuple$207[0];
		x435 = _tuple$207[1];
		x437 = new $Uint64(0, 0);
		x438 = new $Uint64(0, 0);
		_tuple$208 = bits.Mul64(x4, arg1[6]);
		x438 = _tuple$208[0];
		x437 = _tuple$208[1];
		x439 = new $Uint64(0, 0);
		x440 = new $Uint64(0, 0);
		_tuple$209 = bits.Mul64(x4, arg1[5]);
		x440 = _tuple$209[0];
		x439 = _tuple$209[1];
		x441 = new $Uint64(0, 0);
		x442 = new $Uint64(0, 0);
		_tuple$210 = bits.Mul64(x4, arg1[4]);
		x442 = _tuple$210[0];
		x441 = _tuple$210[1];
		x443 = new $Uint64(0, 0);
		x444 = new $Uint64(0, 0);
		_tuple$211 = bits.Mul64(x4, arg1[3]);
		x444 = _tuple$211[0];
		x443 = _tuple$211[1];
		x445 = new $Uint64(0, 0);
		x446 = new $Uint64(0, 0);
		_tuple$212 = bits.Mul64(x4, arg1[2]);
		x446 = _tuple$212[0];
		x445 = _tuple$212[1];
		x447 = new $Uint64(0, 0);
		x448 = new $Uint64(0, 0);
		_tuple$213 = bits.Mul64(x4, arg1[1]);
		x448 = _tuple$213[0];
		x447 = _tuple$213[1];
		x449 = new $Uint64(0, 0);
		x450 = new $Uint64(0, 0);
		_tuple$214 = bits.Mul64(x4, arg1[0]);
		x450 = _tuple$214[0];
		x449 = _tuple$214[1];
		x451 = new $Uint64(0, 0);
		x452 = new $Uint64(0, 0);
		_tuple$215 = bits.Add64(x450, x447, new $Uint64(0, 0));
		x451 = _tuple$215[0];
		x452 = _tuple$215[1];
		x453 = new $Uint64(0, 0);
		x454 = new $Uint64(0, 0);
		_tuple$216 = bits.Add64(x448, x445, ((x$148 = (new p521Uint1(x452.$high, x452.$low)), new $Uint64(x$148.$high, x$148.$low))));
		x453 = _tuple$216[0];
		x454 = _tuple$216[1];
		x455 = new $Uint64(0, 0);
		x456 = new $Uint64(0, 0);
		_tuple$217 = bits.Add64(x446, x443, ((x$149 = (new p521Uint1(x454.$high, x454.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x455 = _tuple$217[0];
		x456 = _tuple$217[1];
		x457 = new $Uint64(0, 0);
		x458 = new $Uint64(0, 0);
		_tuple$218 = bits.Add64(x444, x441, ((x$150 = (new p521Uint1(x456.$high, x456.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x457 = _tuple$218[0];
		x458 = _tuple$218[1];
		x459 = new $Uint64(0, 0);
		x460 = new $Uint64(0, 0);
		_tuple$219 = bits.Add64(x442, x439, ((x$151 = (new p521Uint1(x458.$high, x458.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x459 = _tuple$219[0];
		x460 = _tuple$219[1];
		x461 = new $Uint64(0, 0);
		x462 = new $Uint64(0, 0);
		_tuple$220 = bits.Add64(x440, x437, ((x$152 = (new p521Uint1(x460.$high, x460.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x461 = _tuple$220[0];
		x462 = _tuple$220[1];
		x463 = new $Uint64(0, 0);
		x464 = new $Uint64(0, 0);
		_tuple$221 = bits.Add64(x438, x435, ((x$153 = (new p521Uint1(x462.$high, x462.$low)), new $Uint64(x$153.$high, x$153.$low))));
		x463 = _tuple$221[0];
		x464 = _tuple$221[1];
		x465 = new $Uint64(0, 0);
		x466 = new $Uint64(0, 0);
		_tuple$222 = bits.Add64(x436, x433, ((x$154 = (new p521Uint1(x464.$high, x464.$low)), new $Uint64(x$154.$high, x$154.$low))));
		x465 = _tuple$222[0];
		x466 = _tuple$222[1];
		x467 = (x$155 = ((x$156 = (new p521Uint1(x466.$high, x466.$low)), new $Uint64(x$156.$high, x$156.$low))), new $Uint64(x$155.$high + x434.$high, x$155.$low + x434.$low));
		x468 = new $Uint64(0, 0);
		x469 = new $Uint64(0, 0);
		_tuple$223 = bits.Add64(x414, x449, new $Uint64(0, 0));
		x468 = _tuple$223[0];
		x469 = _tuple$223[1];
		x470 = new $Uint64(0, 0);
		x471 = new $Uint64(0, 0);
		_tuple$224 = bits.Add64(x416, x451, ((x$157 = (new p521Uint1(x469.$high, x469.$low)), new $Uint64(x$157.$high, x$157.$low))));
		x470 = _tuple$224[0];
		x471 = _tuple$224[1];
		x472 = new $Uint64(0, 0);
		x473 = new $Uint64(0, 0);
		_tuple$225 = bits.Add64(x418, x453, ((x$158 = (new p521Uint1(x471.$high, x471.$low)), new $Uint64(x$158.$high, x$158.$low))));
		x472 = _tuple$225[0];
		x473 = _tuple$225[1];
		x474 = new $Uint64(0, 0);
		x475 = new $Uint64(0, 0);
		_tuple$226 = bits.Add64(x420, x455, ((x$159 = (new p521Uint1(x473.$high, x473.$low)), new $Uint64(x$159.$high, x$159.$low))));
		x474 = _tuple$226[0];
		x475 = _tuple$226[1];
		x476 = new $Uint64(0, 0);
		x477 = new $Uint64(0, 0);
		_tuple$227 = bits.Add64(x422, x457, ((x$160 = (new p521Uint1(x475.$high, x475.$low)), new $Uint64(x$160.$high, x$160.$low))));
		x476 = _tuple$227[0];
		x477 = _tuple$227[1];
		x478 = new $Uint64(0, 0);
		x479 = new $Uint64(0, 0);
		_tuple$228 = bits.Add64(x424, x459, ((x$161 = (new p521Uint1(x477.$high, x477.$low)), new $Uint64(x$161.$high, x$161.$low))));
		x478 = _tuple$228[0];
		x479 = _tuple$228[1];
		x480 = new $Uint64(0, 0);
		x481 = new $Uint64(0, 0);
		_tuple$229 = bits.Add64(x426, x461, ((x$162 = (new p521Uint1(x479.$high, x479.$low)), new $Uint64(x$162.$high, x$162.$low))));
		x480 = _tuple$229[0];
		x481 = _tuple$229[1];
		x482 = new $Uint64(0, 0);
		x483 = new $Uint64(0, 0);
		_tuple$230 = bits.Add64(x428, x463, ((x$163 = (new p521Uint1(x481.$high, x481.$low)), new $Uint64(x$163.$high, x$163.$low))));
		x482 = _tuple$230[0];
		x483 = _tuple$230[1];
		x484 = new $Uint64(0, 0);
		x485 = new $Uint64(0, 0);
		_tuple$231 = bits.Add64(x430, x465, ((x$164 = (new p521Uint1(x483.$high, x483.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x484 = _tuple$231[0];
		x485 = _tuple$231[1];
		x486 = new $Uint64(0, 0);
		x487 = new $Uint64(0, 0);
		_tuple$232 = bits.Add64(x432, x467, ((x$165 = (new p521Uint1(x485.$high, x485.$low)), new $Uint64(x$165.$high, x$165.$low))));
		x486 = _tuple$232[0];
		x487 = _tuple$232[1];
		x488 = new $Uint64(0, 0);
		x489 = new $Uint64(0, 0);
		_tuple$233 = bits.Mul64(x468, new $Uint64(0, 511));
		x489 = _tuple$233[0];
		x488 = _tuple$233[1];
		x490 = new $Uint64(0, 0);
		x491 = new $Uint64(0, 0);
		_tuple$234 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x491 = _tuple$234[0];
		x490 = _tuple$234[1];
		x492 = new $Uint64(0, 0);
		x493 = new $Uint64(0, 0);
		_tuple$235 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x493 = _tuple$235[0];
		x492 = _tuple$235[1];
		x494 = new $Uint64(0, 0);
		x495 = new $Uint64(0, 0);
		_tuple$236 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x495 = _tuple$236[0];
		x494 = _tuple$236[1];
		x496 = new $Uint64(0, 0);
		x497 = new $Uint64(0, 0);
		_tuple$237 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x497 = _tuple$237[0];
		x496 = _tuple$237[1];
		x498 = new $Uint64(0, 0);
		x499 = new $Uint64(0, 0);
		_tuple$238 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x499 = _tuple$238[0];
		x498 = _tuple$238[1];
		x500 = new $Uint64(0, 0);
		x501 = new $Uint64(0, 0);
		_tuple$239 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x501 = _tuple$239[0];
		x500 = _tuple$239[1];
		x502 = new $Uint64(0, 0);
		x503 = new $Uint64(0, 0);
		_tuple$240 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x503 = _tuple$240[0];
		x502 = _tuple$240[1];
		x504 = new $Uint64(0, 0);
		x505 = new $Uint64(0, 0);
		_tuple$241 = bits.Mul64(x468, new $Uint64(4294967295, 4294967295));
		x505 = _tuple$241[0];
		x504 = _tuple$241[1];
		x506 = new $Uint64(0, 0);
		x507 = new $Uint64(0, 0);
		_tuple$242 = bits.Add64(x505, x502, new $Uint64(0, 0));
		x506 = _tuple$242[0];
		x507 = _tuple$242[1];
		x508 = new $Uint64(0, 0);
		x509 = new $Uint64(0, 0);
		_tuple$243 = bits.Add64(x503, x500, ((x$166 = (new p521Uint1(x507.$high, x507.$low)), new $Uint64(x$166.$high, x$166.$low))));
		x508 = _tuple$243[0];
		x509 = _tuple$243[1];
		x510 = new $Uint64(0, 0);
		x511 = new $Uint64(0, 0);
		_tuple$244 = bits.Add64(x501, x498, ((x$167 = (new p521Uint1(x509.$high, x509.$low)), new $Uint64(x$167.$high, x$167.$low))));
		x510 = _tuple$244[0];
		x511 = _tuple$244[1];
		x512 = new $Uint64(0, 0);
		x513 = new $Uint64(0, 0);
		_tuple$245 = bits.Add64(x499, x496, ((x$168 = (new p521Uint1(x511.$high, x511.$low)), new $Uint64(x$168.$high, x$168.$low))));
		x512 = _tuple$245[0];
		x513 = _tuple$245[1];
		x514 = new $Uint64(0, 0);
		x515 = new $Uint64(0, 0);
		_tuple$246 = bits.Add64(x497, x494, ((x$169 = (new p521Uint1(x513.$high, x513.$low)), new $Uint64(x$169.$high, x$169.$low))));
		x514 = _tuple$246[0];
		x515 = _tuple$246[1];
		x516 = new $Uint64(0, 0);
		x517 = new $Uint64(0, 0);
		_tuple$247 = bits.Add64(x495, x492, ((x$170 = (new p521Uint1(x515.$high, x515.$low)), new $Uint64(x$170.$high, x$170.$low))));
		x516 = _tuple$247[0];
		x517 = _tuple$247[1];
		x518 = new $Uint64(0, 0);
		x519 = new $Uint64(0, 0);
		_tuple$248 = bits.Add64(x493, x490, ((x$171 = (new p521Uint1(x517.$high, x517.$low)), new $Uint64(x$171.$high, x$171.$low))));
		x518 = _tuple$248[0];
		x519 = _tuple$248[1];
		x520 = new $Uint64(0, 0);
		x521 = new $Uint64(0, 0);
		_tuple$249 = bits.Add64(x491, x488, ((x$172 = (new p521Uint1(x519.$high, x519.$low)), new $Uint64(x$172.$high, x$172.$low))));
		x520 = _tuple$249[0];
		x521 = _tuple$249[1];
		x522 = (x$173 = ((x$174 = (new p521Uint1(x521.$high, x521.$low)), new $Uint64(x$174.$high, x$174.$low))), new $Uint64(x$173.$high + x489.$high, x$173.$low + x489.$low));
		x524 = new $Uint64(0, 0);
		_tuple$250 = bits.Add64(x468, x504, new $Uint64(0, 0));
		x524 = _tuple$250[1];
		x525 = new $Uint64(0, 0);
		x526 = new $Uint64(0, 0);
		_tuple$251 = bits.Add64(x470, x506, ((x$175 = (new p521Uint1(x524.$high, x524.$low)), new $Uint64(x$175.$high, x$175.$low))));
		x525 = _tuple$251[0];
		x526 = _tuple$251[1];
		x527 = new $Uint64(0, 0);
		x528 = new $Uint64(0, 0);
		_tuple$252 = bits.Add64(x472, x508, ((x$176 = (new p521Uint1(x526.$high, x526.$low)), new $Uint64(x$176.$high, x$176.$low))));
		x527 = _tuple$252[0];
		x528 = _tuple$252[1];
		x529 = new $Uint64(0, 0);
		x530 = new $Uint64(0, 0);
		_tuple$253 = bits.Add64(x474, x510, ((x$177 = (new p521Uint1(x528.$high, x528.$low)), new $Uint64(x$177.$high, x$177.$low))));
		x529 = _tuple$253[0];
		x530 = _tuple$253[1];
		x531 = new $Uint64(0, 0);
		x532 = new $Uint64(0, 0);
		_tuple$254 = bits.Add64(x476, x512, ((x$178 = (new p521Uint1(x530.$high, x530.$low)), new $Uint64(x$178.$high, x$178.$low))));
		x531 = _tuple$254[0];
		x532 = _tuple$254[1];
		x533 = new $Uint64(0, 0);
		x534 = new $Uint64(0, 0);
		_tuple$255 = bits.Add64(x478, x514, ((x$179 = (new p521Uint1(x532.$high, x532.$low)), new $Uint64(x$179.$high, x$179.$low))));
		x533 = _tuple$255[0];
		x534 = _tuple$255[1];
		x535 = new $Uint64(0, 0);
		x536 = new $Uint64(0, 0);
		_tuple$256 = bits.Add64(x480, x516, ((x$180 = (new p521Uint1(x534.$high, x534.$low)), new $Uint64(x$180.$high, x$180.$low))));
		x535 = _tuple$256[0];
		x536 = _tuple$256[1];
		x537 = new $Uint64(0, 0);
		x538 = new $Uint64(0, 0);
		_tuple$257 = bits.Add64(x482, x518, ((x$181 = (new p521Uint1(x536.$high, x536.$low)), new $Uint64(x$181.$high, x$181.$low))));
		x537 = _tuple$257[0];
		x538 = _tuple$257[1];
		x539 = new $Uint64(0, 0);
		x540 = new $Uint64(0, 0);
		_tuple$258 = bits.Add64(x484, x520, ((x$182 = (new p521Uint1(x538.$high, x538.$low)), new $Uint64(x$182.$high, x$182.$low))));
		x539 = _tuple$258[0];
		x540 = _tuple$258[1];
		x541 = new $Uint64(0, 0);
		x542 = new $Uint64(0, 0);
		_tuple$259 = bits.Add64(x486, x522, ((x$183 = (new p521Uint1(x540.$high, x540.$low)), new $Uint64(x$183.$high, x$183.$low))));
		x541 = _tuple$259[0];
		x542 = _tuple$259[1];
		x543 = (x$184 = ((x$185 = (new p521Uint1(x542.$high, x542.$low)), new $Uint64(x$185.$high, x$185.$low))), x$186 = ((x$187 = (new p521Uint1(x487.$high, x487.$low)), new $Uint64(x$187.$high, x$187.$low))), new $Uint64(x$184.$high + x$186.$high, x$184.$low + x$186.$low));
		x544 = new $Uint64(0, 0);
		x545 = new $Uint64(0, 0);
		_tuple$260 = bits.Mul64(x5, arg1[8]);
		x545 = _tuple$260[0];
		x544 = _tuple$260[1];
		x546 = new $Uint64(0, 0);
		x547 = new $Uint64(0, 0);
		_tuple$261 = bits.Mul64(x5, arg1[7]);
		x547 = _tuple$261[0];
		x546 = _tuple$261[1];
		x548 = new $Uint64(0, 0);
		x549 = new $Uint64(0, 0);
		_tuple$262 = bits.Mul64(x5, arg1[6]);
		x549 = _tuple$262[0];
		x548 = _tuple$262[1];
		x550 = new $Uint64(0, 0);
		x551 = new $Uint64(0, 0);
		_tuple$263 = bits.Mul64(x5, arg1[5]);
		x551 = _tuple$263[0];
		x550 = _tuple$263[1];
		x552 = new $Uint64(0, 0);
		x553 = new $Uint64(0, 0);
		_tuple$264 = bits.Mul64(x5, arg1[4]);
		x553 = _tuple$264[0];
		x552 = _tuple$264[1];
		x554 = new $Uint64(0, 0);
		x555 = new $Uint64(0, 0);
		_tuple$265 = bits.Mul64(x5, arg1[3]);
		x555 = _tuple$265[0];
		x554 = _tuple$265[1];
		x556 = new $Uint64(0, 0);
		x557 = new $Uint64(0, 0);
		_tuple$266 = bits.Mul64(x5, arg1[2]);
		x557 = _tuple$266[0];
		x556 = _tuple$266[1];
		x558 = new $Uint64(0, 0);
		x559 = new $Uint64(0, 0);
		_tuple$267 = bits.Mul64(x5, arg1[1]);
		x559 = _tuple$267[0];
		x558 = _tuple$267[1];
		x560 = new $Uint64(0, 0);
		x561 = new $Uint64(0, 0);
		_tuple$268 = bits.Mul64(x5, arg1[0]);
		x561 = _tuple$268[0];
		x560 = _tuple$268[1];
		x562 = new $Uint64(0, 0);
		x563 = new $Uint64(0, 0);
		_tuple$269 = bits.Add64(x561, x558, new $Uint64(0, 0));
		x562 = _tuple$269[0];
		x563 = _tuple$269[1];
		x564 = new $Uint64(0, 0);
		x565 = new $Uint64(0, 0);
		_tuple$270 = bits.Add64(x559, x556, ((x$188 = (new p521Uint1(x563.$high, x563.$low)), new $Uint64(x$188.$high, x$188.$low))));
		x564 = _tuple$270[0];
		x565 = _tuple$270[1];
		x566 = new $Uint64(0, 0);
		x567 = new $Uint64(0, 0);
		_tuple$271 = bits.Add64(x557, x554, ((x$189 = (new p521Uint1(x565.$high, x565.$low)), new $Uint64(x$189.$high, x$189.$low))));
		x566 = _tuple$271[0];
		x567 = _tuple$271[1];
		x568 = new $Uint64(0, 0);
		x569 = new $Uint64(0, 0);
		_tuple$272 = bits.Add64(x555, x552, ((x$190 = (new p521Uint1(x567.$high, x567.$low)), new $Uint64(x$190.$high, x$190.$low))));
		x568 = _tuple$272[0];
		x569 = _tuple$272[1];
		x570 = new $Uint64(0, 0);
		x571 = new $Uint64(0, 0);
		_tuple$273 = bits.Add64(x553, x550, ((x$191 = (new p521Uint1(x569.$high, x569.$low)), new $Uint64(x$191.$high, x$191.$low))));
		x570 = _tuple$273[0];
		x571 = _tuple$273[1];
		x572 = new $Uint64(0, 0);
		x573 = new $Uint64(0, 0);
		_tuple$274 = bits.Add64(x551, x548, ((x$192 = (new p521Uint1(x571.$high, x571.$low)), new $Uint64(x$192.$high, x$192.$low))));
		x572 = _tuple$274[0];
		x573 = _tuple$274[1];
		x574 = new $Uint64(0, 0);
		x575 = new $Uint64(0, 0);
		_tuple$275 = bits.Add64(x549, x546, ((x$193 = (new p521Uint1(x573.$high, x573.$low)), new $Uint64(x$193.$high, x$193.$low))));
		x574 = _tuple$275[0];
		x575 = _tuple$275[1];
		x576 = new $Uint64(0, 0);
		x577 = new $Uint64(0, 0);
		_tuple$276 = bits.Add64(x547, x544, ((x$194 = (new p521Uint1(x575.$high, x575.$low)), new $Uint64(x$194.$high, x$194.$low))));
		x576 = _tuple$276[0];
		x577 = _tuple$276[1];
		x578 = (x$195 = ((x$196 = (new p521Uint1(x577.$high, x577.$low)), new $Uint64(x$196.$high, x$196.$low))), new $Uint64(x$195.$high + x545.$high, x$195.$low + x545.$low));
		x579 = new $Uint64(0, 0);
		x580 = new $Uint64(0, 0);
		_tuple$277 = bits.Add64(x525, x560, new $Uint64(0, 0));
		x579 = _tuple$277[0];
		x580 = _tuple$277[1];
		x581 = new $Uint64(0, 0);
		x582 = new $Uint64(0, 0);
		_tuple$278 = bits.Add64(x527, x562, ((x$197 = (new p521Uint1(x580.$high, x580.$low)), new $Uint64(x$197.$high, x$197.$low))));
		x581 = _tuple$278[0];
		x582 = _tuple$278[1];
		x583 = new $Uint64(0, 0);
		x584 = new $Uint64(0, 0);
		_tuple$279 = bits.Add64(x529, x564, ((x$198 = (new p521Uint1(x582.$high, x582.$low)), new $Uint64(x$198.$high, x$198.$low))));
		x583 = _tuple$279[0];
		x584 = _tuple$279[1];
		x585 = new $Uint64(0, 0);
		x586 = new $Uint64(0, 0);
		_tuple$280 = bits.Add64(x531, x566, ((x$199 = (new p521Uint1(x584.$high, x584.$low)), new $Uint64(x$199.$high, x$199.$low))));
		x585 = _tuple$280[0];
		x586 = _tuple$280[1];
		x587 = new $Uint64(0, 0);
		x588 = new $Uint64(0, 0);
		_tuple$281 = bits.Add64(x533, x568, ((x$200 = (new p521Uint1(x586.$high, x586.$low)), new $Uint64(x$200.$high, x$200.$low))));
		x587 = _tuple$281[0];
		x588 = _tuple$281[1];
		x589 = new $Uint64(0, 0);
		x590 = new $Uint64(0, 0);
		_tuple$282 = bits.Add64(x535, x570, ((x$201 = (new p521Uint1(x588.$high, x588.$low)), new $Uint64(x$201.$high, x$201.$low))));
		x589 = _tuple$282[0];
		x590 = _tuple$282[1];
		x591 = new $Uint64(0, 0);
		x592 = new $Uint64(0, 0);
		_tuple$283 = bits.Add64(x537, x572, ((x$202 = (new p521Uint1(x590.$high, x590.$low)), new $Uint64(x$202.$high, x$202.$low))));
		x591 = _tuple$283[0];
		x592 = _tuple$283[1];
		x593 = new $Uint64(0, 0);
		x594 = new $Uint64(0, 0);
		_tuple$284 = bits.Add64(x539, x574, ((x$203 = (new p521Uint1(x592.$high, x592.$low)), new $Uint64(x$203.$high, x$203.$low))));
		x593 = _tuple$284[0];
		x594 = _tuple$284[1];
		x595 = new $Uint64(0, 0);
		x596 = new $Uint64(0, 0);
		_tuple$285 = bits.Add64(x541, x576, ((x$204 = (new p521Uint1(x594.$high, x594.$low)), new $Uint64(x$204.$high, x$204.$low))));
		x595 = _tuple$285[0];
		x596 = _tuple$285[1];
		x597 = new $Uint64(0, 0);
		x598 = new $Uint64(0, 0);
		_tuple$286 = bits.Add64(x543, x578, ((x$205 = (new p521Uint1(x596.$high, x596.$low)), new $Uint64(x$205.$high, x$205.$low))));
		x597 = _tuple$286[0];
		x598 = _tuple$286[1];
		x599 = new $Uint64(0, 0);
		x600 = new $Uint64(0, 0);
		_tuple$287 = bits.Mul64(x579, new $Uint64(0, 511));
		x600 = _tuple$287[0];
		x599 = _tuple$287[1];
		x601 = new $Uint64(0, 0);
		x602 = new $Uint64(0, 0);
		_tuple$288 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x602 = _tuple$288[0];
		x601 = _tuple$288[1];
		x603 = new $Uint64(0, 0);
		x604 = new $Uint64(0, 0);
		_tuple$289 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x604 = _tuple$289[0];
		x603 = _tuple$289[1];
		x605 = new $Uint64(0, 0);
		x606 = new $Uint64(0, 0);
		_tuple$290 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x606 = _tuple$290[0];
		x605 = _tuple$290[1];
		x607 = new $Uint64(0, 0);
		x608 = new $Uint64(0, 0);
		_tuple$291 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x608 = _tuple$291[0];
		x607 = _tuple$291[1];
		x609 = new $Uint64(0, 0);
		x610 = new $Uint64(0, 0);
		_tuple$292 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x610 = _tuple$292[0];
		x609 = _tuple$292[1];
		x611 = new $Uint64(0, 0);
		x612 = new $Uint64(0, 0);
		_tuple$293 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x612 = _tuple$293[0];
		x611 = _tuple$293[1];
		x613 = new $Uint64(0, 0);
		x614 = new $Uint64(0, 0);
		_tuple$294 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x614 = _tuple$294[0];
		x613 = _tuple$294[1];
		x615 = new $Uint64(0, 0);
		x616 = new $Uint64(0, 0);
		_tuple$295 = bits.Mul64(x579, new $Uint64(4294967295, 4294967295));
		x616 = _tuple$295[0];
		x615 = _tuple$295[1];
		x617 = new $Uint64(0, 0);
		x618 = new $Uint64(0, 0);
		_tuple$296 = bits.Add64(x616, x613, new $Uint64(0, 0));
		x617 = _tuple$296[0];
		x618 = _tuple$296[1];
		x619 = new $Uint64(0, 0);
		x620 = new $Uint64(0, 0);
		_tuple$297 = bits.Add64(x614, x611, ((x$206 = (new p521Uint1(x618.$high, x618.$low)), new $Uint64(x$206.$high, x$206.$low))));
		x619 = _tuple$297[0];
		x620 = _tuple$297[1];
		x621 = new $Uint64(0, 0);
		x622 = new $Uint64(0, 0);
		_tuple$298 = bits.Add64(x612, x609, ((x$207 = (new p521Uint1(x620.$high, x620.$low)), new $Uint64(x$207.$high, x$207.$low))));
		x621 = _tuple$298[0];
		x622 = _tuple$298[1];
		x623 = new $Uint64(0, 0);
		x624 = new $Uint64(0, 0);
		_tuple$299 = bits.Add64(x610, x607, ((x$208 = (new p521Uint1(x622.$high, x622.$low)), new $Uint64(x$208.$high, x$208.$low))));
		x623 = _tuple$299[0];
		x624 = _tuple$299[1];
		x625 = new $Uint64(0, 0);
		x626 = new $Uint64(0, 0);
		_tuple$300 = bits.Add64(x608, x605, ((x$209 = (new p521Uint1(x624.$high, x624.$low)), new $Uint64(x$209.$high, x$209.$low))));
		x625 = _tuple$300[0];
		x626 = _tuple$300[1];
		x627 = new $Uint64(0, 0);
		x628 = new $Uint64(0, 0);
		_tuple$301 = bits.Add64(x606, x603, ((x$210 = (new p521Uint1(x626.$high, x626.$low)), new $Uint64(x$210.$high, x$210.$low))));
		x627 = _tuple$301[0];
		x628 = _tuple$301[1];
		x629 = new $Uint64(0, 0);
		x630 = new $Uint64(0, 0);
		_tuple$302 = bits.Add64(x604, x601, ((x$211 = (new p521Uint1(x628.$high, x628.$low)), new $Uint64(x$211.$high, x$211.$low))));
		x629 = _tuple$302[0];
		x630 = _tuple$302[1];
		x631 = new $Uint64(0, 0);
		x632 = new $Uint64(0, 0);
		_tuple$303 = bits.Add64(x602, x599, ((x$212 = (new p521Uint1(x630.$high, x630.$low)), new $Uint64(x$212.$high, x$212.$low))));
		x631 = _tuple$303[0];
		x632 = _tuple$303[1];
		x633 = (x$213 = ((x$214 = (new p521Uint1(x632.$high, x632.$low)), new $Uint64(x$214.$high, x$214.$low))), new $Uint64(x$213.$high + x600.$high, x$213.$low + x600.$low));
		x635 = new $Uint64(0, 0);
		_tuple$304 = bits.Add64(x579, x615, new $Uint64(0, 0));
		x635 = _tuple$304[1];
		x636 = new $Uint64(0, 0);
		x637 = new $Uint64(0, 0);
		_tuple$305 = bits.Add64(x581, x617, ((x$215 = (new p521Uint1(x635.$high, x635.$low)), new $Uint64(x$215.$high, x$215.$low))));
		x636 = _tuple$305[0];
		x637 = _tuple$305[1];
		x638 = new $Uint64(0, 0);
		x639 = new $Uint64(0, 0);
		_tuple$306 = bits.Add64(x583, x619, ((x$216 = (new p521Uint1(x637.$high, x637.$low)), new $Uint64(x$216.$high, x$216.$low))));
		x638 = _tuple$306[0];
		x639 = _tuple$306[1];
		x640 = new $Uint64(0, 0);
		x641 = new $Uint64(0, 0);
		_tuple$307 = bits.Add64(x585, x621, ((x$217 = (new p521Uint1(x639.$high, x639.$low)), new $Uint64(x$217.$high, x$217.$low))));
		x640 = _tuple$307[0];
		x641 = _tuple$307[1];
		x642 = new $Uint64(0, 0);
		x643 = new $Uint64(0, 0);
		_tuple$308 = bits.Add64(x587, x623, ((x$218 = (new p521Uint1(x641.$high, x641.$low)), new $Uint64(x$218.$high, x$218.$low))));
		x642 = _tuple$308[0];
		x643 = _tuple$308[1];
		x644 = new $Uint64(0, 0);
		x645 = new $Uint64(0, 0);
		_tuple$309 = bits.Add64(x589, x625, ((x$219 = (new p521Uint1(x643.$high, x643.$low)), new $Uint64(x$219.$high, x$219.$low))));
		x644 = _tuple$309[0];
		x645 = _tuple$309[1];
		x646 = new $Uint64(0, 0);
		x647 = new $Uint64(0, 0);
		_tuple$310 = bits.Add64(x591, x627, ((x$220 = (new p521Uint1(x645.$high, x645.$low)), new $Uint64(x$220.$high, x$220.$low))));
		x646 = _tuple$310[0];
		x647 = _tuple$310[1];
		x648 = new $Uint64(0, 0);
		x649 = new $Uint64(0, 0);
		_tuple$311 = bits.Add64(x593, x629, ((x$221 = (new p521Uint1(x647.$high, x647.$low)), new $Uint64(x$221.$high, x$221.$low))));
		x648 = _tuple$311[0];
		x649 = _tuple$311[1];
		x650 = new $Uint64(0, 0);
		x651 = new $Uint64(0, 0);
		_tuple$312 = bits.Add64(x595, x631, ((x$222 = (new p521Uint1(x649.$high, x649.$low)), new $Uint64(x$222.$high, x$222.$low))));
		x650 = _tuple$312[0];
		x651 = _tuple$312[1];
		x652 = new $Uint64(0, 0);
		x653 = new $Uint64(0, 0);
		_tuple$313 = bits.Add64(x597, x633, ((x$223 = (new p521Uint1(x651.$high, x651.$low)), new $Uint64(x$223.$high, x$223.$low))));
		x652 = _tuple$313[0];
		x653 = _tuple$313[1];
		x654 = (x$224 = ((x$225 = (new p521Uint1(x653.$high, x653.$low)), new $Uint64(x$225.$high, x$225.$low))), x$226 = ((x$227 = (new p521Uint1(x598.$high, x598.$low)), new $Uint64(x$227.$high, x$227.$low))), new $Uint64(x$224.$high + x$226.$high, x$224.$low + x$226.$low));
		x655 = new $Uint64(0, 0);
		x656 = new $Uint64(0, 0);
		_tuple$314 = bits.Mul64(x6, arg1[8]);
		x656 = _tuple$314[0];
		x655 = _tuple$314[1];
		x657 = new $Uint64(0, 0);
		x658 = new $Uint64(0, 0);
		_tuple$315 = bits.Mul64(x6, arg1[7]);
		x658 = _tuple$315[0];
		x657 = _tuple$315[1];
		x659 = new $Uint64(0, 0);
		x660 = new $Uint64(0, 0);
		_tuple$316 = bits.Mul64(x6, arg1[6]);
		x660 = _tuple$316[0];
		x659 = _tuple$316[1];
		x661 = new $Uint64(0, 0);
		x662 = new $Uint64(0, 0);
		_tuple$317 = bits.Mul64(x6, arg1[5]);
		x662 = _tuple$317[0];
		x661 = _tuple$317[1];
		x663 = new $Uint64(0, 0);
		x664 = new $Uint64(0, 0);
		_tuple$318 = bits.Mul64(x6, arg1[4]);
		x664 = _tuple$318[0];
		x663 = _tuple$318[1];
		x665 = new $Uint64(0, 0);
		x666 = new $Uint64(0, 0);
		_tuple$319 = bits.Mul64(x6, arg1[3]);
		x666 = _tuple$319[0];
		x665 = _tuple$319[1];
		x667 = new $Uint64(0, 0);
		x668 = new $Uint64(0, 0);
		_tuple$320 = bits.Mul64(x6, arg1[2]);
		x668 = _tuple$320[0];
		x667 = _tuple$320[1];
		x669 = new $Uint64(0, 0);
		x670 = new $Uint64(0, 0);
		_tuple$321 = bits.Mul64(x6, arg1[1]);
		x670 = _tuple$321[0];
		x669 = _tuple$321[1];
		x671 = new $Uint64(0, 0);
		x672 = new $Uint64(0, 0);
		_tuple$322 = bits.Mul64(x6, arg1[0]);
		x672 = _tuple$322[0];
		x671 = _tuple$322[1];
		x673 = new $Uint64(0, 0);
		x674 = new $Uint64(0, 0);
		_tuple$323 = bits.Add64(x672, x669, new $Uint64(0, 0));
		x673 = _tuple$323[0];
		x674 = _tuple$323[1];
		x675 = new $Uint64(0, 0);
		x676 = new $Uint64(0, 0);
		_tuple$324 = bits.Add64(x670, x667, ((x$228 = (new p521Uint1(x674.$high, x674.$low)), new $Uint64(x$228.$high, x$228.$low))));
		x675 = _tuple$324[0];
		x676 = _tuple$324[1];
		x677 = new $Uint64(0, 0);
		x678 = new $Uint64(0, 0);
		_tuple$325 = bits.Add64(x668, x665, ((x$229 = (new p521Uint1(x676.$high, x676.$low)), new $Uint64(x$229.$high, x$229.$low))));
		x677 = _tuple$325[0];
		x678 = _tuple$325[1];
		x679 = new $Uint64(0, 0);
		x680 = new $Uint64(0, 0);
		_tuple$326 = bits.Add64(x666, x663, ((x$230 = (new p521Uint1(x678.$high, x678.$low)), new $Uint64(x$230.$high, x$230.$low))));
		x679 = _tuple$326[0];
		x680 = _tuple$326[1];
		x681 = new $Uint64(0, 0);
		x682 = new $Uint64(0, 0);
		_tuple$327 = bits.Add64(x664, x661, ((x$231 = (new p521Uint1(x680.$high, x680.$low)), new $Uint64(x$231.$high, x$231.$low))));
		x681 = _tuple$327[0];
		x682 = _tuple$327[1];
		x683 = new $Uint64(0, 0);
		x684 = new $Uint64(0, 0);
		_tuple$328 = bits.Add64(x662, x659, ((x$232 = (new p521Uint1(x682.$high, x682.$low)), new $Uint64(x$232.$high, x$232.$low))));
		x683 = _tuple$328[0];
		x684 = _tuple$328[1];
		x685 = new $Uint64(0, 0);
		x686 = new $Uint64(0, 0);
		_tuple$329 = bits.Add64(x660, x657, ((x$233 = (new p521Uint1(x684.$high, x684.$low)), new $Uint64(x$233.$high, x$233.$low))));
		x685 = _tuple$329[0];
		x686 = _tuple$329[1];
		x687 = new $Uint64(0, 0);
		x688 = new $Uint64(0, 0);
		_tuple$330 = bits.Add64(x658, x655, ((x$234 = (new p521Uint1(x686.$high, x686.$low)), new $Uint64(x$234.$high, x$234.$low))));
		x687 = _tuple$330[0];
		x688 = _tuple$330[1];
		x689 = (x$235 = ((x$236 = (new p521Uint1(x688.$high, x688.$low)), new $Uint64(x$236.$high, x$236.$low))), new $Uint64(x$235.$high + x656.$high, x$235.$low + x656.$low));
		x690 = new $Uint64(0, 0);
		x691 = new $Uint64(0, 0);
		_tuple$331 = bits.Add64(x636, x671, new $Uint64(0, 0));
		x690 = _tuple$331[0];
		x691 = _tuple$331[1];
		x692 = new $Uint64(0, 0);
		x693 = new $Uint64(0, 0);
		_tuple$332 = bits.Add64(x638, x673, ((x$237 = (new p521Uint1(x691.$high, x691.$low)), new $Uint64(x$237.$high, x$237.$low))));
		x692 = _tuple$332[0];
		x693 = _tuple$332[1];
		x694 = new $Uint64(0, 0);
		x695 = new $Uint64(0, 0);
		_tuple$333 = bits.Add64(x640, x675, ((x$238 = (new p521Uint1(x693.$high, x693.$low)), new $Uint64(x$238.$high, x$238.$low))));
		x694 = _tuple$333[0];
		x695 = _tuple$333[1];
		x696 = new $Uint64(0, 0);
		x697 = new $Uint64(0, 0);
		_tuple$334 = bits.Add64(x642, x677, ((x$239 = (new p521Uint1(x695.$high, x695.$low)), new $Uint64(x$239.$high, x$239.$low))));
		x696 = _tuple$334[0];
		x697 = _tuple$334[1];
		x698 = new $Uint64(0, 0);
		x699 = new $Uint64(0, 0);
		_tuple$335 = bits.Add64(x644, x679, ((x$240 = (new p521Uint1(x697.$high, x697.$low)), new $Uint64(x$240.$high, x$240.$low))));
		x698 = _tuple$335[0];
		x699 = _tuple$335[1];
		x700 = new $Uint64(0, 0);
		x701 = new $Uint64(0, 0);
		_tuple$336 = bits.Add64(x646, x681, ((x$241 = (new p521Uint1(x699.$high, x699.$low)), new $Uint64(x$241.$high, x$241.$low))));
		x700 = _tuple$336[0];
		x701 = _tuple$336[1];
		x702 = new $Uint64(0, 0);
		x703 = new $Uint64(0, 0);
		_tuple$337 = bits.Add64(x648, x683, ((x$242 = (new p521Uint1(x701.$high, x701.$low)), new $Uint64(x$242.$high, x$242.$low))));
		x702 = _tuple$337[0];
		x703 = _tuple$337[1];
		x704 = new $Uint64(0, 0);
		x705 = new $Uint64(0, 0);
		_tuple$338 = bits.Add64(x650, x685, ((x$243 = (new p521Uint1(x703.$high, x703.$low)), new $Uint64(x$243.$high, x$243.$low))));
		x704 = _tuple$338[0];
		x705 = _tuple$338[1];
		x706 = new $Uint64(0, 0);
		x707 = new $Uint64(0, 0);
		_tuple$339 = bits.Add64(x652, x687, ((x$244 = (new p521Uint1(x705.$high, x705.$low)), new $Uint64(x$244.$high, x$244.$low))));
		x706 = _tuple$339[0];
		x707 = _tuple$339[1];
		x708 = new $Uint64(0, 0);
		x709 = new $Uint64(0, 0);
		_tuple$340 = bits.Add64(x654, x689, ((x$245 = (new p521Uint1(x707.$high, x707.$low)), new $Uint64(x$245.$high, x$245.$low))));
		x708 = _tuple$340[0];
		x709 = _tuple$340[1];
		x710 = new $Uint64(0, 0);
		x711 = new $Uint64(0, 0);
		_tuple$341 = bits.Mul64(x690, new $Uint64(0, 511));
		x711 = _tuple$341[0];
		x710 = _tuple$341[1];
		x712 = new $Uint64(0, 0);
		x713 = new $Uint64(0, 0);
		_tuple$342 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x713 = _tuple$342[0];
		x712 = _tuple$342[1];
		x714 = new $Uint64(0, 0);
		x715 = new $Uint64(0, 0);
		_tuple$343 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x715 = _tuple$343[0];
		x714 = _tuple$343[1];
		x716 = new $Uint64(0, 0);
		x717 = new $Uint64(0, 0);
		_tuple$344 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x717 = _tuple$344[0];
		x716 = _tuple$344[1];
		x718 = new $Uint64(0, 0);
		x719 = new $Uint64(0, 0);
		_tuple$345 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x719 = _tuple$345[0];
		x718 = _tuple$345[1];
		x720 = new $Uint64(0, 0);
		x721 = new $Uint64(0, 0);
		_tuple$346 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x721 = _tuple$346[0];
		x720 = _tuple$346[1];
		x722 = new $Uint64(0, 0);
		x723 = new $Uint64(0, 0);
		_tuple$347 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x723 = _tuple$347[0];
		x722 = _tuple$347[1];
		x724 = new $Uint64(0, 0);
		x725 = new $Uint64(0, 0);
		_tuple$348 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x725 = _tuple$348[0];
		x724 = _tuple$348[1];
		x726 = new $Uint64(0, 0);
		x727 = new $Uint64(0, 0);
		_tuple$349 = bits.Mul64(x690, new $Uint64(4294967295, 4294967295));
		x727 = _tuple$349[0];
		x726 = _tuple$349[1];
		x728 = new $Uint64(0, 0);
		x729 = new $Uint64(0, 0);
		_tuple$350 = bits.Add64(x727, x724, new $Uint64(0, 0));
		x728 = _tuple$350[0];
		x729 = _tuple$350[1];
		x730 = new $Uint64(0, 0);
		x731 = new $Uint64(0, 0);
		_tuple$351 = bits.Add64(x725, x722, ((x$246 = (new p521Uint1(x729.$high, x729.$low)), new $Uint64(x$246.$high, x$246.$low))));
		x730 = _tuple$351[0];
		x731 = _tuple$351[1];
		x732 = new $Uint64(0, 0);
		x733 = new $Uint64(0, 0);
		_tuple$352 = bits.Add64(x723, x720, ((x$247 = (new p521Uint1(x731.$high, x731.$low)), new $Uint64(x$247.$high, x$247.$low))));
		x732 = _tuple$352[0];
		x733 = _tuple$352[1];
		x734 = new $Uint64(0, 0);
		x735 = new $Uint64(0, 0);
		_tuple$353 = bits.Add64(x721, x718, ((x$248 = (new p521Uint1(x733.$high, x733.$low)), new $Uint64(x$248.$high, x$248.$low))));
		x734 = _tuple$353[0];
		x735 = _tuple$353[1];
		x736 = new $Uint64(0, 0);
		x737 = new $Uint64(0, 0);
		_tuple$354 = bits.Add64(x719, x716, ((x$249 = (new p521Uint1(x735.$high, x735.$low)), new $Uint64(x$249.$high, x$249.$low))));
		x736 = _tuple$354[0];
		x737 = _tuple$354[1];
		x738 = new $Uint64(0, 0);
		x739 = new $Uint64(0, 0);
		_tuple$355 = bits.Add64(x717, x714, ((x$250 = (new p521Uint1(x737.$high, x737.$low)), new $Uint64(x$250.$high, x$250.$low))));
		x738 = _tuple$355[0];
		x739 = _tuple$355[1];
		x740 = new $Uint64(0, 0);
		x741 = new $Uint64(0, 0);
		_tuple$356 = bits.Add64(x715, x712, ((x$251 = (new p521Uint1(x739.$high, x739.$low)), new $Uint64(x$251.$high, x$251.$low))));
		x740 = _tuple$356[0];
		x741 = _tuple$356[1];
		x742 = new $Uint64(0, 0);
		x743 = new $Uint64(0, 0);
		_tuple$357 = bits.Add64(x713, x710, ((x$252 = (new p521Uint1(x741.$high, x741.$low)), new $Uint64(x$252.$high, x$252.$low))));
		x742 = _tuple$357[0];
		x743 = _tuple$357[1];
		x744 = (x$253 = ((x$254 = (new p521Uint1(x743.$high, x743.$low)), new $Uint64(x$254.$high, x$254.$low))), new $Uint64(x$253.$high + x711.$high, x$253.$low + x711.$low));
		x746 = new $Uint64(0, 0);
		_tuple$358 = bits.Add64(x690, x726, new $Uint64(0, 0));
		x746 = _tuple$358[1];
		x747 = new $Uint64(0, 0);
		x748 = new $Uint64(0, 0);
		_tuple$359 = bits.Add64(x692, x728, ((x$255 = (new p521Uint1(x746.$high, x746.$low)), new $Uint64(x$255.$high, x$255.$low))));
		x747 = _tuple$359[0];
		x748 = _tuple$359[1];
		x749 = new $Uint64(0, 0);
		x750 = new $Uint64(0, 0);
		_tuple$360 = bits.Add64(x694, x730, ((x$256 = (new p521Uint1(x748.$high, x748.$low)), new $Uint64(x$256.$high, x$256.$low))));
		x749 = _tuple$360[0];
		x750 = _tuple$360[1];
		x751 = new $Uint64(0, 0);
		x752 = new $Uint64(0, 0);
		_tuple$361 = bits.Add64(x696, x732, ((x$257 = (new p521Uint1(x750.$high, x750.$low)), new $Uint64(x$257.$high, x$257.$low))));
		x751 = _tuple$361[0];
		x752 = _tuple$361[1];
		x753 = new $Uint64(0, 0);
		x754 = new $Uint64(0, 0);
		_tuple$362 = bits.Add64(x698, x734, ((x$258 = (new p521Uint1(x752.$high, x752.$low)), new $Uint64(x$258.$high, x$258.$low))));
		x753 = _tuple$362[0];
		x754 = _tuple$362[1];
		x755 = new $Uint64(0, 0);
		x756 = new $Uint64(0, 0);
		_tuple$363 = bits.Add64(x700, x736, ((x$259 = (new p521Uint1(x754.$high, x754.$low)), new $Uint64(x$259.$high, x$259.$low))));
		x755 = _tuple$363[0];
		x756 = _tuple$363[1];
		x757 = new $Uint64(0, 0);
		x758 = new $Uint64(0, 0);
		_tuple$364 = bits.Add64(x702, x738, ((x$260 = (new p521Uint1(x756.$high, x756.$low)), new $Uint64(x$260.$high, x$260.$low))));
		x757 = _tuple$364[0];
		x758 = _tuple$364[1];
		x759 = new $Uint64(0, 0);
		x760 = new $Uint64(0, 0);
		_tuple$365 = bits.Add64(x704, x740, ((x$261 = (new p521Uint1(x758.$high, x758.$low)), new $Uint64(x$261.$high, x$261.$low))));
		x759 = _tuple$365[0];
		x760 = _tuple$365[1];
		x761 = new $Uint64(0, 0);
		x762 = new $Uint64(0, 0);
		_tuple$366 = bits.Add64(x706, x742, ((x$262 = (new p521Uint1(x760.$high, x760.$low)), new $Uint64(x$262.$high, x$262.$low))));
		x761 = _tuple$366[0];
		x762 = _tuple$366[1];
		x763 = new $Uint64(0, 0);
		x764 = new $Uint64(0, 0);
		_tuple$367 = bits.Add64(x708, x744, ((x$263 = (new p521Uint1(x762.$high, x762.$low)), new $Uint64(x$263.$high, x$263.$low))));
		x763 = _tuple$367[0];
		x764 = _tuple$367[1];
		x765 = (x$264 = ((x$265 = (new p521Uint1(x764.$high, x764.$low)), new $Uint64(x$265.$high, x$265.$low))), x$266 = ((x$267 = (new p521Uint1(x709.$high, x709.$low)), new $Uint64(x$267.$high, x$267.$low))), new $Uint64(x$264.$high + x$266.$high, x$264.$low + x$266.$low));
		x766 = new $Uint64(0, 0);
		x767 = new $Uint64(0, 0);
		_tuple$368 = bits.Mul64(x7, arg1[8]);
		x767 = _tuple$368[0];
		x766 = _tuple$368[1];
		x768 = new $Uint64(0, 0);
		x769 = new $Uint64(0, 0);
		_tuple$369 = bits.Mul64(x7, arg1[7]);
		x769 = _tuple$369[0];
		x768 = _tuple$369[1];
		x770 = new $Uint64(0, 0);
		x771 = new $Uint64(0, 0);
		_tuple$370 = bits.Mul64(x7, arg1[6]);
		x771 = _tuple$370[0];
		x770 = _tuple$370[1];
		x772 = new $Uint64(0, 0);
		x773 = new $Uint64(0, 0);
		_tuple$371 = bits.Mul64(x7, arg1[5]);
		x773 = _tuple$371[0];
		x772 = _tuple$371[1];
		x774 = new $Uint64(0, 0);
		x775 = new $Uint64(0, 0);
		_tuple$372 = bits.Mul64(x7, arg1[4]);
		x775 = _tuple$372[0];
		x774 = _tuple$372[1];
		x776 = new $Uint64(0, 0);
		x777 = new $Uint64(0, 0);
		_tuple$373 = bits.Mul64(x7, arg1[3]);
		x777 = _tuple$373[0];
		x776 = _tuple$373[1];
		x778 = new $Uint64(0, 0);
		x779 = new $Uint64(0, 0);
		_tuple$374 = bits.Mul64(x7, arg1[2]);
		x779 = _tuple$374[0];
		x778 = _tuple$374[1];
		x780 = new $Uint64(0, 0);
		x781 = new $Uint64(0, 0);
		_tuple$375 = bits.Mul64(x7, arg1[1]);
		x781 = _tuple$375[0];
		x780 = _tuple$375[1];
		x782 = new $Uint64(0, 0);
		x783 = new $Uint64(0, 0);
		_tuple$376 = bits.Mul64(x7, arg1[0]);
		x783 = _tuple$376[0];
		x782 = _tuple$376[1];
		x784 = new $Uint64(0, 0);
		x785 = new $Uint64(0, 0);
		_tuple$377 = bits.Add64(x783, x780, new $Uint64(0, 0));
		x784 = _tuple$377[0];
		x785 = _tuple$377[1];
		x786 = new $Uint64(0, 0);
		x787 = new $Uint64(0, 0);
		_tuple$378 = bits.Add64(x781, x778, ((x$268 = (new p521Uint1(x785.$high, x785.$low)), new $Uint64(x$268.$high, x$268.$low))));
		x786 = _tuple$378[0];
		x787 = _tuple$378[1];
		x788 = new $Uint64(0, 0);
		x789 = new $Uint64(0, 0);
		_tuple$379 = bits.Add64(x779, x776, ((x$269 = (new p521Uint1(x787.$high, x787.$low)), new $Uint64(x$269.$high, x$269.$low))));
		x788 = _tuple$379[0];
		x789 = _tuple$379[1];
		x790 = new $Uint64(0, 0);
		x791 = new $Uint64(0, 0);
		_tuple$380 = bits.Add64(x777, x774, ((x$270 = (new p521Uint1(x789.$high, x789.$low)), new $Uint64(x$270.$high, x$270.$low))));
		x790 = _tuple$380[0];
		x791 = _tuple$380[1];
		x792 = new $Uint64(0, 0);
		x793 = new $Uint64(0, 0);
		_tuple$381 = bits.Add64(x775, x772, ((x$271 = (new p521Uint1(x791.$high, x791.$low)), new $Uint64(x$271.$high, x$271.$low))));
		x792 = _tuple$381[0];
		x793 = _tuple$381[1];
		x794 = new $Uint64(0, 0);
		x795 = new $Uint64(0, 0);
		_tuple$382 = bits.Add64(x773, x770, ((x$272 = (new p521Uint1(x793.$high, x793.$low)), new $Uint64(x$272.$high, x$272.$low))));
		x794 = _tuple$382[0];
		x795 = _tuple$382[1];
		x796 = new $Uint64(0, 0);
		x797 = new $Uint64(0, 0);
		_tuple$383 = bits.Add64(x771, x768, ((x$273 = (new p521Uint1(x795.$high, x795.$low)), new $Uint64(x$273.$high, x$273.$low))));
		x796 = _tuple$383[0];
		x797 = _tuple$383[1];
		x798 = new $Uint64(0, 0);
		x799 = new $Uint64(0, 0);
		_tuple$384 = bits.Add64(x769, x766, ((x$274 = (new p521Uint1(x797.$high, x797.$low)), new $Uint64(x$274.$high, x$274.$low))));
		x798 = _tuple$384[0];
		x799 = _tuple$384[1];
		x800 = (x$275 = ((x$276 = (new p521Uint1(x799.$high, x799.$low)), new $Uint64(x$276.$high, x$276.$low))), new $Uint64(x$275.$high + x767.$high, x$275.$low + x767.$low));
		x801 = new $Uint64(0, 0);
		x802 = new $Uint64(0, 0);
		_tuple$385 = bits.Add64(x747, x782, new $Uint64(0, 0));
		x801 = _tuple$385[0];
		x802 = _tuple$385[1];
		x803 = new $Uint64(0, 0);
		x804 = new $Uint64(0, 0);
		_tuple$386 = bits.Add64(x749, x784, ((x$277 = (new p521Uint1(x802.$high, x802.$low)), new $Uint64(x$277.$high, x$277.$low))));
		x803 = _tuple$386[0];
		x804 = _tuple$386[1];
		x805 = new $Uint64(0, 0);
		x806 = new $Uint64(0, 0);
		_tuple$387 = bits.Add64(x751, x786, ((x$278 = (new p521Uint1(x804.$high, x804.$low)), new $Uint64(x$278.$high, x$278.$low))));
		x805 = _tuple$387[0];
		x806 = _tuple$387[1];
		x807 = new $Uint64(0, 0);
		x808 = new $Uint64(0, 0);
		_tuple$388 = bits.Add64(x753, x788, ((x$279 = (new p521Uint1(x806.$high, x806.$low)), new $Uint64(x$279.$high, x$279.$low))));
		x807 = _tuple$388[0];
		x808 = _tuple$388[1];
		x809 = new $Uint64(0, 0);
		x810 = new $Uint64(0, 0);
		_tuple$389 = bits.Add64(x755, x790, ((x$280 = (new p521Uint1(x808.$high, x808.$low)), new $Uint64(x$280.$high, x$280.$low))));
		x809 = _tuple$389[0];
		x810 = _tuple$389[1];
		x811 = new $Uint64(0, 0);
		x812 = new $Uint64(0, 0);
		_tuple$390 = bits.Add64(x757, x792, ((x$281 = (new p521Uint1(x810.$high, x810.$low)), new $Uint64(x$281.$high, x$281.$low))));
		x811 = _tuple$390[0];
		x812 = _tuple$390[1];
		x813 = new $Uint64(0, 0);
		x814 = new $Uint64(0, 0);
		_tuple$391 = bits.Add64(x759, x794, ((x$282 = (new p521Uint1(x812.$high, x812.$low)), new $Uint64(x$282.$high, x$282.$low))));
		x813 = _tuple$391[0];
		x814 = _tuple$391[1];
		x815 = new $Uint64(0, 0);
		x816 = new $Uint64(0, 0);
		_tuple$392 = bits.Add64(x761, x796, ((x$283 = (new p521Uint1(x814.$high, x814.$low)), new $Uint64(x$283.$high, x$283.$low))));
		x815 = _tuple$392[0];
		x816 = _tuple$392[1];
		x817 = new $Uint64(0, 0);
		x818 = new $Uint64(0, 0);
		_tuple$393 = bits.Add64(x763, x798, ((x$284 = (new p521Uint1(x816.$high, x816.$low)), new $Uint64(x$284.$high, x$284.$low))));
		x817 = _tuple$393[0];
		x818 = _tuple$393[1];
		x819 = new $Uint64(0, 0);
		x820 = new $Uint64(0, 0);
		_tuple$394 = bits.Add64(x765, x800, ((x$285 = (new p521Uint1(x818.$high, x818.$low)), new $Uint64(x$285.$high, x$285.$low))));
		x819 = _tuple$394[0];
		x820 = _tuple$394[1];
		x821 = new $Uint64(0, 0);
		x822 = new $Uint64(0, 0);
		_tuple$395 = bits.Mul64(x801, new $Uint64(0, 511));
		x822 = _tuple$395[0];
		x821 = _tuple$395[1];
		x823 = new $Uint64(0, 0);
		x824 = new $Uint64(0, 0);
		_tuple$396 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x824 = _tuple$396[0];
		x823 = _tuple$396[1];
		x825 = new $Uint64(0, 0);
		x826 = new $Uint64(0, 0);
		_tuple$397 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x826 = _tuple$397[0];
		x825 = _tuple$397[1];
		x827 = new $Uint64(0, 0);
		x828 = new $Uint64(0, 0);
		_tuple$398 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x828 = _tuple$398[0];
		x827 = _tuple$398[1];
		x829 = new $Uint64(0, 0);
		x830 = new $Uint64(0, 0);
		_tuple$399 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x830 = _tuple$399[0];
		x829 = _tuple$399[1];
		x831 = new $Uint64(0, 0);
		x832 = new $Uint64(0, 0);
		_tuple$400 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x832 = _tuple$400[0];
		x831 = _tuple$400[1];
		x833 = new $Uint64(0, 0);
		x834 = new $Uint64(0, 0);
		_tuple$401 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x834 = _tuple$401[0];
		x833 = _tuple$401[1];
		x835 = new $Uint64(0, 0);
		x836 = new $Uint64(0, 0);
		_tuple$402 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x836 = _tuple$402[0];
		x835 = _tuple$402[1];
		x837 = new $Uint64(0, 0);
		x838 = new $Uint64(0, 0);
		_tuple$403 = bits.Mul64(x801, new $Uint64(4294967295, 4294967295));
		x838 = _tuple$403[0];
		x837 = _tuple$403[1];
		x839 = new $Uint64(0, 0);
		x840 = new $Uint64(0, 0);
		_tuple$404 = bits.Add64(x838, x835, new $Uint64(0, 0));
		x839 = _tuple$404[0];
		x840 = _tuple$404[1];
		x841 = new $Uint64(0, 0);
		x842 = new $Uint64(0, 0);
		_tuple$405 = bits.Add64(x836, x833, ((x$286 = (new p521Uint1(x840.$high, x840.$low)), new $Uint64(x$286.$high, x$286.$low))));
		x841 = _tuple$405[0];
		x842 = _tuple$405[1];
		x843 = new $Uint64(0, 0);
		x844 = new $Uint64(0, 0);
		_tuple$406 = bits.Add64(x834, x831, ((x$287 = (new p521Uint1(x842.$high, x842.$low)), new $Uint64(x$287.$high, x$287.$low))));
		x843 = _tuple$406[0];
		x844 = _tuple$406[1];
		x845 = new $Uint64(0, 0);
		x846 = new $Uint64(0, 0);
		_tuple$407 = bits.Add64(x832, x829, ((x$288 = (new p521Uint1(x844.$high, x844.$low)), new $Uint64(x$288.$high, x$288.$low))));
		x845 = _tuple$407[0];
		x846 = _tuple$407[1];
		x847 = new $Uint64(0, 0);
		x848 = new $Uint64(0, 0);
		_tuple$408 = bits.Add64(x830, x827, ((x$289 = (new p521Uint1(x846.$high, x846.$low)), new $Uint64(x$289.$high, x$289.$low))));
		x847 = _tuple$408[0];
		x848 = _tuple$408[1];
		x849 = new $Uint64(0, 0);
		x850 = new $Uint64(0, 0);
		_tuple$409 = bits.Add64(x828, x825, ((x$290 = (new p521Uint1(x848.$high, x848.$low)), new $Uint64(x$290.$high, x$290.$low))));
		x849 = _tuple$409[0];
		x850 = _tuple$409[1];
		x851 = new $Uint64(0, 0);
		x852 = new $Uint64(0, 0);
		_tuple$410 = bits.Add64(x826, x823, ((x$291 = (new p521Uint1(x850.$high, x850.$low)), new $Uint64(x$291.$high, x$291.$low))));
		x851 = _tuple$410[0];
		x852 = _tuple$410[1];
		x853 = new $Uint64(0, 0);
		x854 = new $Uint64(0, 0);
		_tuple$411 = bits.Add64(x824, x821, ((x$292 = (new p521Uint1(x852.$high, x852.$low)), new $Uint64(x$292.$high, x$292.$low))));
		x853 = _tuple$411[0];
		x854 = _tuple$411[1];
		x855 = (x$293 = ((x$294 = (new p521Uint1(x854.$high, x854.$low)), new $Uint64(x$294.$high, x$294.$low))), new $Uint64(x$293.$high + x822.$high, x$293.$low + x822.$low));
		x857 = new $Uint64(0, 0);
		_tuple$412 = bits.Add64(x801, x837, new $Uint64(0, 0));
		x857 = _tuple$412[1];
		x858 = new $Uint64(0, 0);
		x859 = new $Uint64(0, 0);
		_tuple$413 = bits.Add64(x803, x839, ((x$295 = (new p521Uint1(x857.$high, x857.$low)), new $Uint64(x$295.$high, x$295.$low))));
		x858 = _tuple$413[0];
		x859 = _tuple$413[1];
		x860 = new $Uint64(0, 0);
		x861 = new $Uint64(0, 0);
		_tuple$414 = bits.Add64(x805, x841, ((x$296 = (new p521Uint1(x859.$high, x859.$low)), new $Uint64(x$296.$high, x$296.$low))));
		x860 = _tuple$414[0];
		x861 = _tuple$414[1];
		x862 = new $Uint64(0, 0);
		x863 = new $Uint64(0, 0);
		_tuple$415 = bits.Add64(x807, x843, ((x$297 = (new p521Uint1(x861.$high, x861.$low)), new $Uint64(x$297.$high, x$297.$low))));
		x862 = _tuple$415[0];
		x863 = _tuple$415[1];
		x864 = new $Uint64(0, 0);
		x865 = new $Uint64(0, 0);
		_tuple$416 = bits.Add64(x809, x845, ((x$298 = (new p521Uint1(x863.$high, x863.$low)), new $Uint64(x$298.$high, x$298.$low))));
		x864 = _tuple$416[0];
		x865 = _tuple$416[1];
		x866 = new $Uint64(0, 0);
		x867 = new $Uint64(0, 0);
		_tuple$417 = bits.Add64(x811, x847, ((x$299 = (new p521Uint1(x865.$high, x865.$low)), new $Uint64(x$299.$high, x$299.$low))));
		x866 = _tuple$417[0];
		x867 = _tuple$417[1];
		x868 = new $Uint64(0, 0);
		x869 = new $Uint64(0, 0);
		_tuple$418 = bits.Add64(x813, x849, ((x$300 = (new p521Uint1(x867.$high, x867.$low)), new $Uint64(x$300.$high, x$300.$low))));
		x868 = _tuple$418[0];
		x869 = _tuple$418[1];
		x870 = new $Uint64(0, 0);
		x871 = new $Uint64(0, 0);
		_tuple$419 = bits.Add64(x815, x851, ((x$301 = (new p521Uint1(x869.$high, x869.$low)), new $Uint64(x$301.$high, x$301.$low))));
		x870 = _tuple$419[0];
		x871 = _tuple$419[1];
		x872 = new $Uint64(0, 0);
		x873 = new $Uint64(0, 0);
		_tuple$420 = bits.Add64(x817, x853, ((x$302 = (new p521Uint1(x871.$high, x871.$low)), new $Uint64(x$302.$high, x$302.$low))));
		x872 = _tuple$420[0];
		x873 = _tuple$420[1];
		x874 = new $Uint64(0, 0);
		x875 = new $Uint64(0, 0);
		_tuple$421 = bits.Add64(x819, x855, ((x$303 = (new p521Uint1(x873.$high, x873.$low)), new $Uint64(x$303.$high, x$303.$low))));
		x874 = _tuple$421[0];
		x875 = _tuple$421[1];
		x876 = (x$304 = ((x$305 = (new p521Uint1(x875.$high, x875.$low)), new $Uint64(x$305.$high, x$305.$low))), x$306 = ((x$307 = (new p521Uint1(x820.$high, x820.$low)), new $Uint64(x$307.$high, x$307.$low))), new $Uint64(x$304.$high + x$306.$high, x$304.$low + x$306.$low));
		x877 = new $Uint64(0, 0);
		x878 = new $Uint64(0, 0);
		_tuple$422 = bits.Mul64(x8, arg1[8]);
		x878 = _tuple$422[0];
		x877 = _tuple$422[1];
		x879 = new $Uint64(0, 0);
		x880 = new $Uint64(0, 0);
		_tuple$423 = bits.Mul64(x8, arg1[7]);
		x880 = _tuple$423[0];
		x879 = _tuple$423[1];
		x881 = new $Uint64(0, 0);
		x882 = new $Uint64(0, 0);
		_tuple$424 = bits.Mul64(x8, arg1[6]);
		x882 = _tuple$424[0];
		x881 = _tuple$424[1];
		x883 = new $Uint64(0, 0);
		x884 = new $Uint64(0, 0);
		_tuple$425 = bits.Mul64(x8, arg1[5]);
		x884 = _tuple$425[0];
		x883 = _tuple$425[1];
		x885 = new $Uint64(0, 0);
		x886 = new $Uint64(0, 0);
		_tuple$426 = bits.Mul64(x8, arg1[4]);
		x886 = _tuple$426[0];
		x885 = _tuple$426[1];
		x887 = new $Uint64(0, 0);
		x888 = new $Uint64(0, 0);
		_tuple$427 = bits.Mul64(x8, arg1[3]);
		x888 = _tuple$427[0];
		x887 = _tuple$427[1];
		x889 = new $Uint64(0, 0);
		x890 = new $Uint64(0, 0);
		_tuple$428 = bits.Mul64(x8, arg1[2]);
		x890 = _tuple$428[0];
		x889 = _tuple$428[1];
		x891 = new $Uint64(0, 0);
		x892 = new $Uint64(0, 0);
		_tuple$429 = bits.Mul64(x8, arg1[1]);
		x892 = _tuple$429[0];
		x891 = _tuple$429[1];
		x893 = new $Uint64(0, 0);
		x894 = new $Uint64(0, 0);
		_tuple$430 = bits.Mul64(x8, arg1[0]);
		x894 = _tuple$430[0];
		x893 = _tuple$430[1];
		x895 = new $Uint64(0, 0);
		x896 = new $Uint64(0, 0);
		_tuple$431 = bits.Add64(x894, x891, new $Uint64(0, 0));
		x895 = _tuple$431[0];
		x896 = _tuple$431[1];
		x897 = new $Uint64(0, 0);
		x898 = new $Uint64(0, 0);
		_tuple$432 = bits.Add64(x892, x889, ((x$308 = (new p521Uint1(x896.$high, x896.$low)), new $Uint64(x$308.$high, x$308.$low))));
		x897 = _tuple$432[0];
		x898 = _tuple$432[1];
		x899 = new $Uint64(0, 0);
		x900 = new $Uint64(0, 0);
		_tuple$433 = bits.Add64(x890, x887, ((x$309 = (new p521Uint1(x898.$high, x898.$low)), new $Uint64(x$309.$high, x$309.$low))));
		x899 = _tuple$433[0];
		x900 = _tuple$433[1];
		x901 = new $Uint64(0, 0);
		x902 = new $Uint64(0, 0);
		_tuple$434 = bits.Add64(x888, x885, ((x$310 = (new p521Uint1(x900.$high, x900.$low)), new $Uint64(x$310.$high, x$310.$low))));
		x901 = _tuple$434[0];
		x902 = _tuple$434[1];
		x903 = new $Uint64(0, 0);
		x904 = new $Uint64(0, 0);
		_tuple$435 = bits.Add64(x886, x883, ((x$311 = (new p521Uint1(x902.$high, x902.$low)), new $Uint64(x$311.$high, x$311.$low))));
		x903 = _tuple$435[0];
		x904 = _tuple$435[1];
		x905 = new $Uint64(0, 0);
		x906 = new $Uint64(0, 0);
		_tuple$436 = bits.Add64(x884, x881, ((x$312 = (new p521Uint1(x904.$high, x904.$low)), new $Uint64(x$312.$high, x$312.$low))));
		x905 = _tuple$436[0];
		x906 = _tuple$436[1];
		x907 = new $Uint64(0, 0);
		x908 = new $Uint64(0, 0);
		_tuple$437 = bits.Add64(x882, x879, ((x$313 = (new p521Uint1(x906.$high, x906.$low)), new $Uint64(x$313.$high, x$313.$low))));
		x907 = _tuple$437[0];
		x908 = _tuple$437[1];
		x909 = new $Uint64(0, 0);
		x910 = new $Uint64(0, 0);
		_tuple$438 = bits.Add64(x880, x877, ((x$314 = (new p521Uint1(x908.$high, x908.$low)), new $Uint64(x$314.$high, x$314.$low))));
		x909 = _tuple$438[0];
		x910 = _tuple$438[1];
		x911 = (x$315 = ((x$316 = (new p521Uint1(x910.$high, x910.$low)), new $Uint64(x$316.$high, x$316.$low))), new $Uint64(x$315.$high + x878.$high, x$315.$low + x878.$low));
		x912 = new $Uint64(0, 0);
		x913 = new $Uint64(0, 0);
		_tuple$439 = bits.Add64(x858, x893, new $Uint64(0, 0));
		x912 = _tuple$439[0];
		x913 = _tuple$439[1];
		x914 = new $Uint64(0, 0);
		x915 = new $Uint64(0, 0);
		_tuple$440 = bits.Add64(x860, x895, ((x$317 = (new p521Uint1(x913.$high, x913.$low)), new $Uint64(x$317.$high, x$317.$low))));
		x914 = _tuple$440[0];
		x915 = _tuple$440[1];
		x916 = new $Uint64(0, 0);
		x917 = new $Uint64(0, 0);
		_tuple$441 = bits.Add64(x862, x897, ((x$318 = (new p521Uint1(x915.$high, x915.$low)), new $Uint64(x$318.$high, x$318.$low))));
		x916 = _tuple$441[0];
		x917 = _tuple$441[1];
		x918 = new $Uint64(0, 0);
		x919 = new $Uint64(0, 0);
		_tuple$442 = bits.Add64(x864, x899, ((x$319 = (new p521Uint1(x917.$high, x917.$low)), new $Uint64(x$319.$high, x$319.$low))));
		x918 = _tuple$442[0];
		x919 = _tuple$442[1];
		x920 = new $Uint64(0, 0);
		x921 = new $Uint64(0, 0);
		_tuple$443 = bits.Add64(x866, x901, ((x$320 = (new p521Uint1(x919.$high, x919.$low)), new $Uint64(x$320.$high, x$320.$low))));
		x920 = _tuple$443[0];
		x921 = _tuple$443[1];
		x922 = new $Uint64(0, 0);
		x923 = new $Uint64(0, 0);
		_tuple$444 = bits.Add64(x868, x903, ((x$321 = (new p521Uint1(x921.$high, x921.$low)), new $Uint64(x$321.$high, x$321.$low))));
		x922 = _tuple$444[0];
		x923 = _tuple$444[1];
		x924 = new $Uint64(0, 0);
		x925 = new $Uint64(0, 0);
		_tuple$445 = bits.Add64(x870, x905, ((x$322 = (new p521Uint1(x923.$high, x923.$low)), new $Uint64(x$322.$high, x$322.$low))));
		x924 = _tuple$445[0];
		x925 = _tuple$445[1];
		x926 = new $Uint64(0, 0);
		x927 = new $Uint64(0, 0);
		_tuple$446 = bits.Add64(x872, x907, ((x$323 = (new p521Uint1(x925.$high, x925.$low)), new $Uint64(x$323.$high, x$323.$low))));
		x926 = _tuple$446[0];
		x927 = _tuple$446[1];
		x928 = new $Uint64(0, 0);
		x929 = new $Uint64(0, 0);
		_tuple$447 = bits.Add64(x874, x909, ((x$324 = (new p521Uint1(x927.$high, x927.$low)), new $Uint64(x$324.$high, x$324.$low))));
		x928 = _tuple$447[0];
		x929 = _tuple$447[1];
		x930 = new $Uint64(0, 0);
		x931 = new $Uint64(0, 0);
		_tuple$448 = bits.Add64(x876, x911, ((x$325 = (new p521Uint1(x929.$high, x929.$low)), new $Uint64(x$325.$high, x$325.$low))));
		x930 = _tuple$448[0];
		x931 = _tuple$448[1];
		x932 = new $Uint64(0, 0);
		x933 = new $Uint64(0, 0);
		_tuple$449 = bits.Mul64(x912, new $Uint64(0, 511));
		x933 = _tuple$449[0];
		x932 = _tuple$449[1];
		x934 = new $Uint64(0, 0);
		x935 = new $Uint64(0, 0);
		_tuple$450 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x935 = _tuple$450[0];
		x934 = _tuple$450[1];
		x936 = new $Uint64(0, 0);
		x937 = new $Uint64(0, 0);
		_tuple$451 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x937 = _tuple$451[0];
		x936 = _tuple$451[1];
		x938 = new $Uint64(0, 0);
		x939 = new $Uint64(0, 0);
		_tuple$452 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x939 = _tuple$452[0];
		x938 = _tuple$452[1];
		x940 = new $Uint64(0, 0);
		x941 = new $Uint64(0, 0);
		_tuple$453 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x941 = _tuple$453[0];
		x940 = _tuple$453[1];
		x942 = new $Uint64(0, 0);
		x943 = new $Uint64(0, 0);
		_tuple$454 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x943 = _tuple$454[0];
		x942 = _tuple$454[1];
		x944 = new $Uint64(0, 0);
		x945 = new $Uint64(0, 0);
		_tuple$455 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x945 = _tuple$455[0];
		x944 = _tuple$455[1];
		x946 = new $Uint64(0, 0);
		x947 = new $Uint64(0, 0);
		_tuple$456 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x947 = _tuple$456[0];
		x946 = _tuple$456[1];
		x948 = new $Uint64(0, 0);
		x949 = new $Uint64(0, 0);
		_tuple$457 = bits.Mul64(x912, new $Uint64(4294967295, 4294967295));
		x949 = _tuple$457[0];
		x948 = _tuple$457[1];
		x950 = new $Uint64(0, 0);
		x951 = new $Uint64(0, 0);
		_tuple$458 = bits.Add64(x949, x946, new $Uint64(0, 0));
		x950 = _tuple$458[0];
		x951 = _tuple$458[1];
		x952 = new $Uint64(0, 0);
		x953 = new $Uint64(0, 0);
		_tuple$459 = bits.Add64(x947, x944, ((x$326 = (new p521Uint1(x951.$high, x951.$low)), new $Uint64(x$326.$high, x$326.$low))));
		x952 = _tuple$459[0];
		x953 = _tuple$459[1];
		x954 = new $Uint64(0, 0);
		x955 = new $Uint64(0, 0);
		_tuple$460 = bits.Add64(x945, x942, ((x$327 = (new p521Uint1(x953.$high, x953.$low)), new $Uint64(x$327.$high, x$327.$low))));
		x954 = _tuple$460[0];
		x955 = _tuple$460[1];
		x956 = new $Uint64(0, 0);
		x957 = new $Uint64(0, 0);
		_tuple$461 = bits.Add64(x943, x940, ((x$328 = (new p521Uint1(x955.$high, x955.$low)), new $Uint64(x$328.$high, x$328.$low))));
		x956 = _tuple$461[0];
		x957 = _tuple$461[1];
		x958 = new $Uint64(0, 0);
		x959 = new $Uint64(0, 0);
		_tuple$462 = bits.Add64(x941, x938, ((x$329 = (new p521Uint1(x957.$high, x957.$low)), new $Uint64(x$329.$high, x$329.$low))));
		x958 = _tuple$462[0];
		x959 = _tuple$462[1];
		x960 = new $Uint64(0, 0);
		x961 = new $Uint64(0, 0);
		_tuple$463 = bits.Add64(x939, x936, ((x$330 = (new p521Uint1(x959.$high, x959.$low)), new $Uint64(x$330.$high, x$330.$low))));
		x960 = _tuple$463[0];
		x961 = _tuple$463[1];
		x962 = new $Uint64(0, 0);
		x963 = new $Uint64(0, 0);
		_tuple$464 = bits.Add64(x937, x934, ((x$331 = (new p521Uint1(x961.$high, x961.$low)), new $Uint64(x$331.$high, x$331.$low))));
		x962 = _tuple$464[0];
		x963 = _tuple$464[1];
		x964 = new $Uint64(0, 0);
		x965 = new $Uint64(0, 0);
		_tuple$465 = bits.Add64(x935, x932, ((x$332 = (new p521Uint1(x963.$high, x963.$low)), new $Uint64(x$332.$high, x$332.$low))));
		x964 = _tuple$465[0];
		x965 = _tuple$465[1];
		x966 = (x$333 = ((x$334 = (new p521Uint1(x965.$high, x965.$low)), new $Uint64(x$334.$high, x$334.$low))), new $Uint64(x$333.$high + x933.$high, x$333.$low + x933.$low));
		x968 = new $Uint64(0, 0);
		_tuple$466 = bits.Add64(x912, x948, new $Uint64(0, 0));
		x968 = _tuple$466[1];
		x969 = new $Uint64(0, 0);
		x970 = new $Uint64(0, 0);
		_tuple$467 = bits.Add64(x914, x950, ((x$335 = (new p521Uint1(x968.$high, x968.$low)), new $Uint64(x$335.$high, x$335.$low))));
		x969 = _tuple$467[0];
		x970 = _tuple$467[1];
		x971 = new $Uint64(0, 0);
		x972 = new $Uint64(0, 0);
		_tuple$468 = bits.Add64(x916, x952, ((x$336 = (new p521Uint1(x970.$high, x970.$low)), new $Uint64(x$336.$high, x$336.$low))));
		x971 = _tuple$468[0];
		x972 = _tuple$468[1];
		x973 = new $Uint64(0, 0);
		x974 = new $Uint64(0, 0);
		_tuple$469 = bits.Add64(x918, x954, ((x$337 = (new p521Uint1(x972.$high, x972.$low)), new $Uint64(x$337.$high, x$337.$low))));
		x973 = _tuple$469[0];
		x974 = _tuple$469[1];
		x975 = new $Uint64(0, 0);
		x976 = new $Uint64(0, 0);
		_tuple$470 = bits.Add64(x920, x956, ((x$338 = (new p521Uint1(x974.$high, x974.$low)), new $Uint64(x$338.$high, x$338.$low))));
		x975 = _tuple$470[0];
		x976 = _tuple$470[1];
		x977 = new $Uint64(0, 0);
		x978 = new $Uint64(0, 0);
		_tuple$471 = bits.Add64(x922, x958, ((x$339 = (new p521Uint1(x976.$high, x976.$low)), new $Uint64(x$339.$high, x$339.$low))));
		x977 = _tuple$471[0];
		x978 = _tuple$471[1];
		x979 = new $Uint64(0, 0);
		x980 = new $Uint64(0, 0);
		_tuple$472 = bits.Add64(x924, x960, ((x$340 = (new p521Uint1(x978.$high, x978.$low)), new $Uint64(x$340.$high, x$340.$low))));
		x979 = _tuple$472[0];
		x980 = _tuple$472[1];
		x981 = new $Uint64(0, 0);
		x982 = new $Uint64(0, 0);
		_tuple$473 = bits.Add64(x926, x962, ((x$341 = (new p521Uint1(x980.$high, x980.$low)), new $Uint64(x$341.$high, x$341.$low))));
		x981 = _tuple$473[0];
		x982 = _tuple$473[1];
		x983 = new $Uint64(0, 0);
		x984 = new $Uint64(0, 0);
		_tuple$474 = bits.Add64(x928, x964, ((x$342 = (new p521Uint1(x982.$high, x982.$low)), new $Uint64(x$342.$high, x$342.$low))));
		x983 = _tuple$474[0];
		x984 = _tuple$474[1];
		x985 = new $Uint64(0, 0);
		x986 = new $Uint64(0, 0);
		_tuple$475 = bits.Add64(x930, x966, ((x$343 = (new p521Uint1(x984.$high, x984.$low)), new $Uint64(x$343.$high, x$343.$low))));
		x985 = _tuple$475[0];
		x986 = _tuple$475[1];
		x987 = (x$344 = ((x$345 = (new p521Uint1(x986.$high, x986.$low)), new $Uint64(x$345.$high, x$345.$low))), x$346 = ((x$347 = (new p521Uint1(x931.$high, x931.$low)), new $Uint64(x$347.$high, x$347.$low))), new $Uint64(x$344.$high + x$346.$high, x$344.$low + x$346.$low));
		x988 = new $Uint64(0, 0);
		x989 = new $Uint64(0, 0);
		_tuple$476 = bits.Sub64(x969, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x988 = _tuple$476[0];
		x989 = _tuple$476[1];
		x990 = new $Uint64(0, 0);
		x991 = new $Uint64(0, 0);
		_tuple$477 = bits.Sub64(x971, new $Uint64(4294967295, 4294967295), ((x$348 = (new p521Uint1(x989.$high, x989.$low)), new $Uint64(x$348.$high, x$348.$low))));
		x990 = _tuple$477[0];
		x991 = _tuple$477[1];
		x992 = new $Uint64(0, 0);
		x993 = new $Uint64(0, 0);
		_tuple$478 = bits.Sub64(x973, new $Uint64(4294967295, 4294967295), ((x$349 = (new p521Uint1(x991.$high, x991.$low)), new $Uint64(x$349.$high, x$349.$low))));
		x992 = _tuple$478[0];
		x993 = _tuple$478[1];
		x994 = new $Uint64(0, 0);
		x995 = new $Uint64(0, 0);
		_tuple$479 = bits.Sub64(x975, new $Uint64(4294967295, 4294967295), ((x$350 = (new p521Uint1(x993.$high, x993.$low)), new $Uint64(x$350.$high, x$350.$low))));
		x994 = _tuple$479[0];
		x995 = _tuple$479[1];
		x996 = new $Uint64(0, 0);
		x997 = new $Uint64(0, 0);
		_tuple$480 = bits.Sub64(x977, new $Uint64(4294967295, 4294967295), ((x$351 = (new p521Uint1(x995.$high, x995.$low)), new $Uint64(x$351.$high, x$351.$low))));
		x996 = _tuple$480[0];
		x997 = _tuple$480[1];
		x998 = new $Uint64(0, 0);
		x999 = new $Uint64(0, 0);
		_tuple$481 = bits.Sub64(x979, new $Uint64(4294967295, 4294967295), ((x$352 = (new p521Uint1(x997.$high, x997.$low)), new $Uint64(x$352.$high, x$352.$low))));
		x998 = _tuple$481[0];
		x999 = _tuple$481[1];
		x1000 = new $Uint64(0, 0);
		x1001 = new $Uint64(0, 0);
		_tuple$482 = bits.Sub64(x981, new $Uint64(4294967295, 4294967295), ((x$353 = (new p521Uint1(x999.$high, x999.$low)), new $Uint64(x$353.$high, x$353.$low))));
		x1000 = _tuple$482[0];
		x1001 = _tuple$482[1];
		x1002 = new $Uint64(0, 0);
		x1003 = new $Uint64(0, 0);
		_tuple$483 = bits.Sub64(x983, new $Uint64(4294967295, 4294967295), ((x$354 = (new p521Uint1(x1001.$high, x1001.$low)), new $Uint64(x$354.$high, x$354.$low))));
		x1002 = _tuple$483[0];
		x1003 = _tuple$483[1];
		x1004 = new $Uint64(0, 0);
		x1005 = new $Uint64(0, 0);
		_tuple$484 = bits.Sub64(x985, new $Uint64(0, 511), ((x$355 = (new p521Uint1(x1003.$high, x1003.$low)), new $Uint64(x$355.$high, x$355.$low))));
		x1004 = _tuple$484[0];
		x1005 = _tuple$484[1];
		x1007 = new $Uint64(0, 0);
		_tuple$485 = bits.Sub64(x987, new $Uint64(0, 0), ((x$356 = (new p521Uint1(x1005.$high, x1005.$low)), new $Uint64(x$356.$high, x$356.$low))));
		x1007 = _tuple$485[1];
		x1008 = new $Uint64(0, 0);
		p521CmovznzU64((x1008$24ptr || (x1008$24ptr = new ptrType(function() { return x1008; }, function($v) { x1008 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x988, x969);
		x1009 = new $Uint64(0, 0);
		p521CmovznzU64((x1009$24ptr || (x1009$24ptr = new ptrType(function() { return x1009; }, function($v) { x1009 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x990, x971);
		x1010 = new $Uint64(0, 0);
		p521CmovznzU64((x1010$24ptr || (x1010$24ptr = new ptrType(function() { return x1010; }, function($v) { x1010 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x992, x973);
		x1011 = new $Uint64(0, 0);
		p521CmovznzU64((x1011$24ptr || (x1011$24ptr = new ptrType(function() { return x1011; }, function($v) { x1011 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x994, x975);
		x1012 = new $Uint64(0, 0);
		p521CmovznzU64((x1012$24ptr || (x1012$24ptr = new ptrType(function() { return x1012; }, function($v) { x1012 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x996, x977);
		x1013 = new $Uint64(0, 0);
		p521CmovznzU64((x1013$24ptr || (x1013$24ptr = new ptrType(function() { return x1013; }, function($v) { x1013 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x998, x979);
		x1014 = new $Uint64(0, 0);
		p521CmovznzU64((x1014$24ptr || (x1014$24ptr = new ptrType(function() { return x1014; }, function($v) { x1014 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1000, x981);
		x1015 = new $Uint64(0, 0);
		p521CmovznzU64((x1015$24ptr || (x1015$24ptr = new ptrType(function() { return x1015; }, function($v) { x1015 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1002, x983);
		x1016 = new $Uint64(0, 0);
		p521CmovznzU64((x1016$24ptr || (x1016$24ptr = new ptrType(function() { return x1016; }, function($v) { x1016 = $v; }))), (new p521Uint1(x1007.$high, x1007.$low)), x1004, x985);
		out1.nilCheck, out1[0] = x1008;
		out1.nilCheck, out1[1] = x1009;
		out1.nilCheck, out1[2] = x1010;
		out1.nilCheck, out1[3] = x1011;
		out1.nilCheck, out1[4] = x1012;
		out1.nilCheck, out1[5] = x1013;
		out1.nilCheck, out1[6] = x1014;
		out1.nilCheck, out1[7] = x1015;
		out1.nilCheck, out1[8] = x1016;
	};
	p521Add = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, arg2, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x38, x39, x39$24ptr, x4, x40, x40$24ptr, x41, x41$24ptr, x42, x42$24ptr, x43, x43$24ptr, x44, x44$24ptr, x45, x45$24ptr, x46, x46$24ptr, x47, x47$24ptr, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Add64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Add64(arg1[1], arg2[1], ((x = (new p521Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Add64(arg1[2], arg2[2], ((x$1 = (new p521Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Add64(arg1[3], arg2[3], ((x$2 = (new p521Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(arg1[4], arg2[4], ((x$3 = (new p521Uint1(x8.$high, x8.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(arg1[5], arg2[5], ((x$4 = (new p521Uint1(x10.$high, x10.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(arg1[6], arg2[6], ((x$5 = (new p521Uint1(x12.$high, x12.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x13 = _tuple$6[0];
		x14 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(arg1[7], arg2[7], ((x$6 = (new p521Uint1(x14.$high, x14.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x15 = _tuple$7[0];
		x16 = _tuple$7[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(arg1[8], arg2[8], ((x$7 = (new p521Uint1(x16.$high, x16.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x17 = _tuple$8[0];
		x18 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$9 = bits.Sub64(x1, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x19 = _tuple$9[0];
		x20 = _tuple$9[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$10 = bits.Sub64(x3, new $Uint64(4294967295, 4294967295), ((x$8 = (new p521Uint1(x20.$high, x20.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x21 = _tuple$10[0];
		x22 = _tuple$10[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$11 = bits.Sub64(x5, new $Uint64(4294967295, 4294967295), ((x$9 = (new p521Uint1(x22.$high, x22.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x23 = _tuple$11[0];
		x24 = _tuple$11[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$12 = bits.Sub64(x7, new $Uint64(4294967295, 4294967295), ((x$10 = (new p521Uint1(x24.$high, x24.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x25 = _tuple$12[0];
		x26 = _tuple$12[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$13 = bits.Sub64(x9, new $Uint64(4294967295, 4294967295), ((x$11 = (new p521Uint1(x26.$high, x26.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x27 = _tuple$13[0];
		x28 = _tuple$13[1];
		x29 = new $Uint64(0, 0);
		x30 = new $Uint64(0, 0);
		_tuple$14 = bits.Sub64(x11, new $Uint64(4294967295, 4294967295), ((x$12 = (new p521Uint1(x28.$high, x28.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x29 = _tuple$14[0];
		x30 = _tuple$14[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$15 = bits.Sub64(x13, new $Uint64(4294967295, 4294967295), ((x$13 = (new p521Uint1(x30.$high, x30.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x31 = _tuple$15[0];
		x32 = _tuple$15[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$16 = bits.Sub64(x15, new $Uint64(4294967295, 4294967295), ((x$14 = (new p521Uint1(x32.$high, x32.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x33 = _tuple$16[0];
		x34 = _tuple$16[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$17 = bits.Sub64(x17, new $Uint64(0, 511), ((x$15 = (new p521Uint1(x34.$high, x34.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x35 = _tuple$17[0];
		x36 = _tuple$17[1];
		x38 = new $Uint64(0, 0);
		_tuple$18 = bits.Sub64(((x$16 = (new p521Uint1(x18.$high, x18.$low)), new $Uint64(x$16.$high, x$16.$low))), new $Uint64(0, 0), ((x$17 = (new p521Uint1(x36.$high, x36.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x38 = _tuple$18[1];
		x39 = new $Uint64(0, 0);
		p521CmovznzU64((x39$24ptr || (x39$24ptr = new ptrType(function() { return x39; }, function($v) { x39 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x19, x1);
		x40 = new $Uint64(0, 0);
		p521CmovznzU64((x40$24ptr || (x40$24ptr = new ptrType(function() { return x40; }, function($v) { x40 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x21, x3);
		x41 = new $Uint64(0, 0);
		p521CmovznzU64((x41$24ptr || (x41$24ptr = new ptrType(function() { return x41; }, function($v) { x41 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x23, x5);
		x42 = new $Uint64(0, 0);
		p521CmovznzU64((x42$24ptr || (x42$24ptr = new ptrType(function() { return x42; }, function($v) { x42 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x25, x7);
		x43 = new $Uint64(0, 0);
		p521CmovznzU64((x43$24ptr || (x43$24ptr = new ptrType(function() { return x43; }, function($v) { x43 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x27, x9);
		x44 = new $Uint64(0, 0);
		p521CmovznzU64((x44$24ptr || (x44$24ptr = new ptrType(function() { return x44; }, function($v) { x44 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x29, x11);
		x45 = new $Uint64(0, 0);
		p521CmovznzU64((x45$24ptr || (x45$24ptr = new ptrType(function() { return x45; }, function($v) { x45 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x31, x13);
		x46 = new $Uint64(0, 0);
		p521CmovznzU64((x46$24ptr || (x46$24ptr = new ptrType(function() { return x46; }, function($v) { x46 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x33, x15);
		x47 = new $Uint64(0, 0);
		p521CmovznzU64((x47$24ptr || (x47$24ptr = new ptrType(function() { return x47; }, function($v) { x47 = $v; }))), (new p521Uint1(x38.$high, x38.$low)), x35, x17);
		out1.nilCheck, out1[0] = x39;
		out1.nilCheck, out1[1] = x40;
		out1.nilCheck, out1[2] = x41;
		out1.nilCheck, out1[3] = x42;
		out1.nilCheck, out1[4] = x43;
		out1.nilCheck, out1[5] = x44;
		out1.nilCheck, out1[6] = x45;
		out1.nilCheck, out1[7] = x46;
		out1.nilCheck, out1[8] = x47;
	};
	p521Sub = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, arg2, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x19$24ptr, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x4, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Sub64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Sub64(arg1[1], arg2[1], ((x = (new p521Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Sub64(arg1[2], arg2[2], ((x$1 = (new p521Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Sub64(arg1[3], arg2[3], ((x$2 = (new p521Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Sub64(arg1[4], arg2[4], ((x$3 = (new p521Uint1(x8.$high, x8.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Sub64(arg1[5], arg2[5], ((x$4 = (new p521Uint1(x10.$high, x10.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Sub64(arg1[6], arg2[6], ((x$5 = (new p521Uint1(x12.$high, x12.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x13 = _tuple$6[0];
		x14 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Sub64(arg1[7], arg2[7], ((x$6 = (new p521Uint1(x14.$high, x14.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x15 = _tuple$7[0];
		x16 = _tuple$7[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Sub64(arg1[8], arg2[8], ((x$7 = (new p521Uint1(x16.$high, x16.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x17 = _tuple$8[0];
		x18 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		p521CmovznzU64((x19$24ptr || (x19$24ptr = new ptrType(function() { return x19; }, function($v) { x19 = $v; }))), (new p521Uint1(x18.$high, x18.$low)), new $Uint64(0, 0), new $Uint64(4294967295, 4294967295));
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x1, x19, new $Uint64(0, 0));
		x20 = _tuple$9[0];
		x21 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x3, x19, ((x$8 = (new p521Uint1(x21.$high, x21.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x5, x19, ((x$9 = (new p521Uint1(x23.$high, x23.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x24 = _tuple$11[0];
		x25 = _tuple$11[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x7, x19, ((x$10 = (new p521Uint1(x25.$high, x25.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x26 = _tuple$12[0];
		x27 = _tuple$12[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x9, x19, ((x$11 = (new p521Uint1(x27.$high, x27.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x28 = _tuple$13[0];
		x29 = _tuple$13[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x11, x19, ((x$12 = (new p521Uint1(x29.$high, x29.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x30 = _tuple$14[0];
		x31 = _tuple$14[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x13, x19, ((x$13 = (new p521Uint1(x31.$high, x31.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x32 = _tuple$15[0];
		x33 = _tuple$15[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x15, x19, ((x$14 = (new p521Uint1(x33.$high, x33.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x34 = _tuple$16[0];
		x35 = _tuple$16[1];
		x36 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x17, new $Uint64(x19.$high & 0, (x19.$low & 511) >>> 0), ((x$15 = (new p521Uint1(x35.$high, x35.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x36 = _tuple$17[0];
		out1.nilCheck, out1[0] = x20;
		out1.nilCheck, out1[1] = x22;
		out1.nilCheck, out1[2] = x24;
		out1.nilCheck, out1[3] = x26;
		out1.nilCheck, out1[4] = x28;
		out1.nilCheck, out1[5] = x30;
		out1.nilCheck, out1[6] = x32;
		out1.nilCheck, out1[7] = x34;
		out1.nilCheck, out1[8] = x36;
	};
	p521SetOne = function(out1) {
		var out1;
		out1.nilCheck, out1[0] = new $Uint64(8388608, 0);
		out1.nilCheck, out1[1] = new $Uint64(0, 0);
		out1.nilCheck, out1[2] = new $Uint64(0, 0);
		out1.nilCheck, out1[3] = new $Uint64(0, 0);
		out1.nilCheck, out1[4] = new $Uint64(0, 0);
		out1.nilCheck, out1[5] = new $Uint64(0, 0);
		out1.nilCheck, out1[6] = new $Uint64(0, 0);
		out1.nilCheck, out1[7] = new $Uint64(0, 0);
		out1.nilCheck, out1[8] = new $Uint64(0, 0);
	};
	p521FromMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$222, _tuple$223, _tuple$224, _tuple$225, _tuple$226, _tuple$227, _tuple$228, _tuple$229, _tuple$23, _tuple$230, _tuple$231, _tuple$232, _tuple$233, _tuple$234, _tuple$235, _tuple$236, _tuple$237, _tuple$238, _tuple$239, _tuple$24, _tuple$240, _tuple$241, _tuple$242, _tuple$243, _tuple$244, _tuple$245, _tuple$246, _tuple$247, _tuple$248, _tuple$249, _tuple$25, _tuple$250, _tuple$251, _tuple$252, _tuple$253, _tuple$254, _tuple$255, _tuple$256, _tuple$257, _tuple$258, _tuple$259, _tuple$26, _tuple$260, _tuple$261, _tuple$262, _tuple$263, _tuple$264, _tuple$265, _tuple$266, _tuple$267, _tuple$268, _tuple$269, _tuple$27, _tuple$270, _tuple$271, _tuple$272, _tuple$273, _tuple$274, _tuple$275, _tuple$276, _tuple$277, _tuple$278, _tuple$279, _tuple$28, _tuple$280, _tuple$281, _tuple$282, _tuple$283, _tuple$284, _tuple$285, _tuple$286, _tuple$287, _tuple$288, _tuple$289, _tuple$29, _tuple$290, _tuple$291, _tuple$292, _tuple$293, _tuple$294, _tuple$295, _tuple$296, _tuple$297, _tuple$298, _tuple$299, _tuple$3, _tuple$30, _tuple$300, _tuple$301, _tuple$302, _tuple$303, _tuple$304, _tuple$305, _tuple$306, _tuple$307, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x103, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x301, x302, x303, x304, x305, x306, x307, x309, x31, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x377, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x41, x410, x411, x412, x413, x414, x415, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x439, x44, x440, x441, x442, x443, x445, x446, x447, x448, x449, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x466, x467, x468, x469, x47, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x48, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x49, x490, x491, x492, x493, x494, x495, x496, x497, x498, x499, x5, x50, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x51, x510, x511, x513, x514, x515, x516, x517, x518, x519, x52, x520, x521, x522, x523, x524, x525, x526, x527, x528, x529, x53, x530, x531, x532, x533, x534, x535, x536, x537, x538, x539, x54, x540, x541, x542, x543, x544, x545, x546, x547, x548, x549, x55, x550, x551, x552, x553, x554, x555, x556, x557, x558, x559, x56, x560, x561, x562, x563, x564, x565, x566, x567, x568, x569, x57, x570, x571, x572, x573, x574, x575, x576, x577, x578, x579, x58, x581, x582, x583, x584, x585, x586, x587, x588, x589, x59, x590, x591, x592, x593, x594, x595, x596, x597, x598, x599, x6, x60, x600, x601, x602, x603, x604, x605, x606, x607, x608, x609, x61, x610, x611, x612, x613, x614, x615, x616, x618, x619, x619$24ptr, x62, x620, x620$24ptr, x621, x621$24ptr, x622, x622$24ptr, x623, x623$24ptr, x624, x624$24ptr, x625, x625$24ptr, x626, x626$24ptr, x627, x627$24ptr, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[0];
		x2 = new $Uint64(0, 0);
		x3 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x1, new $Uint64(0, 511));
		x3 = _tuple[0];
		x2 = _tuple[1];
		x4 = new $Uint64(0, 0);
		x5 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x5 = _tuple$1[0];
		x4 = _tuple$1[1];
		x6 = new $Uint64(0, 0);
		x7 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x7 = _tuple$2[0];
		x6 = _tuple$2[1];
		x8 = new $Uint64(0, 0);
		x9 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x9 = _tuple$3[0];
		x8 = _tuple$3[1];
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x11 = _tuple$4[0];
		x10 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x13 = _tuple$5[0];
		x12 = _tuple$5[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x15 = _tuple$6[0];
		x14 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x17 = _tuple$7[0];
		x16 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x19 = _tuple$8[0];
		x18 = _tuple$8[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x19, x16, new $Uint64(0, 0));
		x20 = _tuple$9[0];
		x21 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x17, x14, ((x = (new p521Uint1(x21.$high, x21.$low)), new $Uint64(x.$high, x.$low))));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x15, x12, ((x$1 = (new p521Uint1(x23.$high, x23.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x24 = _tuple$11[0];
		x25 = _tuple$11[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x13, x10, ((x$2 = (new p521Uint1(x25.$high, x25.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x26 = _tuple$12[0];
		x27 = _tuple$12[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x11, x8, ((x$3 = (new p521Uint1(x27.$high, x27.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x28 = _tuple$13[0];
		x29 = _tuple$13[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x9, x6, ((x$4 = (new p521Uint1(x29.$high, x29.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x30 = _tuple$14[0];
		x31 = _tuple$14[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x7, x4, ((x$5 = (new p521Uint1(x31.$high, x31.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x32 = _tuple$15[0];
		x33 = _tuple$15[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x5, x2, ((x$6 = (new p521Uint1(x33.$high, x33.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x34 = _tuple$16[0];
		x35 = _tuple$16[1];
		x37 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x1, x18, new $Uint64(0, 0));
		x37 = _tuple$17[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(new $Uint64(0, 0), x20, ((x$7 = (new p521Uint1(x37.$high, x37.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x38 = _tuple$18[0];
		x39 = _tuple$18[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(new $Uint64(0, 0), x22, ((x$8 = (new p521Uint1(x39.$high, x39.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x40 = _tuple$19[0];
		x41 = _tuple$19[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(new $Uint64(0, 0), x24, ((x$9 = (new p521Uint1(x41.$high, x41.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x42 = _tuple$20[0];
		x43 = _tuple$20[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(new $Uint64(0, 0), x26, ((x$10 = (new p521Uint1(x43.$high, x43.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x44 = _tuple$21[0];
		x45 = _tuple$21[1];
		x46 = new $Uint64(0, 0);
		x47 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(new $Uint64(0, 0), x28, ((x$11 = (new p521Uint1(x45.$high, x45.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x46 = _tuple$22[0];
		x47 = _tuple$22[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(new $Uint64(0, 0), x30, ((x$12 = (new p521Uint1(x47.$high, x47.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x48 = _tuple$23[0];
		x49 = _tuple$23[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(new $Uint64(0, 0), x32, ((x$13 = (new p521Uint1(x49.$high, x49.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x50 = _tuple$24[0];
		x51 = _tuple$24[1];
		x52 = new $Uint64(0, 0);
		x53 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(new $Uint64(0, 0), x34, ((x$14 = (new p521Uint1(x51.$high, x51.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x52 = _tuple$25[0];
		x53 = _tuple$25[1];
		x54 = new $Uint64(0, 0);
		x55 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x38, arg1[1], new $Uint64(0, 0));
		x54 = _tuple$26[0];
		x55 = _tuple$26[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x40, new $Uint64(0, 0), ((x$15 = (new p521Uint1(x55.$high, x55.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x56 = _tuple$27[0];
		x57 = _tuple$27[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x42, new $Uint64(0, 0), ((x$16 = (new p521Uint1(x57.$high, x57.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x58 = _tuple$28[0];
		x59 = _tuple$28[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(x44, new $Uint64(0, 0), ((x$17 = (new p521Uint1(x59.$high, x59.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x60 = _tuple$29[0];
		x61 = _tuple$29[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x46, new $Uint64(0, 0), ((x$18 = (new p521Uint1(x61.$high, x61.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x62 = _tuple$30[0];
		x63 = _tuple$30[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x48, new $Uint64(0, 0), ((x$19 = (new p521Uint1(x63.$high, x63.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x64 = _tuple$31[0];
		x65 = _tuple$31[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x50, new $Uint64(0, 0), ((x$20 = (new p521Uint1(x65.$high, x65.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x66 = _tuple$32[0];
		x67 = _tuple$32[1];
		x68 = new $Uint64(0, 0);
		x69 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x52, new $Uint64(0, 0), ((x$21 = (new p521Uint1(x67.$high, x67.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x68 = _tuple$33[0];
		x69 = _tuple$33[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$34 = bits.Mul64(x54, new $Uint64(0, 511));
		x71 = _tuple$34[0];
		x70 = _tuple$34[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$35 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x73 = _tuple$35[0];
		x72 = _tuple$35[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$36 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x75 = _tuple$36[0];
		x74 = _tuple$36[1];
		x76 = new $Uint64(0, 0);
		x77 = new $Uint64(0, 0);
		_tuple$37 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x77 = _tuple$37[0];
		x76 = _tuple$37[1];
		x78 = new $Uint64(0, 0);
		x79 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x79 = _tuple$38[0];
		x78 = _tuple$38[1];
		x80 = new $Uint64(0, 0);
		x81 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x81 = _tuple$39[0];
		x80 = _tuple$39[1];
		x82 = new $Uint64(0, 0);
		x83 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x83 = _tuple$40[0];
		x82 = _tuple$40[1];
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x85 = _tuple$41[0];
		x84 = _tuple$41[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x87 = _tuple$42[0];
		x86 = _tuple$42[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x87, x84, new $Uint64(0, 0));
		x88 = _tuple$43[0];
		x89 = _tuple$43[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x85, x82, ((x$22 = (new p521Uint1(x89.$high, x89.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x90 = _tuple$44[0];
		x91 = _tuple$44[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x83, x80, ((x$23 = (new p521Uint1(x91.$high, x91.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x92 = _tuple$45[0];
		x93 = _tuple$45[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x81, x78, ((x$24 = (new p521Uint1(x93.$high, x93.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x94 = _tuple$46[0];
		x95 = _tuple$46[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x79, x76, ((x$25 = (new p521Uint1(x95.$high, x95.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x96 = _tuple$47[0];
		x97 = _tuple$47[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x77, x74, ((x$26 = (new p521Uint1(x97.$high, x97.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x98 = _tuple$48[0];
		x99 = _tuple$48[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x75, x72, ((x$27 = (new p521Uint1(x99.$high, x99.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x100 = _tuple$49[0];
		x101 = _tuple$49[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x73, x70, ((x$28 = (new p521Uint1(x101.$high, x101.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x102 = _tuple$50[0];
		x103 = _tuple$50[1];
		x105 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x54, x86, new $Uint64(0, 0));
		x105 = _tuple$51[1];
		x106 = new $Uint64(0, 0);
		x107 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x56, x88, ((x$29 = (new p521Uint1(x105.$high, x105.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x106 = _tuple$52[0];
		x107 = _tuple$52[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x58, x90, ((x$30 = (new p521Uint1(x107.$high, x107.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x108 = _tuple$53[0];
		x109 = _tuple$53[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x60, x92, ((x$31 = (new p521Uint1(x109.$high, x109.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x110 = _tuple$54[0];
		x111 = _tuple$54[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x62, x94, ((x$32 = (new p521Uint1(x111.$high, x111.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x112 = _tuple$55[0];
		x113 = _tuple$55[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x64, x96, ((x$33 = (new p521Uint1(x113.$high, x113.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x114 = _tuple$56[0];
		x115 = _tuple$56[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x66, x98, ((x$34 = (new p521Uint1(x115.$high, x115.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x116 = _tuple$57[0];
		x117 = _tuple$57[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x68, x100, ((x$35 = (new p521Uint1(x117.$high, x117.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x118 = _tuple$58[0];
		x119 = _tuple$58[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64((x$36 = ((x$37 = (new p521Uint1(x69.$high, x69.$low)), new $Uint64(x$37.$high, x$37.$low))), x$38 = (x$39 = ((x$40 = (new p521Uint1(x53.$high, x53.$low)), new $Uint64(x$40.$high, x$40.$low))), x$41 = (x$42 = ((x$43 = (new p521Uint1(x35.$high, x35.$low)), new $Uint64(x$43.$high, x$43.$low))), new $Uint64(x$42.$high + x3.$high, x$42.$low + x3.$low)), new $Uint64(x$39.$high + x$41.$high, x$39.$low + x$41.$low)), new $Uint64(x$36.$high + x$38.$high, x$36.$low + x$38.$low)), x102, ((x$44 = (new p521Uint1(x119.$high, x119.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x120 = _tuple$59[0];
		x121 = _tuple$59[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x106, arg1[2], new $Uint64(0, 0));
		x122 = _tuple$60[0];
		x123 = _tuple$60[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x108, new $Uint64(0, 0), ((x$45 = (new p521Uint1(x123.$high, x123.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x124 = _tuple$61[0];
		x125 = _tuple$61[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x110, new $Uint64(0, 0), ((x$46 = (new p521Uint1(x125.$high, x125.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x126 = _tuple$62[0];
		x127 = _tuple$62[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x112, new $Uint64(0, 0), ((x$47 = (new p521Uint1(x127.$high, x127.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x128 = _tuple$63[0];
		x129 = _tuple$63[1];
		x130 = new $Uint64(0, 0);
		x131 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x114, new $Uint64(0, 0), ((x$48 = (new p521Uint1(x129.$high, x129.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x130 = _tuple$64[0];
		x131 = _tuple$64[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x116, new $Uint64(0, 0), ((x$49 = (new p521Uint1(x131.$high, x131.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x132 = _tuple$65[0];
		x133 = _tuple$65[1];
		x134 = new $Uint64(0, 0);
		x135 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x118, new $Uint64(0, 0), ((x$50 = (new p521Uint1(x133.$high, x133.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x134 = _tuple$66[0];
		x135 = _tuple$66[1];
		x136 = new $Uint64(0, 0);
		x137 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x120, new $Uint64(0, 0), ((x$51 = (new p521Uint1(x135.$high, x135.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x136 = _tuple$67[0];
		x137 = _tuple$67[1];
		x138 = new $Uint64(0, 0);
		x139 = new $Uint64(0, 0);
		_tuple$68 = bits.Mul64(x122, new $Uint64(0, 511));
		x139 = _tuple$68[0];
		x138 = _tuple$68[1];
		x140 = new $Uint64(0, 0);
		x141 = new $Uint64(0, 0);
		_tuple$69 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x141 = _tuple$69[0];
		x140 = _tuple$69[1];
		x142 = new $Uint64(0, 0);
		x143 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x143 = _tuple$70[0];
		x142 = _tuple$70[1];
		x144 = new $Uint64(0, 0);
		x145 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x145 = _tuple$71[0];
		x144 = _tuple$71[1];
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x147 = _tuple$72[0];
		x146 = _tuple$72[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$73 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x149 = _tuple$73[0];
		x148 = _tuple$73[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$74 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x151 = _tuple$74[0];
		x150 = _tuple$74[1];
		x152 = new $Uint64(0, 0);
		x153 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x153 = _tuple$75[0];
		x152 = _tuple$75[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x122, new $Uint64(4294967295, 4294967295));
		x155 = _tuple$76[0];
		x154 = _tuple$76[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x155, x152, new $Uint64(0, 0));
		x156 = _tuple$77[0];
		x157 = _tuple$77[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x153, x150, ((x$52 = (new p521Uint1(x157.$high, x157.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x158 = _tuple$78[0];
		x159 = _tuple$78[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$79 = bits.Add64(x151, x148, ((x$53 = (new p521Uint1(x159.$high, x159.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x160 = _tuple$79[0];
		x161 = _tuple$79[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x149, x146, ((x$54 = (new p521Uint1(x161.$high, x161.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x162 = _tuple$80[0];
		x163 = _tuple$80[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x147, x144, ((x$55 = (new p521Uint1(x163.$high, x163.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x164 = _tuple$81[0];
		x165 = _tuple$81[1];
		x166 = new $Uint64(0, 0);
		x167 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x145, x142, ((x$56 = (new p521Uint1(x165.$high, x165.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x166 = _tuple$82[0];
		x167 = _tuple$82[1];
		x168 = new $Uint64(0, 0);
		x169 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x143, x140, ((x$57 = (new p521Uint1(x167.$high, x167.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x168 = _tuple$83[0];
		x169 = _tuple$83[1];
		x170 = new $Uint64(0, 0);
		x171 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x141, x138, ((x$58 = (new p521Uint1(x169.$high, x169.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x170 = _tuple$84[0];
		x171 = _tuple$84[1];
		x173 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x122, x154, new $Uint64(0, 0));
		x173 = _tuple$85[1];
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x124, x156, ((x$59 = (new p521Uint1(x173.$high, x173.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x174 = _tuple$86[0];
		x175 = _tuple$86[1];
		x176 = new $Uint64(0, 0);
		x177 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x126, x158, ((x$60 = (new p521Uint1(x175.$high, x175.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x176 = _tuple$87[0];
		x177 = _tuple$87[1];
		x178 = new $Uint64(0, 0);
		x179 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x128, x160, ((x$61 = (new p521Uint1(x177.$high, x177.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x178 = _tuple$88[0];
		x179 = _tuple$88[1];
		x180 = new $Uint64(0, 0);
		x181 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x130, x162, ((x$62 = (new p521Uint1(x179.$high, x179.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x180 = _tuple$89[0];
		x181 = _tuple$89[1];
		x182 = new $Uint64(0, 0);
		x183 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x132, x164, ((x$63 = (new p521Uint1(x181.$high, x181.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x182 = _tuple$90[0];
		x183 = _tuple$90[1];
		x184 = new $Uint64(0, 0);
		x185 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x134, x166, ((x$64 = (new p521Uint1(x183.$high, x183.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x184 = _tuple$91[0];
		x185 = _tuple$91[1];
		x186 = new $Uint64(0, 0);
		x187 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x136, x168, ((x$65 = (new p521Uint1(x185.$high, x185.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x186 = _tuple$92[0];
		x187 = _tuple$92[1];
		x188 = new $Uint64(0, 0);
		x189 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64((x$66 = ((x$67 = (new p521Uint1(x137.$high, x137.$low)), new $Uint64(x$67.$high, x$67.$low))), x$68 = (x$69 = ((x$70 = (new p521Uint1(x121.$high, x121.$low)), new $Uint64(x$70.$high, x$70.$low))), x$71 = (x$72 = ((x$73 = (new p521Uint1(x103.$high, x103.$low)), new $Uint64(x$73.$high, x$73.$low))), new $Uint64(x$72.$high + x71.$high, x$72.$low + x71.$low)), new $Uint64(x$69.$high + x$71.$high, x$69.$low + x$71.$low)), new $Uint64(x$66.$high + x$68.$high, x$66.$low + x$68.$low)), x170, ((x$74 = (new p521Uint1(x187.$high, x187.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x188 = _tuple$93[0];
		x189 = _tuple$93[1];
		x190 = new $Uint64(0, 0);
		x191 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x174, arg1[3], new $Uint64(0, 0));
		x190 = _tuple$94[0];
		x191 = _tuple$94[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x176, new $Uint64(0, 0), ((x$75 = (new p521Uint1(x191.$high, x191.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x192 = _tuple$95[0];
		x193 = _tuple$95[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x178, new $Uint64(0, 0), ((x$76 = (new p521Uint1(x193.$high, x193.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x194 = _tuple$96[0];
		x195 = _tuple$96[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x180, new $Uint64(0, 0), ((x$77 = (new p521Uint1(x195.$high, x195.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x196 = _tuple$97[0];
		x197 = _tuple$97[1];
		x198 = new $Uint64(0, 0);
		x199 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x182, new $Uint64(0, 0), ((x$78 = (new p521Uint1(x197.$high, x197.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x198 = _tuple$98[0];
		x199 = _tuple$98[1];
		x200 = new $Uint64(0, 0);
		x201 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x184, new $Uint64(0, 0), ((x$79 = (new p521Uint1(x199.$high, x199.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x200 = _tuple$99[0];
		x201 = _tuple$99[1];
		x202 = new $Uint64(0, 0);
		x203 = new $Uint64(0, 0);
		_tuple$100 = bits.Add64(x186, new $Uint64(0, 0), ((x$80 = (new p521Uint1(x201.$high, x201.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x202 = _tuple$100[0];
		x203 = _tuple$100[1];
		x204 = new $Uint64(0, 0);
		x205 = new $Uint64(0, 0);
		_tuple$101 = bits.Add64(x188, new $Uint64(0, 0), ((x$81 = (new p521Uint1(x203.$high, x203.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x204 = _tuple$101[0];
		x205 = _tuple$101[1];
		x206 = new $Uint64(0, 0);
		x207 = new $Uint64(0, 0);
		_tuple$102 = bits.Mul64(x190, new $Uint64(0, 511));
		x207 = _tuple$102[0];
		x206 = _tuple$102[1];
		x208 = new $Uint64(0, 0);
		x209 = new $Uint64(0, 0);
		_tuple$103 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x209 = _tuple$103[0];
		x208 = _tuple$103[1];
		x210 = new $Uint64(0, 0);
		x211 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x211 = _tuple$104[0];
		x210 = _tuple$104[1];
		x212 = new $Uint64(0, 0);
		x213 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x213 = _tuple$105[0];
		x212 = _tuple$105[1];
		x214 = new $Uint64(0, 0);
		x215 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x215 = _tuple$106[0];
		x214 = _tuple$106[1];
		x216 = new $Uint64(0, 0);
		x217 = new $Uint64(0, 0);
		_tuple$107 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x217 = _tuple$107[0];
		x216 = _tuple$107[1];
		x218 = new $Uint64(0, 0);
		x219 = new $Uint64(0, 0);
		_tuple$108 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x219 = _tuple$108[0];
		x218 = _tuple$108[1];
		x220 = new $Uint64(0, 0);
		x221 = new $Uint64(0, 0);
		_tuple$109 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x221 = _tuple$109[0];
		x220 = _tuple$109[1];
		x222 = new $Uint64(0, 0);
		x223 = new $Uint64(0, 0);
		_tuple$110 = bits.Mul64(x190, new $Uint64(4294967295, 4294967295));
		x223 = _tuple$110[0];
		x222 = _tuple$110[1];
		x224 = new $Uint64(0, 0);
		x225 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x223, x220, new $Uint64(0, 0));
		x224 = _tuple$111[0];
		x225 = _tuple$111[1];
		x226 = new $Uint64(0, 0);
		x227 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x221, x218, ((x$82 = (new p521Uint1(x225.$high, x225.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x226 = _tuple$112[0];
		x227 = _tuple$112[1];
		x228 = new $Uint64(0, 0);
		x229 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x219, x216, ((x$83 = (new p521Uint1(x227.$high, x227.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x228 = _tuple$113[0];
		x229 = _tuple$113[1];
		x230 = new $Uint64(0, 0);
		x231 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x217, x214, ((x$84 = (new p521Uint1(x229.$high, x229.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x230 = _tuple$114[0];
		x231 = _tuple$114[1];
		x232 = new $Uint64(0, 0);
		x233 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x215, x212, ((x$85 = (new p521Uint1(x231.$high, x231.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x232 = _tuple$115[0];
		x233 = _tuple$115[1];
		x234 = new $Uint64(0, 0);
		x235 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x213, x210, ((x$86 = (new p521Uint1(x233.$high, x233.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x234 = _tuple$116[0];
		x235 = _tuple$116[1];
		x236 = new $Uint64(0, 0);
		x237 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x211, x208, ((x$87 = (new p521Uint1(x235.$high, x235.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x236 = _tuple$117[0];
		x237 = _tuple$117[1];
		x238 = new $Uint64(0, 0);
		x239 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x209, x206, ((x$88 = (new p521Uint1(x237.$high, x237.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x238 = _tuple$118[0];
		x239 = _tuple$118[1];
		x241 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x190, x222, new $Uint64(0, 0));
		x241 = _tuple$119[1];
		x242 = new $Uint64(0, 0);
		x243 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x192, x224, ((x$89 = (new p521Uint1(x241.$high, x241.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x242 = _tuple$120[0];
		x243 = _tuple$120[1];
		x244 = new $Uint64(0, 0);
		x245 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x194, x226, ((x$90 = (new p521Uint1(x243.$high, x243.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x244 = _tuple$121[0];
		x245 = _tuple$121[1];
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x196, x228, ((x$91 = (new p521Uint1(x245.$high, x245.$low)), new $Uint64(x$91.$high, x$91.$low))));
		x246 = _tuple$122[0];
		x247 = _tuple$122[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x198, x230, ((x$92 = (new p521Uint1(x247.$high, x247.$low)), new $Uint64(x$92.$high, x$92.$low))));
		x248 = _tuple$123[0];
		x249 = _tuple$123[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x200, x232, ((x$93 = (new p521Uint1(x249.$high, x249.$low)), new $Uint64(x$93.$high, x$93.$low))));
		x250 = _tuple$124[0];
		x251 = _tuple$124[1];
		x252 = new $Uint64(0, 0);
		x253 = new $Uint64(0, 0);
		_tuple$125 = bits.Add64(x202, x234, ((x$94 = (new p521Uint1(x251.$high, x251.$low)), new $Uint64(x$94.$high, x$94.$low))));
		x252 = _tuple$125[0];
		x253 = _tuple$125[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$126 = bits.Add64(x204, x236, ((x$95 = (new p521Uint1(x253.$high, x253.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x254 = _tuple$126[0];
		x255 = _tuple$126[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$127 = bits.Add64((x$96 = ((x$97 = (new p521Uint1(x205.$high, x205.$low)), new $Uint64(x$97.$high, x$97.$low))), x$98 = (x$99 = ((x$100 = (new p521Uint1(x189.$high, x189.$low)), new $Uint64(x$100.$high, x$100.$low))), x$101 = (x$102 = ((x$103 = (new p521Uint1(x171.$high, x171.$low)), new $Uint64(x$103.$high, x$103.$low))), new $Uint64(x$102.$high + x139.$high, x$102.$low + x139.$low)), new $Uint64(x$99.$high + x$101.$high, x$99.$low + x$101.$low)), new $Uint64(x$96.$high + x$98.$high, x$96.$low + x$98.$low)), x238, ((x$104 = (new p521Uint1(x255.$high, x255.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x256 = _tuple$127[0];
		x257 = _tuple$127[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$128 = bits.Add64(x242, arg1[4], new $Uint64(0, 0));
		x258 = _tuple$128[0];
		x259 = _tuple$128[1];
		x260 = new $Uint64(0, 0);
		x261 = new $Uint64(0, 0);
		_tuple$129 = bits.Add64(x244, new $Uint64(0, 0), ((x$105 = (new p521Uint1(x259.$high, x259.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x260 = _tuple$129[0];
		x261 = _tuple$129[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$130 = bits.Add64(x246, new $Uint64(0, 0), ((x$106 = (new p521Uint1(x261.$high, x261.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x262 = _tuple$130[0];
		x263 = _tuple$130[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$131 = bits.Add64(x248, new $Uint64(0, 0), ((x$107 = (new p521Uint1(x263.$high, x263.$low)), new $Uint64(x$107.$high, x$107.$low))));
		x264 = _tuple$131[0];
		x265 = _tuple$131[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x250, new $Uint64(0, 0), ((x$108 = (new p521Uint1(x265.$high, x265.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x266 = _tuple$132[0];
		x267 = _tuple$132[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x252, new $Uint64(0, 0), ((x$109 = (new p521Uint1(x267.$high, x267.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x268 = _tuple$133[0];
		x269 = _tuple$133[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x254, new $Uint64(0, 0), ((x$110 = (new p521Uint1(x269.$high, x269.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x270 = _tuple$134[0];
		x271 = _tuple$134[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x256, new $Uint64(0, 0), ((x$111 = (new p521Uint1(x271.$high, x271.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x272 = _tuple$135[0];
		x273 = _tuple$135[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$136 = bits.Mul64(x258, new $Uint64(0, 511));
		x275 = _tuple$136[0];
		x274 = _tuple$136[1];
		x276 = new $Uint64(0, 0);
		x277 = new $Uint64(0, 0);
		_tuple$137 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x277 = _tuple$137[0];
		x276 = _tuple$137[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$138 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x279 = _tuple$138[0];
		x278 = _tuple$138[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$139 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x281 = _tuple$139[0];
		x280 = _tuple$139[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$140 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x283 = _tuple$140[0];
		x282 = _tuple$140[1];
		x284 = new $Uint64(0, 0);
		x285 = new $Uint64(0, 0);
		_tuple$141 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x285 = _tuple$141[0];
		x284 = _tuple$141[1];
		x286 = new $Uint64(0, 0);
		x287 = new $Uint64(0, 0);
		_tuple$142 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x287 = _tuple$142[0];
		x286 = _tuple$142[1];
		x288 = new $Uint64(0, 0);
		x289 = new $Uint64(0, 0);
		_tuple$143 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x289 = _tuple$143[0];
		x288 = _tuple$143[1];
		x290 = new $Uint64(0, 0);
		x291 = new $Uint64(0, 0);
		_tuple$144 = bits.Mul64(x258, new $Uint64(4294967295, 4294967295));
		x291 = _tuple$144[0];
		x290 = _tuple$144[1];
		x292 = new $Uint64(0, 0);
		x293 = new $Uint64(0, 0);
		_tuple$145 = bits.Add64(x291, x288, new $Uint64(0, 0));
		x292 = _tuple$145[0];
		x293 = _tuple$145[1];
		x294 = new $Uint64(0, 0);
		x295 = new $Uint64(0, 0);
		_tuple$146 = bits.Add64(x289, x286, ((x$112 = (new p521Uint1(x293.$high, x293.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x294 = _tuple$146[0];
		x295 = _tuple$146[1];
		x296 = new $Uint64(0, 0);
		x297 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x287, x284, ((x$113 = (new p521Uint1(x295.$high, x295.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x296 = _tuple$147[0];
		x297 = _tuple$147[1];
		x298 = new $Uint64(0, 0);
		x299 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x285, x282, ((x$114 = (new p521Uint1(x297.$high, x297.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x298 = _tuple$148[0];
		x299 = _tuple$148[1];
		x300 = new $Uint64(0, 0);
		x301 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x283, x280, ((x$115 = (new p521Uint1(x299.$high, x299.$low)), new $Uint64(x$115.$high, x$115.$low))));
		x300 = _tuple$149[0];
		x301 = _tuple$149[1];
		x302 = new $Uint64(0, 0);
		x303 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x281, x278, ((x$116 = (new p521Uint1(x301.$high, x301.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x302 = _tuple$150[0];
		x303 = _tuple$150[1];
		x304 = new $Uint64(0, 0);
		x305 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x279, x276, ((x$117 = (new p521Uint1(x303.$high, x303.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x304 = _tuple$151[0];
		x305 = _tuple$151[1];
		x306 = new $Uint64(0, 0);
		x307 = new $Uint64(0, 0);
		_tuple$152 = bits.Add64(x277, x274, ((x$118 = (new p521Uint1(x305.$high, x305.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x306 = _tuple$152[0];
		x307 = _tuple$152[1];
		x309 = new $Uint64(0, 0);
		_tuple$153 = bits.Add64(x258, x290, new $Uint64(0, 0));
		x309 = _tuple$153[1];
		x310 = new $Uint64(0, 0);
		x311 = new $Uint64(0, 0);
		_tuple$154 = bits.Add64(x260, x292, ((x$119 = (new p521Uint1(x309.$high, x309.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x310 = _tuple$154[0];
		x311 = _tuple$154[1];
		x312 = new $Uint64(0, 0);
		x313 = new $Uint64(0, 0);
		_tuple$155 = bits.Add64(x262, x294, ((x$120 = (new p521Uint1(x311.$high, x311.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x312 = _tuple$155[0];
		x313 = _tuple$155[1];
		x314 = new $Uint64(0, 0);
		x315 = new $Uint64(0, 0);
		_tuple$156 = bits.Add64(x264, x296, ((x$121 = (new p521Uint1(x313.$high, x313.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x314 = _tuple$156[0];
		x315 = _tuple$156[1];
		x316 = new $Uint64(0, 0);
		x317 = new $Uint64(0, 0);
		_tuple$157 = bits.Add64(x266, x298, ((x$122 = (new p521Uint1(x315.$high, x315.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x316 = _tuple$157[0];
		x317 = _tuple$157[1];
		x318 = new $Uint64(0, 0);
		x319 = new $Uint64(0, 0);
		_tuple$158 = bits.Add64(x268, x300, ((x$123 = (new p521Uint1(x317.$high, x317.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x318 = _tuple$158[0];
		x319 = _tuple$158[1];
		x320 = new $Uint64(0, 0);
		x321 = new $Uint64(0, 0);
		_tuple$159 = bits.Add64(x270, x302, ((x$124 = (new p521Uint1(x319.$high, x319.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x320 = _tuple$159[0];
		x321 = _tuple$159[1];
		x322 = new $Uint64(0, 0);
		x323 = new $Uint64(0, 0);
		_tuple$160 = bits.Add64(x272, x304, ((x$125 = (new p521Uint1(x321.$high, x321.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x322 = _tuple$160[0];
		x323 = _tuple$160[1];
		x324 = new $Uint64(0, 0);
		x325 = new $Uint64(0, 0);
		_tuple$161 = bits.Add64((x$126 = ((x$127 = (new p521Uint1(x273.$high, x273.$low)), new $Uint64(x$127.$high, x$127.$low))), x$128 = (x$129 = ((x$130 = (new p521Uint1(x257.$high, x257.$low)), new $Uint64(x$130.$high, x$130.$low))), x$131 = (x$132 = ((x$133 = (new p521Uint1(x239.$high, x239.$low)), new $Uint64(x$133.$high, x$133.$low))), new $Uint64(x$132.$high + x207.$high, x$132.$low + x207.$low)), new $Uint64(x$129.$high + x$131.$high, x$129.$low + x$131.$low)), new $Uint64(x$126.$high + x$128.$high, x$126.$low + x$128.$low)), x306, ((x$134 = (new p521Uint1(x323.$high, x323.$low)), new $Uint64(x$134.$high, x$134.$low))));
		x324 = _tuple$161[0];
		x325 = _tuple$161[1];
		x326 = new $Uint64(0, 0);
		x327 = new $Uint64(0, 0);
		_tuple$162 = bits.Add64(x310, arg1[5], new $Uint64(0, 0));
		x326 = _tuple$162[0];
		x327 = _tuple$162[1];
		x328 = new $Uint64(0, 0);
		x329 = new $Uint64(0, 0);
		_tuple$163 = bits.Add64(x312, new $Uint64(0, 0), ((x$135 = (new p521Uint1(x327.$high, x327.$low)), new $Uint64(x$135.$high, x$135.$low))));
		x328 = _tuple$163[0];
		x329 = _tuple$163[1];
		x330 = new $Uint64(0, 0);
		x331 = new $Uint64(0, 0);
		_tuple$164 = bits.Add64(x314, new $Uint64(0, 0), ((x$136 = (new p521Uint1(x329.$high, x329.$low)), new $Uint64(x$136.$high, x$136.$low))));
		x330 = _tuple$164[0];
		x331 = _tuple$164[1];
		x332 = new $Uint64(0, 0);
		x333 = new $Uint64(0, 0);
		_tuple$165 = bits.Add64(x316, new $Uint64(0, 0), ((x$137 = (new p521Uint1(x331.$high, x331.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x332 = _tuple$165[0];
		x333 = _tuple$165[1];
		x334 = new $Uint64(0, 0);
		x335 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x318, new $Uint64(0, 0), ((x$138 = (new p521Uint1(x333.$high, x333.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x334 = _tuple$166[0];
		x335 = _tuple$166[1];
		x336 = new $Uint64(0, 0);
		x337 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x320, new $Uint64(0, 0), ((x$139 = (new p521Uint1(x335.$high, x335.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x336 = _tuple$167[0];
		x337 = _tuple$167[1];
		x338 = new $Uint64(0, 0);
		x339 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x322, new $Uint64(0, 0), ((x$140 = (new p521Uint1(x337.$high, x337.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x338 = _tuple$168[0];
		x339 = _tuple$168[1];
		x340 = new $Uint64(0, 0);
		x341 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x324, new $Uint64(0, 0), ((x$141 = (new p521Uint1(x339.$high, x339.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x340 = _tuple$169[0];
		x341 = _tuple$169[1];
		x342 = new $Uint64(0, 0);
		x343 = new $Uint64(0, 0);
		_tuple$170 = bits.Mul64(x326, new $Uint64(0, 511));
		x343 = _tuple$170[0];
		x342 = _tuple$170[1];
		x344 = new $Uint64(0, 0);
		x345 = new $Uint64(0, 0);
		_tuple$171 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x345 = _tuple$171[0];
		x344 = _tuple$171[1];
		x346 = new $Uint64(0, 0);
		x347 = new $Uint64(0, 0);
		_tuple$172 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x347 = _tuple$172[0];
		x346 = _tuple$172[1];
		x348 = new $Uint64(0, 0);
		x349 = new $Uint64(0, 0);
		_tuple$173 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x349 = _tuple$173[0];
		x348 = _tuple$173[1];
		x350 = new $Uint64(0, 0);
		x351 = new $Uint64(0, 0);
		_tuple$174 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x351 = _tuple$174[0];
		x350 = _tuple$174[1];
		x352 = new $Uint64(0, 0);
		x353 = new $Uint64(0, 0);
		_tuple$175 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x353 = _tuple$175[0];
		x352 = _tuple$175[1];
		x354 = new $Uint64(0, 0);
		x355 = new $Uint64(0, 0);
		_tuple$176 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x355 = _tuple$176[0];
		x354 = _tuple$176[1];
		x356 = new $Uint64(0, 0);
		x357 = new $Uint64(0, 0);
		_tuple$177 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x357 = _tuple$177[0];
		x356 = _tuple$177[1];
		x358 = new $Uint64(0, 0);
		x359 = new $Uint64(0, 0);
		_tuple$178 = bits.Mul64(x326, new $Uint64(4294967295, 4294967295));
		x359 = _tuple$178[0];
		x358 = _tuple$178[1];
		x360 = new $Uint64(0, 0);
		x361 = new $Uint64(0, 0);
		_tuple$179 = bits.Add64(x359, x356, new $Uint64(0, 0));
		x360 = _tuple$179[0];
		x361 = _tuple$179[1];
		x362 = new $Uint64(0, 0);
		x363 = new $Uint64(0, 0);
		_tuple$180 = bits.Add64(x357, x354, ((x$142 = (new p521Uint1(x361.$high, x361.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x362 = _tuple$180[0];
		x363 = _tuple$180[1];
		x364 = new $Uint64(0, 0);
		x365 = new $Uint64(0, 0);
		_tuple$181 = bits.Add64(x355, x352, ((x$143 = (new p521Uint1(x363.$high, x363.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x364 = _tuple$181[0];
		x365 = _tuple$181[1];
		x366 = new $Uint64(0, 0);
		x367 = new $Uint64(0, 0);
		_tuple$182 = bits.Add64(x353, x350, ((x$144 = (new p521Uint1(x365.$high, x365.$low)), new $Uint64(x$144.$high, x$144.$low))));
		x366 = _tuple$182[0];
		x367 = _tuple$182[1];
		x368 = new $Uint64(0, 0);
		x369 = new $Uint64(0, 0);
		_tuple$183 = bits.Add64(x351, x348, ((x$145 = (new p521Uint1(x367.$high, x367.$low)), new $Uint64(x$145.$high, x$145.$low))));
		x368 = _tuple$183[0];
		x369 = _tuple$183[1];
		x370 = new $Uint64(0, 0);
		x371 = new $Uint64(0, 0);
		_tuple$184 = bits.Add64(x349, x346, ((x$146 = (new p521Uint1(x369.$high, x369.$low)), new $Uint64(x$146.$high, x$146.$low))));
		x370 = _tuple$184[0];
		x371 = _tuple$184[1];
		x372 = new $Uint64(0, 0);
		x373 = new $Uint64(0, 0);
		_tuple$185 = bits.Add64(x347, x344, ((x$147 = (new p521Uint1(x371.$high, x371.$low)), new $Uint64(x$147.$high, x$147.$low))));
		x372 = _tuple$185[0];
		x373 = _tuple$185[1];
		x374 = new $Uint64(0, 0);
		x375 = new $Uint64(0, 0);
		_tuple$186 = bits.Add64(x345, x342, ((x$148 = (new p521Uint1(x373.$high, x373.$low)), new $Uint64(x$148.$high, x$148.$low))));
		x374 = _tuple$186[0];
		x375 = _tuple$186[1];
		x377 = new $Uint64(0, 0);
		_tuple$187 = bits.Add64(x326, x358, new $Uint64(0, 0));
		x377 = _tuple$187[1];
		x378 = new $Uint64(0, 0);
		x379 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x328, x360, ((x$149 = (new p521Uint1(x377.$high, x377.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x378 = _tuple$188[0];
		x379 = _tuple$188[1];
		x380 = new $Uint64(0, 0);
		x381 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x330, x362, ((x$150 = (new p521Uint1(x379.$high, x379.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x380 = _tuple$189[0];
		x381 = _tuple$189[1];
		x382 = new $Uint64(0, 0);
		x383 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x332, x364, ((x$151 = (new p521Uint1(x381.$high, x381.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x382 = _tuple$190[0];
		x383 = _tuple$190[1];
		x384 = new $Uint64(0, 0);
		x385 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x334, x366, ((x$152 = (new p521Uint1(x383.$high, x383.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x384 = _tuple$191[0];
		x385 = _tuple$191[1];
		x386 = new $Uint64(0, 0);
		x387 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x336, x368, ((x$153 = (new p521Uint1(x385.$high, x385.$low)), new $Uint64(x$153.$high, x$153.$low))));
		x386 = _tuple$192[0];
		x387 = _tuple$192[1];
		x388 = new $Uint64(0, 0);
		x389 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x338, x370, ((x$154 = (new p521Uint1(x387.$high, x387.$low)), new $Uint64(x$154.$high, x$154.$low))));
		x388 = _tuple$193[0];
		x389 = _tuple$193[1];
		x390 = new $Uint64(0, 0);
		x391 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x340, x372, ((x$155 = (new p521Uint1(x389.$high, x389.$low)), new $Uint64(x$155.$high, x$155.$low))));
		x390 = _tuple$194[0];
		x391 = _tuple$194[1];
		x392 = new $Uint64(0, 0);
		x393 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64((x$156 = ((x$157 = (new p521Uint1(x341.$high, x341.$low)), new $Uint64(x$157.$high, x$157.$low))), x$158 = (x$159 = ((x$160 = (new p521Uint1(x325.$high, x325.$low)), new $Uint64(x$160.$high, x$160.$low))), x$161 = (x$162 = ((x$163 = (new p521Uint1(x307.$high, x307.$low)), new $Uint64(x$163.$high, x$163.$low))), new $Uint64(x$162.$high + x275.$high, x$162.$low + x275.$low)), new $Uint64(x$159.$high + x$161.$high, x$159.$low + x$161.$low)), new $Uint64(x$156.$high + x$158.$high, x$156.$low + x$158.$low)), x374, ((x$164 = (new p521Uint1(x391.$high, x391.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x392 = _tuple$195[0];
		x393 = _tuple$195[1];
		x394 = new $Uint64(0, 0);
		x395 = new $Uint64(0, 0);
		_tuple$196 = bits.Add64(x378, arg1[6], new $Uint64(0, 0));
		x394 = _tuple$196[0];
		x395 = _tuple$196[1];
		x396 = new $Uint64(0, 0);
		x397 = new $Uint64(0, 0);
		_tuple$197 = bits.Add64(x380, new $Uint64(0, 0), ((x$165 = (new p521Uint1(x395.$high, x395.$low)), new $Uint64(x$165.$high, x$165.$low))));
		x396 = _tuple$197[0];
		x397 = _tuple$197[1];
		x398 = new $Uint64(0, 0);
		x399 = new $Uint64(0, 0);
		_tuple$198 = bits.Add64(x382, new $Uint64(0, 0), ((x$166 = (new p521Uint1(x397.$high, x397.$low)), new $Uint64(x$166.$high, x$166.$low))));
		x398 = _tuple$198[0];
		x399 = _tuple$198[1];
		x400 = new $Uint64(0, 0);
		x401 = new $Uint64(0, 0);
		_tuple$199 = bits.Add64(x384, new $Uint64(0, 0), ((x$167 = (new p521Uint1(x399.$high, x399.$low)), new $Uint64(x$167.$high, x$167.$low))));
		x400 = _tuple$199[0];
		x401 = _tuple$199[1];
		x402 = new $Uint64(0, 0);
		x403 = new $Uint64(0, 0);
		_tuple$200 = bits.Add64(x386, new $Uint64(0, 0), ((x$168 = (new p521Uint1(x401.$high, x401.$low)), new $Uint64(x$168.$high, x$168.$low))));
		x402 = _tuple$200[0];
		x403 = _tuple$200[1];
		x404 = new $Uint64(0, 0);
		x405 = new $Uint64(0, 0);
		_tuple$201 = bits.Add64(x388, new $Uint64(0, 0), ((x$169 = (new p521Uint1(x403.$high, x403.$low)), new $Uint64(x$169.$high, x$169.$low))));
		x404 = _tuple$201[0];
		x405 = _tuple$201[1];
		x406 = new $Uint64(0, 0);
		x407 = new $Uint64(0, 0);
		_tuple$202 = bits.Add64(x390, new $Uint64(0, 0), ((x$170 = (new p521Uint1(x405.$high, x405.$low)), new $Uint64(x$170.$high, x$170.$low))));
		x406 = _tuple$202[0];
		x407 = _tuple$202[1];
		x408 = new $Uint64(0, 0);
		x409 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x392, new $Uint64(0, 0), ((x$171 = (new p521Uint1(x407.$high, x407.$low)), new $Uint64(x$171.$high, x$171.$low))));
		x408 = _tuple$203[0];
		x409 = _tuple$203[1];
		x410 = new $Uint64(0, 0);
		x411 = new $Uint64(0, 0);
		_tuple$204 = bits.Mul64(x394, new $Uint64(0, 511));
		x411 = _tuple$204[0];
		x410 = _tuple$204[1];
		x412 = new $Uint64(0, 0);
		x413 = new $Uint64(0, 0);
		_tuple$205 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x413 = _tuple$205[0];
		x412 = _tuple$205[1];
		x414 = new $Uint64(0, 0);
		x415 = new $Uint64(0, 0);
		_tuple$206 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x415 = _tuple$206[0];
		x414 = _tuple$206[1];
		x416 = new $Uint64(0, 0);
		x417 = new $Uint64(0, 0);
		_tuple$207 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x417 = _tuple$207[0];
		x416 = _tuple$207[1];
		x418 = new $Uint64(0, 0);
		x419 = new $Uint64(0, 0);
		_tuple$208 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x419 = _tuple$208[0];
		x418 = _tuple$208[1];
		x420 = new $Uint64(0, 0);
		x421 = new $Uint64(0, 0);
		_tuple$209 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x421 = _tuple$209[0];
		x420 = _tuple$209[1];
		x422 = new $Uint64(0, 0);
		x423 = new $Uint64(0, 0);
		_tuple$210 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x423 = _tuple$210[0];
		x422 = _tuple$210[1];
		x424 = new $Uint64(0, 0);
		x425 = new $Uint64(0, 0);
		_tuple$211 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x425 = _tuple$211[0];
		x424 = _tuple$211[1];
		x426 = new $Uint64(0, 0);
		x427 = new $Uint64(0, 0);
		_tuple$212 = bits.Mul64(x394, new $Uint64(4294967295, 4294967295));
		x427 = _tuple$212[0];
		x426 = _tuple$212[1];
		x428 = new $Uint64(0, 0);
		x429 = new $Uint64(0, 0);
		_tuple$213 = bits.Add64(x427, x424, new $Uint64(0, 0));
		x428 = _tuple$213[0];
		x429 = _tuple$213[1];
		x430 = new $Uint64(0, 0);
		x431 = new $Uint64(0, 0);
		_tuple$214 = bits.Add64(x425, x422, ((x$172 = (new p521Uint1(x429.$high, x429.$low)), new $Uint64(x$172.$high, x$172.$low))));
		x430 = _tuple$214[0];
		x431 = _tuple$214[1];
		x432 = new $Uint64(0, 0);
		x433 = new $Uint64(0, 0);
		_tuple$215 = bits.Add64(x423, x420, ((x$173 = (new p521Uint1(x431.$high, x431.$low)), new $Uint64(x$173.$high, x$173.$low))));
		x432 = _tuple$215[0];
		x433 = _tuple$215[1];
		x434 = new $Uint64(0, 0);
		x435 = new $Uint64(0, 0);
		_tuple$216 = bits.Add64(x421, x418, ((x$174 = (new p521Uint1(x433.$high, x433.$low)), new $Uint64(x$174.$high, x$174.$low))));
		x434 = _tuple$216[0];
		x435 = _tuple$216[1];
		x436 = new $Uint64(0, 0);
		x437 = new $Uint64(0, 0);
		_tuple$217 = bits.Add64(x419, x416, ((x$175 = (new p521Uint1(x435.$high, x435.$low)), new $Uint64(x$175.$high, x$175.$low))));
		x436 = _tuple$217[0];
		x437 = _tuple$217[1];
		x438 = new $Uint64(0, 0);
		x439 = new $Uint64(0, 0);
		_tuple$218 = bits.Add64(x417, x414, ((x$176 = (new p521Uint1(x437.$high, x437.$low)), new $Uint64(x$176.$high, x$176.$low))));
		x438 = _tuple$218[0];
		x439 = _tuple$218[1];
		x440 = new $Uint64(0, 0);
		x441 = new $Uint64(0, 0);
		_tuple$219 = bits.Add64(x415, x412, ((x$177 = (new p521Uint1(x439.$high, x439.$low)), new $Uint64(x$177.$high, x$177.$low))));
		x440 = _tuple$219[0];
		x441 = _tuple$219[1];
		x442 = new $Uint64(0, 0);
		x443 = new $Uint64(0, 0);
		_tuple$220 = bits.Add64(x413, x410, ((x$178 = (new p521Uint1(x441.$high, x441.$low)), new $Uint64(x$178.$high, x$178.$low))));
		x442 = _tuple$220[0];
		x443 = _tuple$220[1];
		x445 = new $Uint64(0, 0);
		_tuple$221 = bits.Add64(x394, x426, new $Uint64(0, 0));
		x445 = _tuple$221[1];
		x446 = new $Uint64(0, 0);
		x447 = new $Uint64(0, 0);
		_tuple$222 = bits.Add64(x396, x428, ((x$179 = (new p521Uint1(x445.$high, x445.$low)), new $Uint64(x$179.$high, x$179.$low))));
		x446 = _tuple$222[0];
		x447 = _tuple$222[1];
		x448 = new $Uint64(0, 0);
		x449 = new $Uint64(0, 0);
		_tuple$223 = bits.Add64(x398, x430, ((x$180 = (new p521Uint1(x447.$high, x447.$low)), new $Uint64(x$180.$high, x$180.$low))));
		x448 = _tuple$223[0];
		x449 = _tuple$223[1];
		x450 = new $Uint64(0, 0);
		x451 = new $Uint64(0, 0);
		_tuple$224 = bits.Add64(x400, x432, ((x$181 = (new p521Uint1(x449.$high, x449.$low)), new $Uint64(x$181.$high, x$181.$low))));
		x450 = _tuple$224[0];
		x451 = _tuple$224[1];
		x452 = new $Uint64(0, 0);
		x453 = new $Uint64(0, 0);
		_tuple$225 = bits.Add64(x402, x434, ((x$182 = (new p521Uint1(x451.$high, x451.$low)), new $Uint64(x$182.$high, x$182.$low))));
		x452 = _tuple$225[0];
		x453 = _tuple$225[1];
		x454 = new $Uint64(0, 0);
		x455 = new $Uint64(0, 0);
		_tuple$226 = bits.Add64(x404, x436, ((x$183 = (new p521Uint1(x453.$high, x453.$low)), new $Uint64(x$183.$high, x$183.$low))));
		x454 = _tuple$226[0];
		x455 = _tuple$226[1];
		x456 = new $Uint64(0, 0);
		x457 = new $Uint64(0, 0);
		_tuple$227 = bits.Add64(x406, x438, ((x$184 = (new p521Uint1(x455.$high, x455.$low)), new $Uint64(x$184.$high, x$184.$low))));
		x456 = _tuple$227[0];
		x457 = _tuple$227[1];
		x458 = new $Uint64(0, 0);
		x459 = new $Uint64(0, 0);
		_tuple$228 = bits.Add64(x408, x440, ((x$185 = (new p521Uint1(x457.$high, x457.$low)), new $Uint64(x$185.$high, x$185.$low))));
		x458 = _tuple$228[0];
		x459 = _tuple$228[1];
		x460 = new $Uint64(0, 0);
		x461 = new $Uint64(0, 0);
		_tuple$229 = bits.Add64((x$186 = ((x$187 = (new p521Uint1(x409.$high, x409.$low)), new $Uint64(x$187.$high, x$187.$low))), x$188 = (x$189 = ((x$190 = (new p521Uint1(x393.$high, x393.$low)), new $Uint64(x$190.$high, x$190.$low))), x$191 = (x$192 = ((x$193 = (new p521Uint1(x375.$high, x375.$low)), new $Uint64(x$193.$high, x$193.$low))), new $Uint64(x$192.$high + x343.$high, x$192.$low + x343.$low)), new $Uint64(x$189.$high + x$191.$high, x$189.$low + x$191.$low)), new $Uint64(x$186.$high + x$188.$high, x$186.$low + x$188.$low)), x442, ((x$194 = (new p521Uint1(x459.$high, x459.$low)), new $Uint64(x$194.$high, x$194.$low))));
		x460 = _tuple$229[0];
		x461 = _tuple$229[1];
		x462 = new $Uint64(0, 0);
		x463 = new $Uint64(0, 0);
		_tuple$230 = bits.Add64(x446, arg1[7], new $Uint64(0, 0));
		x462 = _tuple$230[0];
		x463 = _tuple$230[1];
		x464 = new $Uint64(0, 0);
		x465 = new $Uint64(0, 0);
		_tuple$231 = bits.Add64(x448, new $Uint64(0, 0), ((x$195 = (new p521Uint1(x463.$high, x463.$low)), new $Uint64(x$195.$high, x$195.$low))));
		x464 = _tuple$231[0];
		x465 = _tuple$231[1];
		x466 = new $Uint64(0, 0);
		x467 = new $Uint64(0, 0);
		_tuple$232 = bits.Add64(x450, new $Uint64(0, 0), ((x$196 = (new p521Uint1(x465.$high, x465.$low)), new $Uint64(x$196.$high, x$196.$low))));
		x466 = _tuple$232[0];
		x467 = _tuple$232[1];
		x468 = new $Uint64(0, 0);
		x469 = new $Uint64(0, 0);
		_tuple$233 = bits.Add64(x452, new $Uint64(0, 0), ((x$197 = (new p521Uint1(x467.$high, x467.$low)), new $Uint64(x$197.$high, x$197.$low))));
		x468 = _tuple$233[0];
		x469 = _tuple$233[1];
		x470 = new $Uint64(0, 0);
		x471 = new $Uint64(0, 0);
		_tuple$234 = bits.Add64(x454, new $Uint64(0, 0), ((x$198 = (new p521Uint1(x469.$high, x469.$low)), new $Uint64(x$198.$high, x$198.$low))));
		x470 = _tuple$234[0];
		x471 = _tuple$234[1];
		x472 = new $Uint64(0, 0);
		x473 = new $Uint64(0, 0);
		_tuple$235 = bits.Add64(x456, new $Uint64(0, 0), ((x$199 = (new p521Uint1(x471.$high, x471.$low)), new $Uint64(x$199.$high, x$199.$low))));
		x472 = _tuple$235[0];
		x473 = _tuple$235[1];
		x474 = new $Uint64(0, 0);
		x475 = new $Uint64(0, 0);
		_tuple$236 = bits.Add64(x458, new $Uint64(0, 0), ((x$200 = (new p521Uint1(x473.$high, x473.$low)), new $Uint64(x$200.$high, x$200.$low))));
		x474 = _tuple$236[0];
		x475 = _tuple$236[1];
		x476 = new $Uint64(0, 0);
		x477 = new $Uint64(0, 0);
		_tuple$237 = bits.Add64(x460, new $Uint64(0, 0), ((x$201 = (new p521Uint1(x475.$high, x475.$low)), new $Uint64(x$201.$high, x$201.$low))));
		x476 = _tuple$237[0];
		x477 = _tuple$237[1];
		x478 = new $Uint64(0, 0);
		x479 = new $Uint64(0, 0);
		_tuple$238 = bits.Mul64(x462, new $Uint64(0, 511));
		x479 = _tuple$238[0];
		x478 = _tuple$238[1];
		x480 = new $Uint64(0, 0);
		x481 = new $Uint64(0, 0);
		_tuple$239 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x481 = _tuple$239[0];
		x480 = _tuple$239[1];
		x482 = new $Uint64(0, 0);
		x483 = new $Uint64(0, 0);
		_tuple$240 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x483 = _tuple$240[0];
		x482 = _tuple$240[1];
		x484 = new $Uint64(0, 0);
		x485 = new $Uint64(0, 0);
		_tuple$241 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x485 = _tuple$241[0];
		x484 = _tuple$241[1];
		x486 = new $Uint64(0, 0);
		x487 = new $Uint64(0, 0);
		_tuple$242 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x487 = _tuple$242[0];
		x486 = _tuple$242[1];
		x488 = new $Uint64(0, 0);
		x489 = new $Uint64(0, 0);
		_tuple$243 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x489 = _tuple$243[0];
		x488 = _tuple$243[1];
		x490 = new $Uint64(0, 0);
		x491 = new $Uint64(0, 0);
		_tuple$244 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x491 = _tuple$244[0];
		x490 = _tuple$244[1];
		x492 = new $Uint64(0, 0);
		x493 = new $Uint64(0, 0);
		_tuple$245 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x493 = _tuple$245[0];
		x492 = _tuple$245[1];
		x494 = new $Uint64(0, 0);
		x495 = new $Uint64(0, 0);
		_tuple$246 = bits.Mul64(x462, new $Uint64(4294967295, 4294967295));
		x495 = _tuple$246[0];
		x494 = _tuple$246[1];
		x496 = new $Uint64(0, 0);
		x497 = new $Uint64(0, 0);
		_tuple$247 = bits.Add64(x495, x492, new $Uint64(0, 0));
		x496 = _tuple$247[0];
		x497 = _tuple$247[1];
		x498 = new $Uint64(0, 0);
		x499 = new $Uint64(0, 0);
		_tuple$248 = bits.Add64(x493, x490, ((x$202 = (new p521Uint1(x497.$high, x497.$low)), new $Uint64(x$202.$high, x$202.$low))));
		x498 = _tuple$248[0];
		x499 = _tuple$248[1];
		x500 = new $Uint64(0, 0);
		x501 = new $Uint64(0, 0);
		_tuple$249 = bits.Add64(x491, x488, ((x$203 = (new p521Uint1(x499.$high, x499.$low)), new $Uint64(x$203.$high, x$203.$low))));
		x500 = _tuple$249[0];
		x501 = _tuple$249[1];
		x502 = new $Uint64(0, 0);
		x503 = new $Uint64(0, 0);
		_tuple$250 = bits.Add64(x489, x486, ((x$204 = (new p521Uint1(x501.$high, x501.$low)), new $Uint64(x$204.$high, x$204.$low))));
		x502 = _tuple$250[0];
		x503 = _tuple$250[1];
		x504 = new $Uint64(0, 0);
		x505 = new $Uint64(0, 0);
		_tuple$251 = bits.Add64(x487, x484, ((x$205 = (new p521Uint1(x503.$high, x503.$low)), new $Uint64(x$205.$high, x$205.$low))));
		x504 = _tuple$251[0];
		x505 = _tuple$251[1];
		x506 = new $Uint64(0, 0);
		x507 = new $Uint64(0, 0);
		_tuple$252 = bits.Add64(x485, x482, ((x$206 = (new p521Uint1(x505.$high, x505.$low)), new $Uint64(x$206.$high, x$206.$low))));
		x506 = _tuple$252[0];
		x507 = _tuple$252[1];
		x508 = new $Uint64(0, 0);
		x509 = new $Uint64(0, 0);
		_tuple$253 = bits.Add64(x483, x480, ((x$207 = (new p521Uint1(x507.$high, x507.$low)), new $Uint64(x$207.$high, x$207.$low))));
		x508 = _tuple$253[0];
		x509 = _tuple$253[1];
		x510 = new $Uint64(0, 0);
		x511 = new $Uint64(0, 0);
		_tuple$254 = bits.Add64(x481, x478, ((x$208 = (new p521Uint1(x509.$high, x509.$low)), new $Uint64(x$208.$high, x$208.$low))));
		x510 = _tuple$254[0];
		x511 = _tuple$254[1];
		x513 = new $Uint64(0, 0);
		_tuple$255 = bits.Add64(x462, x494, new $Uint64(0, 0));
		x513 = _tuple$255[1];
		x514 = new $Uint64(0, 0);
		x515 = new $Uint64(0, 0);
		_tuple$256 = bits.Add64(x464, x496, ((x$209 = (new p521Uint1(x513.$high, x513.$low)), new $Uint64(x$209.$high, x$209.$low))));
		x514 = _tuple$256[0];
		x515 = _tuple$256[1];
		x516 = new $Uint64(0, 0);
		x517 = new $Uint64(0, 0);
		_tuple$257 = bits.Add64(x466, x498, ((x$210 = (new p521Uint1(x515.$high, x515.$low)), new $Uint64(x$210.$high, x$210.$low))));
		x516 = _tuple$257[0];
		x517 = _tuple$257[1];
		x518 = new $Uint64(0, 0);
		x519 = new $Uint64(0, 0);
		_tuple$258 = bits.Add64(x468, x500, ((x$211 = (new p521Uint1(x517.$high, x517.$low)), new $Uint64(x$211.$high, x$211.$low))));
		x518 = _tuple$258[0];
		x519 = _tuple$258[1];
		x520 = new $Uint64(0, 0);
		x521 = new $Uint64(0, 0);
		_tuple$259 = bits.Add64(x470, x502, ((x$212 = (new p521Uint1(x519.$high, x519.$low)), new $Uint64(x$212.$high, x$212.$low))));
		x520 = _tuple$259[0];
		x521 = _tuple$259[1];
		x522 = new $Uint64(0, 0);
		x523 = new $Uint64(0, 0);
		_tuple$260 = bits.Add64(x472, x504, ((x$213 = (new p521Uint1(x521.$high, x521.$low)), new $Uint64(x$213.$high, x$213.$low))));
		x522 = _tuple$260[0];
		x523 = _tuple$260[1];
		x524 = new $Uint64(0, 0);
		x525 = new $Uint64(0, 0);
		_tuple$261 = bits.Add64(x474, x506, ((x$214 = (new p521Uint1(x523.$high, x523.$low)), new $Uint64(x$214.$high, x$214.$low))));
		x524 = _tuple$261[0];
		x525 = _tuple$261[1];
		x526 = new $Uint64(0, 0);
		x527 = new $Uint64(0, 0);
		_tuple$262 = bits.Add64(x476, x508, ((x$215 = (new p521Uint1(x525.$high, x525.$low)), new $Uint64(x$215.$high, x$215.$low))));
		x526 = _tuple$262[0];
		x527 = _tuple$262[1];
		x528 = new $Uint64(0, 0);
		x529 = new $Uint64(0, 0);
		_tuple$263 = bits.Add64((x$216 = ((x$217 = (new p521Uint1(x477.$high, x477.$low)), new $Uint64(x$217.$high, x$217.$low))), x$218 = (x$219 = ((x$220 = (new p521Uint1(x461.$high, x461.$low)), new $Uint64(x$220.$high, x$220.$low))), x$221 = (x$222 = ((x$223 = (new p521Uint1(x443.$high, x443.$low)), new $Uint64(x$223.$high, x$223.$low))), new $Uint64(x$222.$high + x411.$high, x$222.$low + x411.$low)), new $Uint64(x$219.$high + x$221.$high, x$219.$low + x$221.$low)), new $Uint64(x$216.$high + x$218.$high, x$216.$low + x$218.$low)), x510, ((x$224 = (new p521Uint1(x527.$high, x527.$low)), new $Uint64(x$224.$high, x$224.$low))));
		x528 = _tuple$263[0];
		x529 = _tuple$263[1];
		x530 = new $Uint64(0, 0);
		x531 = new $Uint64(0, 0);
		_tuple$264 = bits.Add64(x514, arg1[8], new $Uint64(0, 0));
		x530 = _tuple$264[0];
		x531 = _tuple$264[1];
		x532 = new $Uint64(0, 0);
		x533 = new $Uint64(0, 0);
		_tuple$265 = bits.Add64(x516, new $Uint64(0, 0), ((x$225 = (new p521Uint1(x531.$high, x531.$low)), new $Uint64(x$225.$high, x$225.$low))));
		x532 = _tuple$265[0];
		x533 = _tuple$265[1];
		x534 = new $Uint64(0, 0);
		x535 = new $Uint64(0, 0);
		_tuple$266 = bits.Add64(x518, new $Uint64(0, 0), ((x$226 = (new p521Uint1(x533.$high, x533.$low)), new $Uint64(x$226.$high, x$226.$low))));
		x534 = _tuple$266[0];
		x535 = _tuple$266[1];
		x536 = new $Uint64(0, 0);
		x537 = new $Uint64(0, 0);
		_tuple$267 = bits.Add64(x520, new $Uint64(0, 0), ((x$227 = (new p521Uint1(x535.$high, x535.$low)), new $Uint64(x$227.$high, x$227.$low))));
		x536 = _tuple$267[0];
		x537 = _tuple$267[1];
		x538 = new $Uint64(0, 0);
		x539 = new $Uint64(0, 0);
		_tuple$268 = bits.Add64(x522, new $Uint64(0, 0), ((x$228 = (new p521Uint1(x537.$high, x537.$low)), new $Uint64(x$228.$high, x$228.$low))));
		x538 = _tuple$268[0];
		x539 = _tuple$268[1];
		x540 = new $Uint64(0, 0);
		x541 = new $Uint64(0, 0);
		_tuple$269 = bits.Add64(x524, new $Uint64(0, 0), ((x$229 = (new p521Uint1(x539.$high, x539.$low)), new $Uint64(x$229.$high, x$229.$low))));
		x540 = _tuple$269[0];
		x541 = _tuple$269[1];
		x542 = new $Uint64(0, 0);
		x543 = new $Uint64(0, 0);
		_tuple$270 = bits.Add64(x526, new $Uint64(0, 0), ((x$230 = (new p521Uint1(x541.$high, x541.$low)), new $Uint64(x$230.$high, x$230.$low))));
		x542 = _tuple$270[0];
		x543 = _tuple$270[1];
		x544 = new $Uint64(0, 0);
		x545 = new $Uint64(0, 0);
		_tuple$271 = bits.Add64(x528, new $Uint64(0, 0), ((x$231 = (new p521Uint1(x543.$high, x543.$low)), new $Uint64(x$231.$high, x$231.$low))));
		x544 = _tuple$271[0];
		x545 = _tuple$271[1];
		x546 = new $Uint64(0, 0);
		x547 = new $Uint64(0, 0);
		_tuple$272 = bits.Mul64(x530, new $Uint64(0, 511));
		x547 = _tuple$272[0];
		x546 = _tuple$272[1];
		x548 = new $Uint64(0, 0);
		x549 = new $Uint64(0, 0);
		_tuple$273 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x549 = _tuple$273[0];
		x548 = _tuple$273[1];
		x550 = new $Uint64(0, 0);
		x551 = new $Uint64(0, 0);
		_tuple$274 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x551 = _tuple$274[0];
		x550 = _tuple$274[1];
		x552 = new $Uint64(0, 0);
		x553 = new $Uint64(0, 0);
		_tuple$275 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x553 = _tuple$275[0];
		x552 = _tuple$275[1];
		x554 = new $Uint64(0, 0);
		x555 = new $Uint64(0, 0);
		_tuple$276 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x555 = _tuple$276[0];
		x554 = _tuple$276[1];
		x556 = new $Uint64(0, 0);
		x557 = new $Uint64(0, 0);
		_tuple$277 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x557 = _tuple$277[0];
		x556 = _tuple$277[1];
		x558 = new $Uint64(0, 0);
		x559 = new $Uint64(0, 0);
		_tuple$278 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x559 = _tuple$278[0];
		x558 = _tuple$278[1];
		x560 = new $Uint64(0, 0);
		x561 = new $Uint64(0, 0);
		_tuple$279 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x561 = _tuple$279[0];
		x560 = _tuple$279[1];
		x562 = new $Uint64(0, 0);
		x563 = new $Uint64(0, 0);
		_tuple$280 = bits.Mul64(x530, new $Uint64(4294967295, 4294967295));
		x563 = _tuple$280[0];
		x562 = _tuple$280[1];
		x564 = new $Uint64(0, 0);
		x565 = new $Uint64(0, 0);
		_tuple$281 = bits.Add64(x563, x560, new $Uint64(0, 0));
		x564 = _tuple$281[0];
		x565 = _tuple$281[1];
		x566 = new $Uint64(0, 0);
		x567 = new $Uint64(0, 0);
		_tuple$282 = bits.Add64(x561, x558, ((x$232 = (new p521Uint1(x565.$high, x565.$low)), new $Uint64(x$232.$high, x$232.$low))));
		x566 = _tuple$282[0];
		x567 = _tuple$282[1];
		x568 = new $Uint64(0, 0);
		x569 = new $Uint64(0, 0);
		_tuple$283 = bits.Add64(x559, x556, ((x$233 = (new p521Uint1(x567.$high, x567.$low)), new $Uint64(x$233.$high, x$233.$low))));
		x568 = _tuple$283[0];
		x569 = _tuple$283[1];
		x570 = new $Uint64(0, 0);
		x571 = new $Uint64(0, 0);
		_tuple$284 = bits.Add64(x557, x554, ((x$234 = (new p521Uint1(x569.$high, x569.$low)), new $Uint64(x$234.$high, x$234.$low))));
		x570 = _tuple$284[0];
		x571 = _tuple$284[1];
		x572 = new $Uint64(0, 0);
		x573 = new $Uint64(0, 0);
		_tuple$285 = bits.Add64(x555, x552, ((x$235 = (new p521Uint1(x571.$high, x571.$low)), new $Uint64(x$235.$high, x$235.$low))));
		x572 = _tuple$285[0];
		x573 = _tuple$285[1];
		x574 = new $Uint64(0, 0);
		x575 = new $Uint64(0, 0);
		_tuple$286 = bits.Add64(x553, x550, ((x$236 = (new p521Uint1(x573.$high, x573.$low)), new $Uint64(x$236.$high, x$236.$low))));
		x574 = _tuple$286[0];
		x575 = _tuple$286[1];
		x576 = new $Uint64(0, 0);
		x577 = new $Uint64(0, 0);
		_tuple$287 = bits.Add64(x551, x548, ((x$237 = (new p521Uint1(x575.$high, x575.$low)), new $Uint64(x$237.$high, x$237.$low))));
		x576 = _tuple$287[0];
		x577 = _tuple$287[1];
		x578 = new $Uint64(0, 0);
		x579 = new $Uint64(0, 0);
		_tuple$288 = bits.Add64(x549, x546, ((x$238 = (new p521Uint1(x577.$high, x577.$low)), new $Uint64(x$238.$high, x$238.$low))));
		x578 = _tuple$288[0];
		x579 = _tuple$288[1];
		x581 = new $Uint64(0, 0);
		_tuple$289 = bits.Add64(x530, x562, new $Uint64(0, 0));
		x581 = _tuple$289[1];
		x582 = new $Uint64(0, 0);
		x583 = new $Uint64(0, 0);
		_tuple$290 = bits.Add64(x532, x564, ((x$239 = (new p521Uint1(x581.$high, x581.$low)), new $Uint64(x$239.$high, x$239.$low))));
		x582 = _tuple$290[0];
		x583 = _tuple$290[1];
		x584 = new $Uint64(0, 0);
		x585 = new $Uint64(0, 0);
		_tuple$291 = bits.Add64(x534, x566, ((x$240 = (new p521Uint1(x583.$high, x583.$low)), new $Uint64(x$240.$high, x$240.$low))));
		x584 = _tuple$291[0];
		x585 = _tuple$291[1];
		x586 = new $Uint64(0, 0);
		x587 = new $Uint64(0, 0);
		_tuple$292 = bits.Add64(x536, x568, ((x$241 = (new p521Uint1(x585.$high, x585.$low)), new $Uint64(x$241.$high, x$241.$low))));
		x586 = _tuple$292[0];
		x587 = _tuple$292[1];
		x588 = new $Uint64(0, 0);
		x589 = new $Uint64(0, 0);
		_tuple$293 = bits.Add64(x538, x570, ((x$242 = (new p521Uint1(x587.$high, x587.$low)), new $Uint64(x$242.$high, x$242.$low))));
		x588 = _tuple$293[0];
		x589 = _tuple$293[1];
		x590 = new $Uint64(0, 0);
		x591 = new $Uint64(0, 0);
		_tuple$294 = bits.Add64(x540, x572, ((x$243 = (new p521Uint1(x589.$high, x589.$low)), new $Uint64(x$243.$high, x$243.$low))));
		x590 = _tuple$294[0];
		x591 = _tuple$294[1];
		x592 = new $Uint64(0, 0);
		x593 = new $Uint64(0, 0);
		_tuple$295 = bits.Add64(x542, x574, ((x$244 = (new p521Uint1(x591.$high, x591.$low)), new $Uint64(x$244.$high, x$244.$low))));
		x592 = _tuple$295[0];
		x593 = _tuple$295[1];
		x594 = new $Uint64(0, 0);
		x595 = new $Uint64(0, 0);
		_tuple$296 = bits.Add64(x544, x576, ((x$245 = (new p521Uint1(x593.$high, x593.$low)), new $Uint64(x$245.$high, x$245.$low))));
		x594 = _tuple$296[0];
		x595 = _tuple$296[1];
		x596 = new $Uint64(0, 0);
		x597 = new $Uint64(0, 0);
		_tuple$297 = bits.Add64((x$246 = ((x$247 = (new p521Uint1(x545.$high, x545.$low)), new $Uint64(x$247.$high, x$247.$low))), x$248 = (x$249 = ((x$250 = (new p521Uint1(x529.$high, x529.$low)), new $Uint64(x$250.$high, x$250.$low))), x$251 = (x$252 = ((x$253 = (new p521Uint1(x511.$high, x511.$low)), new $Uint64(x$253.$high, x$253.$low))), new $Uint64(x$252.$high + x479.$high, x$252.$low + x479.$low)), new $Uint64(x$249.$high + x$251.$high, x$249.$low + x$251.$low)), new $Uint64(x$246.$high + x$248.$high, x$246.$low + x$248.$low)), x578, ((x$254 = (new p521Uint1(x595.$high, x595.$low)), new $Uint64(x$254.$high, x$254.$low))));
		x596 = _tuple$297[0];
		x597 = _tuple$297[1];
		x598 = (x$255 = ((x$256 = (new p521Uint1(x597.$high, x597.$low)), new $Uint64(x$256.$high, x$256.$low))), x$257 = (x$258 = ((x$259 = (new p521Uint1(x579.$high, x579.$low)), new $Uint64(x$259.$high, x$259.$low))), new $Uint64(x$258.$high + x547.$high, x$258.$low + x547.$low)), new $Uint64(x$255.$high + x$257.$high, x$255.$low + x$257.$low));
		x599 = new $Uint64(0, 0);
		x600 = new $Uint64(0, 0);
		_tuple$298 = bits.Sub64(x582, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x599 = _tuple$298[0];
		x600 = _tuple$298[1];
		x601 = new $Uint64(0, 0);
		x602 = new $Uint64(0, 0);
		_tuple$299 = bits.Sub64(x584, new $Uint64(4294967295, 4294967295), ((x$260 = (new p521Uint1(x600.$high, x600.$low)), new $Uint64(x$260.$high, x$260.$low))));
		x601 = _tuple$299[0];
		x602 = _tuple$299[1];
		x603 = new $Uint64(0, 0);
		x604 = new $Uint64(0, 0);
		_tuple$300 = bits.Sub64(x586, new $Uint64(4294967295, 4294967295), ((x$261 = (new p521Uint1(x602.$high, x602.$low)), new $Uint64(x$261.$high, x$261.$low))));
		x603 = _tuple$300[0];
		x604 = _tuple$300[1];
		x605 = new $Uint64(0, 0);
		x606 = new $Uint64(0, 0);
		_tuple$301 = bits.Sub64(x588, new $Uint64(4294967295, 4294967295), ((x$262 = (new p521Uint1(x604.$high, x604.$low)), new $Uint64(x$262.$high, x$262.$low))));
		x605 = _tuple$301[0];
		x606 = _tuple$301[1];
		x607 = new $Uint64(0, 0);
		x608 = new $Uint64(0, 0);
		_tuple$302 = bits.Sub64(x590, new $Uint64(4294967295, 4294967295), ((x$263 = (new p521Uint1(x606.$high, x606.$low)), new $Uint64(x$263.$high, x$263.$low))));
		x607 = _tuple$302[0];
		x608 = _tuple$302[1];
		x609 = new $Uint64(0, 0);
		x610 = new $Uint64(0, 0);
		_tuple$303 = bits.Sub64(x592, new $Uint64(4294967295, 4294967295), ((x$264 = (new p521Uint1(x608.$high, x608.$low)), new $Uint64(x$264.$high, x$264.$low))));
		x609 = _tuple$303[0];
		x610 = _tuple$303[1];
		x611 = new $Uint64(0, 0);
		x612 = new $Uint64(0, 0);
		_tuple$304 = bits.Sub64(x594, new $Uint64(4294967295, 4294967295), ((x$265 = (new p521Uint1(x610.$high, x610.$low)), new $Uint64(x$265.$high, x$265.$low))));
		x611 = _tuple$304[0];
		x612 = _tuple$304[1];
		x613 = new $Uint64(0, 0);
		x614 = new $Uint64(0, 0);
		_tuple$305 = bits.Sub64(x596, new $Uint64(4294967295, 4294967295), ((x$266 = (new p521Uint1(x612.$high, x612.$low)), new $Uint64(x$266.$high, x$266.$low))));
		x613 = _tuple$305[0];
		x614 = _tuple$305[1];
		x615 = new $Uint64(0, 0);
		x616 = new $Uint64(0, 0);
		_tuple$306 = bits.Sub64(x598, new $Uint64(0, 511), ((x$267 = (new p521Uint1(x614.$high, x614.$low)), new $Uint64(x$267.$high, x$267.$low))));
		x615 = _tuple$306[0];
		x616 = _tuple$306[1];
		x618 = new $Uint64(0, 0);
		_tuple$307 = bits.Sub64(new $Uint64(0, 0), new $Uint64(0, 0), ((x$268 = (new p521Uint1(x616.$high, x616.$low)), new $Uint64(x$268.$high, x$268.$low))));
		x618 = _tuple$307[1];
		x619 = new $Uint64(0, 0);
		p521CmovznzU64((x619$24ptr || (x619$24ptr = new ptrType(function() { return x619; }, function($v) { x619 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x599, x582);
		x620 = new $Uint64(0, 0);
		p521CmovznzU64((x620$24ptr || (x620$24ptr = new ptrType(function() { return x620; }, function($v) { x620 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x601, x584);
		x621 = new $Uint64(0, 0);
		p521CmovznzU64((x621$24ptr || (x621$24ptr = new ptrType(function() { return x621; }, function($v) { x621 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x603, x586);
		x622 = new $Uint64(0, 0);
		p521CmovznzU64((x622$24ptr || (x622$24ptr = new ptrType(function() { return x622; }, function($v) { x622 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x605, x588);
		x623 = new $Uint64(0, 0);
		p521CmovznzU64((x623$24ptr || (x623$24ptr = new ptrType(function() { return x623; }, function($v) { x623 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x607, x590);
		x624 = new $Uint64(0, 0);
		p521CmovznzU64((x624$24ptr || (x624$24ptr = new ptrType(function() { return x624; }, function($v) { x624 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x609, x592);
		x625 = new $Uint64(0, 0);
		p521CmovznzU64((x625$24ptr || (x625$24ptr = new ptrType(function() { return x625; }, function($v) { x625 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x611, x594);
		x626 = new $Uint64(0, 0);
		p521CmovznzU64((x626$24ptr || (x626$24ptr = new ptrType(function() { return x626; }, function($v) { x626 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x613, x596);
		x627 = new $Uint64(0, 0);
		p521CmovznzU64((x627$24ptr || (x627$24ptr = new ptrType(function() { return x627; }, function($v) { x627 = $v; }))), (new p521Uint1(x618.$high, x618.$low)), x615, x598);
		out1.nilCheck, out1[0] = x619;
		out1.nilCheck, out1[1] = x620;
		out1.nilCheck, out1[2] = x621;
		out1.nilCheck, out1[3] = x622;
		out1.nilCheck, out1[4] = x623;
		out1.nilCheck, out1[5] = x624;
		out1.nilCheck, out1[6] = x625;
		out1.nilCheck, out1[7] = x626;
		out1.nilCheck, out1[8] = x627;
	};
	p521ToMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$222, _tuple$223, _tuple$224, _tuple$225, _tuple$226, _tuple$227, _tuple$228, _tuple$229, _tuple$23, _tuple$230, _tuple$231, _tuple$232, _tuple$233, _tuple$234, _tuple$235, _tuple$236, _tuple$237, _tuple$238, _tuple$239, _tuple$24, _tuple$240, _tuple$241, _tuple$242, _tuple$243, _tuple$244, _tuple$245, _tuple$246, _tuple$247, _tuple$248, _tuple$249, _tuple$25, _tuple$250, _tuple$251, _tuple$252, _tuple$253, _tuple$254, _tuple$255, _tuple$256, _tuple$257, _tuple$258, _tuple$259, _tuple$26, _tuple$260, _tuple$261, _tuple$262, _tuple$263, _tuple$264, _tuple$265, _tuple$266, _tuple$267, _tuple$268, _tuple$269, _tuple$27, _tuple$270, _tuple$271, _tuple$272, _tuple$273, _tuple$274, _tuple$275, _tuple$276, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x178, x179, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x31, x310, x311, x312, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x36, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x38, x380, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x410, x411, x412, x413, x414, x415, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x439, x44, x440, x441, x442, x443, x444, x445, x446, x447, x448, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x466, x467, x468, x469, x47, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x48, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x49, x490, x491, x492, x493, x494, x495, x496, x497, x498, x499, x5, x50, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x51, x510, x511, x512, x513, x514, x515, x516, x518, x519, x52, x520, x521, x522, x523, x524, x525, x526, x527, x528, x529, x53, x530, x531, x532, x533, x534, x535, x536, x537, x538, x539, x54, x540, x541, x542, x543, x544, x545, x546, x547, x548, x549, x55, x550, x551, x552, x553, x555, x556, x556$24ptr, x557, x557$24ptr, x558, x558$24ptr, x559, x559$24ptr, x56, x560, x560$24ptr, x561, x561$24ptr, x562, x562$24ptr, x563, x563$24ptr, x564, x564$24ptr, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Mul64(arg1[0], new $Uint64(16384, 0));
		x2 = _tuple[0];
		x1 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(arg1[1], new $Uint64(16384, 0));
		x4 = _tuple$1[0];
		x3 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Add64(x2, x3, new $Uint64(0, 0));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x1, new $Uint64(0, 511));
		x8 = _tuple$3[0];
		x7 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x10 = _tuple$4[0];
		x9 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x12 = _tuple$5[0];
		x11 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x14 = _tuple$6[0];
		x13 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x16 = _tuple$7[0];
		x15 = _tuple$7[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x18 = _tuple$8[0];
		x17 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x20 = _tuple$9[0];
		x19 = _tuple$9[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$10 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x22 = _tuple$10[0];
		x21 = _tuple$10[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$11 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x24 = _tuple$11[0];
		x23 = _tuple$11[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x24, x21, new $Uint64(0, 0));
		x25 = _tuple$12[0];
		x26 = _tuple$12[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x22, x19, ((x = (new p521Uint1(x26.$high, x26.$low)), new $Uint64(x.$high, x.$low))));
		x27 = _tuple$13[0];
		x28 = _tuple$13[1];
		x29 = new $Uint64(0, 0);
		x30 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x20, x17, ((x$1 = (new p521Uint1(x28.$high, x28.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x29 = _tuple$14[0];
		x30 = _tuple$14[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x18, x15, ((x$2 = (new p521Uint1(x30.$high, x30.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x31 = _tuple$15[0];
		x32 = _tuple$15[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x16, x13, ((x$3 = (new p521Uint1(x32.$high, x32.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x33 = _tuple$16[0];
		x34 = _tuple$16[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x14, x11, ((x$4 = (new p521Uint1(x34.$high, x34.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x35 = _tuple$17[0];
		x36 = _tuple$17[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(x12, x9, ((x$5 = (new p521Uint1(x36.$high, x36.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x37 = _tuple$18[0];
		x38 = _tuple$18[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x10, x7, ((x$6 = (new p521Uint1(x38.$high, x38.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x39 = _tuple$19[0];
		x40 = _tuple$19[1];
		x42 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x1, x23, new $Uint64(0, 0));
		x42 = _tuple$20[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x5, x25, ((x$7 = (new p521Uint1(x42.$high, x42.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x43 = _tuple$21[0];
		x44 = _tuple$21[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64((x$8 = ((x$9 = (new p521Uint1(x6.$high, x6.$low)), new $Uint64(x$9.$high, x$9.$low))), new $Uint64(x$8.$high + x4.$high, x$8.$low + x4.$low)), x27, ((x$10 = (new p521Uint1(x44.$high, x44.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x45 = _tuple$22[0];
		x46 = _tuple$22[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(new $Uint64(0, 0), x29, ((x$11 = (new p521Uint1(x46.$high, x46.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x47 = _tuple$23[0];
		x48 = _tuple$23[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(new $Uint64(0, 0), x31, ((x$12 = (new p521Uint1(x48.$high, x48.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x49 = _tuple$24[0];
		x50 = _tuple$24[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(new $Uint64(0, 0), x33, ((x$13 = (new p521Uint1(x50.$high, x50.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x51 = _tuple$25[0];
		x52 = _tuple$25[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(new $Uint64(0, 0), x35, ((x$14 = (new p521Uint1(x52.$high, x52.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x53 = _tuple$26[0];
		x54 = _tuple$26[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(new $Uint64(0, 0), x37, ((x$15 = (new p521Uint1(x54.$high, x54.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x55 = _tuple$27[0];
		x56 = _tuple$27[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(new $Uint64(0, 0), x39, ((x$16 = (new p521Uint1(x56.$high, x56.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x57 = _tuple$28[0];
		x58 = _tuple$28[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(arg1[2], new $Uint64(16384, 0));
		x60 = _tuple$29[0];
		x59 = _tuple$29[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x45, x59, new $Uint64(0, 0));
		x61 = _tuple$30[0];
		x62 = _tuple$30[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x47, x60, ((x$17 = (new p521Uint1(x62.$high, x62.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x63 = _tuple$31[0];
		x64 = _tuple$31[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x49, new $Uint64(0, 0), ((x$18 = (new p521Uint1(x64.$high, x64.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x65 = _tuple$32[0];
		x66 = _tuple$32[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x51, new $Uint64(0, 0), ((x$19 = (new p521Uint1(x66.$high, x66.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x67 = _tuple$33[0];
		x68 = _tuple$33[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x53, new $Uint64(0, 0), ((x$20 = (new p521Uint1(x68.$high, x68.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x69 = _tuple$34[0];
		x70 = _tuple$34[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x55, new $Uint64(0, 0), ((x$21 = (new p521Uint1(x70.$high, x70.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x71 = _tuple$35[0];
		x72 = _tuple$35[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x57, new $Uint64(0, 0), ((x$22 = (new p521Uint1(x72.$high, x72.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x73 = _tuple$36[0];
		x74 = _tuple$36[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$37 = bits.Mul64(x43, new $Uint64(0, 511));
		x76 = _tuple$37[0];
		x75 = _tuple$37[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x78 = _tuple$38[0];
		x77 = _tuple$38[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x80 = _tuple$39[0];
		x79 = _tuple$39[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x82 = _tuple$40[0];
		x81 = _tuple$40[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x84 = _tuple$41[0];
		x83 = _tuple$41[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x86 = _tuple$42[0];
		x85 = _tuple$42[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$43 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x88 = _tuple$43[0];
		x87 = _tuple$43[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x90 = _tuple$44[0];
		x89 = _tuple$44[1];
		x91 = new $Uint64(0, 0);
		x92 = new $Uint64(0, 0);
		_tuple$45 = bits.Mul64(x43, new $Uint64(4294967295, 4294967295));
		x92 = _tuple$45[0];
		x91 = _tuple$45[1];
		x93 = new $Uint64(0, 0);
		x94 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x92, x89, new $Uint64(0, 0));
		x93 = _tuple$46[0];
		x94 = _tuple$46[1];
		x95 = new $Uint64(0, 0);
		x96 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x90, x87, ((x$23 = (new p521Uint1(x94.$high, x94.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x95 = _tuple$47[0];
		x96 = _tuple$47[1];
		x97 = new $Uint64(0, 0);
		x98 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x88, x85, ((x$24 = (new p521Uint1(x96.$high, x96.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x97 = _tuple$48[0];
		x98 = _tuple$48[1];
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x86, x83, ((x$25 = (new p521Uint1(x98.$high, x98.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x99 = _tuple$49[0];
		x100 = _tuple$49[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x84, x81, ((x$26 = (new p521Uint1(x100.$high, x100.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x101 = _tuple$50[0];
		x102 = _tuple$50[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x82, x79, ((x$27 = (new p521Uint1(x102.$high, x102.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x103 = _tuple$51[0];
		x104 = _tuple$51[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x80, x77, ((x$28 = (new p521Uint1(x104.$high, x104.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x105 = _tuple$52[0];
		x106 = _tuple$52[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x78, x75, ((x$29 = (new p521Uint1(x106.$high, x106.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x107 = _tuple$53[0];
		x108 = _tuple$53[1];
		x110 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x43, x91, new $Uint64(0, 0));
		x110 = _tuple$54[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x61, x93, ((x$30 = (new p521Uint1(x110.$high, x110.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x111 = _tuple$55[0];
		x112 = _tuple$55[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x63, x95, ((x$31 = (new p521Uint1(x112.$high, x112.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x113 = _tuple$56[0];
		x114 = _tuple$56[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x65, x97, ((x$32 = (new p521Uint1(x114.$high, x114.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x115 = _tuple$57[0];
		x116 = _tuple$57[1];
		x117 = new $Uint64(0, 0);
		x118 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x67, x99, ((x$33 = (new p521Uint1(x116.$high, x116.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x117 = _tuple$58[0];
		x118 = _tuple$58[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x69, x101, ((x$34 = (new p521Uint1(x118.$high, x118.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x119 = _tuple$59[0];
		x120 = _tuple$59[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x71, x103, ((x$35 = (new p521Uint1(x120.$high, x120.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x121 = _tuple$60[0];
		x122 = _tuple$60[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x73, x105, ((x$36 = (new p521Uint1(x122.$high, x122.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x123 = _tuple$61[0];
		x124 = _tuple$61[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64((x$37 = ((x$38 = (new p521Uint1(x74.$high, x74.$low)), new $Uint64(x$38.$high, x$38.$low))), x$39 = (x$40 = ((x$41 = (new p521Uint1(x58.$high, x58.$low)), new $Uint64(x$41.$high, x$41.$low))), x$42 = (x$43 = ((x$44 = (new p521Uint1(x40.$high, x40.$low)), new $Uint64(x$44.$high, x$44.$low))), new $Uint64(x$43.$high + x8.$high, x$43.$low + x8.$low)), new $Uint64(x$40.$high + x$42.$high, x$40.$low + x$42.$low)), new $Uint64(x$37.$high + x$39.$high, x$37.$low + x$39.$low)), x107, ((x$45 = (new p521Uint1(x124.$high, x124.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x125 = _tuple$62[0];
		x126 = _tuple$62[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$63 = bits.Mul64(arg1[3], new $Uint64(16384, 0));
		x128 = _tuple$63[0];
		x127 = _tuple$63[1];
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x113, x127, new $Uint64(0, 0));
		x129 = _tuple$64[0];
		x130 = _tuple$64[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x115, x128, ((x$46 = (new p521Uint1(x130.$high, x130.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x131 = _tuple$65[0];
		x132 = _tuple$65[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x117, new $Uint64(0, 0), ((x$47 = (new p521Uint1(x132.$high, x132.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x133 = _tuple$66[0];
		x134 = _tuple$66[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x119, new $Uint64(0, 0), ((x$48 = (new p521Uint1(x134.$high, x134.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x135 = _tuple$67[0];
		x136 = _tuple$67[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x121, new $Uint64(0, 0), ((x$49 = (new p521Uint1(x136.$high, x136.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x137 = _tuple$68[0];
		x138 = _tuple$68[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x123, new $Uint64(0, 0), ((x$50 = (new p521Uint1(x138.$high, x138.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x139 = _tuple$69[0];
		x140 = _tuple$69[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x125, new $Uint64(0, 0), ((x$51 = (new p521Uint1(x140.$high, x140.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x141 = _tuple$70[0];
		x142 = _tuple$70[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x111, new $Uint64(0, 511));
		x144 = _tuple$71[0];
		x143 = _tuple$71[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x146 = _tuple$72[0];
		x145 = _tuple$72[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$73 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x148 = _tuple$73[0];
		x147 = _tuple$73[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$74 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x150 = _tuple$74[0];
		x149 = _tuple$74[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x152 = _tuple$75[0];
		x151 = _tuple$75[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x154 = _tuple$76[0];
		x153 = _tuple$76[1];
		x155 = new $Uint64(0, 0);
		x156 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x156 = _tuple$77[0];
		x155 = _tuple$77[1];
		x157 = new $Uint64(0, 0);
		x158 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x158 = _tuple$78[0];
		x157 = _tuple$78[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x111, new $Uint64(4294967295, 4294967295));
		x160 = _tuple$79[0];
		x159 = _tuple$79[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x160, x157, new $Uint64(0, 0));
		x161 = _tuple$80[0];
		x162 = _tuple$80[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x158, x155, ((x$52 = (new p521Uint1(x162.$high, x162.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x163 = _tuple$81[0];
		x164 = _tuple$81[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x156, x153, ((x$53 = (new p521Uint1(x164.$high, x164.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x165 = _tuple$82[0];
		x166 = _tuple$82[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x154, x151, ((x$54 = (new p521Uint1(x166.$high, x166.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x167 = _tuple$83[0];
		x168 = _tuple$83[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x152, x149, ((x$55 = (new p521Uint1(x168.$high, x168.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x169 = _tuple$84[0];
		x170 = _tuple$84[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x150, x147, ((x$56 = (new p521Uint1(x170.$high, x170.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x171 = _tuple$85[0];
		x172 = _tuple$85[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x148, x145, ((x$57 = (new p521Uint1(x172.$high, x172.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x173 = _tuple$86[0];
		x174 = _tuple$86[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x146, x143, ((x$58 = (new p521Uint1(x174.$high, x174.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x175 = _tuple$87[0];
		x176 = _tuple$87[1];
		x178 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x111, x159, new $Uint64(0, 0));
		x178 = _tuple$88[1];
		x179 = new $Uint64(0, 0);
		x180 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x129, x161, ((x$59 = (new p521Uint1(x178.$high, x178.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x179 = _tuple$89[0];
		x180 = _tuple$89[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x131, x163, ((x$60 = (new p521Uint1(x180.$high, x180.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x181 = _tuple$90[0];
		x182 = _tuple$90[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x133, x165, ((x$61 = (new p521Uint1(x182.$high, x182.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x183 = _tuple$91[0];
		x184 = _tuple$91[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x135, x167, ((x$62 = (new p521Uint1(x184.$high, x184.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x185 = _tuple$92[0];
		x186 = _tuple$92[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64(x137, x169, ((x$63 = (new p521Uint1(x186.$high, x186.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x187 = _tuple$93[0];
		x188 = _tuple$93[1];
		x189 = new $Uint64(0, 0);
		x190 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x139, x171, ((x$64 = (new p521Uint1(x188.$high, x188.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x189 = _tuple$94[0];
		x190 = _tuple$94[1];
		x191 = new $Uint64(0, 0);
		x192 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x141, x173, ((x$65 = (new p521Uint1(x190.$high, x190.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x191 = _tuple$95[0];
		x192 = _tuple$95[1];
		x193 = new $Uint64(0, 0);
		x194 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64((x$66 = ((x$67 = (new p521Uint1(x142.$high, x142.$low)), new $Uint64(x$67.$high, x$67.$low))), x$68 = (x$69 = ((x$70 = (new p521Uint1(x126.$high, x126.$low)), new $Uint64(x$70.$high, x$70.$low))), x$71 = (x$72 = ((x$73 = (new p521Uint1(x108.$high, x108.$low)), new $Uint64(x$73.$high, x$73.$low))), new $Uint64(x$72.$high + x76.$high, x$72.$low + x76.$low)), new $Uint64(x$69.$high + x$71.$high, x$69.$low + x$71.$low)), new $Uint64(x$66.$high + x$68.$high, x$66.$low + x$68.$low)), x175, ((x$74 = (new p521Uint1(x192.$high, x192.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x193 = _tuple$96[0];
		x194 = _tuple$96[1];
		x195 = new $Uint64(0, 0);
		x196 = new $Uint64(0, 0);
		_tuple$97 = bits.Mul64(arg1[4], new $Uint64(16384, 0));
		x196 = _tuple$97[0];
		x195 = _tuple$97[1];
		x197 = new $Uint64(0, 0);
		x198 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x181, x195, new $Uint64(0, 0));
		x197 = _tuple$98[0];
		x198 = _tuple$98[1];
		x199 = new $Uint64(0, 0);
		x200 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x183, x196, ((x$75 = (new p521Uint1(x198.$high, x198.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x199 = _tuple$99[0];
		x200 = _tuple$99[1];
		x201 = new $Uint64(0, 0);
		x202 = new $Uint64(0, 0);
		_tuple$100 = bits.Add64(x185, new $Uint64(0, 0), ((x$76 = (new p521Uint1(x200.$high, x200.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x201 = _tuple$100[0];
		x202 = _tuple$100[1];
		x203 = new $Uint64(0, 0);
		x204 = new $Uint64(0, 0);
		_tuple$101 = bits.Add64(x187, new $Uint64(0, 0), ((x$77 = (new p521Uint1(x202.$high, x202.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x203 = _tuple$101[0];
		x204 = _tuple$101[1];
		x205 = new $Uint64(0, 0);
		x206 = new $Uint64(0, 0);
		_tuple$102 = bits.Add64(x189, new $Uint64(0, 0), ((x$78 = (new p521Uint1(x204.$high, x204.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x205 = _tuple$102[0];
		x206 = _tuple$102[1];
		x207 = new $Uint64(0, 0);
		x208 = new $Uint64(0, 0);
		_tuple$103 = bits.Add64(x191, new $Uint64(0, 0), ((x$79 = (new p521Uint1(x206.$high, x206.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x207 = _tuple$103[0];
		x208 = _tuple$103[1];
		x209 = new $Uint64(0, 0);
		x210 = new $Uint64(0, 0);
		_tuple$104 = bits.Add64(x193, new $Uint64(0, 0), ((x$80 = (new p521Uint1(x208.$high, x208.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x209 = _tuple$104[0];
		x210 = _tuple$104[1];
		x211 = new $Uint64(0, 0);
		x212 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x179, new $Uint64(0, 511));
		x212 = _tuple$105[0];
		x211 = _tuple$105[1];
		x213 = new $Uint64(0, 0);
		x214 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x214 = _tuple$106[0];
		x213 = _tuple$106[1];
		x215 = new $Uint64(0, 0);
		x216 = new $Uint64(0, 0);
		_tuple$107 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x216 = _tuple$107[0];
		x215 = _tuple$107[1];
		x217 = new $Uint64(0, 0);
		x218 = new $Uint64(0, 0);
		_tuple$108 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x218 = _tuple$108[0];
		x217 = _tuple$108[1];
		x219 = new $Uint64(0, 0);
		x220 = new $Uint64(0, 0);
		_tuple$109 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x220 = _tuple$109[0];
		x219 = _tuple$109[1];
		x221 = new $Uint64(0, 0);
		x222 = new $Uint64(0, 0);
		_tuple$110 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x222 = _tuple$110[0];
		x221 = _tuple$110[1];
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$111 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x224 = _tuple$111[0];
		x223 = _tuple$111[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$112 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x226 = _tuple$112[0];
		x225 = _tuple$112[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$113 = bits.Mul64(x179, new $Uint64(4294967295, 4294967295));
		x228 = _tuple$113[0];
		x227 = _tuple$113[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x228, x225, new $Uint64(0, 0));
		x229 = _tuple$114[0];
		x230 = _tuple$114[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x226, x223, ((x$81 = (new p521Uint1(x230.$high, x230.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x231 = _tuple$115[0];
		x232 = _tuple$115[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x224, x221, ((x$82 = (new p521Uint1(x232.$high, x232.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x233 = _tuple$116[0];
		x234 = _tuple$116[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x222, x219, ((x$83 = (new p521Uint1(x234.$high, x234.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x235 = _tuple$117[0];
		x236 = _tuple$117[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x220, x217, ((x$84 = (new p521Uint1(x236.$high, x236.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x237 = _tuple$118[0];
		x238 = _tuple$118[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x218, x215, ((x$85 = (new p521Uint1(x238.$high, x238.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x239 = _tuple$119[0];
		x240 = _tuple$119[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x216, x213, ((x$86 = (new p521Uint1(x240.$high, x240.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x241 = _tuple$120[0];
		x242 = _tuple$120[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x214, x211, ((x$87 = (new p521Uint1(x242.$high, x242.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x243 = _tuple$121[0];
		x244 = _tuple$121[1];
		x246 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x179, x227, new $Uint64(0, 0));
		x246 = _tuple$122[1];
		x247 = new $Uint64(0, 0);
		x248 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x197, x229, ((x$88 = (new p521Uint1(x246.$high, x246.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x247 = _tuple$123[0];
		x248 = _tuple$123[1];
		x249 = new $Uint64(0, 0);
		x250 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x199, x231, ((x$89 = (new p521Uint1(x248.$high, x248.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x249 = _tuple$124[0];
		x250 = _tuple$124[1];
		x251 = new $Uint64(0, 0);
		x252 = new $Uint64(0, 0);
		_tuple$125 = bits.Add64(x201, x233, ((x$90 = (new p521Uint1(x250.$high, x250.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x251 = _tuple$125[0];
		x252 = _tuple$125[1];
		x253 = new $Uint64(0, 0);
		x254 = new $Uint64(0, 0);
		_tuple$126 = bits.Add64(x203, x235, ((x$91 = (new p521Uint1(x252.$high, x252.$low)), new $Uint64(x$91.$high, x$91.$low))));
		x253 = _tuple$126[0];
		x254 = _tuple$126[1];
		x255 = new $Uint64(0, 0);
		x256 = new $Uint64(0, 0);
		_tuple$127 = bits.Add64(x205, x237, ((x$92 = (new p521Uint1(x254.$high, x254.$low)), new $Uint64(x$92.$high, x$92.$low))));
		x255 = _tuple$127[0];
		x256 = _tuple$127[1];
		x257 = new $Uint64(0, 0);
		x258 = new $Uint64(0, 0);
		_tuple$128 = bits.Add64(x207, x239, ((x$93 = (new p521Uint1(x256.$high, x256.$low)), new $Uint64(x$93.$high, x$93.$low))));
		x257 = _tuple$128[0];
		x258 = _tuple$128[1];
		x259 = new $Uint64(0, 0);
		x260 = new $Uint64(0, 0);
		_tuple$129 = bits.Add64(x209, x241, ((x$94 = (new p521Uint1(x258.$high, x258.$low)), new $Uint64(x$94.$high, x$94.$low))));
		x259 = _tuple$129[0];
		x260 = _tuple$129[1];
		x261 = new $Uint64(0, 0);
		x262 = new $Uint64(0, 0);
		_tuple$130 = bits.Add64((x$95 = ((x$96 = (new p521Uint1(x210.$high, x210.$low)), new $Uint64(x$96.$high, x$96.$low))), x$97 = (x$98 = ((x$99 = (new p521Uint1(x194.$high, x194.$low)), new $Uint64(x$99.$high, x$99.$low))), x$100 = (x$101 = ((x$102 = (new p521Uint1(x176.$high, x176.$low)), new $Uint64(x$102.$high, x$102.$low))), new $Uint64(x$101.$high + x144.$high, x$101.$low + x144.$low)), new $Uint64(x$98.$high + x$100.$high, x$98.$low + x$100.$low)), new $Uint64(x$95.$high + x$97.$high, x$95.$low + x$97.$low)), x243, ((x$103 = (new p521Uint1(x260.$high, x260.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x261 = _tuple$130[0];
		x262 = _tuple$130[1];
		x263 = new $Uint64(0, 0);
		x264 = new $Uint64(0, 0);
		_tuple$131 = bits.Mul64(arg1[5], new $Uint64(16384, 0));
		x264 = _tuple$131[0];
		x263 = _tuple$131[1];
		x265 = new $Uint64(0, 0);
		x266 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x249, x263, new $Uint64(0, 0));
		x265 = _tuple$132[0];
		x266 = _tuple$132[1];
		x267 = new $Uint64(0, 0);
		x268 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x251, x264, ((x$104 = (new p521Uint1(x266.$high, x266.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x267 = _tuple$133[0];
		x268 = _tuple$133[1];
		x269 = new $Uint64(0, 0);
		x270 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x253, new $Uint64(0, 0), ((x$105 = (new p521Uint1(x268.$high, x268.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x269 = _tuple$134[0];
		x270 = _tuple$134[1];
		x271 = new $Uint64(0, 0);
		x272 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x255, new $Uint64(0, 0), ((x$106 = (new p521Uint1(x270.$high, x270.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x271 = _tuple$135[0];
		x272 = _tuple$135[1];
		x273 = new $Uint64(0, 0);
		x274 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x257, new $Uint64(0, 0), ((x$107 = (new p521Uint1(x272.$high, x272.$low)), new $Uint64(x$107.$high, x$107.$low))));
		x273 = _tuple$136[0];
		x274 = _tuple$136[1];
		x275 = new $Uint64(0, 0);
		x276 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x259, new $Uint64(0, 0), ((x$108 = (new p521Uint1(x274.$high, x274.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x275 = _tuple$137[0];
		x276 = _tuple$137[1];
		x277 = new $Uint64(0, 0);
		x278 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x261, new $Uint64(0, 0), ((x$109 = (new p521Uint1(x276.$high, x276.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x277 = _tuple$138[0];
		x278 = _tuple$138[1];
		x279 = new $Uint64(0, 0);
		x280 = new $Uint64(0, 0);
		_tuple$139 = bits.Mul64(x247, new $Uint64(0, 511));
		x280 = _tuple$139[0];
		x279 = _tuple$139[1];
		x281 = new $Uint64(0, 0);
		x282 = new $Uint64(0, 0);
		_tuple$140 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x282 = _tuple$140[0];
		x281 = _tuple$140[1];
		x283 = new $Uint64(0, 0);
		x284 = new $Uint64(0, 0);
		_tuple$141 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x284 = _tuple$141[0];
		x283 = _tuple$141[1];
		x285 = new $Uint64(0, 0);
		x286 = new $Uint64(0, 0);
		_tuple$142 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x286 = _tuple$142[0];
		x285 = _tuple$142[1];
		x287 = new $Uint64(0, 0);
		x288 = new $Uint64(0, 0);
		_tuple$143 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x288 = _tuple$143[0];
		x287 = _tuple$143[1];
		x289 = new $Uint64(0, 0);
		x290 = new $Uint64(0, 0);
		_tuple$144 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x290 = _tuple$144[0];
		x289 = _tuple$144[1];
		x291 = new $Uint64(0, 0);
		x292 = new $Uint64(0, 0);
		_tuple$145 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x292 = _tuple$145[0];
		x291 = _tuple$145[1];
		x293 = new $Uint64(0, 0);
		x294 = new $Uint64(0, 0);
		_tuple$146 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x294 = _tuple$146[0];
		x293 = _tuple$146[1];
		x295 = new $Uint64(0, 0);
		x296 = new $Uint64(0, 0);
		_tuple$147 = bits.Mul64(x247, new $Uint64(4294967295, 4294967295));
		x296 = _tuple$147[0];
		x295 = _tuple$147[1];
		x297 = new $Uint64(0, 0);
		x298 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x296, x293, new $Uint64(0, 0));
		x297 = _tuple$148[0];
		x298 = _tuple$148[1];
		x299 = new $Uint64(0, 0);
		x300 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x294, x291, ((x$110 = (new p521Uint1(x298.$high, x298.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x299 = _tuple$149[0];
		x300 = _tuple$149[1];
		x301 = new $Uint64(0, 0);
		x302 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x292, x289, ((x$111 = (new p521Uint1(x300.$high, x300.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x301 = _tuple$150[0];
		x302 = _tuple$150[1];
		x303 = new $Uint64(0, 0);
		x304 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x290, x287, ((x$112 = (new p521Uint1(x302.$high, x302.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x303 = _tuple$151[0];
		x304 = _tuple$151[1];
		x305 = new $Uint64(0, 0);
		x306 = new $Uint64(0, 0);
		_tuple$152 = bits.Add64(x288, x285, ((x$113 = (new p521Uint1(x304.$high, x304.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x305 = _tuple$152[0];
		x306 = _tuple$152[1];
		x307 = new $Uint64(0, 0);
		x308 = new $Uint64(0, 0);
		_tuple$153 = bits.Add64(x286, x283, ((x$114 = (new p521Uint1(x306.$high, x306.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x307 = _tuple$153[0];
		x308 = _tuple$153[1];
		x309 = new $Uint64(0, 0);
		x310 = new $Uint64(0, 0);
		_tuple$154 = bits.Add64(x284, x281, ((x$115 = (new p521Uint1(x308.$high, x308.$low)), new $Uint64(x$115.$high, x$115.$low))));
		x309 = _tuple$154[0];
		x310 = _tuple$154[1];
		x311 = new $Uint64(0, 0);
		x312 = new $Uint64(0, 0);
		_tuple$155 = bits.Add64(x282, x279, ((x$116 = (new p521Uint1(x310.$high, x310.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x311 = _tuple$155[0];
		x312 = _tuple$155[1];
		x314 = new $Uint64(0, 0);
		_tuple$156 = bits.Add64(x247, x295, new $Uint64(0, 0));
		x314 = _tuple$156[1];
		x315 = new $Uint64(0, 0);
		x316 = new $Uint64(0, 0);
		_tuple$157 = bits.Add64(x265, x297, ((x$117 = (new p521Uint1(x314.$high, x314.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x315 = _tuple$157[0];
		x316 = _tuple$157[1];
		x317 = new $Uint64(0, 0);
		x318 = new $Uint64(0, 0);
		_tuple$158 = bits.Add64(x267, x299, ((x$118 = (new p521Uint1(x316.$high, x316.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x317 = _tuple$158[0];
		x318 = _tuple$158[1];
		x319 = new $Uint64(0, 0);
		x320 = new $Uint64(0, 0);
		_tuple$159 = bits.Add64(x269, x301, ((x$119 = (new p521Uint1(x318.$high, x318.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x319 = _tuple$159[0];
		x320 = _tuple$159[1];
		x321 = new $Uint64(0, 0);
		x322 = new $Uint64(0, 0);
		_tuple$160 = bits.Add64(x271, x303, ((x$120 = (new p521Uint1(x320.$high, x320.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x321 = _tuple$160[0];
		x322 = _tuple$160[1];
		x323 = new $Uint64(0, 0);
		x324 = new $Uint64(0, 0);
		_tuple$161 = bits.Add64(x273, x305, ((x$121 = (new p521Uint1(x322.$high, x322.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x323 = _tuple$161[0];
		x324 = _tuple$161[1];
		x325 = new $Uint64(0, 0);
		x326 = new $Uint64(0, 0);
		_tuple$162 = bits.Add64(x275, x307, ((x$122 = (new p521Uint1(x324.$high, x324.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x325 = _tuple$162[0];
		x326 = _tuple$162[1];
		x327 = new $Uint64(0, 0);
		x328 = new $Uint64(0, 0);
		_tuple$163 = bits.Add64(x277, x309, ((x$123 = (new p521Uint1(x326.$high, x326.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x327 = _tuple$163[0];
		x328 = _tuple$163[1];
		x329 = new $Uint64(0, 0);
		x330 = new $Uint64(0, 0);
		_tuple$164 = bits.Add64((x$124 = ((x$125 = (new p521Uint1(x278.$high, x278.$low)), new $Uint64(x$125.$high, x$125.$low))), x$126 = (x$127 = ((x$128 = (new p521Uint1(x262.$high, x262.$low)), new $Uint64(x$128.$high, x$128.$low))), x$129 = (x$130 = ((x$131 = (new p521Uint1(x244.$high, x244.$low)), new $Uint64(x$131.$high, x$131.$low))), new $Uint64(x$130.$high + x212.$high, x$130.$low + x212.$low)), new $Uint64(x$127.$high + x$129.$high, x$127.$low + x$129.$low)), new $Uint64(x$124.$high + x$126.$high, x$124.$low + x$126.$low)), x311, ((x$132 = (new p521Uint1(x328.$high, x328.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x329 = _tuple$164[0];
		x330 = _tuple$164[1];
		x331 = new $Uint64(0, 0);
		x332 = new $Uint64(0, 0);
		_tuple$165 = bits.Mul64(arg1[6], new $Uint64(16384, 0));
		x332 = _tuple$165[0];
		x331 = _tuple$165[1];
		x333 = new $Uint64(0, 0);
		x334 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x317, x331, new $Uint64(0, 0));
		x333 = _tuple$166[0];
		x334 = _tuple$166[1];
		x335 = new $Uint64(0, 0);
		x336 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x319, x332, ((x$133 = (new p521Uint1(x334.$high, x334.$low)), new $Uint64(x$133.$high, x$133.$low))));
		x335 = _tuple$167[0];
		x336 = _tuple$167[1];
		x337 = new $Uint64(0, 0);
		x338 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x321, new $Uint64(0, 0), ((x$134 = (new p521Uint1(x336.$high, x336.$low)), new $Uint64(x$134.$high, x$134.$low))));
		x337 = _tuple$168[0];
		x338 = _tuple$168[1];
		x339 = new $Uint64(0, 0);
		x340 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x323, new $Uint64(0, 0), ((x$135 = (new p521Uint1(x338.$high, x338.$low)), new $Uint64(x$135.$high, x$135.$low))));
		x339 = _tuple$169[0];
		x340 = _tuple$169[1];
		x341 = new $Uint64(0, 0);
		x342 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x325, new $Uint64(0, 0), ((x$136 = (new p521Uint1(x340.$high, x340.$low)), new $Uint64(x$136.$high, x$136.$low))));
		x341 = _tuple$170[0];
		x342 = _tuple$170[1];
		x343 = new $Uint64(0, 0);
		x344 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x327, new $Uint64(0, 0), ((x$137 = (new p521Uint1(x342.$high, x342.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x343 = _tuple$171[0];
		x344 = _tuple$171[1];
		x345 = new $Uint64(0, 0);
		x346 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x329, new $Uint64(0, 0), ((x$138 = (new p521Uint1(x344.$high, x344.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x345 = _tuple$172[0];
		x346 = _tuple$172[1];
		x347 = new $Uint64(0, 0);
		x348 = new $Uint64(0, 0);
		_tuple$173 = bits.Mul64(x315, new $Uint64(0, 511));
		x348 = _tuple$173[0];
		x347 = _tuple$173[1];
		x349 = new $Uint64(0, 0);
		x350 = new $Uint64(0, 0);
		_tuple$174 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x350 = _tuple$174[0];
		x349 = _tuple$174[1];
		x351 = new $Uint64(0, 0);
		x352 = new $Uint64(0, 0);
		_tuple$175 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x352 = _tuple$175[0];
		x351 = _tuple$175[1];
		x353 = new $Uint64(0, 0);
		x354 = new $Uint64(0, 0);
		_tuple$176 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x354 = _tuple$176[0];
		x353 = _tuple$176[1];
		x355 = new $Uint64(0, 0);
		x356 = new $Uint64(0, 0);
		_tuple$177 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x356 = _tuple$177[0];
		x355 = _tuple$177[1];
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$178 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x358 = _tuple$178[0];
		x357 = _tuple$178[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x360 = _tuple$179[0];
		x359 = _tuple$179[1];
		x361 = new $Uint64(0, 0);
		x362 = new $Uint64(0, 0);
		_tuple$180 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x362 = _tuple$180[0];
		x361 = _tuple$180[1];
		x363 = new $Uint64(0, 0);
		x364 = new $Uint64(0, 0);
		_tuple$181 = bits.Mul64(x315, new $Uint64(4294967295, 4294967295));
		x364 = _tuple$181[0];
		x363 = _tuple$181[1];
		x365 = new $Uint64(0, 0);
		x366 = new $Uint64(0, 0);
		_tuple$182 = bits.Add64(x364, x361, new $Uint64(0, 0));
		x365 = _tuple$182[0];
		x366 = _tuple$182[1];
		x367 = new $Uint64(0, 0);
		x368 = new $Uint64(0, 0);
		_tuple$183 = bits.Add64(x362, x359, ((x$139 = (new p521Uint1(x366.$high, x366.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x367 = _tuple$183[0];
		x368 = _tuple$183[1];
		x369 = new $Uint64(0, 0);
		x370 = new $Uint64(0, 0);
		_tuple$184 = bits.Add64(x360, x357, ((x$140 = (new p521Uint1(x368.$high, x368.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x369 = _tuple$184[0];
		x370 = _tuple$184[1];
		x371 = new $Uint64(0, 0);
		x372 = new $Uint64(0, 0);
		_tuple$185 = bits.Add64(x358, x355, ((x$141 = (new p521Uint1(x370.$high, x370.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x371 = _tuple$185[0];
		x372 = _tuple$185[1];
		x373 = new $Uint64(0, 0);
		x374 = new $Uint64(0, 0);
		_tuple$186 = bits.Add64(x356, x353, ((x$142 = (new p521Uint1(x372.$high, x372.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x373 = _tuple$186[0];
		x374 = _tuple$186[1];
		x375 = new $Uint64(0, 0);
		x376 = new $Uint64(0, 0);
		_tuple$187 = bits.Add64(x354, x351, ((x$143 = (new p521Uint1(x374.$high, x374.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x375 = _tuple$187[0];
		x376 = _tuple$187[1];
		x377 = new $Uint64(0, 0);
		x378 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x352, x349, ((x$144 = (new p521Uint1(x376.$high, x376.$low)), new $Uint64(x$144.$high, x$144.$low))));
		x377 = _tuple$188[0];
		x378 = _tuple$188[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x350, x347, ((x$145 = (new p521Uint1(x378.$high, x378.$low)), new $Uint64(x$145.$high, x$145.$low))));
		x379 = _tuple$189[0];
		x380 = _tuple$189[1];
		x382 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x315, x363, new $Uint64(0, 0));
		x382 = _tuple$190[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x333, x365, ((x$146 = (new p521Uint1(x382.$high, x382.$low)), new $Uint64(x$146.$high, x$146.$low))));
		x383 = _tuple$191[0];
		x384 = _tuple$191[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x335, x367, ((x$147 = (new p521Uint1(x384.$high, x384.$low)), new $Uint64(x$147.$high, x$147.$low))));
		x385 = _tuple$192[0];
		x386 = _tuple$192[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x337, x369, ((x$148 = (new p521Uint1(x386.$high, x386.$low)), new $Uint64(x$148.$high, x$148.$low))));
		x387 = _tuple$193[0];
		x388 = _tuple$193[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x339, x371, ((x$149 = (new p521Uint1(x388.$high, x388.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x389 = _tuple$194[0];
		x390 = _tuple$194[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64(x341, x373, ((x$150 = (new p521Uint1(x390.$high, x390.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x391 = _tuple$195[0];
		x392 = _tuple$195[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$196 = bits.Add64(x343, x375, ((x$151 = (new p521Uint1(x392.$high, x392.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x393 = _tuple$196[0];
		x394 = _tuple$196[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$197 = bits.Add64(x345, x377, ((x$152 = (new p521Uint1(x394.$high, x394.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x395 = _tuple$197[0];
		x396 = _tuple$197[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$198 = bits.Add64((x$153 = ((x$154 = (new p521Uint1(x346.$high, x346.$low)), new $Uint64(x$154.$high, x$154.$low))), x$155 = (x$156 = ((x$157 = (new p521Uint1(x330.$high, x330.$low)), new $Uint64(x$157.$high, x$157.$low))), x$158 = (x$159 = ((x$160 = (new p521Uint1(x312.$high, x312.$low)), new $Uint64(x$160.$high, x$160.$low))), new $Uint64(x$159.$high + x280.$high, x$159.$low + x280.$low)), new $Uint64(x$156.$high + x$158.$high, x$156.$low + x$158.$low)), new $Uint64(x$153.$high + x$155.$high, x$153.$low + x$155.$low)), x379, ((x$161 = (new p521Uint1(x396.$high, x396.$low)), new $Uint64(x$161.$high, x$161.$low))));
		x397 = _tuple$198[0];
		x398 = _tuple$198[1];
		x399 = new $Uint64(0, 0);
		x400 = new $Uint64(0, 0);
		_tuple$199 = bits.Mul64(arg1[7], new $Uint64(16384, 0));
		x400 = _tuple$199[0];
		x399 = _tuple$199[1];
		x401 = new $Uint64(0, 0);
		x402 = new $Uint64(0, 0);
		_tuple$200 = bits.Add64(x385, x399, new $Uint64(0, 0));
		x401 = _tuple$200[0];
		x402 = _tuple$200[1];
		x403 = new $Uint64(0, 0);
		x404 = new $Uint64(0, 0);
		_tuple$201 = bits.Add64(x387, x400, ((x$162 = (new p521Uint1(x402.$high, x402.$low)), new $Uint64(x$162.$high, x$162.$low))));
		x403 = _tuple$201[0];
		x404 = _tuple$201[1];
		x405 = new $Uint64(0, 0);
		x406 = new $Uint64(0, 0);
		_tuple$202 = bits.Add64(x389, new $Uint64(0, 0), ((x$163 = (new p521Uint1(x404.$high, x404.$low)), new $Uint64(x$163.$high, x$163.$low))));
		x405 = _tuple$202[0];
		x406 = _tuple$202[1];
		x407 = new $Uint64(0, 0);
		x408 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x391, new $Uint64(0, 0), ((x$164 = (new p521Uint1(x406.$high, x406.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x407 = _tuple$203[0];
		x408 = _tuple$203[1];
		x409 = new $Uint64(0, 0);
		x410 = new $Uint64(0, 0);
		_tuple$204 = bits.Add64(x393, new $Uint64(0, 0), ((x$165 = (new p521Uint1(x408.$high, x408.$low)), new $Uint64(x$165.$high, x$165.$low))));
		x409 = _tuple$204[0];
		x410 = _tuple$204[1];
		x411 = new $Uint64(0, 0);
		x412 = new $Uint64(0, 0);
		_tuple$205 = bits.Add64(x395, new $Uint64(0, 0), ((x$166 = (new p521Uint1(x410.$high, x410.$low)), new $Uint64(x$166.$high, x$166.$low))));
		x411 = _tuple$205[0];
		x412 = _tuple$205[1];
		x413 = new $Uint64(0, 0);
		x414 = new $Uint64(0, 0);
		_tuple$206 = bits.Add64(x397, new $Uint64(0, 0), ((x$167 = (new p521Uint1(x412.$high, x412.$low)), new $Uint64(x$167.$high, x$167.$low))));
		x413 = _tuple$206[0];
		x414 = _tuple$206[1];
		x415 = new $Uint64(0, 0);
		x416 = new $Uint64(0, 0);
		_tuple$207 = bits.Mul64(x383, new $Uint64(0, 511));
		x416 = _tuple$207[0];
		x415 = _tuple$207[1];
		x417 = new $Uint64(0, 0);
		x418 = new $Uint64(0, 0);
		_tuple$208 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x418 = _tuple$208[0];
		x417 = _tuple$208[1];
		x419 = new $Uint64(0, 0);
		x420 = new $Uint64(0, 0);
		_tuple$209 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x420 = _tuple$209[0];
		x419 = _tuple$209[1];
		x421 = new $Uint64(0, 0);
		x422 = new $Uint64(0, 0);
		_tuple$210 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x422 = _tuple$210[0];
		x421 = _tuple$210[1];
		x423 = new $Uint64(0, 0);
		x424 = new $Uint64(0, 0);
		_tuple$211 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x424 = _tuple$211[0];
		x423 = _tuple$211[1];
		x425 = new $Uint64(0, 0);
		x426 = new $Uint64(0, 0);
		_tuple$212 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x426 = _tuple$212[0];
		x425 = _tuple$212[1];
		x427 = new $Uint64(0, 0);
		x428 = new $Uint64(0, 0);
		_tuple$213 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x428 = _tuple$213[0];
		x427 = _tuple$213[1];
		x429 = new $Uint64(0, 0);
		x430 = new $Uint64(0, 0);
		_tuple$214 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x430 = _tuple$214[0];
		x429 = _tuple$214[1];
		x431 = new $Uint64(0, 0);
		x432 = new $Uint64(0, 0);
		_tuple$215 = bits.Mul64(x383, new $Uint64(4294967295, 4294967295));
		x432 = _tuple$215[0];
		x431 = _tuple$215[1];
		x433 = new $Uint64(0, 0);
		x434 = new $Uint64(0, 0);
		_tuple$216 = bits.Add64(x432, x429, new $Uint64(0, 0));
		x433 = _tuple$216[0];
		x434 = _tuple$216[1];
		x435 = new $Uint64(0, 0);
		x436 = new $Uint64(0, 0);
		_tuple$217 = bits.Add64(x430, x427, ((x$168 = (new p521Uint1(x434.$high, x434.$low)), new $Uint64(x$168.$high, x$168.$low))));
		x435 = _tuple$217[0];
		x436 = _tuple$217[1];
		x437 = new $Uint64(0, 0);
		x438 = new $Uint64(0, 0);
		_tuple$218 = bits.Add64(x428, x425, ((x$169 = (new p521Uint1(x436.$high, x436.$low)), new $Uint64(x$169.$high, x$169.$low))));
		x437 = _tuple$218[0];
		x438 = _tuple$218[1];
		x439 = new $Uint64(0, 0);
		x440 = new $Uint64(0, 0);
		_tuple$219 = bits.Add64(x426, x423, ((x$170 = (new p521Uint1(x438.$high, x438.$low)), new $Uint64(x$170.$high, x$170.$low))));
		x439 = _tuple$219[0];
		x440 = _tuple$219[1];
		x441 = new $Uint64(0, 0);
		x442 = new $Uint64(0, 0);
		_tuple$220 = bits.Add64(x424, x421, ((x$171 = (new p521Uint1(x440.$high, x440.$low)), new $Uint64(x$171.$high, x$171.$low))));
		x441 = _tuple$220[0];
		x442 = _tuple$220[1];
		x443 = new $Uint64(0, 0);
		x444 = new $Uint64(0, 0);
		_tuple$221 = bits.Add64(x422, x419, ((x$172 = (new p521Uint1(x442.$high, x442.$low)), new $Uint64(x$172.$high, x$172.$low))));
		x443 = _tuple$221[0];
		x444 = _tuple$221[1];
		x445 = new $Uint64(0, 0);
		x446 = new $Uint64(0, 0);
		_tuple$222 = bits.Add64(x420, x417, ((x$173 = (new p521Uint1(x444.$high, x444.$low)), new $Uint64(x$173.$high, x$173.$low))));
		x445 = _tuple$222[0];
		x446 = _tuple$222[1];
		x447 = new $Uint64(0, 0);
		x448 = new $Uint64(0, 0);
		_tuple$223 = bits.Add64(x418, x415, ((x$174 = (new p521Uint1(x446.$high, x446.$low)), new $Uint64(x$174.$high, x$174.$low))));
		x447 = _tuple$223[0];
		x448 = _tuple$223[1];
		x450 = new $Uint64(0, 0);
		_tuple$224 = bits.Add64(x383, x431, new $Uint64(0, 0));
		x450 = _tuple$224[1];
		x451 = new $Uint64(0, 0);
		x452 = new $Uint64(0, 0);
		_tuple$225 = bits.Add64(x401, x433, ((x$175 = (new p521Uint1(x450.$high, x450.$low)), new $Uint64(x$175.$high, x$175.$low))));
		x451 = _tuple$225[0];
		x452 = _tuple$225[1];
		x453 = new $Uint64(0, 0);
		x454 = new $Uint64(0, 0);
		_tuple$226 = bits.Add64(x403, x435, ((x$176 = (new p521Uint1(x452.$high, x452.$low)), new $Uint64(x$176.$high, x$176.$low))));
		x453 = _tuple$226[0];
		x454 = _tuple$226[1];
		x455 = new $Uint64(0, 0);
		x456 = new $Uint64(0, 0);
		_tuple$227 = bits.Add64(x405, x437, ((x$177 = (new p521Uint1(x454.$high, x454.$low)), new $Uint64(x$177.$high, x$177.$low))));
		x455 = _tuple$227[0];
		x456 = _tuple$227[1];
		x457 = new $Uint64(0, 0);
		x458 = new $Uint64(0, 0);
		_tuple$228 = bits.Add64(x407, x439, ((x$178 = (new p521Uint1(x456.$high, x456.$low)), new $Uint64(x$178.$high, x$178.$low))));
		x457 = _tuple$228[0];
		x458 = _tuple$228[1];
		x459 = new $Uint64(0, 0);
		x460 = new $Uint64(0, 0);
		_tuple$229 = bits.Add64(x409, x441, ((x$179 = (new p521Uint1(x458.$high, x458.$low)), new $Uint64(x$179.$high, x$179.$low))));
		x459 = _tuple$229[0];
		x460 = _tuple$229[1];
		x461 = new $Uint64(0, 0);
		x462 = new $Uint64(0, 0);
		_tuple$230 = bits.Add64(x411, x443, ((x$180 = (new p521Uint1(x460.$high, x460.$low)), new $Uint64(x$180.$high, x$180.$low))));
		x461 = _tuple$230[0];
		x462 = _tuple$230[1];
		x463 = new $Uint64(0, 0);
		x464 = new $Uint64(0, 0);
		_tuple$231 = bits.Add64(x413, x445, ((x$181 = (new p521Uint1(x462.$high, x462.$low)), new $Uint64(x$181.$high, x$181.$low))));
		x463 = _tuple$231[0];
		x464 = _tuple$231[1];
		x465 = new $Uint64(0, 0);
		x466 = new $Uint64(0, 0);
		_tuple$232 = bits.Add64((x$182 = ((x$183 = (new p521Uint1(x414.$high, x414.$low)), new $Uint64(x$183.$high, x$183.$low))), x$184 = (x$185 = ((x$186 = (new p521Uint1(x398.$high, x398.$low)), new $Uint64(x$186.$high, x$186.$low))), x$187 = (x$188 = ((x$189 = (new p521Uint1(x380.$high, x380.$low)), new $Uint64(x$189.$high, x$189.$low))), new $Uint64(x$188.$high + x348.$high, x$188.$low + x348.$low)), new $Uint64(x$185.$high + x$187.$high, x$185.$low + x$187.$low)), new $Uint64(x$182.$high + x$184.$high, x$182.$low + x$184.$low)), x447, ((x$190 = (new p521Uint1(x464.$high, x464.$low)), new $Uint64(x$190.$high, x$190.$low))));
		x465 = _tuple$232[0];
		x466 = _tuple$232[1];
		x467 = new $Uint64(0, 0);
		x468 = new $Uint64(0, 0);
		_tuple$233 = bits.Mul64(arg1[8], new $Uint64(16384, 0));
		x468 = _tuple$233[0];
		x467 = _tuple$233[1];
		x469 = new $Uint64(0, 0);
		x470 = new $Uint64(0, 0);
		_tuple$234 = bits.Add64(x453, x467, new $Uint64(0, 0));
		x469 = _tuple$234[0];
		x470 = _tuple$234[1];
		x471 = new $Uint64(0, 0);
		x472 = new $Uint64(0, 0);
		_tuple$235 = bits.Add64(x455, x468, ((x$191 = (new p521Uint1(x470.$high, x470.$low)), new $Uint64(x$191.$high, x$191.$low))));
		x471 = _tuple$235[0];
		x472 = _tuple$235[1];
		x473 = new $Uint64(0, 0);
		x474 = new $Uint64(0, 0);
		_tuple$236 = bits.Add64(x457, new $Uint64(0, 0), ((x$192 = (new p521Uint1(x472.$high, x472.$low)), new $Uint64(x$192.$high, x$192.$low))));
		x473 = _tuple$236[0];
		x474 = _tuple$236[1];
		x475 = new $Uint64(0, 0);
		x476 = new $Uint64(0, 0);
		_tuple$237 = bits.Add64(x459, new $Uint64(0, 0), ((x$193 = (new p521Uint1(x474.$high, x474.$low)), new $Uint64(x$193.$high, x$193.$low))));
		x475 = _tuple$237[0];
		x476 = _tuple$237[1];
		x477 = new $Uint64(0, 0);
		x478 = new $Uint64(0, 0);
		_tuple$238 = bits.Add64(x461, new $Uint64(0, 0), ((x$194 = (new p521Uint1(x476.$high, x476.$low)), new $Uint64(x$194.$high, x$194.$low))));
		x477 = _tuple$238[0];
		x478 = _tuple$238[1];
		x479 = new $Uint64(0, 0);
		x480 = new $Uint64(0, 0);
		_tuple$239 = bits.Add64(x463, new $Uint64(0, 0), ((x$195 = (new p521Uint1(x478.$high, x478.$low)), new $Uint64(x$195.$high, x$195.$low))));
		x479 = _tuple$239[0];
		x480 = _tuple$239[1];
		x481 = new $Uint64(0, 0);
		x482 = new $Uint64(0, 0);
		_tuple$240 = bits.Add64(x465, new $Uint64(0, 0), ((x$196 = (new p521Uint1(x480.$high, x480.$low)), new $Uint64(x$196.$high, x$196.$low))));
		x481 = _tuple$240[0];
		x482 = _tuple$240[1];
		x483 = new $Uint64(0, 0);
		x484 = new $Uint64(0, 0);
		_tuple$241 = bits.Mul64(x451, new $Uint64(0, 511));
		x484 = _tuple$241[0];
		x483 = _tuple$241[1];
		x485 = new $Uint64(0, 0);
		x486 = new $Uint64(0, 0);
		_tuple$242 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x486 = _tuple$242[0];
		x485 = _tuple$242[1];
		x487 = new $Uint64(0, 0);
		x488 = new $Uint64(0, 0);
		_tuple$243 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x488 = _tuple$243[0];
		x487 = _tuple$243[1];
		x489 = new $Uint64(0, 0);
		x490 = new $Uint64(0, 0);
		_tuple$244 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x490 = _tuple$244[0];
		x489 = _tuple$244[1];
		x491 = new $Uint64(0, 0);
		x492 = new $Uint64(0, 0);
		_tuple$245 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x492 = _tuple$245[0];
		x491 = _tuple$245[1];
		x493 = new $Uint64(0, 0);
		x494 = new $Uint64(0, 0);
		_tuple$246 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x494 = _tuple$246[0];
		x493 = _tuple$246[1];
		x495 = new $Uint64(0, 0);
		x496 = new $Uint64(0, 0);
		_tuple$247 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x496 = _tuple$247[0];
		x495 = _tuple$247[1];
		x497 = new $Uint64(0, 0);
		x498 = new $Uint64(0, 0);
		_tuple$248 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x498 = _tuple$248[0];
		x497 = _tuple$248[1];
		x499 = new $Uint64(0, 0);
		x500 = new $Uint64(0, 0);
		_tuple$249 = bits.Mul64(x451, new $Uint64(4294967295, 4294967295));
		x500 = _tuple$249[0];
		x499 = _tuple$249[1];
		x501 = new $Uint64(0, 0);
		x502 = new $Uint64(0, 0);
		_tuple$250 = bits.Add64(x500, x497, new $Uint64(0, 0));
		x501 = _tuple$250[0];
		x502 = _tuple$250[1];
		x503 = new $Uint64(0, 0);
		x504 = new $Uint64(0, 0);
		_tuple$251 = bits.Add64(x498, x495, ((x$197 = (new p521Uint1(x502.$high, x502.$low)), new $Uint64(x$197.$high, x$197.$low))));
		x503 = _tuple$251[0];
		x504 = _tuple$251[1];
		x505 = new $Uint64(0, 0);
		x506 = new $Uint64(0, 0);
		_tuple$252 = bits.Add64(x496, x493, ((x$198 = (new p521Uint1(x504.$high, x504.$low)), new $Uint64(x$198.$high, x$198.$low))));
		x505 = _tuple$252[0];
		x506 = _tuple$252[1];
		x507 = new $Uint64(0, 0);
		x508 = new $Uint64(0, 0);
		_tuple$253 = bits.Add64(x494, x491, ((x$199 = (new p521Uint1(x506.$high, x506.$low)), new $Uint64(x$199.$high, x$199.$low))));
		x507 = _tuple$253[0];
		x508 = _tuple$253[1];
		x509 = new $Uint64(0, 0);
		x510 = new $Uint64(0, 0);
		_tuple$254 = bits.Add64(x492, x489, ((x$200 = (new p521Uint1(x508.$high, x508.$low)), new $Uint64(x$200.$high, x$200.$low))));
		x509 = _tuple$254[0];
		x510 = _tuple$254[1];
		x511 = new $Uint64(0, 0);
		x512 = new $Uint64(0, 0);
		_tuple$255 = bits.Add64(x490, x487, ((x$201 = (new p521Uint1(x510.$high, x510.$low)), new $Uint64(x$201.$high, x$201.$low))));
		x511 = _tuple$255[0];
		x512 = _tuple$255[1];
		x513 = new $Uint64(0, 0);
		x514 = new $Uint64(0, 0);
		_tuple$256 = bits.Add64(x488, x485, ((x$202 = (new p521Uint1(x512.$high, x512.$low)), new $Uint64(x$202.$high, x$202.$low))));
		x513 = _tuple$256[0];
		x514 = _tuple$256[1];
		x515 = new $Uint64(0, 0);
		x516 = new $Uint64(0, 0);
		_tuple$257 = bits.Add64(x486, x483, ((x$203 = (new p521Uint1(x514.$high, x514.$low)), new $Uint64(x$203.$high, x$203.$low))));
		x515 = _tuple$257[0];
		x516 = _tuple$257[1];
		x518 = new $Uint64(0, 0);
		_tuple$258 = bits.Add64(x451, x499, new $Uint64(0, 0));
		x518 = _tuple$258[1];
		x519 = new $Uint64(0, 0);
		x520 = new $Uint64(0, 0);
		_tuple$259 = bits.Add64(x469, x501, ((x$204 = (new p521Uint1(x518.$high, x518.$low)), new $Uint64(x$204.$high, x$204.$low))));
		x519 = _tuple$259[0];
		x520 = _tuple$259[1];
		x521 = new $Uint64(0, 0);
		x522 = new $Uint64(0, 0);
		_tuple$260 = bits.Add64(x471, x503, ((x$205 = (new p521Uint1(x520.$high, x520.$low)), new $Uint64(x$205.$high, x$205.$low))));
		x521 = _tuple$260[0];
		x522 = _tuple$260[1];
		x523 = new $Uint64(0, 0);
		x524 = new $Uint64(0, 0);
		_tuple$261 = bits.Add64(x473, x505, ((x$206 = (new p521Uint1(x522.$high, x522.$low)), new $Uint64(x$206.$high, x$206.$low))));
		x523 = _tuple$261[0];
		x524 = _tuple$261[1];
		x525 = new $Uint64(0, 0);
		x526 = new $Uint64(0, 0);
		_tuple$262 = bits.Add64(x475, x507, ((x$207 = (new p521Uint1(x524.$high, x524.$low)), new $Uint64(x$207.$high, x$207.$low))));
		x525 = _tuple$262[0];
		x526 = _tuple$262[1];
		x527 = new $Uint64(0, 0);
		x528 = new $Uint64(0, 0);
		_tuple$263 = bits.Add64(x477, x509, ((x$208 = (new p521Uint1(x526.$high, x526.$low)), new $Uint64(x$208.$high, x$208.$low))));
		x527 = _tuple$263[0];
		x528 = _tuple$263[1];
		x529 = new $Uint64(0, 0);
		x530 = new $Uint64(0, 0);
		_tuple$264 = bits.Add64(x479, x511, ((x$209 = (new p521Uint1(x528.$high, x528.$low)), new $Uint64(x$209.$high, x$209.$low))));
		x529 = _tuple$264[0];
		x530 = _tuple$264[1];
		x531 = new $Uint64(0, 0);
		x532 = new $Uint64(0, 0);
		_tuple$265 = bits.Add64(x481, x513, ((x$210 = (new p521Uint1(x530.$high, x530.$low)), new $Uint64(x$210.$high, x$210.$low))));
		x531 = _tuple$265[0];
		x532 = _tuple$265[1];
		x533 = new $Uint64(0, 0);
		x534 = new $Uint64(0, 0);
		_tuple$266 = bits.Add64((x$211 = ((x$212 = (new p521Uint1(x482.$high, x482.$low)), new $Uint64(x$212.$high, x$212.$low))), x$213 = (x$214 = ((x$215 = (new p521Uint1(x466.$high, x466.$low)), new $Uint64(x$215.$high, x$215.$low))), x$216 = (x$217 = ((x$218 = (new p521Uint1(x448.$high, x448.$low)), new $Uint64(x$218.$high, x$218.$low))), new $Uint64(x$217.$high + x416.$high, x$217.$low + x416.$low)), new $Uint64(x$214.$high + x$216.$high, x$214.$low + x$216.$low)), new $Uint64(x$211.$high + x$213.$high, x$211.$low + x$213.$low)), x515, ((x$219 = (new p521Uint1(x532.$high, x532.$low)), new $Uint64(x$219.$high, x$219.$low))));
		x533 = _tuple$266[0];
		x534 = _tuple$266[1];
		x535 = (x$220 = ((x$221 = (new p521Uint1(x534.$high, x534.$low)), new $Uint64(x$221.$high, x$221.$low))), x$222 = (x$223 = ((x$224 = (new p521Uint1(x516.$high, x516.$low)), new $Uint64(x$224.$high, x$224.$low))), new $Uint64(x$223.$high + x484.$high, x$223.$low + x484.$low)), new $Uint64(x$220.$high + x$222.$high, x$220.$low + x$222.$low));
		x536 = new $Uint64(0, 0);
		x537 = new $Uint64(0, 0);
		_tuple$267 = bits.Sub64(x519, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x536 = _tuple$267[0];
		x537 = _tuple$267[1];
		x538 = new $Uint64(0, 0);
		x539 = new $Uint64(0, 0);
		_tuple$268 = bits.Sub64(x521, new $Uint64(4294967295, 4294967295), ((x$225 = (new p521Uint1(x537.$high, x537.$low)), new $Uint64(x$225.$high, x$225.$low))));
		x538 = _tuple$268[0];
		x539 = _tuple$268[1];
		x540 = new $Uint64(0, 0);
		x541 = new $Uint64(0, 0);
		_tuple$269 = bits.Sub64(x523, new $Uint64(4294967295, 4294967295), ((x$226 = (new p521Uint1(x539.$high, x539.$low)), new $Uint64(x$226.$high, x$226.$low))));
		x540 = _tuple$269[0];
		x541 = _tuple$269[1];
		x542 = new $Uint64(0, 0);
		x543 = new $Uint64(0, 0);
		_tuple$270 = bits.Sub64(x525, new $Uint64(4294967295, 4294967295), ((x$227 = (new p521Uint1(x541.$high, x541.$low)), new $Uint64(x$227.$high, x$227.$low))));
		x542 = _tuple$270[0];
		x543 = _tuple$270[1];
		x544 = new $Uint64(0, 0);
		x545 = new $Uint64(0, 0);
		_tuple$271 = bits.Sub64(x527, new $Uint64(4294967295, 4294967295), ((x$228 = (new p521Uint1(x543.$high, x543.$low)), new $Uint64(x$228.$high, x$228.$low))));
		x544 = _tuple$271[0];
		x545 = _tuple$271[1];
		x546 = new $Uint64(0, 0);
		x547 = new $Uint64(0, 0);
		_tuple$272 = bits.Sub64(x529, new $Uint64(4294967295, 4294967295), ((x$229 = (new p521Uint1(x545.$high, x545.$low)), new $Uint64(x$229.$high, x$229.$low))));
		x546 = _tuple$272[0];
		x547 = _tuple$272[1];
		x548 = new $Uint64(0, 0);
		x549 = new $Uint64(0, 0);
		_tuple$273 = bits.Sub64(x531, new $Uint64(4294967295, 4294967295), ((x$230 = (new p521Uint1(x547.$high, x547.$low)), new $Uint64(x$230.$high, x$230.$low))));
		x548 = _tuple$273[0];
		x549 = _tuple$273[1];
		x550 = new $Uint64(0, 0);
		x551 = new $Uint64(0, 0);
		_tuple$274 = bits.Sub64(x533, new $Uint64(4294967295, 4294967295), ((x$231 = (new p521Uint1(x549.$high, x549.$low)), new $Uint64(x$231.$high, x$231.$low))));
		x550 = _tuple$274[0];
		x551 = _tuple$274[1];
		x552 = new $Uint64(0, 0);
		x553 = new $Uint64(0, 0);
		_tuple$275 = bits.Sub64(x535, new $Uint64(0, 511), ((x$232 = (new p521Uint1(x551.$high, x551.$low)), new $Uint64(x$232.$high, x$232.$low))));
		x552 = _tuple$275[0];
		x553 = _tuple$275[1];
		x555 = new $Uint64(0, 0);
		_tuple$276 = bits.Sub64(new $Uint64(0, 0), new $Uint64(0, 0), ((x$233 = (new p521Uint1(x553.$high, x553.$low)), new $Uint64(x$233.$high, x$233.$low))));
		x555 = _tuple$276[1];
		x556 = new $Uint64(0, 0);
		p521CmovznzU64((x556$24ptr || (x556$24ptr = new ptrType(function() { return x556; }, function($v) { x556 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x536, x519);
		x557 = new $Uint64(0, 0);
		p521CmovznzU64((x557$24ptr || (x557$24ptr = new ptrType(function() { return x557; }, function($v) { x557 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x538, x521);
		x558 = new $Uint64(0, 0);
		p521CmovznzU64((x558$24ptr || (x558$24ptr = new ptrType(function() { return x558; }, function($v) { x558 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x540, x523);
		x559 = new $Uint64(0, 0);
		p521CmovznzU64((x559$24ptr || (x559$24ptr = new ptrType(function() { return x559; }, function($v) { x559 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x542, x525);
		x560 = new $Uint64(0, 0);
		p521CmovznzU64((x560$24ptr || (x560$24ptr = new ptrType(function() { return x560; }, function($v) { x560 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x544, x527);
		x561 = new $Uint64(0, 0);
		p521CmovznzU64((x561$24ptr || (x561$24ptr = new ptrType(function() { return x561; }, function($v) { x561 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x546, x529);
		x562 = new $Uint64(0, 0);
		p521CmovznzU64((x562$24ptr || (x562$24ptr = new ptrType(function() { return x562; }, function($v) { x562 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x548, x531);
		x563 = new $Uint64(0, 0);
		p521CmovznzU64((x563$24ptr || (x563$24ptr = new ptrType(function() { return x563; }, function($v) { x563 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x550, x533);
		x564 = new $Uint64(0, 0);
		p521CmovznzU64((x564$24ptr || (x564$24ptr = new ptrType(function() { return x564; }, function($v) { x564 = $v; }))), (new p521Uint1(x555.$high, x555.$low)), x552, x535);
		out1.nilCheck, out1[0] = x556;
		out1.nilCheck, out1[1] = x557;
		out1.nilCheck, out1[2] = x558;
		out1.nilCheck, out1[3] = x559;
		out1.nilCheck, out1[4] = x560;
		out1.nilCheck, out1[5] = x561;
		out1.nilCheck, out1[6] = x562;
		out1.nilCheck, out1[7] = x563;
		out1.nilCheck, out1[8] = x564;
	};
	p521Selectznz = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x1, x1$24ptr, x2, x2$24ptr, x3, x3$24ptr, x4, x4$24ptr, x5, x5$24ptr, x6, x6$24ptr, x7, x7$24ptr, x8, x8$24ptr, x9, x9$24ptr;
		x1 = new $Uint64(0, 0);
		p521CmovznzU64((x1$24ptr || (x1$24ptr = new ptrType(function() { return x1; }, function($v) { x1 = $v; }))), arg1, arg2[0], arg3[0]);
		x2 = new $Uint64(0, 0);
		p521CmovznzU64((x2$24ptr || (x2$24ptr = new ptrType(function() { return x2; }, function($v) { x2 = $v; }))), arg1, arg2[1], arg3[1]);
		x3 = new $Uint64(0, 0);
		p521CmovznzU64((x3$24ptr || (x3$24ptr = new ptrType(function() { return x3; }, function($v) { x3 = $v; }))), arg1, arg2[2], arg3[2]);
		x4 = new $Uint64(0, 0);
		p521CmovznzU64((x4$24ptr || (x4$24ptr = new ptrType(function() { return x4; }, function($v) { x4 = $v; }))), arg1, arg2[3], arg3[3]);
		x5 = new $Uint64(0, 0);
		p521CmovznzU64((x5$24ptr || (x5$24ptr = new ptrType(function() { return x5; }, function($v) { x5 = $v; }))), arg1, arg2[4], arg3[4]);
		x6 = new $Uint64(0, 0);
		p521CmovznzU64((x6$24ptr || (x6$24ptr = new ptrType(function() { return x6; }, function($v) { x6 = $v; }))), arg1, arg2[5], arg3[5]);
		x7 = new $Uint64(0, 0);
		p521CmovznzU64((x7$24ptr || (x7$24ptr = new ptrType(function() { return x7; }, function($v) { x7 = $v; }))), arg1, arg2[6], arg3[6]);
		x8 = new $Uint64(0, 0);
		p521CmovznzU64((x8$24ptr || (x8$24ptr = new ptrType(function() { return x8; }, function($v) { x8 = $v; }))), arg1, arg2[7], arg3[7]);
		x9 = new $Uint64(0, 0);
		p521CmovznzU64((x9$24ptr || (x9$24ptr = new ptrType(function() { return x9; }, function($v) { x9 = $v; }))), arg1, arg2[8], arg3[8]);
		out1.nilCheck, out1[0] = x1;
		out1.nilCheck, out1[1] = x2;
		out1.nilCheck, out1[2] = x3;
		out1.nilCheck, out1[3] = x4;
		out1.nilCheck, out1[4] = x5;
		out1.nilCheck, out1[5] = x6;
		out1.nilCheck, out1[6] = x7;
		out1.nilCheck, out1[7] = x8;
		out1.nilCheck, out1[8] = x9;
	};
	p521ToBytes = function(out1, arg1) {
		var arg1, out1, x, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[8];
		x2 = arg1[7];
		x3 = arg1[6];
		x4 = arg1[5];
		x5 = arg1[4];
		x6 = arg1[3];
		x7 = arg1[2];
		x8 = arg1[1];
		x9 = arg1[0];
		x10 = ((((x9.$low << 24 >>> 24)) & 255) >>> 0);
		x11 = $shiftRightUint64(x9, 8);
		x12 = ((((x11.$low << 24 >>> 24)) & 255) >>> 0);
		x13 = $shiftRightUint64(x11, 8);
		x14 = ((((x13.$low << 24 >>> 24)) & 255) >>> 0);
		x15 = $shiftRightUint64(x13, 8);
		x16 = ((((x15.$low << 24 >>> 24)) & 255) >>> 0);
		x17 = $shiftRightUint64(x15, 8);
		x18 = ((((x17.$low << 24 >>> 24)) & 255) >>> 0);
		x19 = $shiftRightUint64(x17, 8);
		x20 = ((((x19.$low << 24 >>> 24)) & 255) >>> 0);
		x21 = $shiftRightUint64(x19, 8);
		x22 = ((((x21.$low << 24 >>> 24)) & 255) >>> 0);
		x23 = ((($shiftRightUint64(x21, 8)).$low << 24 >>> 24));
		x24 = ((((x8.$low << 24 >>> 24)) & 255) >>> 0);
		x25 = $shiftRightUint64(x8, 8);
		x26 = ((((x25.$low << 24 >>> 24)) & 255) >>> 0);
		x27 = $shiftRightUint64(x25, 8);
		x28 = ((((x27.$low << 24 >>> 24)) & 255) >>> 0);
		x29 = $shiftRightUint64(x27, 8);
		x30 = ((((x29.$low << 24 >>> 24)) & 255) >>> 0);
		x31 = $shiftRightUint64(x29, 8);
		x32 = ((((x31.$low << 24 >>> 24)) & 255) >>> 0);
		x33 = $shiftRightUint64(x31, 8);
		x34 = ((((x33.$low << 24 >>> 24)) & 255) >>> 0);
		x35 = $shiftRightUint64(x33, 8);
		x36 = ((((x35.$low << 24 >>> 24)) & 255) >>> 0);
		x37 = ((($shiftRightUint64(x35, 8)).$low << 24 >>> 24));
		x38 = ((((x7.$low << 24 >>> 24)) & 255) >>> 0);
		x39 = $shiftRightUint64(x7, 8);
		x40 = ((((x39.$low << 24 >>> 24)) & 255) >>> 0);
		x41 = $shiftRightUint64(x39, 8);
		x42 = ((((x41.$low << 24 >>> 24)) & 255) >>> 0);
		x43 = $shiftRightUint64(x41, 8);
		x44 = ((((x43.$low << 24 >>> 24)) & 255) >>> 0);
		x45 = $shiftRightUint64(x43, 8);
		x46 = ((((x45.$low << 24 >>> 24)) & 255) >>> 0);
		x47 = $shiftRightUint64(x45, 8);
		x48 = ((((x47.$low << 24 >>> 24)) & 255) >>> 0);
		x49 = $shiftRightUint64(x47, 8);
		x50 = ((((x49.$low << 24 >>> 24)) & 255) >>> 0);
		x51 = ((($shiftRightUint64(x49, 8)).$low << 24 >>> 24));
		x52 = ((((x6.$low << 24 >>> 24)) & 255) >>> 0);
		x53 = $shiftRightUint64(x6, 8);
		x54 = ((((x53.$low << 24 >>> 24)) & 255) >>> 0);
		x55 = $shiftRightUint64(x53, 8);
		x56 = ((((x55.$low << 24 >>> 24)) & 255) >>> 0);
		x57 = $shiftRightUint64(x55, 8);
		x58 = ((((x57.$low << 24 >>> 24)) & 255) >>> 0);
		x59 = $shiftRightUint64(x57, 8);
		x60 = ((((x59.$low << 24 >>> 24)) & 255) >>> 0);
		x61 = $shiftRightUint64(x59, 8);
		x62 = ((((x61.$low << 24 >>> 24)) & 255) >>> 0);
		x63 = $shiftRightUint64(x61, 8);
		x64 = ((((x63.$low << 24 >>> 24)) & 255) >>> 0);
		x65 = ((($shiftRightUint64(x63, 8)).$low << 24 >>> 24));
		x66 = ((((x5.$low << 24 >>> 24)) & 255) >>> 0);
		x67 = $shiftRightUint64(x5, 8);
		x68 = ((((x67.$low << 24 >>> 24)) & 255) >>> 0);
		x69 = $shiftRightUint64(x67, 8);
		x70 = ((((x69.$low << 24 >>> 24)) & 255) >>> 0);
		x71 = $shiftRightUint64(x69, 8);
		x72 = ((((x71.$low << 24 >>> 24)) & 255) >>> 0);
		x73 = $shiftRightUint64(x71, 8);
		x74 = ((((x73.$low << 24 >>> 24)) & 255) >>> 0);
		x75 = $shiftRightUint64(x73, 8);
		x76 = ((((x75.$low << 24 >>> 24)) & 255) >>> 0);
		x77 = $shiftRightUint64(x75, 8);
		x78 = ((((x77.$low << 24 >>> 24)) & 255) >>> 0);
		x79 = ((($shiftRightUint64(x77, 8)).$low << 24 >>> 24));
		x80 = ((((x4.$low << 24 >>> 24)) & 255) >>> 0);
		x81 = $shiftRightUint64(x4, 8);
		x82 = ((((x81.$low << 24 >>> 24)) & 255) >>> 0);
		x83 = $shiftRightUint64(x81, 8);
		x84 = ((((x83.$low << 24 >>> 24)) & 255) >>> 0);
		x85 = $shiftRightUint64(x83, 8);
		x86 = ((((x85.$low << 24 >>> 24)) & 255) >>> 0);
		x87 = $shiftRightUint64(x85, 8);
		x88 = ((((x87.$low << 24 >>> 24)) & 255) >>> 0);
		x89 = $shiftRightUint64(x87, 8);
		x90 = ((((x89.$low << 24 >>> 24)) & 255) >>> 0);
		x91 = $shiftRightUint64(x89, 8);
		x92 = ((((x91.$low << 24 >>> 24)) & 255) >>> 0);
		x93 = ((($shiftRightUint64(x91, 8)).$low << 24 >>> 24));
		x94 = ((((x3.$low << 24 >>> 24)) & 255) >>> 0);
		x95 = $shiftRightUint64(x3, 8);
		x96 = ((((x95.$low << 24 >>> 24)) & 255) >>> 0);
		x97 = $shiftRightUint64(x95, 8);
		x98 = ((((x97.$low << 24 >>> 24)) & 255) >>> 0);
		x99 = $shiftRightUint64(x97, 8);
		x100 = ((((x99.$low << 24 >>> 24)) & 255) >>> 0);
		x101 = $shiftRightUint64(x99, 8);
		x102 = ((((x101.$low << 24 >>> 24)) & 255) >>> 0);
		x103 = $shiftRightUint64(x101, 8);
		x104 = ((((x103.$low << 24 >>> 24)) & 255) >>> 0);
		x105 = $shiftRightUint64(x103, 8);
		x106 = ((((x105.$low << 24 >>> 24)) & 255) >>> 0);
		x107 = ((($shiftRightUint64(x105, 8)).$low << 24 >>> 24));
		x108 = ((((x2.$low << 24 >>> 24)) & 255) >>> 0);
		x109 = $shiftRightUint64(x2, 8);
		x110 = ((((x109.$low << 24 >>> 24)) & 255) >>> 0);
		x111 = $shiftRightUint64(x109, 8);
		x112 = ((((x111.$low << 24 >>> 24)) & 255) >>> 0);
		x113 = $shiftRightUint64(x111, 8);
		x114 = ((((x113.$low << 24 >>> 24)) & 255) >>> 0);
		x115 = $shiftRightUint64(x113, 8);
		x116 = ((((x115.$low << 24 >>> 24)) & 255) >>> 0);
		x117 = $shiftRightUint64(x115, 8);
		x118 = ((((x117.$low << 24 >>> 24)) & 255) >>> 0);
		x119 = $shiftRightUint64(x117, 8);
		x120 = ((((x119.$low << 24 >>> 24)) & 255) >>> 0);
		x121 = ((($shiftRightUint64(x119, 8)).$low << 24 >>> 24));
		x122 = ((((x1.$low << 24 >>> 24)) & 255) >>> 0);
		x123 = ((x = $shiftRightUint64(x1, 8), new p521Uint1(x.$high, x.$low)));
		out1.nilCheck, out1[0] = x10;
		out1.nilCheck, out1[1] = x12;
		out1.nilCheck, out1[2] = x14;
		out1.nilCheck, out1[3] = x16;
		out1.nilCheck, out1[4] = x18;
		out1.nilCheck, out1[5] = x20;
		out1.nilCheck, out1[6] = x22;
		out1.nilCheck, out1[7] = x23;
		out1.nilCheck, out1[8] = x24;
		out1.nilCheck, out1[9] = x26;
		out1.nilCheck, out1[10] = x28;
		out1.nilCheck, out1[11] = x30;
		out1.nilCheck, out1[12] = x32;
		out1.nilCheck, out1[13] = x34;
		out1.nilCheck, out1[14] = x36;
		out1.nilCheck, out1[15] = x37;
		out1.nilCheck, out1[16] = x38;
		out1.nilCheck, out1[17] = x40;
		out1.nilCheck, out1[18] = x42;
		out1.nilCheck, out1[19] = x44;
		out1.nilCheck, out1[20] = x46;
		out1.nilCheck, out1[21] = x48;
		out1.nilCheck, out1[22] = x50;
		out1.nilCheck, out1[23] = x51;
		out1.nilCheck, out1[24] = x52;
		out1.nilCheck, out1[25] = x54;
		out1.nilCheck, out1[26] = x56;
		out1.nilCheck, out1[27] = x58;
		out1.nilCheck, out1[28] = x60;
		out1.nilCheck, out1[29] = x62;
		out1.nilCheck, out1[30] = x64;
		out1.nilCheck, out1[31] = x65;
		out1.nilCheck, out1[32] = x66;
		out1.nilCheck, out1[33] = x68;
		out1.nilCheck, out1[34] = x70;
		out1.nilCheck, out1[35] = x72;
		out1.nilCheck, out1[36] = x74;
		out1.nilCheck, out1[37] = x76;
		out1.nilCheck, out1[38] = x78;
		out1.nilCheck, out1[39] = x79;
		out1.nilCheck, out1[40] = x80;
		out1.nilCheck, out1[41] = x82;
		out1.nilCheck, out1[42] = x84;
		out1.nilCheck, out1[43] = x86;
		out1.nilCheck, out1[44] = x88;
		out1.nilCheck, out1[45] = x90;
		out1.nilCheck, out1[46] = x92;
		out1.nilCheck, out1[47] = x93;
		out1.nilCheck, out1[48] = x94;
		out1.nilCheck, out1[49] = x96;
		out1.nilCheck, out1[50] = x98;
		out1.nilCheck, out1[51] = x100;
		out1.nilCheck, out1[52] = x102;
		out1.nilCheck, out1[53] = x104;
		out1.nilCheck, out1[54] = x106;
		out1.nilCheck, out1[55] = x107;
		out1.nilCheck, out1[56] = x108;
		out1.nilCheck, out1[57] = x110;
		out1.nilCheck, out1[58] = x112;
		out1.nilCheck, out1[59] = x114;
		out1.nilCheck, out1[60] = x116;
		out1.nilCheck, out1[61] = x118;
		out1.nilCheck, out1[62] = x120;
		out1.nilCheck, out1[63] = x121;
		out1.nilCheck, out1[64] = x122;
		out1.nilCheck, out1[65] = ((x123.$low << 24 >>> 24));
	};
	p521FromBytes = function(out1, arg1) {
		var arg1, out1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = $shiftLeft64(((x = (new p521Uint1(0, arg1[65])), new $Uint64(x.$high, x.$low))), 8);
		x2 = arg1[64];
		x3 = $shiftLeft64((new $Uint64(0, arg1[63])), 56);
		x4 = $shiftLeft64((new $Uint64(0, arg1[62])), 48);
		x5 = $shiftLeft64((new $Uint64(0, arg1[61])), 40);
		x6 = $shiftLeft64((new $Uint64(0, arg1[60])), 32);
		x7 = $shiftLeft64((new $Uint64(0, arg1[59])), 24);
		x8 = $shiftLeft64((new $Uint64(0, arg1[58])), 16);
		x9 = $shiftLeft64((new $Uint64(0, arg1[57])), 8);
		x10 = arg1[56];
		x11 = $shiftLeft64((new $Uint64(0, arg1[55])), 56);
		x12 = $shiftLeft64((new $Uint64(0, arg1[54])), 48);
		x13 = $shiftLeft64((new $Uint64(0, arg1[53])), 40);
		x14 = $shiftLeft64((new $Uint64(0, arg1[52])), 32);
		x15 = $shiftLeft64((new $Uint64(0, arg1[51])), 24);
		x16 = $shiftLeft64((new $Uint64(0, arg1[50])), 16);
		x17 = $shiftLeft64((new $Uint64(0, arg1[49])), 8);
		x18 = arg1[48];
		x19 = $shiftLeft64((new $Uint64(0, arg1[47])), 56);
		x20 = $shiftLeft64((new $Uint64(0, arg1[46])), 48);
		x21 = $shiftLeft64((new $Uint64(0, arg1[45])), 40);
		x22 = $shiftLeft64((new $Uint64(0, arg1[44])), 32);
		x23 = $shiftLeft64((new $Uint64(0, arg1[43])), 24);
		x24 = $shiftLeft64((new $Uint64(0, arg1[42])), 16);
		x25 = $shiftLeft64((new $Uint64(0, arg1[41])), 8);
		x26 = arg1[40];
		x27 = $shiftLeft64((new $Uint64(0, arg1[39])), 56);
		x28 = $shiftLeft64((new $Uint64(0, arg1[38])), 48);
		x29 = $shiftLeft64((new $Uint64(0, arg1[37])), 40);
		x30 = $shiftLeft64((new $Uint64(0, arg1[36])), 32);
		x31 = $shiftLeft64((new $Uint64(0, arg1[35])), 24);
		x32 = $shiftLeft64((new $Uint64(0, arg1[34])), 16);
		x33 = $shiftLeft64((new $Uint64(0, arg1[33])), 8);
		x34 = arg1[32];
		x35 = $shiftLeft64((new $Uint64(0, arg1[31])), 56);
		x36 = $shiftLeft64((new $Uint64(0, arg1[30])), 48);
		x37 = $shiftLeft64((new $Uint64(0, arg1[29])), 40);
		x38 = $shiftLeft64((new $Uint64(0, arg1[28])), 32);
		x39 = $shiftLeft64((new $Uint64(0, arg1[27])), 24);
		x40 = $shiftLeft64((new $Uint64(0, arg1[26])), 16);
		x41 = $shiftLeft64((new $Uint64(0, arg1[25])), 8);
		x42 = arg1[24];
		x43 = $shiftLeft64((new $Uint64(0, arg1[23])), 56);
		x44 = $shiftLeft64((new $Uint64(0, arg1[22])), 48);
		x45 = $shiftLeft64((new $Uint64(0, arg1[21])), 40);
		x46 = $shiftLeft64((new $Uint64(0, arg1[20])), 32);
		x47 = $shiftLeft64((new $Uint64(0, arg1[19])), 24);
		x48 = $shiftLeft64((new $Uint64(0, arg1[18])), 16);
		x49 = $shiftLeft64((new $Uint64(0, arg1[17])), 8);
		x50 = arg1[16];
		x51 = $shiftLeft64((new $Uint64(0, arg1[15])), 56);
		x52 = $shiftLeft64((new $Uint64(0, arg1[14])), 48);
		x53 = $shiftLeft64((new $Uint64(0, arg1[13])), 40);
		x54 = $shiftLeft64((new $Uint64(0, arg1[12])), 32);
		x55 = $shiftLeft64((new $Uint64(0, arg1[11])), 24);
		x56 = $shiftLeft64((new $Uint64(0, arg1[10])), 16);
		x57 = $shiftLeft64((new $Uint64(0, arg1[9])), 8);
		x58 = arg1[8];
		x59 = $shiftLeft64((new $Uint64(0, arg1[7])), 56);
		x60 = $shiftLeft64((new $Uint64(0, arg1[6])), 48);
		x61 = $shiftLeft64((new $Uint64(0, arg1[5])), 40);
		x62 = $shiftLeft64((new $Uint64(0, arg1[4])), 32);
		x63 = $shiftLeft64((new $Uint64(0, arg1[3])), 24);
		x64 = $shiftLeft64((new $Uint64(0, arg1[2])), 16);
		x65 = $shiftLeft64((new $Uint64(0, arg1[1])), 8);
		x66 = arg1[0];
		x67 = (x$1 = (new $Uint64(0, x66)), new $Uint64(x65.$high + x$1.$high, x65.$low + x$1.$low));
		x68 = new $Uint64(x64.$high + x67.$high, x64.$low + x67.$low);
		x69 = new $Uint64(x63.$high + x68.$high, x63.$low + x68.$low);
		x70 = new $Uint64(x62.$high + x69.$high, x62.$low + x69.$low);
		x71 = new $Uint64(x61.$high + x70.$high, x61.$low + x70.$low);
		x72 = new $Uint64(x60.$high + x71.$high, x60.$low + x71.$low);
		x73 = new $Uint64(x59.$high + x72.$high, x59.$low + x72.$low);
		x74 = (x$2 = (new $Uint64(0, x58)), new $Uint64(x57.$high + x$2.$high, x57.$low + x$2.$low));
		x75 = new $Uint64(x56.$high + x74.$high, x56.$low + x74.$low);
		x76 = new $Uint64(x55.$high + x75.$high, x55.$low + x75.$low);
		x77 = new $Uint64(x54.$high + x76.$high, x54.$low + x76.$low);
		x78 = new $Uint64(x53.$high + x77.$high, x53.$low + x77.$low);
		x79 = new $Uint64(x52.$high + x78.$high, x52.$low + x78.$low);
		x80 = new $Uint64(x51.$high + x79.$high, x51.$low + x79.$low);
		x81 = (x$3 = (new $Uint64(0, x50)), new $Uint64(x49.$high + x$3.$high, x49.$low + x$3.$low));
		x82 = new $Uint64(x48.$high + x81.$high, x48.$low + x81.$low);
		x83 = new $Uint64(x47.$high + x82.$high, x47.$low + x82.$low);
		x84 = new $Uint64(x46.$high + x83.$high, x46.$low + x83.$low);
		x85 = new $Uint64(x45.$high + x84.$high, x45.$low + x84.$low);
		x86 = new $Uint64(x44.$high + x85.$high, x44.$low + x85.$low);
		x87 = new $Uint64(x43.$high + x86.$high, x43.$low + x86.$low);
		x88 = (x$4 = (new $Uint64(0, x42)), new $Uint64(x41.$high + x$4.$high, x41.$low + x$4.$low));
		x89 = new $Uint64(x40.$high + x88.$high, x40.$low + x88.$low);
		x90 = new $Uint64(x39.$high + x89.$high, x39.$low + x89.$low);
		x91 = new $Uint64(x38.$high + x90.$high, x38.$low + x90.$low);
		x92 = new $Uint64(x37.$high + x91.$high, x37.$low + x91.$low);
		x93 = new $Uint64(x36.$high + x92.$high, x36.$low + x92.$low);
		x94 = new $Uint64(x35.$high + x93.$high, x35.$low + x93.$low);
		x95 = (x$5 = (new $Uint64(0, x34)), new $Uint64(x33.$high + x$5.$high, x33.$low + x$5.$low));
		x96 = new $Uint64(x32.$high + x95.$high, x32.$low + x95.$low);
		x97 = new $Uint64(x31.$high + x96.$high, x31.$low + x96.$low);
		x98 = new $Uint64(x30.$high + x97.$high, x30.$low + x97.$low);
		x99 = new $Uint64(x29.$high + x98.$high, x29.$low + x98.$low);
		x100 = new $Uint64(x28.$high + x99.$high, x28.$low + x99.$low);
		x101 = new $Uint64(x27.$high + x100.$high, x27.$low + x100.$low);
		x102 = (x$6 = (new $Uint64(0, x26)), new $Uint64(x25.$high + x$6.$high, x25.$low + x$6.$low));
		x103 = new $Uint64(x24.$high + x102.$high, x24.$low + x102.$low);
		x104 = new $Uint64(x23.$high + x103.$high, x23.$low + x103.$low);
		x105 = new $Uint64(x22.$high + x104.$high, x22.$low + x104.$low);
		x106 = new $Uint64(x21.$high + x105.$high, x21.$low + x105.$low);
		x107 = new $Uint64(x20.$high + x106.$high, x20.$low + x106.$low);
		x108 = new $Uint64(x19.$high + x107.$high, x19.$low + x107.$low);
		x109 = (x$7 = (new $Uint64(0, x18)), new $Uint64(x17.$high + x$7.$high, x17.$low + x$7.$low));
		x110 = new $Uint64(x16.$high + x109.$high, x16.$low + x109.$low);
		x111 = new $Uint64(x15.$high + x110.$high, x15.$low + x110.$low);
		x112 = new $Uint64(x14.$high + x111.$high, x14.$low + x111.$low);
		x113 = new $Uint64(x13.$high + x112.$high, x13.$low + x112.$low);
		x114 = new $Uint64(x12.$high + x113.$high, x12.$low + x113.$low);
		x115 = new $Uint64(x11.$high + x114.$high, x11.$low + x114.$low);
		x116 = (x$8 = (new $Uint64(0, x10)), new $Uint64(x9.$high + x$8.$high, x9.$low + x$8.$low));
		x117 = new $Uint64(x8.$high + x116.$high, x8.$low + x116.$low);
		x118 = new $Uint64(x7.$high + x117.$high, x7.$low + x117.$low);
		x119 = new $Uint64(x6.$high + x118.$high, x6.$low + x118.$low);
		x120 = new $Uint64(x5.$high + x119.$high, x5.$low + x119.$low);
		x121 = new $Uint64(x4.$high + x120.$high, x4.$low + x120.$low);
		x122 = new $Uint64(x3.$high + x121.$high, x3.$low + x121.$low);
		x123 = (x$9 = (new $Uint64(0, x2)), new $Uint64(x1.$high + x$9.$high, x1.$low + x$9.$low));
		out1.nilCheck, out1[0] = x73;
		out1.nilCheck, out1[1] = x80;
		out1.nilCheck, out1[2] = x87;
		out1.nilCheck, out1[3] = x94;
		out1.nilCheck, out1[4] = x101;
		out1.nilCheck, out1[5] = x108;
		out1.nilCheck, out1[6] = x115;
		out1.nilCheck, out1[7] = x122;
		out1.nilCheck, out1[8] = x123;
	};
	P521Element.ptr.prototype.One = function() {
		var e;
		e = this;
		p521SetOne(e.x);
		return e;
	};
	P521Element.prototype.One = function() { return this.$val.One(); };
	P521Element.ptr.prototype.Equal = function(t) {
		var e, eBytes, t, tBytes;
		e = this;
		eBytes = e.Bytes();
		tBytes = t.Bytes();
		return subtle.ConstantTimeCompare(eBytes, tBytes);
	};
	P521Element.prototype.Equal = function(t) { return this.$val.Equal(t); };
	P521Element.ptr.prototype.IsZero = function() {
		var e, eBytes;
		e = this;
		eBytes = e.Bytes();
		return subtle.ConstantTimeCompare(eBytes, p521ZeroEncoding);
	};
	P521Element.prototype.IsZero = function() { return this.$val.IsZero(); };
	P521Element.ptr.prototype.Set = function(t) {
		var e, t;
		e = this;
		p521MontgomeryDomainFieldElement.copy(e.x, t.x);
		return e;
	};
	P521Element.prototype.Set = function(t) { return this.$val.Set(t); };
	P521Element.ptr.prototype.Bytes = function() {
		var e, out;
		e = this;
		out = arrayType$3.zero();
		return e.bytes(out);
	};
	P521Element.prototype.Bytes = function() { return this.$val.Bytes(); };
	P521Element.ptr.prototype.bytes = function(out) {
		var e, out, tmp;
		e = this;
		tmp = arrayType.zero();
		p521FromMontgomery(tmp, e.x);
		p521ToBytes(out, (tmp));
		p521InvertEndianness(new sliceType(out));
		return new sliceType(out);
	};
	P521Element.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P521Element.ptr.prototype.SetBytes = function(v) {
		var _i, _ref, e, i, in$1, tmp, v;
		e = this;
		if (!((v.$length === 66))) {
			return [ptrType$1.nil, errors.New("invalid P521Element encoding")];
		}
		_ref = v;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) < ((i < 0 || i >= p521MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p521MinusOneEncoding.$array[p521MinusOneEncoding.$offset + i])) {
				break;
			}
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) > ((i < 0 || i >= p521MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p521MinusOneEncoding.$array[p521MinusOneEncoding.$offset + i])) {
				return [ptrType$1.nil, errors.New("invalid P521Element encoding")];
			}
			_i++;
		}
		in$1 = arrayType$3.zero();
		$copySlice(new sliceType(in$1), v);
		p521InvertEndianness(new sliceType(in$1));
		tmp = arrayType.zero();
		p521FromBytes((tmp), in$1);
		p521ToMontgomery(e.x, tmp);
		return [e, $ifaceNil];
	};
	P521Element.prototype.SetBytes = function(v) { return this.$val.SetBytes(v); };
	P521Element.ptr.prototype.Add = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p521Add(e.x, t1.x, t2.x);
		return e;
	};
	P521Element.prototype.Add = function(t1, t2) { return this.$val.Add(t1, t2); };
	P521Element.ptr.prototype.Sub = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p521Sub(e.x, t1.x, t2.x);
		return e;
	};
	P521Element.prototype.Sub = function(t1, t2) { return this.$val.Sub(t1, t2); };
	P521Element.ptr.prototype.Mul = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p521Mul(e.x, t1.x, t2.x);
		return e;
	};
	P521Element.prototype.Mul = function(t1, t2) { return this.$val.Mul(t1, t2); };
	P521Element.ptr.prototype.Square = function(t) {
		var e, t;
		e = this;
		p521Square(e.x, t.x);
		return e;
	};
	P521Element.prototype.Square = function(t) { return this.$val.Square(t); };
	P521Element.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		p521Selectznz((v.x), (new p521Uint1(0, cond)), (b.x), (a.x));
		return v;
	};
	P521Element.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	p521InvertEndianness = function(v) {
		var _q, _tmp, _tmp$1, i, v, x, x$1;
		i = 0;
		while (true) {
			if (!(i < (_q = v.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tmp = (x = (v.$length - 1 >> 0) - i >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]));
			_tmp$1 = ((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]);
			((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i] = _tmp);
			(x$1 = (v.$length - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$1] = _tmp$1));
			i = i + (1) >> 0;
		}
	};
	P384Element.ptr.prototype.Invert = function(x) {
		var e, s, s$1, s$10, s$2, s$3, s$4, s$5, s$6, s$7, s$8, s$9, t0, t1, t2, t3, x, z;
		e = this;
		z = new P384Element.ptr(arrayType$1.zero()).Set(e);
		t0 = new P384Element.ptr(arrayType$1.zero());
		t1 = new P384Element.ptr(arrayType$1.zero());
		t2 = new P384Element.ptr(arrayType$1.zero());
		t3 = new P384Element.ptr(arrayType$1.zero());
		z.Square(x);
		z.Mul(x, z);
		z.Square(z);
		t1.Mul(x, z);
		z.Square(t1);
		s = 1;
		while (true) {
			if (!(s < 3)) { break; }
			z.Square(z);
			s = s + (1) >> 0;
		}
		z.Mul(t1, z);
		t0.Square(z);
		s$1 = 1;
		while (true) {
			if (!(s$1 < 6)) { break; }
			t0.Square(t0);
			s$1 = s$1 + (1) >> 0;
		}
		t0.Mul(z, t0);
		t2.Square(t0);
		s$2 = 1;
		while (true) {
			if (!(s$2 < 12)) { break; }
			t2.Square(t2);
			s$2 = s$2 + (1) >> 0;
		}
		t0.Mul(t0, t2);
		s$3 = 0;
		while (true) {
			if (!(s$3 < 6)) { break; }
			t0.Square(t0);
			s$3 = s$3 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		t2.Mul(x, t0);
		t0.Square(t2);
		t0.Mul(x, t0);
		t3.Square(t0);
		s$4 = 1;
		while (true) {
			if (!(s$4 < 31)) { break; }
			t3.Square(t3);
			s$4 = s$4 + (1) >> 0;
		}
		t2.Mul(t2, t3);
		t3.Square(t2);
		s$5 = 1;
		while (true) {
			if (!(s$5 < 63)) { break; }
			t3.Square(t3);
			s$5 = s$5 + (1) >> 0;
		}
		t2.Mul(t2, t3);
		t3.Square(t2);
		s$6 = 1;
		while (true) {
			if (!(s$6 < 126)) { break; }
			t3.Square(t3);
			s$6 = s$6 + (1) >> 0;
		}
		t2.Mul(t2, t3);
		s$7 = 0;
		while (true) {
			if (!(s$7 < 3)) { break; }
			t2.Square(t2);
			s$7 = s$7 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		s$8 = 0;
		while (true) {
			if (!(s$8 < 33)) { break; }
			t1.Square(t1);
			s$8 = s$8 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$9 = 0;
		while (true) {
			if (!(s$9 < 94)) { break; }
			t0.Square(t0);
			s$9 = s$9 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$10 = 0;
		while (true) {
			if (!(s$10 < 2)) { break; }
			z.Square(z);
			s$10 = s$10 + (1) >> 0;
		}
		z.Mul(x, z);
		return e.Set(z);
	};
	P384Element.prototype.Invert = function(x) { return this.$val.Invert(x); };
	p384CmovznzU64 = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x, x$1, x$2, x1, x2;
		x1 = $mul64((new $Uint64(arg1.$high, arg1.$low)), new $Uint64(4294967295, 4294967295));
		x2 = (x = new $Uint64(x1.$high & arg3.$high, (x1.$low & arg3.$low) >>> 0), x$1 = (x$2 = new $Uint64(~x1.$high, ~x1.$low >>> 0), new $Uint64(x$2.$high & arg2.$high, (x$2.$low & arg2.$low) >>> 0)), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		out1.$set(x2);
	};
	p384Mul = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, arg2, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x103, x104, x105, x106, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x182, x183, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x36, x360, x361, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x41, x410, x411, x412, x413, x414, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x44, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x467, x468, x468$24ptr, x469, x469$24ptr, x47, x470, x470$24ptr, x471, x471$24ptr, x472, x472$24ptr, x473, x473$24ptr, x48, x49, x5, x50, x51, x52, x53, x54, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[4];
		x5 = arg1[5];
		x6 = arg1[0];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x6, arg2[5]);
		x8 = _tuple[0];
		x7 = _tuple[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x6, arg2[4]);
		x10 = _tuple$1[0];
		x9 = _tuple$1[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x6, arg2[3]);
		x12 = _tuple$2[0];
		x11 = _tuple$2[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x6, arg2[2]);
		x14 = _tuple$3[0];
		x13 = _tuple$3[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x6, arg2[1]);
		x16 = _tuple$4[0];
		x15 = _tuple$4[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x6, arg2[0]);
		x18 = _tuple$5[0];
		x17 = _tuple$5[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x18, x15, new $Uint64(0, 0));
		x19 = _tuple$6[0];
		x20 = _tuple$6[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x16, x13, ((x = (new p384Uint1(x20.$high, x20.$low)), new $Uint64(x.$high, x.$low))));
		x21 = _tuple$7[0];
		x22 = _tuple$7[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(x14, x11, ((x$1 = (new p384Uint1(x22.$high, x22.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x23 = _tuple$8[0];
		x24 = _tuple$8[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x12, x9, ((x$2 = (new p384Uint1(x24.$high, x24.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x25 = _tuple$9[0];
		x26 = _tuple$9[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x10, x7, ((x$3 = (new p384Uint1(x26.$high, x26.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x27 = _tuple$10[0];
		x28 = _tuple$10[1];
		x29 = (x$4 = ((x$5 = (new p384Uint1(x28.$high, x28.$low)), new $Uint64(x$5.$high, x$5.$low))), new $Uint64(x$4.$high + x8.$high, x$4.$low + x8.$low));
		x30 = new $Uint64(0, 0);
		_tuple$11 = bits.Mul64(x17, new $Uint64(1, 1));
		x30 = _tuple$11[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$12 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x33 = _tuple$12[0];
		x32 = _tuple$12[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$13 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x35 = _tuple$13[0];
		x34 = _tuple$13[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$14 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x37 = _tuple$14[0];
		x36 = _tuple$14[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$15 = bits.Mul64(x30, new $Uint64(4294967295, 4294967294));
		x39 = _tuple$15[0];
		x38 = _tuple$15[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x30, new $Uint64(4294967295, 0));
		x41 = _tuple$16[0];
		x40 = _tuple$16[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x30, new $Uint64(0, 4294967295));
		x43 = _tuple$17[0];
		x42 = _tuple$17[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(x43, x40, new $Uint64(0, 0));
		x44 = _tuple$18[0];
		x45 = _tuple$18[1];
		x46 = new $Uint64(0, 0);
		x47 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x41, x38, ((x$6 = (new p384Uint1(x45.$high, x45.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x46 = _tuple$19[0];
		x47 = _tuple$19[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x39, x36, ((x$7 = (new p384Uint1(x47.$high, x47.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x48 = _tuple$20[0];
		x49 = _tuple$20[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x37, x34, ((x$8 = (new p384Uint1(x49.$high, x49.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x50 = _tuple$21[0];
		x51 = _tuple$21[1];
		x52 = new $Uint64(0, 0);
		x53 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x35, x32, ((x$9 = (new p384Uint1(x51.$high, x51.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x52 = _tuple$22[0];
		x53 = _tuple$22[1];
		x54 = (x$10 = ((x$11 = (new p384Uint1(x53.$high, x53.$low)), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$10.$high + x33.$high, x$10.$low + x33.$low));
		x56 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x17, x42, new $Uint64(0, 0));
		x56 = _tuple$23[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x19, x44, ((x$12 = (new p384Uint1(x56.$high, x56.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x57 = _tuple$24[0];
		x58 = _tuple$24[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x21, x46, ((x$13 = (new p384Uint1(x58.$high, x58.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x59 = _tuple$25[0];
		x60 = _tuple$25[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x23, x48, ((x$14 = (new p384Uint1(x60.$high, x60.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x61 = _tuple$26[0];
		x62 = _tuple$26[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x25, x50, ((x$15 = (new p384Uint1(x62.$high, x62.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x63 = _tuple$27[0];
		x64 = _tuple$27[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x27, x52, ((x$16 = (new p384Uint1(x64.$high, x64.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x65 = _tuple$28[0];
		x66 = _tuple$28[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(x29, x54, ((x$17 = (new p384Uint1(x66.$high, x66.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x67 = _tuple$29[0];
		x68 = _tuple$29[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x1, arg2[5]);
		x70 = _tuple$30[0];
		x69 = _tuple$30[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x1, arg2[4]);
		x72 = _tuple$31[0];
		x71 = _tuple$31[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$32 = bits.Mul64(x1, arg2[3]);
		x74 = _tuple$32[0];
		x73 = _tuple$32[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$33 = bits.Mul64(x1, arg2[2]);
		x76 = _tuple$33[0];
		x75 = _tuple$33[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$34 = bits.Mul64(x1, arg2[1]);
		x78 = _tuple$34[0];
		x77 = _tuple$34[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$35 = bits.Mul64(x1, arg2[0]);
		x80 = _tuple$35[0];
		x79 = _tuple$35[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x80, x77, new $Uint64(0, 0));
		x81 = _tuple$36[0];
		x82 = _tuple$36[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x78, x75, ((x$18 = (new p384Uint1(x82.$high, x82.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x83 = _tuple$37[0];
		x84 = _tuple$37[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x76, x73, ((x$19 = (new p384Uint1(x84.$high, x84.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x85 = _tuple$38[0];
		x86 = _tuple$38[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x74, x71, ((x$20 = (new p384Uint1(x86.$high, x86.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x87 = _tuple$39[0];
		x88 = _tuple$39[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x72, x69, ((x$21 = (new p384Uint1(x88.$high, x88.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x89 = _tuple$40[0];
		x90 = _tuple$40[1];
		x91 = (x$22 = ((x$23 = (new p384Uint1(x90.$high, x90.$low)), new $Uint64(x$23.$high, x$23.$low))), new $Uint64(x$22.$high + x70.$high, x$22.$low + x70.$low));
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x57, x79, new $Uint64(0, 0));
		x92 = _tuple$41[0];
		x93 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x59, x81, ((x$24 = (new p384Uint1(x93.$high, x93.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x94 = _tuple$42[0];
		x95 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x61, x83, ((x$25 = (new p384Uint1(x95.$high, x95.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x96 = _tuple$43[0];
		x97 = _tuple$43[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x63, x85, ((x$26 = (new p384Uint1(x97.$high, x97.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x98 = _tuple$44[0];
		x99 = _tuple$44[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x65, x87, ((x$27 = (new p384Uint1(x99.$high, x99.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x100 = _tuple$45[0];
		x101 = _tuple$45[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x67, x89, ((x$28 = (new p384Uint1(x101.$high, x101.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x102 = _tuple$46[0];
		x103 = _tuple$46[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(((x$29 = (new p384Uint1(x68.$high, x68.$low)), new $Uint64(x$29.$high, x$29.$low))), x91, ((x$30 = (new p384Uint1(x103.$high, x103.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x104 = _tuple$47[0];
		x105 = _tuple$47[1];
		x106 = new $Uint64(0, 0);
		_tuple$48 = bits.Mul64(x92, new $Uint64(1, 1));
		x106 = _tuple$48[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x109 = _tuple$49[0];
		x108 = _tuple$49[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x111 = _tuple$50[0];
		x110 = _tuple$50[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x113 = _tuple$51[0];
		x112 = _tuple$51[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x106, new $Uint64(4294967295, 4294967294));
		x115 = _tuple$52[0];
		x114 = _tuple$52[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$53 = bits.Mul64(x106, new $Uint64(4294967295, 0));
		x117 = _tuple$53[0];
		x116 = _tuple$53[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$54 = bits.Mul64(x106, new $Uint64(0, 4294967295));
		x119 = _tuple$54[0];
		x118 = _tuple$54[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x119, x116, new $Uint64(0, 0));
		x120 = _tuple$55[0];
		x121 = _tuple$55[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x117, x114, ((x$31 = (new p384Uint1(x121.$high, x121.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x122 = _tuple$56[0];
		x123 = _tuple$56[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x115, x112, ((x$32 = (new p384Uint1(x123.$high, x123.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x124 = _tuple$57[0];
		x125 = _tuple$57[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x113, x110, ((x$33 = (new p384Uint1(x125.$high, x125.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x126 = _tuple$58[0];
		x127 = _tuple$58[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x111, x108, ((x$34 = (new p384Uint1(x127.$high, x127.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x128 = _tuple$59[0];
		x129 = _tuple$59[1];
		x130 = (x$35 = ((x$36 = (new p384Uint1(x129.$high, x129.$low)), new $Uint64(x$36.$high, x$36.$low))), new $Uint64(x$35.$high + x109.$high, x$35.$low + x109.$low));
		x132 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x92, x118, new $Uint64(0, 0));
		x132 = _tuple$60[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x94, x120, ((x$37 = (new p384Uint1(x132.$high, x132.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x133 = _tuple$61[0];
		x134 = _tuple$61[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x96, x122, ((x$38 = (new p384Uint1(x134.$high, x134.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x135 = _tuple$62[0];
		x136 = _tuple$62[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x98, x124, ((x$39 = (new p384Uint1(x136.$high, x136.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x137 = _tuple$63[0];
		x138 = _tuple$63[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x100, x126, ((x$40 = (new p384Uint1(x138.$high, x138.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x139 = _tuple$64[0];
		x140 = _tuple$64[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x102, x128, ((x$41 = (new p384Uint1(x140.$high, x140.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x141 = _tuple$65[0];
		x142 = _tuple$65[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x104, x130, ((x$42 = (new p384Uint1(x142.$high, x142.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x143 = _tuple$66[0];
		x144 = _tuple$66[1];
		x145 = (x$43 = ((x$44 = (new p384Uint1(x144.$high, x144.$low)), new $Uint64(x$44.$high, x$44.$low))), x$45 = ((x$46 = (new p384Uint1(x105.$high, x105.$low)), new $Uint64(x$46.$high, x$46.$low))), new $Uint64(x$43.$high + x$45.$high, x$43.$low + x$45.$low));
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$67 = bits.Mul64(x2, arg2[5]);
		x147 = _tuple$67[0];
		x146 = _tuple$67[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$68 = bits.Mul64(x2, arg2[4]);
		x149 = _tuple$68[0];
		x148 = _tuple$68[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$69 = bits.Mul64(x2, arg2[3]);
		x151 = _tuple$69[0];
		x150 = _tuple$69[1];
		x152 = new $Uint64(0, 0);
		x153 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x2, arg2[2]);
		x153 = _tuple$70[0];
		x152 = _tuple$70[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x2, arg2[1]);
		x155 = _tuple$71[0];
		x154 = _tuple$71[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x2, arg2[0]);
		x157 = _tuple$72[0];
		x156 = _tuple$72[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x157, x154, new $Uint64(0, 0));
		x158 = _tuple$73[0];
		x159 = _tuple$73[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x155, x152, ((x$47 = (new p384Uint1(x159.$high, x159.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x160 = _tuple$74[0];
		x161 = _tuple$74[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x153, x150, ((x$48 = (new p384Uint1(x161.$high, x161.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x162 = _tuple$75[0];
		x163 = _tuple$75[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$76 = bits.Add64(x151, x148, ((x$49 = (new p384Uint1(x163.$high, x163.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x164 = _tuple$76[0];
		x165 = _tuple$76[1];
		x166 = new $Uint64(0, 0);
		x167 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x149, x146, ((x$50 = (new p384Uint1(x165.$high, x165.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x166 = _tuple$77[0];
		x167 = _tuple$77[1];
		x168 = (x$51 = ((x$52 = (new p384Uint1(x167.$high, x167.$low)), new $Uint64(x$52.$high, x$52.$low))), new $Uint64(x$51.$high + x147.$high, x$51.$low + x147.$low));
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x133, x156, new $Uint64(0, 0));
		x169 = _tuple$78[0];
		x170 = _tuple$78[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$79 = bits.Add64(x135, x158, ((x$53 = (new p384Uint1(x170.$high, x170.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x171 = _tuple$79[0];
		x172 = _tuple$79[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x137, x160, ((x$54 = (new p384Uint1(x172.$high, x172.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x173 = _tuple$80[0];
		x174 = _tuple$80[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x139, x162, ((x$55 = (new p384Uint1(x174.$high, x174.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x175 = _tuple$81[0];
		x176 = _tuple$81[1];
		x177 = new $Uint64(0, 0);
		x178 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x141, x164, ((x$56 = (new p384Uint1(x176.$high, x176.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x177 = _tuple$82[0];
		x178 = _tuple$82[1];
		x179 = new $Uint64(0, 0);
		x180 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x143, x166, ((x$57 = (new p384Uint1(x178.$high, x178.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x179 = _tuple$83[0];
		x180 = _tuple$83[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x145, x168, ((x$58 = (new p384Uint1(x180.$high, x180.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x181 = _tuple$84[0];
		x182 = _tuple$84[1];
		x183 = new $Uint64(0, 0);
		_tuple$85 = bits.Mul64(x169, new $Uint64(1, 1));
		x183 = _tuple$85[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$86 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x186 = _tuple$86[0];
		x185 = _tuple$86[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$87 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x188 = _tuple$87[0];
		x187 = _tuple$87[1];
		x189 = new $Uint64(0, 0);
		x190 = new $Uint64(0, 0);
		_tuple$88 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x190 = _tuple$88[0];
		x189 = _tuple$88[1];
		x191 = new $Uint64(0, 0);
		x192 = new $Uint64(0, 0);
		_tuple$89 = bits.Mul64(x183, new $Uint64(4294967295, 4294967294));
		x192 = _tuple$89[0];
		x191 = _tuple$89[1];
		x193 = new $Uint64(0, 0);
		x194 = new $Uint64(0, 0);
		_tuple$90 = bits.Mul64(x183, new $Uint64(4294967295, 0));
		x194 = _tuple$90[0];
		x193 = _tuple$90[1];
		x195 = new $Uint64(0, 0);
		x196 = new $Uint64(0, 0);
		_tuple$91 = bits.Mul64(x183, new $Uint64(0, 4294967295));
		x196 = _tuple$91[0];
		x195 = _tuple$91[1];
		x197 = new $Uint64(0, 0);
		x198 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x196, x193, new $Uint64(0, 0));
		x197 = _tuple$92[0];
		x198 = _tuple$92[1];
		x199 = new $Uint64(0, 0);
		x200 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64(x194, x191, ((x$59 = (new p384Uint1(x198.$high, x198.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x199 = _tuple$93[0];
		x200 = _tuple$93[1];
		x201 = new $Uint64(0, 0);
		x202 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x192, x189, ((x$60 = (new p384Uint1(x200.$high, x200.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x201 = _tuple$94[0];
		x202 = _tuple$94[1];
		x203 = new $Uint64(0, 0);
		x204 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x190, x187, ((x$61 = (new p384Uint1(x202.$high, x202.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x203 = _tuple$95[0];
		x204 = _tuple$95[1];
		x205 = new $Uint64(0, 0);
		x206 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x188, x185, ((x$62 = (new p384Uint1(x204.$high, x204.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x205 = _tuple$96[0];
		x206 = _tuple$96[1];
		x207 = (x$63 = ((x$64 = (new p384Uint1(x206.$high, x206.$low)), new $Uint64(x$64.$high, x$64.$low))), new $Uint64(x$63.$high + x186.$high, x$63.$low + x186.$low));
		x209 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x169, x195, new $Uint64(0, 0));
		x209 = _tuple$97[1];
		x210 = new $Uint64(0, 0);
		x211 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x171, x197, ((x$65 = (new p384Uint1(x209.$high, x209.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x210 = _tuple$98[0];
		x211 = _tuple$98[1];
		x212 = new $Uint64(0, 0);
		x213 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x173, x199, ((x$66 = (new p384Uint1(x211.$high, x211.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x212 = _tuple$99[0];
		x213 = _tuple$99[1];
		x214 = new $Uint64(0, 0);
		x215 = new $Uint64(0, 0);
		_tuple$100 = bits.Add64(x175, x201, ((x$67 = (new p384Uint1(x213.$high, x213.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x214 = _tuple$100[0];
		x215 = _tuple$100[1];
		x216 = new $Uint64(0, 0);
		x217 = new $Uint64(0, 0);
		_tuple$101 = bits.Add64(x177, x203, ((x$68 = (new p384Uint1(x215.$high, x215.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x216 = _tuple$101[0];
		x217 = _tuple$101[1];
		x218 = new $Uint64(0, 0);
		x219 = new $Uint64(0, 0);
		_tuple$102 = bits.Add64(x179, x205, ((x$69 = (new p384Uint1(x217.$high, x217.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x218 = _tuple$102[0];
		x219 = _tuple$102[1];
		x220 = new $Uint64(0, 0);
		x221 = new $Uint64(0, 0);
		_tuple$103 = bits.Add64(x181, x207, ((x$70 = (new p384Uint1(x219.$high, x219.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x220 = _tuple$103[0];
		x221 = _tuple$103[1];
		x222 = (x$71 = ((x$72 = (new p384Uint1(x221.$high, x221.$low)), new $Uint64(x$72.$high, x$72.$low))), x$73 = ((x$74 = (new p384Uint1(x182.$high, x182.$low)), new $Uint64(x$74.$high, x$74.$low))), new $Uint64(x$71.$high + x$73.$high, x$71.$low + x$73.$low));
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x3, arg2[5]);
		x224 = _tuple$104[0];
		x223 = _tuple$104[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x3, arg2[4]);
		x226 = _tuple$105[0];
		x225 = _tuple$105[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x3, arg2[3]);
		x228 = _tuple$106[0];
		x227 = _tuple$106[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$107 = bits.Mul64(x3, arg2[2]);
		x230 = _tuple$107[0];
		x229 = _tuple$107[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$108 = bits.Mul64(x3, arg2[1]);
		x232 = _tuple$108[0];
		x231 = _tuple$108[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$109 = bits.Mul64(x3, arg2[0]);
		x234 = _tuple$109[0];
		x233 = _tuple$109[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$110 = bits.Add64(x234, x231, new $Uint64(0, 0));
		x235 = _tuple$110[0];
		x236 = _tuple$110[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x232, x229, ((x$75 = (new p384Uint1(x236.$high, x236.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x237 = _tuple$111[0];
		x238 = _tuple$111[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x230, x227, ((x$76 = (new p384Uint1(x238.$high, x238.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x239 = _tuple$112[0];
		x240 = _tuple$112[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x228, x225, ((x$77 = (new p384Uint1(x240.$high, x240.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x241 = _tuple$113[0];
		x242 = _tuple$113[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x226, x223, ((x$78 = (new p384Uint1(x242.$high, x242.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x243 = _tuple$114[0];
		x244 = _tuple$114[1];
		x245 = (x$79 = ((x$80 = (new p384Uint1(x244.$high, x244.$low)), new $Uint64(x$80.$high, x$80.$low))), new $Uint64(x$79.$high + x224.$high, x$79.$low + x224.$low));
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x210, x233, new $Uint64(0, 0));
		x246 = _tuple$115[0];
		x247 = _tuple$115[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x212, x235, ((x$81 = (new p384Uint1(x247.$high, x247.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x248 = _tuple$116[0];
		x249 = _tuple$116[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x214, x237, ((x$82 = (new p384Uint1(x249.$high, x249.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x250 = _tuple$117[0];
		x251 = _tuple$117[1];
		x252 = new $Uint64(0, 0);
		x253 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x216, x239, ((x$83 = (new p384Uint1(x251.$high, x251.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x252 = _tuple$118[0];
		x253 = _tuple$118[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x218, x241, ((x$84 = (new p384Uint1(x253.$high, x253.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x254 = _tuple$119[0];
		x255 = _tuple$119[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x220, x243, ((x$85 = (new p384Uint1(x255.$high, x255.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x256 = _tuple$120[0];
		x257 = _tuple$120[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x222, x245, ((x$86 = (new p384Uint1(x257.$high, x257.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x258 = _tuple$121[0];
		x259 = _tuple$121[1];
		x260 = new $Uint64(0, 0);
		_tuple$122 = bits.Mul64(x246, new $Uint64(1, 1));
		x260 = _tuple$122[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$123 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x263 = _tuple$123[0];
		x262 = _tuple$123[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$124 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x265 = _tuple$124[0];
		x264 = _tuple$124[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$125 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x267 = _tuple$125[0];
		x266 = _tuple$125[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x260, new $Uint64(4294967295, 4294967294));
		x269 = _tuple$126[0];
		x268 = _tuple$126[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x260, new $Uint64(4294967295, 0));
		x271 = _tuple$127[0];
		x270 = _tuple$127[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x260, new $Uint64(0, 4294967295));
		x273 = _tuple$128[0];
		x272 = _tuple$128[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$129 = bits.Add64(x273, x270, new $Uint64(0, 0));
		x274 = _tuple$129[0];
		x275 = _tuple$129[1];
		x276 = new $Uint64(0, 0);
		x277 = new $Uint64(0, 0);
		_tuple$130 = bits.Add64(x271, x268, ((x$87 = (new p384Uint1(x275.$high, x275.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x276 = _tuple$130[0];
		x277 = _tuple$130[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$131 = bits.Add64(x269, x266, ((x$88 = (new p384Uint1(x277.$high, x277.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x278 = _tuple$131[0];
		x279 = _tuple$131[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x267, x264, ((x$89 = (new p384Uint1(x279.$high, x279.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x280 = _tuple$132[0];
		x281 = _tuple$132[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x265, x262, ((x$90 = (new p384Uint1(x281.$high, x281.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x282 = _tuple$133[0];
		x283 = _tuple$133[1];
		x284 = (x$91 = ((x$92 = (new p384Uint1(x283.$high, x283.$low)), new $Uint64(x$92.$high, x$92.$low))), new $Uint64(x$91.$high + x263.$high, x$91.$low + x263.$low));
		x286 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x246, x272, new $Uint64(0, 0));
		x286 = _tuple$134[1];
		x287 = new $Uint64(0, 0);
		x288 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x248, x274, ((x$93 = (new p384Uint1(x286.$high, x286.$low)), new $Uint64(x$93.$high, x$93.$low))));
		x287 = _tuple$135[0];
		x288 = _tuple$135[1];
		x289 = new $Uint64(0, 0);
		x290 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x250, x276, ((x$94 = (new p384Uint1(x288.$high, x288.$low)), new $Uint64(x$94.$high, x$94.$low))));
		x289 = _tuple$136[0];
		x290 = _tuple$136[1];
		x291 = new $Uint64(0, 0);
		x292 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x252, x278, ((x$95 = (new p384Uint1(x290.$high, x290.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x291 = _tuple$137[0];
		x292 = _tuple$137[1];
		x293 = new $Uint64(0, 0);
		x294 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x254, x280, ((x$96 = (new p384Uint1(x292.$high, x292.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x293 = _tuple$138[0];
		x294 = _tuple$138[1];
		x295 = new $Uint64(0, 0);
		x296 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x256, x282, ((x$97 = (new p384Uint1(x294.$high, x294.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x295 = _tuple$139[0];
		x296 = _tuple$139[1];
		x297 = new $Uint64(0, 0);
		x298 = new $Uint64(0, 0);
		_tuple$140 = bits.Add64(x258, x284, ((x$98 = (new p384Uint1(x296.$high, x296.$low)), new $Uint64(x$98.$high, x$98.$low))));
		x297 = _tuple$140[0];
		x298 = _tuple$140[1];
		x299 = (x$99 = ((x$100 = (new p384Uint1(x298.$high, x298.$low)), new $Uint64(x$100.$high, x$100.$low))), x$101 = ((x$102 = (new p384Uint1(x259.$high, x259.$low)), new $Uint64(x$102.$high, x$102.$low))), new $Uint64(x$99.$high + x$101.$high, x$99.$low + x$101.$low));
		x300 = new $Uint64(0, 0);
		x301 = new $Uint64(0, 0);
		_tuple$141 = bits.Mul64(x4, arg2[5]);
		x301 = _tuple$141[0];
		x300 = _tuple$141[1];
		x302 = new $Uint64(0, 0);
		x303 = new $Uint64(0, 0);
		_tuple$142 = bits.Mul64(x4, arg2[4]);
		x303 = _tuple$142[0];
		x302 = _tuple$142[1];
		x304 = new $Uint64(0, 0);
		x305 = new $Uint64(0, 0);
		_tuple$143 = bits.Mul64(x4, arg2[3]);
		x305 = _tuple$143[0];
		x304 = _tuple$143[1];
		x306 = new $Uint64(0, 0);
		x307 = new $Uint64(0, 0);
		_tuple$144 = bits.Mul64(x4, arg2[2]);
		x307 = _tuple$144[0];
		x306 = _tuple$144[1];
		x308 = new $Uint64(0, 0);
		x309 = new $Uint64(0, 0);
		_tuple$145 = bits.Mul64(x4, arg2[1]);
		x309 = _tuple$145[0];
		x308 = _tuple$145[1];
		x310 = new $Uint64(0, 0);
		x311 = new $Uint64(0, 0);
		_tuple$146 = bits.Mul64(x4, arg2[0]);
		x311 = _tuple$146[0];
		x310 = _tuple$146[1];
		x312 = new $Uint64(0, 0);
		x313 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x311, x308, new $Uint64(0, 0));
		x312 = _tuple$147[0];
		x313 = _tuple$147[1];
		x314 = new $Uint64(0, 0);
		x315 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x309, x306, ((x$103 = (new p384Uint1(x313.$high, x313.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x314 = _tuple$148[0];
		x315 = _tuple$148[1];
		x316 = new $Uint64(0, 0);
		x317 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x307, x304, ((x$104 = (new p384Uint1(x315.$high, x315.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x316 = _tuple$149[0];
		x317 = _tuple$149[1];
		x318 = new $Uint64(0, 0);
		x319 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x305, x302, ((x$105 = (new p384Uint1(x317.$high, x317.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x318 = _tuple$150[0];
		x319 = _tuple$150[1];
		x320 = new $Uint64(0, 0);
		x321 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x303, x300, ((x$106 = (new p384Uint1(x319.$high, x319.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x320 = _tuple$151[0];
		x321 = _tuple$151[1];
		x322 = (x$107 = ((x$108 = (new p384Uint1(x321.$high, x321.$low)), new $Uint64(x$108.$high, x$108.$low))), new $Uint64(x$107.$high + x301.$high, x$107.$low + x301.$low));
		x323 = new $Uint64(0, 0);
		x324 = new $Uint64(0, 0);
		_tuple$152 = bits.Add64(x287, x310, new $Uint64(0, 0));
		x323 = _tuple$152[0];
		x324 = _tuple$152[1];
		x325 = new $Uint64(0, 0);
		x326 = new $Uint64(0, 0);
		_tuple$153 = bits.Add64(x289, x312, ((x$109 = (new p384Uint1(x324.$high, x324.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x325 = _tuple$153[0];
		x326 = _tuple$153[1];
		x327 = new $Uint64(0, 0);
		x328 = new $Uint64(0, 0);
		_tuple$154 = bits.Add64(x291, x314, ((x$110 = (new p384Uint1(x326.$high, x326.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x327 = _tuple$154[0];
		x328 = _tuple$154[1];
		x329 = new $Uint64(0, 0);
		x330 = new $Uint64(0, 0);
		_tuple$155 = bits.Add64(x293, x316, ((x$111 = (new p384Uint1(x328.$high, x328.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x329 = _tuple$155[0];
		x330 = _tuple$155[1];
		x331 = new $Uint64(0, 0);
		x332 = new $Uint64(0, 0);
		_tuple$156 = bits.Add64(x295, x318, ((x$112 = (new p384Uint1(x330.$high, x330.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x331 = _tuple$156[0];
		x332 = _tuple$156[1];
		x333 = new $Uint64(0, 0);
		x334 = new $Uint64(0, 0);
		_tuple$157 = bits.Add64(x297, x320, ((x$113 = (new p384Uint1(x332.$high, x332.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x333 = _tuple$157[0];
		x334 = _tuple$157[1];
		x335 = new $Uint64(0, 0);
		x336 = new $Uint64(0, 0);
		_tuple$158 = bits.Add64(x299, x322, ((x$114 = (new p384Uint1(x334.$high, x334.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x335 = _tuple$158[0];
		x336 = _tuple$158[1];
		x337 = new $Uint64(0, 0);
		_tuple$159 = bits.Mul64(x323, new $Uint64(1, 1));
		x337 = _tuple$159[1];
		x339 = new $Uint64(0, 0);
		x340 = new $Uint64(0, 0);
		_tuple$160 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x340 = _tuple$160[0];
		x339 = _tuple$160[1];
		x341 = new $Uint64(0, 0);
		x342 = new $Uint64(0, 0);
		_tuple$161 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x342 = _tuple$161[0];
		x341 = _tuple$161[1];
		x343 = new $Uint64(0, 0);
		x344 = new $Uint64(0, 0);
		_tuple$162 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x344 = _tuple$162[0];
		x343 = _tuple$162[1];
		x345 = new $Uint64(0, 0);
		x346 = new $Uint64(0, 0);
		_tuple$163 = bits.Mul64(x337, new $Uint64(4294967295, 4294967294));
		x346 = _tuple$163[0];
		x345 = _tuple$163[1];
		x347 = new $Uint64(0, 0);
		x348 = new $Uint64(0, 0);
		_tuple$164 = bits.Mul64(x337, new $Uint64(4294967295, 0));
		x348 = _tuple$164[0];
		x347 = _tuple$164[1];
		x349 = new $Uint64(0, 0);
		x350 = new $Uint64(0, 0);
		_tuple$165 = bits.Mul64(x337, new $Uint64(0, 4294967295));
		x350 = _tuple$165[0];
		x349 = _tuple$165[1];
		x351 = new $Uint64(0, 0);
		x352 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x350, x347, new $Uint64(0, 0));
		x351 = _tuple$166[0];
		x352 = _tuple$166[1];
		x353 = new $Uint64(0, 0);
		x354 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x348, x345, ((x$115 = (new p384Uint1(x352.$high, x352.$low)), new $Uint64(x$115.$high, x$115.$low))));
		x353 = _tuple$167[0];
		x354 = _tuple$167[1];
		x355 = new $Uint64(0, 0);
		x356 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x346, x343, ((x$116 = (new p384Uint1(x354.$high, x354.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x355 = _tuple$168[0];
		x356 = _tuple$168[1];
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x344, x341, ((x$117 = (new p384Uint1(x356.$high, x356.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x357 = _tuple$169[0];
		x358 = _tuple$169[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x342, x339, ((x$118 = (new p384Uint1(x358.$high, x358.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x359 = _tuple$170[0];
		x360 = _tuple$170[1];
		x361 = (x$119 = ((x$120 = (new p384Uint1(x360.$high, x360.$low)), new $Uint64(x$120.$high, x$120.$low))), new $Uint64(x$119.$high + x340.$high, x$119.$low + x340.$low));
		x363 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x323, x349, new $Uint64(0, 0));
		x363 = _tuple$171[1];
		x364 = new $Uint64(0, 0);
		x365 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x325, x351, ((x$121 = (new p384Uint1(x363.$high, x363.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x364 = _tuple$172[0];
		x365 = _tuple$172[1];
		x366 = new $Uint64(0, 0);
		x367 = new $Uint64(0, 0);
		_tuple$173 = bits.Add64(x327, x353, ((x$122 = (new p384Uint1(x365.$high, x365.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x366 = _tuple$173[0];
		x367 = _tuple$173[1];
		x368 = new $Uint64(0, 0);
		x369 = new $Uint64(0, 0);
		_tuple$174 = bits.Add64(x329, x355, ((x$123 = (new p384Uint1(x367.$high, x367.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x368 = _tuple$174[0];
		x369 = _tuple$174[1];
		x370 = new $Uint64(0, 0);
		x371 = new $Uint64(0, 0);
		_tuple$175 = bits.Add64(x331, x357, ((x$124 = (new p384Uint1(x369.$high, x369.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x370 = _tuple$175[0];
		x371 = _tuple$175[1];
		x372 = new $Uint64(0, 0);
		x373 = new $Uint64(0, 0);
		_tuple$176 = bits.Add64(x333, x359, ((x$125 = (new p384Uint1(x371.$high, x371.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x372 = _tuple$176[0];
		x373 = _tuple$176[1];
		x374 = new $Uint64(0, 0);
		x375 = new $Uint64(0, 0);
		_tuple$177 = bits.Add64(x335, x361, ((x$126 = (new p384Uint1(x373.$high, x373.$low)), new $Uint64(x$126.$high, x$126.$low))));
		x374 = _tuple$177[0];
		x375 = _tuple$177[1];
		x376 = (x$127 = ((x$128 = (new p384Uint1(x375.$high, x375.$low)), new $Uint64(x$128.$high, x$128.$low))), x$129 = ((x$130 = (new p384Uint1(x336.$high, x336.$low)), new $Uint64(x$130.$high, x$130.$low))), new $Uint64(x$127.$high + x$129.$high, x$127.$low + x$129.$low));
		x377 = new $Uint64(0, 0);
		x378 = new $Uint64(0, 0);
		_tuple$178 = bits.Mul64(x5, arg2[5]);
		x378 = _tuple$178[0];
		x377 = _tuple$178[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x5, arg2[4]);
		x380 = _tuple$179[0];
		x379 = _tuple$179[1];
		x381 = new $Uint64(0, 0);
		x382 = new $Uint64(0, 0);
		_tuple$180 = bits.Mul64(x5, arg2[3]);
		x382 = _tuple$180[0];
		x381 = _tuple$180[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$181 = bits.Mul64(x5, arg2[2]);
		x384 = _tuple$181[0];
		x383 = _tuple$181[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$182 = bits.Mul64(x5, arg2[1]);
		x386 = _tuple$182[0];
		x385 = _tuple$182[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$183 = bits.Mul64(x5, arg2[0]);
		x388 = _tuple$183[0];
		x387 = _tuple$183[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$184 = bits.Add64(x388, x385, new $Uint64(0, 0));
		x389 = _tuple$184[0];
		x390 = _tuple$184[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$185 = bits.Add64(x386, x383, ((x$131 = (new p384Uint1(x390.$high, x390.$low)), new $Uint64(x$131.$high, x$131.$low))));
		x391 = _tuple$185[0];
		x392 = _tuple$185[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$186 = bits.Add64(x384, x381, ((x$132 = (new p384Uint1(x392.$high, x392.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x393 = _tuple$186[0];
		x394 = _tuple$186[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$187 = bits.Add64(x382, x379, ((x$133 = (new p384Uint1(x394.$high, x394.$low)), new $Uint64(x$133.$high, x$133.$low))));
		x395 = _tuple$187[0];
		x396 = _tuple$187[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x380, x377, ((x$134 = (new p384Uint1(x396.$high, x396.$low)), new $Uint64(x$134.$high, x$134.$low))));
		x397 = _tuple$188[0];
		x398 = _tuple$188[1];
		x399 = (x$135 = ((x$136 = (new p384Uint1(x398.$high, x398.$low)), new $Uint64(x$136.$high, x$136.$low))), new $Uint64(x$135.$high + x378.$high, x$135.$low + x378.$low));
		x400 = new $Uint64(0, 0);
		x401 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x364, x387, new $Uint64(0, 0));
		x400 = _tuple$189[0];
		x401 = _tuple$189[1];
		x402 = new $Uint64(0, 0);
		x403 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x366, x389, ((x$137 = (new p384Uint1(x401.$high, x401.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x402 = _tuple$190[0];
		x403 = _tuple$190[1];
		x404 = new $Uint64(0, 0);
		x405 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x368, x391, ((x$138 = (new p384Uint1(x403.$high, x403.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x404 = _tuple$191[0];
		x405 = _tuple$191[1];
		x406 = new $Uint64(0, 0);
		x407 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x370, x393, ((x$139 = (new p384Uint1(x405.$high, x405.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x406 = _tuple$192[0];
		x407 = _tuple$192[1];
		x408 = new $Uint64(0, 0);
		x409 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x372, x395, ((x$140 = (new p384Uint1(x407.$high, x407.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x408 = _tuple$193[0];
		x409 = _tuple$193[1];
		x410 = new $Uint64(0, 0);
		x411 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x374, x397, ((x$141 = (new p384Uint1(x409.$high, x409.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x410 = _tuple$194[0];
		x411 = _tuple$194[1];
		x412 = new $Uint64(0, 0);
		x413 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64(x376, x399, ((x$142 = (new p384Uint1(x411.$high, x411.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x412 = _tuple$195[0];
		x413 = _tuple$195[1];
		x414 = new $Uint64(0, 0);
		_tuple$196 = bits.Mul64(x400, new $Uint64(1, 1));
		x414 = _tuple$196[1];
		x416 = new $Uint64(0, 0);
		x417 = new $Uint64(0, 0);
		_tuple$197 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x417 = _tuple$197[0];
		x416 = _tuple$197[1];
		x418 = new $Uint64(0, 0);
		x419 = new $Uint64(0, 0);
		_tuple$198 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x419 = _tuple$198[0];
		x418 = _tuple$198[1];
		x420 = new $Uint64(0, 0);
		x421 = new $Uint64(0, 0);
		_tuple$199 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x421 = _tuple$199[0];
		x420 = _tuple$199[1];
		x422 = new $Uint64(0, 0);
		x423 = new $Uint64(0, 0);
		_tuple$200 = bits.Mul64(x414, new $Uint64(4294967295, 4294967294));
		x423 = _tuple$200[0];
		x422 = _tuple$200[1];
		x424 = new $Uint64(0, 0);
		x425 = new $Uint64(0, 0);
		_tuple$201 = bits.Mul64(x414, new $Uint64(4294967295, 0));
		x425 = _tuple$201[0];
		x424 = _tuple$201[1];
		x426 = new $Uint64(0, 0);
		x427 = new $Uint64(0, 0);
		_tuple$202 = bits.Mul64(x414, new $Uint64(0, 4294967295));
		x427 = _tuple$202[0];
		x426 = _tuple$202[1];
		x428 = new $Uint64(0, 0);
		x429 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x427, x424, new $Uint64(0, 0));
		x428 = _tuple$203[0];
		x429 = _tuple$203[1];
		x430 = new $Uint64(0, 0);
		x431 = new $Uint64(0, 0);
		_tuple$204 = bits.Add64(x425, x422, ((x$143 = (new p384Uint1(x429.$high, x429.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x430 = _tuple$204[0];
		x431 = _tuple$204[1];
		x432 = new $Uint64(0, 0);
		x433 = new $Uint64(0, 0);
		_tuple$205 = bits.Add64(x423, x420, ((x$144 = (new p384Uint1(x431.$high, x431.$low)), new $Uint64(x$144.$high, x$144.$low))));
		x432 = _tuple$205[0];
		x433 = _tuple$205[1];
		x434 = new $Uint64(0, 0);
		x435 = new $Uint64(0, 0);
		_tuple$206 = bits.Add64(x421, x418, ((x$145 = (new p384Uint1(x433.$high, x433.$low)), new $Uint64(x$145.$high, x$145.$low))));
		x434 = _tuple$206[0];
		x435 = _tuple$206[1];
		x436 = new $Uint64(0, 0);
		x437 = new $Uint64(0, 0);
		_tuple$207 = bits.Add64(x419, x416, ((x$146 = (new p384Uint1(x435.$high, x435.$low)), new $Uint64(x$146.$high, x$146.$low))));
		x436 = _tuple$207[0];
		x437 = _tuple$207[1];
		x438 = (x$147 = ((x$148 = (new p384Uint1(x437.$high, x437.$low)), new $Uint64(x$148.$high, x$148.$low))), new $Uint64(x$147.$high + x417.$high, x$147.$low + x417.$low));
		x440 = new $Uint64(0, 0);
		_tuple$208 = bits.Add64(x400, x426, new $Uint64(0, 0));
		x440 = _tuple$208[1];
		x441 = new $Uint64(0, 0);
		x442 = new $Uint64(0, 0);
		_tuple$209 = bits.Add64(x402, x428, ((x$149 = (new p384Uint1(x440.$high, x440.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x441 = _tuple$209[0];
		x442 = _tuple$209[1];
		x443 = new $Uint64(0, 0);
		x444 = new $Uint64(0, 0);
		_tuple$210 = bits.Add64(x404, x430, ((x$150 = (new p384Uint1(x442.$high, x442.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x443 = _tuple$210[0];
		x444 = _tuple$210[1];
		x445 = new $Uint64(0, 0);
		x446 = new $Uint64(0, 0);
		_tuple$211 = bits.Add64(x406, x432, ((x$151 = (new p384Uint1(x444.$high, x444.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x445 = _tuple$211[0];
		x446 = _tuple$211[1];
		x447 = new $Uint64(0, 0);
		x448 = new $Uint64(0, 0);
		_tuple$212 = bits.Add64(x408, x434, ((x$152 = (new p384Uint1(x446.$high, x446.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x447 = _tuple$212[0];
		x448 = _tuple$212[1];
		x449 = new $Uint64(0, 0);
		x450 = new $Uint64(0, 0);
		_tuple$213 = bits.Add64(x410, x436, ((x$153 = (new p384Uint1(x448.$high, x448.$low)), new $Uint64(x$153.$high, x$153.$low))));
		x449 = _tuple$213[0];
		x450 = _tuple$213[1];
		x451 = new $Uint64(0, 0);
		x452 = new $Uint64(0, 0);
		_tuple$214 = bits.Add64(x412, x438, ((x$154 = (new p384Uint1(x450.$high, x450.$low)), new $Uint64(x$154.$high, x$154.$low))));
		x451 = _tuple$214[0];
		x452 = _tuple$214[1];
		x453 = (x$155 = ((x$156 = (new p384Uint1(x452.$high, x452.$low)), new $Uint64(x$156.$high, x$156.$low))), x$157 = ((x$158 = (new p384Uint1(x413.$high, x413.$low)), new $Uint64(x$158.$high, x$158.$low))), new $Uint64(x$155.$high + x$157.$high, x$155.$low + x$157.$low));
		x454 = new $Uint64(0, 0);
		x455 = new $Uint64(0, 0);
		_tuple$215 = bits.Sub64(x441, new $Uint64(0, 4294967295), new $Uint64(0, 0));
		x454 = _tuple$215[0];
		x455 = _tuple$215[1];
		x456 = new $Uint64(0, 0);
		x457 = new $Uint64(0, 0);
		_tuple$216 = bits.Sub64(x443, new $Uint64(4294967295, 0), ((x$159 = (new p384Uint1(x455.$high, x455.$low)), new $Uint64(x$159.$high, x$159.$low))));
		x456 = _tuple$216[0];
		x457 = _tuple$216[1];
		x458 = new $Uint64(0, 0);
		x459 = new $Uint64(0, 0);
		_tuple$217 = bits.Sub64(x445, new $Uint64(4294967295, 4294967294), ((x$160 = (new p384Uint1(x457.$high, x457.$low)), new $Uint64(x$160.$high, x$160.$low))));
		x458 = _tuple$217[0];
		x459 = _tuple$217[1];
		x460 = new $Uint64(0, 0);
		x461 = new $Uint64(0, 0);
		_tuple$218 = bits.Sub64(x447, new $Uint64(4294967295, 4294967295), ((x$161 = (new p384Uint1(x459.$high, x459.$low)), new $Uint64(x$161.$high, x$161.$low))));
		x460 = _tuple$218[0];
		x461 = _tuple$218[1];
		x462 = new $Uint64(0, 0);
		x463 = new $Uint64(0, 0);
		_tuple$219 = bits.Sub64(x449, new $Uint64(4294967295, 4294967295), ((x$162 = (new p384Uint1(x461.$high, x461.$low)), new $Uint64(x$162.$high, x$162.$low))));
		x462 = _tuple$219[0];
		x463 = _tuple$219[1];
		x464 = new $Uint64(0, 0);
		x465 = new $Uint64(0, 0);
		_tuple$220 = bits.Sub64(x451, new $Uint64(4294967295, 4294967295), ((x$163 = (new p384Uint1(x463.$high, x463.$low)), new $Uint64(x$163.$high, x$163.$low))));
		x464 = _tuple$220[0];
		x465 = _tuple$220[1];
		x467 = new $Uint64(0, 0);
		_tuple$221 = bits.Sub64(x453, new $Uint64(0, 0), ((x$164 = (new p384Uint1(x465.$high, x465.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x467 = _tuple$221[1];
		x468 = new $Uint64(0, 0);
		p384CmovznzU64((x468$24ptr || (x468$24ptr = new ptrType(function() { return x468; }, function($v) { x468 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x454, x441);
		x469 = new $Uint64(0, 0);
		p384CmovznzU64((x469$24ptr || (x469$24ptr = new ptrType(function() { return x469; }, function($v) { x469 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x456, x443);
		x470 = new $Uint64(0, 0);
		p384CmovznzU64((x470$24ptr || (x470$24ptr = new ptrType(function() { return x470; }, function($v) { x470 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x458, x445);
		x471 = new $Uint64(0, 0);
		p384CmovznzU64((x471$24ptr || (x471$24ptr = new ptrType(function() { return x471; }, function($v) { x471 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x460, x447);
		x472 = new $Uint64(0, 0);
		p384CmovznzU64((x472$24ptr || (x472$24ptr = new ptrType(function() { return x472; }, function($v) { x472 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x462, x449);
		x473 = new $Uint64(0, 0);
		p384CmovznzU64((x473$24ptr || (x473$24ptr = new ptrType(function() { return x473; }, function($v) { x473 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x464, x451);
		out1.nilCheck, out1[0] = x468;
		out1.nilCheck, out1[1] = x469;
		out1.nilCheck, out1[2] = x470;
		out1.nilCheck, out1[3] = x471;
		out1.nilCheck, out1[4] = x472;
		out1.nilCheck, out1[5] = x473;
	};
	p384Square = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$199, _tuple$2, _tuple$20, _tuple$200, _tuple$201, _tuple$202, _tuple$203, _tuple$204, _tuple$205, _tuple$206, _tuple$207, _tuple$208, _tuple$209, _tuple$21, _tuple$210, _tuple$211, _tuple$212, _tuple$213, _tuple$214, _tuple$215, _tuple$216, _tuple$217, _tuple$218, _tuple$219, _tuple$22, _tuple$220, _tuple$221, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x103, x104, x105, x106, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x182, x183, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x310, x311, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x354, x355, x356, x357, x358, x359, x36, x360, x361, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x377, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x41, x410, x411, x412, x413, x414, x416, x417, x418, x419, x42, x420, x421, x422, x423, x424, x425, x426, x427, x428, x429, x43, x430, x431, x432, x433, x434, x435, x436, x437, x438, x44, x440, x441, x442, x443, x444, x445, x446, x447, x448, x449, x45, x450, x451, x452, x453, x454, x455, x456, x457, x458, x459, x46, x460, x461, x462, x463, x464, x465, x467, x468, x468$24ptr, x469, x469$24ptr, x47, x470, x470$24ptr, x471, x471$24ptr, x472, x472$24ptr, x473, x473$24ptr, x48, x49, x5, x50, x51, x52, x53, x54, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[4];
		x5 = arg1[5];
		x6 = arg1[0];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x6, arg1[5]);
		x8 = _tuple[0];
		x7 = _tuple[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x6, arg1[4]);
		x10 = _tuple$1[0];
		x9 = _tuple$1[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x6, arg1[3]);
		x12 = _tuple$2[0];
		x11 = _tuple$2[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x6, arg1[2]);
		x14 = _tuple$3[0];
		x13 = _tuple$3[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x6, arg1[1]);
		x16 = _tuple$4[0];
		x15 = _tuple$4[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x6, arg1[0]);
		x18 = _tuple$5[0];
		x17 = _tuple$5[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x18, x15, new $Uint64(0, 0));
		x19 = _tuple$6[0];
		x20 = _tuple$6[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x16, x13, ((x = (new p384Uint1(x20.$high, x20.$low)), new $Uint64(x.$high, x.$low))));
		x21 = _tuple$7[0];
		x22 = _tuple$7[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(x14, x11, ((x$1 = (new p384Uint1(x22.$high, x22.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x23 = _tuple$8[0];
		x24 = _tuple$8[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x12, x9, ((x$2 = (new p384Uint1(x24.$high, x24.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x25 = _tuple$9[0];
		x26 = _tuple$9[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x10, x7, ((x$3 = (new p384Uint1(x26.$high, x26.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x27 = _tuple$10[0];
		x28 = _tuple$10[1];
		x29 = (x$4 = ((x$5 = (new p384Uint1(x28.$high, x28.$low)), new $Uint64(x$5.$high, x$5.$low))), new $Uint64(x$4.$high + x8.$high, x$4.$low + x8.$low));
		x30 = new $Uint64(0, 0);
		_tuple$11 = bits.Mul64(x17, new $Uint64(1, 1));
		x30 = _tuple$11[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$12 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x33 = _tuple$12[0];
		x32 = _tuple$12[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$13 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x35 = _tuple$13[0];
		x34 = _tuple$13[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$14 = bits.Mul64(x30, new $Uint64(4294967295, 4294967295));
		x37 = _tuple$14[0];
		x36 = _tuple$14[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$15 = bits.Mul64(x30, new $Uint64(4294967295, 4294967294));
		x39 = _tuple$15[0];
		x38 = _tuple$15[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x30, new $Uint64(4294967295, 0));
		x41 = _tuple$16[0];
		x40 = _tuple$16[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x30, new $Uint64(0, 4294967295));
		x43 = _tuple$17[0];
		x42 = _tuple$17[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(x43, x40, new $Uint64(0, 0));
		x44 = _tuple$18[0];
		x45 = _tuple$18[1];
		x46 = new $Uint64(0, 0);
		x47 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x41, x38, ((x$6 = (new p384Uint1(x45.$high, x45.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x46 = _tuple$19[0];
		x47 = _tuple$19[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x39, x36, ((x$7 = (new p384Uint1(x47.$high, x47.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x48 = _tuple$20[0];
		x49 = _tuple$20[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x37, x34, ((x$8 = (new p384Uint1(x49.$high, x49.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x50 = _tuple$21[0];
		x51 = _tuple$21[1];
		x52 = new $Uint64(0, 0);
		x53 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x35, x32, ((x$9 = (new p384Uint1(x51.$high, x51.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x52 = _tuple$22[0];
		x53 = _tuple$22[1];
		x54 = (x$10 = ((x$11 = (new p384Uint1(x53.$high, x53.$low)), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$10.$high + x33.$high, x$10.$low + x33.$low));
		x56 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x17, x42, new $Uint64(0, 0));
		x56 = _tuple$23[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x19, x44, ((x$12 = (new p384Uint1(x56.$high, x56.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x57 = _tuple$24[0];
		x58 = _tuple$24[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x21, x46, ((x$13 = (new p384Uint1(x58.$high, x58.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x59 = _tuple$25[0];
		x60 = _tuple$25[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x23, x48, ((x$14 = (new p384Uint1(x60.$high, x60.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x61 = _tuple$26[0];
		x62 = _tuple$26[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x25, x50, ((x$15 = (new p384Uint1(x62.$high, x62.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x63 = _tuple$27[0];
		x64 = _tuple$27[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x27, x52, ((x$16 = (new p384Uint1(x64.$high, x64.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x65 = _tuple$28[0];
		x66 = _tuple$28[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(x29, x54, ((x$17 = (new p384Uint1(x66.$high, x66.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x67 = _tuple$29[0];
		x68 = _tuple$29[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x1, arg1[5]);
		x70 = _tuple$30[0];
		x69 = _tuple$30[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x1, arg1[4]);
		x72 = _tuple$31[0];
		x71 = _tuple$31[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$32 = bits.Mul64(x1, arg1[3]);
		x74 = _tuple$32[0];
		x73 = _tuple$32[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$33 = bits.Mul64(x1, arg1[2]);
		x76 = _tuple$33[0];
		x75 = _tuple$33[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$34 = bits.Mul64(x1, arg1[1]);
		x78 = _tuple$34[0];
		x77 = _tuple$34[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$35 = bits.Mul64(x1, arg1[0]);
		x80 = _tuple$35[0];
		x79 = _tuple$35[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x80, x77, new $Uint64(0, 0));
		x81 = _tuple$36[0];
		x82 = _tuple$36[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x78, x75, ((x$18 = (new p384Uint1(x82.$high, x82.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x83 = _tuple$37[0];
		x84 = _tuple$37[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x76, x73, ((x$19 = (new p384Uint1(x84.$high, x84.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x85 = _tuple$38[0];
		x86 = _tuple$38[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x74, x71, ((x$20 = (new p384Uint1(x86.$high, x86.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x87 = _tuple$39[0];
		x88 = _tuple$39[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x72, x69, ((x$21 = (new p384Uint1(x88.$high, x88.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x89 = _tuple$40[0];
		x90 = _tuple$40[1];
		x91 = (x$22 = ((x$23 = (new p384Uint1(x90.$high, x90.$low)), new $Uint64(x$23.$high, x$23.$low))), new $Uint64(x$22.$high + x70.$high, x$22.$low + x70.$low));
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x57, x79, new $Uint64(0, 0));
		x92 = _tuple$41[0];
		x93 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x59, x81, ((x$24 = (new p384Uint1(x93.$high, x93.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x94 = _tuple$42[0];
		x95 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x61, x83, ((x$25 = (new p384Uint1(x95.$high, x95.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x96 = _tuple$43[0];
		x97 = _tuple$43[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x63, x85, ((x$26 = (new p384Uint1(x97.$high, x97.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x98 = _tuple$44[0];
		x99 = _tuple$44[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x65, x87, ((x$27 = (new p384Uint1(x99.$high, x99.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x100 = _tuple$45[0];
		x101 = _tuple$45[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x67, x89, ((x$28 = (new p384Uint1(x101.$high, x101.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x102 = _tuple$46[0];
		x103 = _tuple$46[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(((x$29 = (new p384Uint1(x68.$high, x68.$low)), new $Uint64(x$29.$high, x$29.$low))), x91, ((x$30 = (new p384Uint1(x103.$high, x103.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x104 = _tuple$47[0];
		x105 = _tuple$47[1];
		x106 = new $Uint64(0, 0);
		_tuple$48 = bits.Mul64(x92, new $Uint64(1, 1));
		x106 = _tuple$48[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x109 = _tuple$49[0];
		x108 = _tuple$49[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x111 = _tuple$50[0];
		x110 = _tuple$50[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x106, new $Uint64(4294967295, 4294967295));
		x113 = _tuple$51[0];
		x112 = _tuple$51[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x106, new $Uint64(4294967295, 4294967294));
		x115 = _tuple$52[0];
		x114 = _tuple$52[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$53 = bits.Mul64(x106, new $Uint64(4294967295, 0));
		x117 = _tuple$53[0];
		x116 = _tuple$53[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$54 = bits.Mul64(x106, new $Uint64(0, 4294967295));
		x119 = _tuple$54[0];
		x118 = _tuple$54[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x119, x116, new $Uint64(0, 0));
		x120 = _tuple$55[0];
		x121 = _tuple$55[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x117, x114, ((x$31 = (new p384Uint1(x121.$high, x121.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x122 = _tuple$56[0];
		x123 = _tuple$56[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x115, x112, ((x$32 = (new p384Uint1(x123.$high, x123.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x124 = _tuple$57[0];
		x125 = _tuple$57[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x113, x110, ((x$33 = (new p384Uint1(x125.$high, x125.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x126 = _tuple$58[0];
		x127 = _tuple$58[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x111, x108, ((x$34 = (new p384Uint1(x127.$high, x127.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x128 = _tuple$59[0];
		x129 = _tuple$59[1];
		x130 = (x$35 = ((x$36 = (new p384Uint1(x129.$high, x129.$low)), new $Uint64(x$36.$high, x$36.$low))), new $Uint64(x$35.$high + x109.$high, x$35.$low + x109.$low));
		x132 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x92, x118, new $Uint64(0, 0));
		x132 = _tuple$60[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x94, x120, ((x$37 = (new p384Uint1(x132.$high, x132.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x133 = _tuple$61[0];
		x134 = _tuple$61[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x96, x122, ((x$38 = (new p384Uint1(x134.$high, x134.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x135 = _tuple$62[0];
		x136 = _tuple$62[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x98, x124, ((x$39 = (new p384Uint1(x136.$high, x136.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x137 = _tuple$63[0];
		x138 = _tuple$63[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x100, x126, ((x$40 = (new p384Uint1(x138.$high, x138.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x139 = _tuple$64[0];
		x140 = _tuple$64[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x102, x128, ((x$41 = (new p384Uint1(x140.$high, x140.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x141 = _tuple$65[0];
		x142 = _tuple$65[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x104, x130, ((x$42 = (new p384Uint1(x142.$high, x142.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x143 = _tuple$66[0];
		x144 = _tuple$66[1];
		x145 = (x$43 = ((x$44 = (new p384Uint1(x144.$high, x144.$low)), new $Uint64(x$44.$high, x$44.$low))), x$45 = ((x$46 = (new p384Uint1(x105.$high, x105.$low)), new $Uint64(x$46.$high, x$46.$low))), new $Uint64(x$43.$high + x$45.$high, x$43.$low + x$45.$low));
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$67 = bits.Mul64(x2, arg1[5]);
		x147 = _tuple$67[0];
		x146 = _tuple$67[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$68 = bits.Mul64(x2, arg1[4]);
		x149 = _tuple$68[0];
		x148 = _tuple$68[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$69 = bits.Mul64(x2, arg1[3]);
		x151 = _tuple$69[0];
		x150 = _tuple$69[1];
		x152 = new $Uint64(0, 0);
		x153 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x2, arg1[2]);
		x153 = _tuple$70[0];
		x152 = _tuple$70[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x2, arg1[1]);
		x155 = _tuple$71[0];
		x154 = _tuple$71[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x2, arg1[0]);
		x157 = _tuple$72[0];
		x156 = _tuple$72[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x157, x154, new $Uint64(0, 0));
		x158 = _tuple$73[0];
		x159 = _tuple$73[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x155, x152, ((x$47 = (new p384Uint1(x159.$high, x159.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x160 = _tuple$74[0];
		x161 = _tuple$74[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x153, x150, ((x$48 = (new p384Uint1(x161.$high, x161.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x162 = _tuple$75[0];
		x163 = _tuple$75[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$76 = bits.Add64(x151, x148, ((x$49 = (new p384Uint1(x163.$high, x163.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x164 = _tuple$76[0];
		x165 = _tuple$76[1];
		x166 = new $Uint64(0, 0);
		x167 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x149, x146, ((x$50 = (new p384Uint1(x165.$high, x165.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x166 = _tuple$77[0];
		x167 = _tuple$77[1];
		x168 = (x$51 = ((x$52 = (new p384Uint1(x167.$high, x167.$low)), new $Uint64(x$52.$high, x$52.$low))), new $Uint64(x$51.$high + x147.$high, x$51.$low + x147.$low));
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x133, x156, new $Uint64(0, 0));
		x169 = _tuple$78[0];
		x170 = _tuple$78[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$79 = bits.Add64(x135, x158, ((x$53 = (new p384Uint1(x170.$high, x170.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x171 = _tuple$79[0];
		x172 = _tuple$79[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x137, x160, ((x$54 = (new p384Uint1(x172.$high, x172.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x173 = _tuple$80[0];
		x174 = _tuple$80[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x139, x162, ((x$55 = (new p384Uint1(x174.$high, x174.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x175 = _tuple$81[0];
		x176 = _tuple$81[1];
		x177 = new $Uint64(0, 0);
		x178 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x141, x164, ((x$56 = (new p384Uint1(x176.$high, x176.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x177 = _tuple$82[0];
		x178 = _tuple$82[1];
		x179 = new $Uint64(0, 0);
		x180 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x143, x166, ((x$57 = (new p384Uint1(x178.$high, x178.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x179 = _tuple$83[0];
		x180 = _tuple$83[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x145, x168, ((x$58 = (new p384Uint1(x180.$high, x180.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x181 = _tuple$84[0];
		x182 = _tuple$84[1];
		x183 = new $Uint64(0, 0);
		_tuple$85 = bits.Mul64(x169, new $Uint64(1, 1));
		x183 = _tuple$85[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$86 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x186 = _tuple$86[0];
		x185 = _tuple$86[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$87 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x188 = _tuple$87[0];
		x187 = _tuple$87[1];
		x189 = new $Uint64(0, 0);
		x190 = new $Uint64(0, 0);
		_tuple$88 = bits.Mul64(x183, new $Uint64(4294967295, 4294967295));
		x190 = _tuple$88[0];
		x189 = _tuple$88[1];
		x191 = new $Uint64(0, 0);
		x192 = new $Uint64(0, 0);
		_tuple$89 = bits.Mul64(x183, new $Uint64(4294967295, 4294967294));
		x192 = _tuple$89[0];
		x191 = _tuple$89[1];
		x193 = new $Uint64(0, 0);
		x194 = new $Uint64(0, 0);
		_tuple$90 = bits.Mul64(x183, new $Uint64(4294967295, 0));
		x194 = _tuple$90[0];
		x193 = _tuple$90[1];
		x195 = new $Uint64(0, 0);
		x196 = new $Uint64(0, 0);
		_tuple$91 = bits.Mul64(x183, new $Uint64(0, 4294967295));
		x196 = _tuple$91[0];
		x195 = _tuple$91[1];
		x197 = new $Uint64(0, 0);
		x198 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x196, x193, new $Uint64(0, 0));
		x197 = _tuple$92[0];
		x198 = _tuple$92[1];
		x199 = new $Uint64(0, 0);
		x200 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64(x194, x191, ((x$59 = (new p384Uint1(x198.$high, x198.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x199 = _tuple$93[0];
		x200 = _tuple$93[1];
		x201 = new $Uint64(0, 0);
		x202 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x192, x189, ((x$60 = (new p384Uint1(x200.$high, x200.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x201 = _tuple$94[0];
		x202 = _tuple$94[1];
		x203 = new $Uint64(0, 0);
		x204 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x190, x187, ((x$61 = (new p384Uint1(x202.$high, x202.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x203 = _tuple$95[0];
		x204 = _tuple$95[1];
		x205 = new $Uint64(0, 0);
		x206 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x188, x185, ((x$62 = (new p384Uint1(x204.$high, x204.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x205 = _tuple$96[0];
		x206 = _tuple$96[1];
		x207 = (x$63 = ((x$64 = (new p384Uint1(x206.$high, x206.$low)), new $Uint64(x$64.$high, x$64.$low))), new $Uint64(x$63.$high + x186.$high, x$63.$low + x186.$low));
		x209 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x169, x195, new $Uint64(0, 0));
		x209 = _tuple$97[1];
		x210 = new $Uint64(0, 0);
		x211 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x171, x197, ((x$65 = (new p384Uint1(x209.$high, x209.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x210 = _tuple$98[0];
		x211 = _tuple$98[1];
		x212 = new $Uint64(0, 0);
		x213 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x173, x199, ((x$66 = (new p384Uint1(x211.$high, x211.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x212 = _tuple$99[0];
		x213 = _tuple$99[1];
		x214 = new $Uint64(0, 0);
		x215 = new $Uint64(0, 0);
		_tuple$100 = bits.Add64(x175, x201, ((x$67 = (new p384Uint1(x213.$high, x213.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x214 = _tuple$100[0];
		x215 = _tuple$100[1];
		x216 = new $Uint64(0, 0);
		x217 = new $Uint64(0, 0);
		_tuple$101 = bits.Add64(x177, x203, ((x$68 = (new p384Uint1(x215.$high, x215.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x216 = _tuple$101[0];
		x217 = _tuple$101[1];
		x218 = new $Uint64(0, 0);
		x219 = new $Uint64(0, 0);
		_tuple$102 = bits.Add64(x179, x205, ((x$69 = (new p384Uint1(x217.$high, x217.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x218 = _tuple$102[0];
		x219 = _tuple$102[1];
		x220 = new $Uint64(0, 0);
		x221 = new $Uint64(0, 0);
		_tuple$103 = bits.Add64(x181, x207, ((x$70 = (new p384Uint1(x219.$high, x219.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x220 = _tuple$103[0];
		x221 = _tuple$103[1];
		x222 = (x$71 = ((x$72 = (new p384Uint1(x221.$high, x221.$low)), new $Uint64(x$72.$high, x$72.$low))), x$73 = ((x$74 = (new p384Uint1(x182.$high, x182.$low)), new $Uint64(x$74.$high, x$74.$low))), new $Uint64(x$71.$high + x$73.$high, x$71.$low + x$73.$low));
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x3, arg1[5]);
		x224 = _tuple$104[0];
		x223 = _tuple$104[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x3, arg1[4]);
		x226 = _tuple$105[0];
		x225 = _tuple$105[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x3, arg1[3]);
		x228 = _tuple$106[0];
		x227 = _tuple$106[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$107 = bits.Mul64(x3, arg1[2]);
		x230 = _tuple$107[0];
		x229 = _tuple$107[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$108 = bits.Mul64(x3, arg1[1]);
		x232 = _tuple$108[0];
		x231 = _tuple$108[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$109 = bits.Mul64(x3, arg1[0]);
		x234 = _tuple$109[0];
		x233 = _tuple$109[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$110 = bits.Add64(x234, x231, new $Uint64(0, 0));
		x235 = _tuple$110[0];
		x236 = _tuple$110[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x232, x229, ((x$75 = (new p384Uint1(x236.$high, x236.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x237 = _tuple$111[0];
		x238 = _tuple$111[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x230, x227, ((x$76 = (new p384Uint1(x238.$high, x238.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x239 = _tuple$112[0];
		x240 = _tuple$112[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x228, x225, ((x$77 = (new p384Uint1(x240.$high, x240.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x241 = _tuple$113[0];
		x242 = _tuple$113[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x226, x223, ((x$78 = (new p384Uint1(x242.$high, x242.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x243 = _tuple$114[0];
		x244 = _tuple$114[1];
		x245 = (x$79 = ((x$80 = (new p384Uint1(x244.$high, x244.$low)), new $Uint64(x$80.$high, x$80.$low))), new $Uint64(x$79.$high + x224.$high, x$79.$low + x224.$low));
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x210, x233, new $Uint64(0, 0));
		x246 = _tuple$115[0];
		x247 = _tuple$115[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x212, x235, ((x$81 = (new p384Uint1(x247.$high, x247.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x248 = _tuple$116[0];
		x249 = _tuple$116[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x214, x237, ((x$82 = (new p384Uint1(x249.$high, x249.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x250 = _tuple$117[0];
		x251 = _tuple$117[1];
		x252 = new $Uint64(0, 0);
		x253 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x216, x239, ((x$83 = (new p384Uint1(x251.$high, x251.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x252 = _tuple$118[0];
		x253 = _tuple$118[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x218, x241, ((x$84 = (new p384Uint1(x253.$high, x253.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x254 = _tuple$119[0];
		x255 = _tuple$119[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x220, x243, ((x$85 = (new p384Uint1(x255.$high, x255.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x256 = _tuple$120[0];
		x257 = _tuple$120[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x222, x245, ((x$86 = (new p384Uint1(x257.$high, x257.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x258 = _tuple$121[0];
		x259 = _tuple$121[1];
		x260 = new $Uint64(0, 0);
		_tuple$122 = bits.Mul64(x246, new $Uint64(1, 1));
		x260 = _tuple$122[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$123 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x263 = _tuple$123[0];
		x262 = _tuple$123[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$124 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x265 = _tuple$124[0];
		x264 = _tuple$124[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$125 = bits.Mul64(x260, new $Uint64(4294967295, 4294967295));
		x267 = _tuple$125[0];
		x266 = _tuple$125[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x260, new $Uint64(4294967295, 4294967294));
		x269 = _tuple$126[0];
		x268 = _tuple$126[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x260, new $Uint64(4294967295, 0));
		x271 = _tuple$127[0];
		x270 = _tuple$127[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x260, new $Uint64(0, 4294967295));
		x273 = _tuple$128[0];
		x272 = _tuple$128[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$129 = bits.Add64(x273, x270, new $Uint64(0, 0));
		x274 = _tuple$129[0];
		x275 = _tuple$129[1];
		x276 = new $Uint64(0, 0);
		x277 = new $Uint64(0, 0);
		_tuple$130 = bits.Add64(x271, x268, ((x$87 = (new p384Uint1(x275.$high, x275.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x276 = _tuple$130[0];
		x277 = _tuple$130[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$131 = bits.Add64(x269, x266, ((x$88 = (new p384Uint1(x277.$high, x277.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x278 = _tuple$131[0];
		x279 = _tuple$131[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x267, x264, ((x$89 = (new p384Uint1(x279.$high, x279.$low)), new $Uint64(x$89.$high, x$89.$low))));
		x280 = _tuple$132[0];
		x281 = _tuple$132[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x265, x262, ((x$90 = (new p384Uint1(x281.$high, x281.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x282 = _tuple$133[0];
		x283 = _tuple$133[1];
		x284 = (x$91 = ((x$92 = (new p384Uint1(x283.$high, x283.$low)), new $Uint64(x$92.$high, x$92.$low))), new $Uint64(x$91.$high + x263.$high, x$91.$low + x263.$low));
		x286 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x246, x272, new $Uint64(0, 0));
		x286 = _tuple$134[1];
		x287 = new $Uint64(0, 0);
		x288 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x248, x274, ((x$93 = (new p384Uint1(x286.$high, x286.$low)), new $Uint64(x$93.$high, x$93.$low))));
		x287 = _tuple$135[0];
		x288 = _tuple$135[1];
		x289 = new $Uint64(0, 0);
		x290 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x250, x276, ((x$94 = (new p384Uint1(x288.$high, x288.$low)), new $Uint64(x$94.$high, x$94.$low))));
		x289 = _tuple$136[0];
		x290 = _tuple$136[1];
		x291 = new $Uint64(0, 0);
		x292 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x252, x278, ((x$95 = (new p384Uint1(x290.$high, x290.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x291 = _tuple$137[0];
		x292 = _tuple$137[1];
		x293 = new $Uint64(0, 0);
		x294 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x254, x280, ((x$96 = (new p384Uint1(x292.$high, x292.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x293 = _tuple$138[0];
		x294 = _tuple$138[1];
		x295 = new $Uint64(0, 0);
		x296 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x256, x282, ((x$97 = (new p384Uint1(x294.$high, x294.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x295 = _tuple$139[0];
		x296 = _tuple$139[1];
		x297 = new $Uint64(0, 0);
		x298 = new $Uint64(0, 0);
		_tuple$140 = bits.Add64(x258, x284, ((x$98 = (new p384Uint1(x296.$high, x296.$low)), new $Uint64(x$98.$high, x$98.$low))));
		x297 = _tuple$140[0];
		x298 = _tuple$140[1];
		x299 = (x$99 = ((x$100 = (new p384Uint1(x298.$high, x298.$low)), new $Uint64(x$100.$high, x$100.$low))), x$101 = ((x$102 = (new p384Uint1(x259.$high, x259.$low)), new $Uint64(x$102.$high, x$102.$low))), new $Uint64(x$99.$high + x$101.$high, x$99.$low + x$101.$low));
		x300 = new $Uint64(0, 0);
		x301 = new $Uint64(0, 0);
		_tuple$141 = bits.Mul64(x4, arg1[5]);
		x301 = _tuple$141[0];
		x300 = _tuple$141[1];
		x302 = new $Uint64(0, 0);
		x303 = new $Uint64(0, 0);
		_tuple$142 = bits.Mul64(x4, arg1[4]);
		x303 = _tuple$142[0];
		x302 = _tuple$142[1];
		x304 = new $Uint64(0, 0);
		x305 = new $Uint64(0, 0);
		_tuple$143 = bits.Mul64(x4, arg1[3]);
		x305 = _tuple$143[0];
		x304 = _tuple$143[1];
		x306 = new $Uint64(0, 0);
		x307 = new $Uint64(0, 0);
		_tuple$144 = bits.Mul64(x4, arg1[2]);
		x307 = _tuple$144[0];
		x306 = _tuple$144[1];
		x308 = new $Uint64(0, 0);
		x309 = new $Uint64(0, 0);
		_tuple$145 = bits.Mul64(x4, arg1[1]);
		x309 = _tuple$145[0];
		x308 = _tuple$145[1];
		x310 = new $Uint64(0, 0);
		x311 = new $Uint64(0, 0);
		_tuple$146 = bits.Mul64(x4, arg1[0]);
		x311 = _tuple$146[0];
		x310 = _tuple$146[1];
		x312 = new $Uint64(0, 0);
		x313 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x311, x308, new $Uint64(0, 0));
		x312 = _tuple$147[0];
		x313 = _tuple$147[1];
		x314 = new $Uint64(0, 0);
		x315 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x309, x306, ((x$103 = (new p384Uint1(x313.$high, x313.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x314 = _tuple$148[0];
		x315 = _tuple$148[1];
		x316 = new $Uint64(0, 0);
		x317 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x307, x304, ((x$104 = (new p384Uint1(x315.$high, x315.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x316 = _tuple$149[0];
		x317 = _tuple$149[1];
		x318 = new $Uint64(0, 0);
		x319 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x305, x302, ((x$105 = (new p384Uint1(x317.$high, x317.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x318 = _tuple$150[0];
		x319 = _tuple$150[1];
		x320 = new $Uint64(0, 0);
		x321 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x303, x300, ((x$106 = (new p384Uint1(x319.$high, x319.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x320 = _tuple$151[0];
		x321 = _tuple$151[1];
		x322 = (x$107 = ((x$108 = (new p384Uint1(x321.$high, x321.$low)), new $Uint64(x$108.$high, x$108.$low))), new $Uint64(x$107.$high + x301.$high, x$107.$low + x301.$low));
		x323 = new $Uint64(0, 0);
		x324 = new $Uint64(0, 0);
		_tuple$152 = bits.Add64(x287, x310, new $Uint64(0, 0));
		x323 = _tuple$152[0];
		x324 = _tuple$152[1];
		x325 = new $Uint64(0, 0);
		x326 = new $Uint64(0, 0);
		_tuple$153 = bits.Add64(x289, x312, ((x$109 = (new p384Uint1(x324.$high, x324.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x325 = _tuple$153[0];
		x326 = _tuple$153[1];
		x327 = new $Uint64(0, 0);
		x328 = new $Uint64(0, 0);
		_tuple$154 = bits.Add64(x291, x314, ((x$110 = (new p384Uint1(x326.$high, x326.$low)), new $Uint64(x$110.$high, x$110.$low))));
		x327 = _tuple$154[0];
		x328 = _tuple$154[1];
		x329 = new $Uint64(0, 0);
		x330 = new $Uint64(0, 0);
		_tuple$155 = bits.Add64(x293, x316, ((x$111 = (new p384Uint1(x328.$high, x328.$low)), new $Uint64(x$111.$high, x$111.$low))));
		x329 = _tuple$155[0];
		x330 = _tuple$155[1];
		x331 = new $Uint64(0, 0);
		x332 = new $Uint64(0, 0);
		_tuple$156 = bits.Add64(x295, x318, ((x$112 = (new p384Uint1(x330.$high, x330.$low)), new $Uint64(x$112.$high, x$112.$low))));
		x331 = _tuple$156[0];
		x332 = _tuple$156[1];
		x333 = new $Uint64(0, 0);
		x334 = new $Uint64(0, 0);
		_tuple$157 = bits.Add64(x297, x320, ((x$113 = (new p384Uint1(x332.$high, x332.$low)), new $Uint64(x$113.$high, x$113.$low))));
		x333 = _tuple$157[0];
		x334 = _tuple$157[1];
		x335 = new $Uint64(0, 0);
		x336 = new $Uint64(0, 0);
		_tuple$158 = bits.Add64(x299, x322, ((x$114 = (new p384Uint1(x334.$high, x334.$low)), new $Uint64(x$114.$high, x$114.$low))));
		x335 = _tuple$158[0];
		x336 = _tuple$158[1];
		x337 = new $Uint64(0, 0);
		_tuple$159 = bits.Mul64(x323, new $Uint64(1, 1));
		x337 = _tuple$159[1];
		x339 = new $Uint64(0, 0);
		x340 = new $Uint64(0, 0);
		_tuple$160 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x340 = _tuple$160[0];
		x339 = _tuple$160[1];
		x341 = new $Uint64(0, 0);
		x342 = new $Uint64(0, 0);
		_tuple$161 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x342 = _tuple$161[0];
		x341 = _tuple$161[1];
		x343 = new $Uint64(0, 0);
		x344 = new $Uint64(0, 0);
		_tuple$162 = bits.Mul64(x337, new $Uint64(4294967295, 4294967295));
		x344 = _tuple$162[0];
		x343 = _tuple$162[1];
		x345 = new $Uint64(0, 0);
		x346 = new $Uint64(0, 0);
		_tuple$163 = bits.Mul64(x337, new $Uint64(4294967295, 4294967294));
		x346 = _tuple$163[0];
		x345 = _tuple$163[1];
		x347 = new $Uint64(0, 0);
		x348 = new $Uint64(0, 0);
		_tuple$164 = bits.Mul64(x337, new $Uint64(4294967295, 0));
		x348 = _tuple$164[0];
		x347 = _tuple$164[1];
		x349 = new $Uint64(0, 0);
		x350 = new $Uint64(0, 0);
		_tuple$165 = bits.Mul64(x337, new $Uint64(0, 4294967295));
		x350 = _tuple$165[0];
		x349 = _tuple$165[1];
		x351 = new $Uint64(0, 0);
		x352 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x350, x347, new $Uint64(0, 0));
		x351 = _tuple$166[0];
		x352 = _tuple$166[1];
		x353 = new $Uint64(0, 0);
		x354 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x348, x345, ((x$115 = (new p384Uint1(x352.$high, x352.$low)), new $Uint64(x$115.$high, x$115.$low))));
		x353 = _tuple$167[0];
		x354 = _tuple$167[1];
		x355 = new $Uint64(0, 0);
		x356 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x346, x343, ((x$116 = (new p384Uint1(x354.$high, x354.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x355 = _tuple$168[0];
		x356 = _tuple$168[1];
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x344, x341, ((x$117 = (new p384Uint1(x356.$high, x356.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x357 = _tuple$169[0];
		x358 = _tuple$169[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x342, x339, ((x$118 = (new p384Uint1(x358.$high, x358.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x359 = _tuple$170[0];
		x360 = _tuple$170[1];
		x361 = (x$119 = ((x$120 = (new p384Uint1(x360.$high, x360.$low)), new $Uint64(x$120.$high, x$120.$low))), new $Uint64(x$119.$high + x340.$high, x$119.$low + x340.$low));
		x363 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x323, x349, new $Uint64(0, 0));
		x363 = _tuple$171[1];
		x364 = new $Uint64(0, 0);
		x365 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x325, x351, ((x$121 = (new p384Uint1(x363.$high, x363.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x364 = _tuple$172[0];
		x365 = _tuple$172[1];
		x366 = new $Uint64(0, 0);
		x367 = new $Uint64(0, 0);
		_tuple$173 = bits.Add64(x327, x353, ((x$122 = (new p384Uint1(x365.$high, x365.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x366 = _tuple$173[0];
		x367 = _tuple$173[1];
		x368 = new $Uint64(0, 0);
		x369 = new $Uint64(0, 0);
		_tuple$174 = bits.Add64(x329, x355, ((x$123 = (new p384Uint1(x367.$high, x367.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x368 = _tuple$174[0];
		x369 = _tuple$174[1];
		x370 = new $Uint64(0, 0);
		x371 = new $Uint64(0, 0);
		_tuple$175 = bits.Add64(x331, x357, ((x$124 = (new p384Uint1(x369.$high, x369.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x370 = _tuple$175[0];
		x371 = _tuple$175[1];
		x372 = new $Uint64(0, 0);
		x373 = new $Uint64(0, 0);
		_tuple$176 = bits.Add64(x333, x359, ((x$125 = (new p384Uint1(x371.$high, x371.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x372 = _tuple$176[0];
		x373 = _tuple$176[1];
		x374 = new $Uint64(0, 0);
		x375 = new $Uint64(0, 0);
		_tuple$177 = bits.Add64(x335, x361, ((x$126 = (new p384Uint1(x373.$high, x373.$low)), new $Uint64(x$126.$high, x$126.$low))));
		x374 = _tuple$177[0];
		x375 = _tuple$177[1];
		x376 = (x$127 = ((x$128 = (new p384Uint1(x375.$high, x375.$low)), new $Uint64(x$128.$high, x$128.$low))), x$129 = ((x$130 = (new p384Uint1(x336.$high, x336.$low)), new $Uint64(x$130.$high, x$130.$low))), new $Uint64(x$127.$high + x$129.$high, x$127.$low + x$129.$low));
		x377 = new $Uint64(0, 0);
		x378 = new $Uint64(0, 0);
		_tuple$178 = bits.Mul64(x5, arg1[5]);
		x378 = _tuple$178[0];
		x377 = _tuple$178[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x5, arg1[4]);
		x380 = _tuple$179[0];
		x379 = _tuple$179[1];
		x381 = new $Uint64(0, 0);
		x382 = new $Uint64(0, 0);
		_tuple$180 = bits.Mul64(x5, arg1[3]);
		x382 = _tuple$180[0];
		x381 = _tuple$180[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$181 = bits.Mul64(x5, arg1[2]);
		x384 = _tuple$181[0];
		x383 = _tuple$181[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$182 = bits.Mul64(x5, arg1[1]);
		x386 = _tuple$182[0];
		x385 = _tuple$182[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$183 = bits.Mul64(x5, arg1[0]);
		x388 = _tuple$183[0];
		x387 = _tuple$183[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$184 = bits.Add64(x388, x385, new $Uint64(0, 0));
		x389 = _tuple$184[0];
		x390 = _tuple$184[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$185 = bits.Add64(x386, x383, ((x$131 = (new p384Uint1(x390.$high, x390.$low)), new $Uint64(x$131.$high, x$131.$low))));
		x391 = _tuple$185[0];
		x392 = _tuple$185[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$186 = bits.Add64(x384, x381, ((x$132 = (new p384Uint1(x392.$high, x392.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x393 = _tuple$186[0];
		x394 = _tuple$186[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$187 = bits.Add64(x382, x379, ((x$133 = (new p384Uint1(x394.$high, x394.$low)), new $Uint64(x$133.$high, x$133.$low))));
		x395 = _tuple$187[0];
		x396 = _tuple$187[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x380, x377, ((x$134 = (new p384Uint1(x396.$high, x396.$low)), new $Uint64(x$134.$high, x$134.$low))));
		x397 = _tuple$188[0];
		x398 = _tuple$188[1];
		x399 = (x$135 = ((x$136 = (new p384Uint1(x398.$high, x398.$low)), new $Uint64(x$136.$high, x$136.$low))), new $Uint64(x$135.$high + x378.$high, x$135.$low + x378.$low));
		x400 = new $Uint64(0, 0);
		x401 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x364, x387, new $Uint64(0, 0));
		x400 = _tuple$189[0];
		x401 = _tuple$189[1];
		x402 = new $Uint64(0, 0);
		x403 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x366, x389, ((x$137 = (new p384Uint1(x401.$high, x401.$low)), new $Uint64(x$137.$high, x$137.$low))));
		x402 = _tuple$190[0];
		x403 = _tuple$190[1];
		x404 = new $Uint64(0, 0);
		x405 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64(x368, x391, ((x$138 = (new p384Uint1(x403.$high, x403.$low)), new $Uint64(x$138.$high, x$138.$low))));
		x404 = _tuple$191[0];
		x405 = _tuple$191[1];
		x406 = new $Uint64(0, 0);
		x407 = new $Uint64(0, 0);
		_tuple$192 = bits.Add64(x370, x393, ((x$139 = (new p384Uint1(x405.$high, x405.$low)), new $Uint64(x$139.$high, x$139.$low))));
		x406 = _tuple$192[0];
		x407 = _tuple$192[1];
		x408 = new $Uint64(0, 0);
		x409 = new $Uint64(0, 0);
		_tuple$193 = bits.Add64(x372, x395, ((x$140 = (new p384Uint1(x407.$high, x407.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x408 = _tuple$193[0];
		x409 = _tuple$193[1];
		x410 = new $Uint64(0, 0);
		x411 = new $Uint64(0, 0);
		_tuple$194 = bits.Add64(x374, x397, ((x$141 = (new p384Uint1(x409.$high, x409.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x410 = _tuple$194[0];
		x411 = _tuple$194[1];
		x412 = new $Uint64(0, 0);
		x413 = new $Uint64(0, 0);
		_tuple$195 = bits.Add64(x376, x399, ((x$142 = (new p384Uint1(x411.$high, x411.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x412 = _tuple$195[0];
		x413 = _tuple$195[1];
		x414 = new $Uint64(0, 0);
		_tuple$196 = bits.Mul64(x400, new $Uint64(1, 1));
		x414 = _tuple$196[1];
		x416 = new $Uint64(0, 0);
		x417 = new $Uint64(0, 0);
		_tuple$197 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x417 = _tuple$197[0];
		x416 = _tuple$197[1];
		x418 = new $Uint64(0, 0);
		x419 = new $Uint64(0, 0);
		_tuple$198 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x419 = _tuple$198[0];
		x418 = _tuple$198[1];
		x420 = new $Uint64(0, 0);
		x421 = new $Uint64(0, 0);
		_tuple$199 = bits.Mul64(x414, new $Uint64(4294967295, 4294967295));
		x421 = _tuple$199[0];
		x420 = _tuple$199[1];
		x422 = new $Uint64(0, 0);
		x423 = new $Uint64(0, 0);
		_tuple$200 = bits.Mul64(x414, new $Uint64(4294967295, 4294967294));
		x423 = _tuple$200[0];
		x422 = _tuple$200[1];
		x424 = new $Uint64(0, 0);
		x425 = new $Uint64(0, 0);
		_tuple$201 = bits.Mul64(x414, new $Uint64(4294967295, 0));
		x425 = _tuple$201[0];
		x424 = _tuple$201[1];
		x426 = new $Uint64(0, 0);
		x427 = new $Uint64(0, 0);
		_tuple$202 = bits.Mul64(x414, new $Uint64(0, 4294967295));
		x427 = _tuple$202[0];
		x426 = _tuple$202[1];
		x428 = new $Uint64(0, 0);
		x429 = new $Uint64(0, 0);
		_tuple$203 = bits.Add64(x427, x424, new $Uint64(0, 0));
		x428 = _tuple$203[0];
		x429 = _tuple$203[1];
		x430 = new $Uint64(0, 0);
		x431 = new $Uint64(0, 0);
		_tuple$204 = bits.Add64(x425, x422, ((x$143 = (new p384Uint1(x429.$high, x429.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x430 = _tuple$204[0];
		x431 = _tuple$204[1];
		x432 = new $Uint64(0, 0);
		x433 = new $Uint64(0, 0);
		_tuple$205 = bits.Add64(x423, x420, ((x$144 = (new p384Uint1(x431.$high, x431.$low)), new $Uint64(x$144.$high, x$144.$low))));
		x432 = _tuple$205[0];
		x433 = _tuple$205[1];
		x434 = new $Uint64(0, 0);
		x435 = new $Uint64(0, 0);
		_tuple$206 = bits.Add64(x421, x418, ((x$145 = (new p384Uint1(x433.$high, x433.$low)), new $Uint64(x$145.$high, x$145.$low))));
		x434 = _tuple$206[0];
		x435 = _tuple$206[1];
		x436 = new $Uint64(0, 0);
		x437 = new $Uint64(0, 0);
		_tuple$207 = bits.Add64(x419, x416, ((x$146 = (new p384Uint1(x435.$high, x435.$low)), new $Uint64(x$146.$high, x$146.$low))));
		x436 = _tuple$207[0];
		x437 = _tuple$207[1];
		x438 = (x$147 = ((x$148 = (new p384Uint1(x437.$high, x437.$low)), new $Uint64(x$148.$high, x$148.$low))), new $Uint64(x$147.$high + x417.$high, x$147.$low + x417.$low));
		x440 = new $Uint64(0, 0);
		_tuple$208 = bits.Add64(x400, x426, new $Uint64(0, 0));
		x440 = _tuple$208[1];
		x441 = new $Uint64(0, 0);
		x442 = new $Uint64(0, 0);
		_tuple$209 = bits.Add64(x402, x428, ((x$149 = (new p384Uint1(x440.$high, x440.$low)), new $Uint64(x$149.$high, x$149.$low))));
		x441 = _tuple$209[0];
		x442 = _tuple$209[1];
		x443 = new $Uint64(0, 0);
		x444 = new $Uint64(0, 0);
		_tuple$210 = bits.Add64(x404, x430, ((x$150 = (new p384Uint1(x442.$high, x442.$low)), new $Uint64(x$150.$high, x$150.$low))));
		x443 = _tuple$210[0];
		x444 = _tuple$210[1];
		x445 = new $Uint64(0, 0);
		x446 = new $Uint64(0, 0);
		_tuple$211 = bits.Add64(x406, x432, ((x$151 = (new p384Uint1(x444.$high, x444.$low)), new $Uint64(x$151.$high, x$151.$low))));
		x445 = _tuple$211[0];
		x446 = _tuple$211[1];
		x447 = new $Uint64(0, 0);
		x448 = new $Uint64(0, 0);
		_tuple$212 = bits.Add64(x408, x434, ((x$152 = (new p384Uint1(x446.$high, x446.$low)), new $Uint64(x$152.$high, x$152.$low))));
		x447 = _tuple$212[0];
		x448 = _tuple$212[1];
		x449 = new $Uint64(0, 0);
		x450 = new $Uint64(0, 0);
		_tuple$213 = bits.Add64(x410, x436, ((x$153 = (new p384Uint1(x448.$high, x448.$low)), new $Uint64(x$153.$high, x$153.$low))));
		x449 = _tuple$213[0];
		x450 = _tuple$213[1];
		x451 = new $Uint64(0, 0);
		x452 = new $Uint64(0, 0);
		_tuple$214 = bits.Add64(x412, x438, ((x$154 = (new p384Uint1(x450.$high, x450.$low)), new $Uint64(x$154.$high, x$154.$low))));
		x451 = _tuple$214[0];
		x452 = _tuple$214[1];
		x453 = (x$155 = ((x$156 = (new p384Uint1(x452.$high, x452.$low)), new $Uint64(x$156.$high, x$156.$low))), x$157 = ((x$158 = (new p384Uint1(x413.$high, x413.$low)), new $Uint64(x$158.$high, x$158.$low))), new $Uint64(x$155.$high + x$157.$high, x$155.$low + x$157.$low));
		x454 = new $Uint64(0, 0);
		x455 = new $Uint64(0, 0);
		_tuple$215 = bits.Sub64(x441, new $Uint64(0, 4294967295), new $Uint64(0, 0));
		x454 = _tuple$215[0];
		x455 = _tuple$215[1];
		x456 = new $Uint64(0, 0);
		x457 = new $Uint64(0, 0);
		_tuple$216 = bits.Sub64(x443, new $Uint64(4294967295, 0), ((x$159 = (new p384Uint1(x455.$high, x455.$low)), new $Uint64(x$159.$high, x$159.$low))));
		x456 = _tuple$216[0];
		x457 = _tuple$216[1];
		x458 = new $Uint64(0, 0);
		x459 = new $Uint64(0, 0);
		_tuple$217 = bits.Sub64(x445, new $Uint64(4294967295, 4294967294), ((x$160 = (new p384Uint1(x457.$high, x457.$low)), new $Uint64(x$160.$high, x$160.$low))));
		x458 = _tuple$217[0];
		x459 = _tuple$217[1];
		x460 = new $Uint64(0, 0);
		x461 = new $Uint64(0, 0);
		_tuple$218 = bits.Sub64(x447, new $Uint64(4294967295, 4294967295), ((x$161 = (new p384Uint1(x459.$high, x459.$low)), new $Uint64(x$161.$high, x$161.$low))));
		x460 = _tuple$218[0];
		x461 = _tuple$218[1];
		x462 = new $Uint64(0, 0);
		x463 = new $Uint64(0, 0);
		_tuple$219 = bits.Sub64(x449, new $Uint64(4294967295, 4294967295), ((x$162 = (new p384Uint1(x461.$high, x461.$low)), new $Uint64(x$162.$high, x$162.$low))));
		x462 = _tuple$219[0];
		x463 = _tuple$219[1];
		x464 = new $Uint64(0, 0);
		x465 = new $Uint64(0, 0);
		_tuple$220 = bits.Sub64(x451, new $Uint64(4294967295, 4294967295), ((x$163 = (new p384Uint1(x463.$high, x463.$low)), new $Uint64(x$163.$high, x$163.$low))));
		x464 = _tuple$220[0];
		x465 = _tuple$220[1];
		x467 = new $Uint64(0, 0);
		_tuple$221 = bits.Sub64(x453, new $Uint64(0, 0), ((x$164 = (new p384Uint1(x465.$high, x465.$low)), new $Uint64(x$164.$high, x$164.$low))));
		x467 = _tuple$221[1];
		x468 = new $Uint64(0, 0);
		p384CmovznzU64((x468$24ptr || (x468$24ptr = new ptrType(function() { return x468; }, function($v) { x468 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x454, x441);
		x469 = new $Uint64(0, 0);
		p384CmovznzU64((x469$24ptr || (x469$24ptr = new ptrType(function() { return x469; }, function($v) { x469 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x456, x443);
		x470 = new $Uint64(0, 0);
		p384CmovznzU64((x470$24ptr || (x470$24ptr = new ptrType(function() { return x470; }, function($v) { x470 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x458, x445);
		x471 = new $Uint64(0, 0);
		p384CmovznzU64((x471$24ptr || (x471$24ptr = new ptrType(function() { return x471; }, function($v) { x471 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x460, x447);
		x472 = new $Uint64(0, 0);
		p384CmovznzU64((x472$24ptr || (x472$24ptr = new ptrType(function() { return x472; }, function($v) { x472 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x462, x449);
		x473 = new $Uint64(0, 0);
		p384CmovznzU64((x473$24ptr || (x473$24ptr = new ptrType(function() { return x473; }, function($v) { x473 = $v; }))), (new p384Uint1(x467.$high, x467.$low)), x464, x451);
		out1.nilCheck, out1[0] = x468;
		out1.nilCheck, out1[1] = x469;
		out1.nilCheck, out1[2] = x470;
		out1.nilCheck, out1[3] = x471;
		out1.nilCheck, out1[4] = x472;
		out1.nilCheck, out1[5] = x473;
	};
	p384Add = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, arg2, out1, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x26, x27, x27$24ptr, x28, x28$24ptr, x29, x29$24ptr, x3, x30, x30$24ptr, x31, x31$24ptr, x32, x32$24ptr, x4, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Add64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Add64(arg1[1], arg2[1], ((x = (new p384Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Add64(arg1[2], arg2[2], ((x$1 = (new p384Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Add64(arg1[3], arg2[3], ((x$2 = (new p384Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(arg1[4], arg2[4], ((x$3 = (new p384Uint1(x8.$high, x8.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(arg1[5], arg2[5], ((x$4 = (new p384Uint1(x10.$high, x10.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Sub64(x1, new $Uint64(0, 4294967295), new $Uint64(0, 0));
		x13 = _tuple$6[0];
		x14 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Sub64(x3, new $Uint64(4294967295, 0), ((x$5 = (new p384Uint1(x14.$high, x14.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x15 = _tuple$7[0];
		x16 = _tuple$7[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Sub64(x5, new $Uint64(4294967295, 4294967294), ((x$6 = (new p384Uint1(x16.$high, x16.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x17 = _tuple$8[0];
		x18 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$9 = bits.Sub64(x7, new $Uint64(4294967295, 4294967295), ((x$7 = (new p384Uint1(x18.$high, x18.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x19 = _tuple$9[0];
		x20 = _tuple$9[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$10 = bits.Sub64(x9, new $Uint64(4294967295, 4294967295), ((x$8 = (new p384Uint1(x20.$high, x20.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x21 = _tuple$10[0];
		x22 = _tuple$10[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$11 = bits.Sub64(x11, new $Uint64(4294967295, 4294967295), ((x$9 = (new p384Uint1(x22.$high, x22.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x23 = _tuple$11[0];
		x24 = _tuple$11[1];
		x26 = new $Uint64(0, 0);
		_tuple$12 = bits.Sub64(((x$10 = (new p384Uint1(x12.$high, x12.$low)), new $Uint64(x$10.$high, x$10.$low))), new $Uint64(0, 0), ((x$11 = (new p384Uint1(x24.$high, x24.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x26 = _tuple$12[1];
		x27 = new $Uint64(0, 0);
		p384CmovznzU64((x27$24ptr || (x27$24ptr = new ptrType(function() { return x27; }, function($v) { x27 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x13, x1);
		x28 = new $Uint64(0, 0);
		p384CmovznzU64((x28$24ptr || (x28$24ptr = new ptrType(function() { return x28; }, function($v) { x28 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x15, x3);
		x29 = new $Uint64(0, 0);
		p384CmovznzU64((x29$24ptr || (x29$24ptr = new ptrType(function() { return x29; }, function($v) { x29 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x17, x5);
		x30 = new $Uint64(0, 0);
		p384CmovznzU64((x30$24ptr || (x30$24ptr = new ptrType(function() { return x30; }, function($v) { x30 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x19, x7);
		x31 = new $Uint64(0, 0);
		p384CmovznzU64((x31$24ptr || (x31$24ptr = new ptrType(function() { return x31; }, function($v) { x31 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x21, x9);
		x32 = new $Uint64(0, 0);
		p384CmovznzU64((x32$24ptr || (x32$24ptr = new ptrType(function() { return x32; }, function($v) { x32 = $v; }))), (new p384Uint1(x26.$high, x26.$low)), x23, x11);
		out1.nilCheck, out1[0] = x27;
		out1.nilCheck, out1[1] = x28;
		out1.nilCheck, out1[2] = x29;
		out1.nilCheck, out1[3] = x30;
		out1.nilCheck, out1[4] = x31;
		out1.nilCheck, out1[5] = x32;
	};
	p384Sub = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, arg2, out1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x10, x11, x12, x13, x13$24ptr, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x3, x4, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Sub64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Sub64(arg1[1], arg2[1], ((x = (new p384Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Sub64(arg1[2], arg2[2], ((x$1 = (new p384Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Sub64(arg1[3], arg2[3], ((x$2 = (new p384Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Sub64(arg1[4], arg2[4], ((x$3 = (new p384Uint1(x8.$high, x8.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Sub64(arg1[5], arg2[5], ((x$4 = (new p384Uint1(x10.$high, x10.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		p384CmovznzU64((x13$24ptr || (x13$24ptr = new ptrType(function() { return x13; }, function($v) { x13 = $v; }))), (new p384Uint1(x12.$high, x12.$low)), new $Uint64(0, 0), new $Uint64(4294967295, 4294967295));
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x1, new $Uint64(x13.$high & 0, (x13.$low & 4294967295) >>> 0), new $Uint64(0, 0));
		x14 = _tuple$6[0];
		x15 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x3, new $Uint64(x13.$high & 4294967295, (x13.$low & 0) >>> 0), ((x$5 = (new p384Uint1(x15.$high, x15.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x16 = _tuple$7[0];
		x17 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(x5, new $Uint64(x13.$high & 4294967295, (x13.$low & 4294967294) >>> 0), ((x$6 = (new p384Uint1(x17.$high, x17.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x18 = _tuple$8[0];
		x19 = _tuple$8[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x7, x13, ((x$7 = (new p384Uint1(x19.$high, x19.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x20 = _tuple$9[0];
		x21 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x9, x13, ((x$8 = (new p384Uint1(x21.$high, x21.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x24 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x11, x13, ((x$9 = (new p384Uint1(x23.$high, x23.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x24 = _tuple$11[0];
		out1.nilCheck, out1[0] = x14;
		out1.nilCheck, out1[1] = x16;
		out1.nilCheck, out1[2] = x18;
		out1.nilCheck, out1[3] = x20;
		out1.nilCheck, out1[4] = x22;
		out1.nilCheck, out1[5] = x24;
	};
	p384SetOne = function(out1) {
		var out1;
		out1.nilCheck, out1[0] = new $Uint64(4294967295, 1);
		out1.nilCheck, out1[1] = new $Uint64(0, 4294967295);
		out1.nilCheck, out1[2] = new $Uint64(0, 1);
		out1.nilCheck, out1[3] = new $Uint64(0, 0);
		out1.nilCheck, out1[4] = new $Uint64(0, 0);
		out1.nilCheck, out1[5] = new $Uint64(0, 0);
	};
	p384FromMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x177, x178, x179, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x222, x223, x224, x225, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x24, x240, x241, x242, x243, x244, x245, x246, x247, x248, x249, x25, x250, x251, x252, x254, x255, x256, x257, x258, x259, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x288, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x30, x300, x301, x303, x304, x304$24ptr, x305, x305$24ptr, x306, x306$24ptr, x307, x307$24ptr, x308, x308$24ptr, x309, x309$24ptr, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[0];
		x2 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x1, new $Uint64(1, 1));
		x2 = _tuple[1];
		x4 = new $Uint64(0, 0);
		x5 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x2, new $Uint64(4294967295, 4294967295));
		x5 = _tuple$1[0];
		x4 = _tuple$1[1];
		x6 = new $Uint64(0, 0);
		x7 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x2, new $Uint64(4294967295, 4294967295));
		x7 = _tuple$2[0];
		x6 = _tuple$2[1];
		x8 = new $Uint64(0, 0);
		x9 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x2, new $Uint64(4294967295, 4294967295));
		x9 = _tuple$3[0];
		x8 = _tuple$3[1];
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Mul64(x2, new $Uint64(4294967295, 4294967294));
		x11 = _tuple$4[0];
		x10 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Mul64(x2, new $Uint64(4294967295, 0));
		x13 = _tuple$5[0];
		x12 = _tuple$5[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Mul64(x2, new $Uint64(0, 4294967295));
		x15 = _tuple$6[0];
		x14 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x15, x12, new $Uint64(0, 0));
		x16 = _tuple$7[0];
		x17 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(x13, x10, ((x = (new p384Uint1(x17.$high, x17.$low)), new $Uint64(x.$high, x.$low))));
		x18 = _tuple$8[0];
		x19 = _tuple$8[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(x11, x8, ((x$1 = (new p384Uint1(x19.$high, x19.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x20 = _tuple$9[0];
		x21 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x9, x6, ((x$2 = (new p384Uint1(x21.$high, x21.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x7, x4, ((x$3 = (new p384Uint1(x23.$high, x23.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x24 = _tuple$11[0];
		x25 = _tuple$11[1];
		x27 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x1, x14, new $Uint64(0, 0));
		x27 = _tuple$12[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(new $Uint64(0, 0), x16, ((x$4 = (new p384Uint1(x27.$high, x27.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x28 = _tuple$13[0];
		x29 = _tuple$13[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(new $Uint64(0, 0), x18, ((x$5 = (new p384Uint1(x29.$high, x29.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x30 = _tuple$14[0];
		x31 = _tuple$14[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(new $Uint64(0, 0), x20, ((x$6 = (new p384Uint1(x31.$high, x31.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x32 = _tuple$15[0];
		x33 = _tuple$15[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(new $Uint64(0, 0), x22, ((x$7 = (new p384Uint1(x33.$high, x33.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x34 = _tuple$16[0];
		x35 = _tuple$16[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(new $Uint64(0, 0), x24, ((x$8 = (new p384Uint1(x35.$high, x35.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x36 = _tuple$17[0];
		x37 = _tuple$17[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(new $Uint64(0, 0), (x$9 = ((x$10 = (new p384Uint1(x25.$high, x25.$low)), new $Uint64(x$10.$high, x$10.$low))), new $Uint64(x$9.$high + x5.$high, x$9.$low + x5.$low)), ((x$11 = (new p384Uint1(x37.$high, x37.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x38 = _tuple$18[0];
		x39 = _tuple$18[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x28, arg1[1], new $Uint64(0, 0));
		x40 = _tuple$19[0];
		x41 = _tuple$19[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x30, new $Uint64(0, 0), ((x$12 = (new p384Uint1(x41.$high, x41.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x42 = _tuple$20[0];
		x43 = _tuple$20[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x32, new $Uint64(0, 0), ((x$13 = (new p384Uint1(x43.$high, x43.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x44 = _tuple$21[0];
		x45 = _tuple$21[1];
		x46 = new $Uint64(0, 0);
		x47 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x34, new $Uint64(0, 0), ((x$14 = (new p384Uint1(x45.$high, x45.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x46 = _tuple$22[0];
		x47 = _tuple$22[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x36, new $Uint64(0, 0), ((x$15 = (new p384Uint1(x47.$high, x47.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x48 = _tuple$23[0];
		x49 = _tuple$23[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x38, new $Uint64(0, 0), ((x$16 = (new p384Uint1(x49.$high, x49.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x50 = _tuple$24[0];
		x51 = _tuple$24[1];
		x52 = new $Uint64(0, 0);
		_tuple$25 = bits.Mul64(x40, new $Uint64(1, 1));
		x52 = _tuple$25[1];
		x54 = new $Uint64(0, 0);
		x55 = new $Uint64(0, 0);
		_tuple$26 = bits.Mul64(x52, new $Uint64(4294967295, 4294967295));
		x55 = _tuple$26[0];
		x54 = _tuple$26[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$27 = bits.Mul64(x52, new $Uint64(4294967295, 4294967295));
		x57 = _tuple$27[0];
		x56 = _tuple$27[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x52, new $Uint64(4294967295, 4294967295));
		x59 = _tuple$28[0];
		x58 = _tuple$28[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x52, new $Uint64(4294967295, 4294967294));
		x61 = _tuple$29[0];
		x60 = _tuple$29[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x52, new $Uint64(4294967295, 0));
		x63 = _tuple$30[0];
		x62 = _tuple$30[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x52, new $Uint64(0, 4294967295));
		x65 = _tuple$31[0];
		x64 = _tuple$31[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x65, x62, new $Uint64(0, 0));
		x66 = _tuple$32[0];
		x67 = _tuple$32[1];
		x68 = new $Uint64(0, 0);
		x69 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x63, x60, ((x$17 = (new p384Uint1(x67.$high, x67.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x68 = _tuple$33[0];
		x69 = _tuple$33[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x61, x58, ((x$18 = (new p384Uint1(x69.$high, x69.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x70 = _tuple$34[0];
		x71 = _tuple$34[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x59, x56, ((x$19 = (new p384Uint1(x71.$high, x71.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x72 = _tuple$35[0];
		x73 = _tuple$35[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x57, x54, ((x$20 = (new p384Uint1(x73.$high, x73.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x74 = _tuple$36[0];
		x75 = _tuple$36[1];
		x77 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x40, x64, new $Uint64(0, 0));
		x77 = _tuple$37[1];
		x78 = new $Uint64(0, 0);
		x79 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x42, x66, ((x$21 = (new p384Uint1(x77.$high, x77.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x78 = _tuple$38[0];
		x79 = _tuple$38[1];
		x80 = new $Uint64(0, 0);
		x81 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x44, x68, ((x$22 = (new p384Uint1(x79.$high, x79.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x80 = _tuple$39[0];
		x81 = _tuple$39[1];
		x82 = new $Uint64(0, 0);
		x83 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x46, x70, ((x$23 = (new p384Uint1(x81.$high, x81.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x82 = _tuple$40[0];
		x83 = _tuple$40[1];
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x48, x72, ((x$24 = (new p384Uint1(x83.$high, x83.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x84 = _tuple$41[0];
		x85 = _tuple$41[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x50, x74, ((x$25 = (new p384Uint1(x85.$high, x85.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x86 = _tuple$42[0];
		x87 = _tuple$42[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64((x$26 = ((x$27 = (new p384Uint1(x51.$high, x51.$low)), new $Uint64(x$27.$high, x$27.$low))), x$28 = ((x$29 = (new p384Uint1(x39.$high, x39.$low)), new $Uint64(x$29.$high, x$29.$low))), new $Uint64(x$26.$high + x$28.$high, x$26.$low + x$28.$low)), (x$30 = ((x$31 = (new p384Uint1(x75.$high, x75.$low)), new $Uint64(x$31.$high, x$31.$low))), new $Uint64(x$30.$high + x55.$high, x$30.$low + x55.$low)), ((x$32 = (new p384Uint1(x87.$high, x87.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x88 = _tuple$43[0];
		x89 = _tuple$43[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x78, arg1[2], new $Uint64(0, 0));
		x90 = _tuple$44[0];
		x91 = _tuple$44[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x80, new $Uint64(0, 0), ((x$33 = (new p384Uint1(x91.$high, x91.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x92 = _tuple$45[0];
		x93 = _tuple$45[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x82, new $Uint64(0, 0), ((x$34 = (new p384Uint1(x93.$high, x93.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x94 = _tuple$46[0];
		x95 = _tuple$46[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x84, new $Uint64(0, 0), ((x$35 = (new p384Uint1(x95.$high, x95.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x96 = _tuple$47[0];
		x97 = _tuple$47[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x86, new $Uint64(0, 0), ((x$36 = (new p384Uint1(x97.$high, x97.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x98 = _tuple$48[0];
		x99 = _tuple$48[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x88, new $Uint64(0, 0), ((x$37 = (new p384Uint1(x99.$high, x99.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x100 = _tuple$49[0];
		x101 = _tuple$49[1];
		x102 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x90, new $Uint64(1, 1));
		x102 = _tuple$50[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x102, new $Uint64(4294967295, 4294967295));
		x105 = _tuple$51[0];
		x104 = _tuple$51[1];
		x106 = new $Uint64(0, 0);
		x107 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x102, new $Uint64(4294967295, 4294967295));
		x107 = _tuple$52[0];
		x106 = _tuple$52[1];
		x108 = new $Uint64(0, 0);
		x109 = new $Uint64(0, 0);
		_tuple$53 = bits.Mul64(x102, new $Uint64(4294967295, 4294967295));
		x109 = _tuple$53[0];
		x108 = _tuple$53[1];
		x110 = new $Uint64(0, 0);
		x111 = new $Uint64(0, 0);
		_tuple$54 = bits.Mul64(x102, new $Uint64(4294967295, 4294967294));
		x111 = _tuple$54[0];
		x110 = _tuple$54[1];
		x112 = new $Uint64(0, 0);
		x113 = new $Uint64(0, 0);
		_tuple$55 = bits.Mul64(x102, new $Uint64(4294967295, 0));
		x113 = _tuple$55[0];
		x112 = _tuple$55[1];
		x114 = new $Uint64(0, 0);
		x115 = new $Uint64(0, 0);
		_tuple$56 = bits.Mul64(x102, new $Uint64(0, 4294967295));
		x115 = _tuple$56[0];
		x114 = _tuple$56[1];
		x116 = new $Uint64(0, 0);
		x117 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x115, x112, new $Uint64(0, 0));
		x116 = _tuple$57[0];
		x117 = _tuple$57[1];
		x118 = new $Uint64(0, 0);
		x119 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x113, x110, ((x$38 = (new p384Uint1(x117.$high, x117.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x118 = _tuple$58[0];
		x119 = _tuple$58[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x111, x108, ((x$39 = (new p384Uint1(x119.$high, x119.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x120 = _tuple$59[0];
		x121 = _tuple$59[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x109, x106, ((x$40 = (new p384Uint1(x121.$high, x121.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x122 = _tuple$60[0];
		x123 = _tuple$60[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x107, x104, ((x$41 = (new p384Uint1(x123.$high, x123.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x124 = _tuple$61[0];
		x125 = _tuple$61[1];
		x127 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x90, x114, new $Uint64(0, 0));
		x127 = _tuple$62[1];
		x128 = new $Uint64(0, 0);
		x129 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x92, x116, ((x$42 = (new p384Uint1(x127.$high, x127.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x128 = _tuple$63[0];
		x129 = _tuple$63[1];
		x130 = new $Uint64(0, 0);
		x131 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x94, x118, ((x$43 = (new p384Uint1(x129.$high, x129.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x130 = _tuple$64[0];
		x131 = _tuple$64[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x96, x120, ((x$44 = (new p384Uint1(x131.$high, x131.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x132 = _tuple$65[0];
		x133 = _tuple$65[1];
		x134 = new $Uint64(0, 0);
		x135 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x98, x122, ((x$45 = (new p384Uint1(x133.$high, x133.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x134 = _tuple$66[0];
		x135 = _tuple$66[1];
		x136 = new $Uint64(0, 0);
		x137 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x100, x124, ((x$46 = (new p384Uint1(x135.$high, x135.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x136 = _tuple$67[0];
		x137 = _tuple$67[1];
		x138 = new $Uint64(0, 0);
		x139 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64((x$47 = ((x$48 = (new p384Uint1(x101.$high, x101.$low)), new $Uint64(x$48.$high, x$48.$low))), x$49 = ((x$50 = (new p384Uint1(x89.$high, x89.$low)), new $Uint64(x$50.$high, x$50.$low))), new $Uint64(x$47.$high + x$49.$high, x$47.$low + x$49.$low)), (x$51 = ((x$52 = (new p384Uint1(x125.$high, x125.$low)), new $Uint64(x$52.$high, x$52.$low))), new $Uint64(x$51.$high + x105.$high, x$51.$low + x105.$low)), ((x$53 = (new p384Uint1(x137.$high, x137.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x138 = _tuple$68[0];
		x139 = _tuple$68[1];
		x140 = new $Uint64(0, 0);
		x141 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x128, arg1[3], new $Uint64(0, 0));
		x140 = _tuple$69[0];
		x141 = _tuple$69[1];
		x142 = new $Uint64(0, 0);
		x143 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x130, new $Uint64(0, 0), ((x$54 = (new p384Uint1(x141.$high, x141.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x142 = _tuple$70[0];
		x143 = _tuple$70[1];
		x144 = new $Uint64(0, 0);
		x145 = new $Uint64(0, 0);
		_tuple$71 = bits.Add64(x132, new $Uint64(0, 0), ((x$55 = (new p384Uint1(x143.$high, x143.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x144 = _tuple$71[0];
		x145 = _tuple$71[1];
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$72 = bits.Add64(x134, new $Uint64(0, 0), ((x$56 = (new p384Uint1(x145.$high, x145.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x146 = _tuple$72[0];
		x147 = _tuple$72[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x136, new $Uint64(0, 0), ((x$57 = (new p384Uint1(x147.$high, x147.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x148 = _tuple$73[0];
		x149 = _tuple$73[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x138, new $Uint64(0, 0), ((x$58 = (new p384Uint1(x149.$high, x149.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x150 = _tuple$74[0];
		x151 = _tuple$74[1];
		x152 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x140, new $Uint64(1, 1));
		x152 = _tuple$75[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x152, new $Uint64(4294967295, 4294967295));
		x155 = _tuple$76[0];
		x154 = _tuple$76[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x152, new $Uint64(4294967295, 4294967295));
		x157 = _tuple$77[0];
		x156 = _tuple$77[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x152, new $Uint64(4294967295, 4294967295));
		x159 = _tuple$78[0];
		x158 = _tuple$78[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x152, new $Uint64(4294967295, 4294967294));
		x161 = _tuple$79[0];
		x160 = _tuple$79[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$80 = bits.Mul64(x152, new $Uint64(4294967295, 0));
		x163 = _tuple$80[0];
		x162 = _tuple$80[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$81 = bits.Mul64(x152, new $Uint64(0, 4294967295));
		x165 = _tuple$81[0];
		x164 = _tuple$81[1];
		x166 = new $Uint64(0, 0);
		x167 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x165, x162, new $Uint64(0, 0));
		x166 = _tuple$82[0];
		x167 = _tuple$82[1];
		x168 = new $Uint64(0, 0);
		x169 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x163, x160, ((x$59 = (new p384Uint1(x167.$high, x167.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x168 = _tuple$83[0];
		x169 = _tuple$83[1];
		x170 = new $Uint64(0, 0);
		x171 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x161, x158, ((x$60 = (new p384Uint1(x169.$high, x169.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x170 = _tuple$84[0];
		x171 = _tuple$84[1];
		x172 = new $Uint64(0, 0);
		x173 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x159, x156, ((x$61 = (new p384Uint1(x171.$high, x171.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x172 = _tuple$85[0];
		x173 = _tuple$85[1];
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x157, x154, ((x$62 = (new p384Uint1(x173.$high, x173.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x174 = _tuple$86[0];
		x175 = _tuple$86[1];
		x177 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x140, x164, new $Uint64(0, 0));
		x177 = _tuple$87[1];
		x178 = new $Uint64(0, 0);
		x179 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x142, x166, ((x$63 = (new p384Uint1(x177.$high, x177.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x178 = _tuple$88[0];
		x179 = _tuple$88[1];
		x180 = new $Uint64(0, 0);
		x181 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x144, x168, ((x$64 = (new p384Uint1(x179.$high, x179.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x180 = _tuple$89[0];
		x181 = _tuple$89[1];
		x182 = new $Uint64(0, 0);
		x183 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x146, x170, ((x$65 = (new p384Uint1(x181.$high, x181.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x182 = _tuple$90[0];
		x183 = _tuple$90[1];
		x184 = new $Uint64(0, 0);
		x185 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x148, x172, ((x$66 = (new p384Uint1(x183.$high, x183.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x184 = _tuple$91[0];
		x185 = _tuple$91[1];
		x186 = new $Uint64(0, 0);
		x187 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64(x150, x174, ((x$67 = (new p384Uint1(x185.$high, x185.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x186 = _tuple$92[0];
		x187 = _tuple$92[1];
		x188 = new $Uint64(0, 0);
		x189 = new $Uint64(0, 0);
		_tuple$93 = bits.Add64((x$68 = ((x$69 = (new p384Uint1(x151.$high, x151.$low)), new $Uint64(x$69.$high, x$69.$low))), x$70 = ((x$71 = (new p384Uint1(x139.$high, x139.$low)), new $Uint64(x$71.$high, x$71.$low))), new $Uint64(x$68.$high + x$70.$high, x$68.$low + x$70.$low)), (x$72 = ((x$73 = (new p384Uint1(x175.$high, x175.$low)), new $Uint64(x$73.$high, x$73.$low))), new $Uint64(x$72.$high + x155.$high, x$72.$low + x155.$low)), ((x$74 = (new p384Uint1(x187.$high, x187.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x188 = _tuple$93[0];
		x189 = _tuple$93[1];
		x190 = new $Uint64(0, 0);
		x191 = new $Uint64(0, 0);
		_tuple$94 = bits.Add64(x178, arg1[4], new $Uint64(0, 0));
		x190 = _tuple$94[0];
		x191 = _tuple$94[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$95 = bits.Add64(x180, new $Uint64(0, 0), ((x$75 = (new p384Uint1(x191.$high, x191.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x192 = _tuple$95[0];
		x193 = _tuple$95[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$96 = bits.Add64(x182, new $Uint64(0, 0), ((x$76 = (new p384Uint1(x193.$high, x193.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x194 = _tuple$96[0];
		x195 = _tuple$96[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x184, new $Uint64(0, 0), ((x$77 = (new p384Uint1(x195.$high, x195.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x196 = _tuple$97[0];
		x197 = _tuple$97[1];
		x198 = new $Uint64(0, 0);
		x199 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x186, new $Uint64(0, 0), ((x$78 = (new p384Uint1(x197.$high, x197.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x198 = _tuple$98[0];
		x199 = _tuple$98[1];
		x200 = new $Uint64(0, 0);
		x201 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x188, new $Uint64(0, 0), ((x$79 = (new p384Uint1(x199.$high, x199.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x200 = _tuple$99[0];
		x201 = _tuple$99[1];
		x202 = new $Uint64(0, 0);
		_tuple$100 = bits.Mul64(x190, new $Uint64(1, 1));
		x202 = _tuple$100[1];
		x204 = new $Uint64(0, 0);
		x205 = new $Uint64(0, 0);
		_tuple$101 = bits.Mul64(x202, new $Uint64(4294967295, 4294967295));
		x205 = _tuple$101[0];
		x204 = _tuple$101[1];
		x206 = new $Uint64(0, 0);
		x207 = new $Uint64(0, 0);
		_tuple$102 = bits.Mul64(x202, new $Uint64(4294967295, 4294967295));
		x207 = _tuple$102[0];
		x206 = _tuple$102[1];
		x208 = new $Uint64(0, 0);
		x209 = new $Uint64(0, 0);
		_tuple$103 = bits.Mul64(x202, new $Uint64(4294967295, 4294967295));
		x209 = _tuple$103[0];
		x208 = _tuple$103[1];
		x210 = new $Uint64(0, 0);
		x211 = new $Uint64(0, 0);
		_tuple$104 = bits.Mul64(x202, new $Uint64(4294967295, 4294967294));
		x211 = _tuple$104[0];
		x210 = _tuple$104[1];
		x212 = new $Uint64(0, 0);
		x213 = new $Uint64(0, 0);
		_tuple$105 = bits.Mul64(x202, new $Uint64(4294967295, 0));
		x213 = _tuple$105[0];
		x212 = _tuple$105[1];
		x214 = new $Uint64(0, 0);
		x215 = new $Uint64(0, 0);
		_tuple$106 = bits.Mul64(x202, new $Uint64(0, 4294967295));
		x215 = _tuple$106[0];
		x214 = _tuple$106[1];
		x216 = new $Uint64(0, 0);
		x217 = new $Uint64(0, 0);
		_tuple$107 = bits.Add64(x215, x212, new $Uint64(0, 0));
		x216 = _tuple$107[0];
		x217 = _tuple$107[1];
		x218 = new $Uint64(0, 0);
		x219 = new $Uint64(0, 0);
		_tuple$108 = bits.Add64(x213, x210, ((x$80 = (new p384Uint1(x217.$high, x217.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x218 = _tuple$108[0];
		x219 = _tuple$108[1];
		x220 = new $Uint64(0, 0);
		x221 = new $Uint64(0, 0);
		_tuple$109 = bits.Add64(x211, x208, ((x$81 = (new p384Uint1(x219.$high, x219.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x220 = _tuple$109[0];
		x221 = _tuple$109[1];
		x222 = new $Uint64(0, 0);
		x223 = new $Uint64(0, 0);
		_tuple$110 = bits.Add64(x209, x206, ((x$82 = (new p384Uint1(x221.$high, x221.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x222 = _tuple$110[0];
		x223 = _tuple$110[1];
		x224 = new $Uint64(0, 0);
		x225 = new $Uint64(0, 0);
		_tuple$111 = bits.Add64(x207, x204, ((x$83 = (new p384Uint1(x223.$high, x223.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x224 = _tuple$111[0];
		x225 = _tuple$111[1];
		x227 = new $Uint64(0, 0);
		_tuple$112 = bits.Add64(x190, x214, new $Uint64(0, 0));
		x227 = _tuple$112[1];
		x228 = new $Uint64(0, 0);
		x229 = new $Uint64(0, 0);
		_tuple$113 = bits.Add64(x192, x216, ((x$84 = (new p384Uint1(x227.$high, x227.$low)), new $Uint64(x$84.$high, x$84.$low))));
		x228 = _tuple$113[0];
		x229 = _tuple$113[1];
		x230 = new $Uint64(0, 0);
		x231 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x194, x218, ((x$85 = (new p384Uint1(x229.$high, x229.$low)), new $Uint64(x$85.$high, x$85.$low))));
		x230 = _tuple$114[0];
		x231 = _tuple$114[1];
		x232 = new $Uint64(0, 0);
		x233 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x196, x220, ((x$86 = (new p384Uint1(x231.$high, x231.$low)), new $Uint64(x$86.$high, x$86.$low))));
		x232 = _tuple$115[0];
		x233 = _tuple$115[1];
		x234 = new $Uint64(0, 0);
		x235 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x198, x222, ((x$87 = (new p384Uint1(x233.$high, x233.$low)), new $Uint64(x$87.$high, x$87.$low))));
		x234 = _tuple$116[0];
		x235 = _tuple$116[1];
		x236 = new $Uint64(0, 0);
		x237 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x200, x224, ((x$88 = (new p384Uint1(x235.$high, x235.$low)), new $Uint64(x$88.$high, x$88.$low))));
		x236 = _tuple$117[0];
		x237 = _tuple$117[1];
		x238 = new $Uint64(0, 0);
		x239 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64((x$89 = ((x$90 = (new p384Uint1(x201.$high, x201.$low)), new $Uint64(x$90.$high, x$90.$low))), x$91 = ((x$92 = (new p384Uint1(x189.$high, x189.$low)), new $Uint64(x$92.$high, x$92.$low))), new $Uint64(x$89.$high + x$91.$high, x$89.$low + x$91.$low)), (x$93 = ((x$94 = (new p384Uint1(x225.$high, x225.$low)), new $Uint64(x$94.$high, x$94.$low))), new $Uint64(x$93.$high + x205.$high, x$93.$low + x205.$low)), ((x$95 = (new p384Uint1(x237.$high, x237.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x238 = _tuple$118[0];
		x239 = _tuple$118[1];
		x240 = new $Uint64(0, 0);
		x241 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x228, arg1[5], new $Uint64(0, 0));
		x240 = _tuple$119[0];
		x241 = _tuple$119[1];
		x242 = new $Uint64(0, 0);
		x243 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x230, new $Uint64(0, 0), ((x$96 = (new p384Uint1(x241.$high, x241.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x242 = _tuple$120[0];
		x243 = _tuple$120[1];
		x244 = new $Uint64(0, 0);
		x245 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x232, new $Uint64(0, 0), ((x$97 = (new p384Uint1(x243.$high, x243.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x244 = _tuple$121[0];
		x245 = _tuple$121[1];
		x246 = new $Uint64(0, 0);
		x247 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x234, new $Uint64(0, 0), ((x$98 = (new p384Uint1(x245.$high, x245.$low)), new $Uint64(x$98.$high, x$98.$low))));
		x246 = _tuple$122[0];
		x247 = _tuple$122[1];
		x248 = new $Uint64(0, 0);
		x249 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x236, new $Uint64(0, 0), ((x$99 = (new p384Uint1(x247.$high, x247.$low)), new $Uint64(x$99.$high, x$99.$low))));
		x248 = _tuple$123[0];
		x249 = _tuple$123[1];
		x250 = new $Uint64(0, 0);
		x251 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x238, new $Uint64(0, 0), ((x$100 = (new p384Uint1(x249.$high, x249.$low)), new $Uint64(x$100.$high, x$100.$low))));
		x250 = _tuple$124[0];
		x251 = _tuple$124[1];
		x252 = new $Uint64(0, 0);
		_tuple$125 = bits.Mul64(x240, new $Uint64(1, 1));
		x252 = _tuple$125[1];
		x254 = new $Uint64(0, 0);
		x255 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x252, new $Uint64(4294967295, 4294967295));
		x255 = _tuple$126[0];
		x254 = _tuple$126[1];
		x256 = new $Uint64(0, 0);
		x257 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x252, new $Uint64(4294967295, 4294967295));
		x257 = _tuple$127[0];
		x256 = _tuple$127[1];
		x258 = new $Uint64(0, 0);
		x259 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x252, new $Uint64(4294967295, 4294967295));
		x259 = _tuple$128[0];
		x258 = _tuple$128[1];
		x260 = new $Uint64(0, 0);
		x261 = new $Uint64(0, 0);
		_tuple$129 = bits.Mul64(x252, new $Uint64(4294967295, 4294967294));
		x261 = _tuple$129[0];
		x260 = _tuple$129[1];
		x262 = new $Uint64(0, 0);
		x263 = new $Uint64(0, 0);
		_tuple$130 = bits.Mul64(x252, new $Uint64(4294967295, 0));
		x263 = _tuple$130[0];
		x262 = _tuple$130[1];
		x264 = new $Uint64(0, 0);
		x265 = new $Uint64(0, 0);
		_tuple$131 = bits.Mul64(x252, new $Uint64(0, 4294967295));
		x265 = _tuple$131[0];
		x264 = _tuple$131[1];
		x266 = new $Uint64(0, 0);
		x267 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x265, x262, new $Uint64(0, 0));
		x266 = _tuple$132[0];
		x267 = _tuple$132[1];
		x268 = new $Uint64(0, 0);
		x269 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x263, x260, ((x$101 = (new p384Uint1(x267.$high, x267.$low)), new $Uint64(x$101.$high, x$101.$low))));
		x268 = _tuple$133[0];
		x269 = _tuple$133[1];
		x270 = new $Uint64(0, 0);
		x271 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x261, x258, ((x$102 = (new p384Uint1(x269.$high, x269.$low)), new $Uint64(x$102.$high, x$102.$low))));
		x270 = _tuple$134[0];
		x271 = _tuple$134[1];
		x272 = new $Uint64(0, 0);
		x273 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x259, x256, ((x$103 = (new p384Uint1(x271.$high, x271.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x272 = _tuple$135[0];
		x273 = _tuple$135[1];
		x274 = new $Uint64(0, 0);
		x275 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x257, x254, ((x$104 = (new p384Uint1(x273.$high, x273.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x274 = _tuple$136[0];
		x275 = _tuple$136[1];
		x277 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x240, x264, new $Uint64(0, 0));
		x277 = _tuple$137[1];
		x278 = new $Uint64(0, 0);
		x279 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x242, x266, ((x$105 = (new p384Uint1(x277.$high, x277.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x278 = _tuple$138[0];
		x279 = _tuple$138[1];
		x280 = new $Uint64(0, 0);
		x281 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x244, x268, ((x$106 = (new p384Uint1(x279.$high, x279.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x280 = _tuple$139[0];
		x281 = _tuple$139[1];
		x282 = new $Uint64(0, 0);
		x283 = new $Uint64(0, 0);
		_tuple$140 = bits.Add64(x246, x270, ((x$107 = (new p384Uint1(x281.$high, x281.$low)), new $Uint64(x$107.$high, x$107.$low))));
		x282 = _tuple$140[0];
		x283 = _tuple$140[1];
		x284 = new $Uint64(0, 0);
		x285 = new $Uint64(0, 0);
		_tuple$141 = bits.Add64(x248, x272, ((x$108 = (new p384Uint1(x283.$high, x283.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x284 = _tuple$141[0];
		x285 = _tuple$141[1];
		x286 = new $Uint64(0, 0);
		x287 = new $Uint64(0, 0);
		_tuple$142 = bits.Add64(x250, x274, ((x$109 = (new p384Uint1(x285.$high, x285.$low)), new $Uint64(x$109.$high, x$109.$low))));
		x286 = _tuple$142[0];
		x287 = _tuple$142[1];
		x288 = new $Uint64(0, 0);
		x289 = new $Uint64(0, 0);
		_tuple$143 = bits.Add64((x$110 = ((x$111 = (new p384Uint1(x251.$high, x251.$low)), new $Uint64(x$111.$high, x$111.$low))), x$112 = ((x$113 = (new p384Uint1(x239.$high, x239.$low)), new $Uint64(x$113.$high, x$113.$low))), new $Uint64(x$110.$high + x$112.$high, x$110.$low + x$112.$low)), (x$114 = ((x$115 = (new p384Uint1(x275.$high, x275.$low)), new $Uint64(x$115.$high, x$115.$low))), new $Uint64(x$114.$high + x255.$high, x$114.$low + x255.$low)), ((x$116 = (new p384Uint1(x287.$high, x287.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x288 = _tuple$143[0];
		x289 = _tuple$143[1];
		x290 = new $Uint64(0, 0);
		x291 = new $Uint64(0, 0);
		_tuple$144 = bits.Sub64(x278, new $Uint64(0, 4294967295), new $Uint64(0, 0));
		x290 = _tuple$144[0];
		x291 = _tuple$144[1];
		x292 = new $Uint64(0, 0);
		x293 = new $Uint64(0, 0);
		_tuple$145 = bits.Sub64(x280, new $Uint64(4294967295, 0), ((x$117 = (new p384Uint1(x291.$high, x291.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x292 = _tuple$145[0];
		x293 = _tuple$145[1];
		x294 = new $Uint64(0, 0);
		x295 = new $Uint64(0, 0);
		_tuple$146 = bits.Sub64(x282, new $Uint64(4294967295, 4294967294), ((x$118 = (new p384Uint1(x293.$high, x293.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x294 = _tuple$146[0];
		x295 = _tuple$146[1];
		x296 = new $Uint64(0, 0);
		x297 = new $Uint64(0, 0);
		_tuple$147 = bits.Sub64(x284, new $Uint64(4294967295, 4294967295), ((x$119 = (new p384Uint1(x295.$high, x295.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x296 = _tuple$147[0];
		x297 = _tuple$147[1];
		x298 = new $Uint64(0, 0);
		x299 = new $Uint64(0, 0);
		_tuple$148 = bits.Sub64(x286, new $Uint64(4294967295, 4294967295), ((x$120 = (new p384Uint1(x297.$high, x297.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x298 = _tuple$148[0];
		x299 = _tuple$148[1];
		x300 = new $Uint64(0, 0);
		x301 = new $Uint64(0, 0);
		_tuple$149 = bits.Sub64(x288, new $Uint64(4294967295, 4294967295), ((x$121 = (new p384Uint1(x299.$high, x299.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x300 = _tuple$149[0];
		x301 = _tuple$149[1];
		x303 = new $Uint64(0, 0);
		_tuple$150 = bits.Sub64(((x$122 = (new p384Uint1(x289.$high, x289.$low)), new $Uint64(x$122.$high, x$122.$low))), new $Uint64(0, 0), ((x$123 = (new p384Uint1(x301.$high, x301.$low)), new $Uint64(x$123.$high, x$123.$low))));
		x303 = _tuple$150[1];
		x304 = new $Uint64(0, 0);
		p384CmovznzU64((x304$24ptr || (x304$24ptr = new ptrType(function() { return x304; }, function($v) { x304 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x290, x278);
		x305 = new $Uint64(0, 0);
		p384CmovznzU64((x305$24ptr || (x305$24ptr = new ptrType(function() { return x305; }, function($v) { x305 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x292, x280);
		x306 = new $Uint64(0, 0);
		p384CmovznzU64((x306$24ptr || (x306$24ptr = new ptrType(function() { return x306; }, function($v) { x306 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x294, x282);
		x307 = new $Uint64(0, 0);
		p384CmovznzU64((x307$24ptr || (x307$24ptr = new ptrType(function() { return x307; }, function($v) { x307 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x296, x284);
		x308 = new $Uint64(0, 0);
		p384CmovznzU64((x308$24ptr || (x308$24ptr = new ptrType(function() { return x308; }, function($v) { x308 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x298, x286);
		x309 = new $Uint64(0, 0);
		p384CmovznzU64((x309$24ptr || (x309$24ptr = new ptrType(function() { return x309; }, function($v) { x309 = $v; }))), (new p384Uint1(x303.$high, x303.$low)), x300, x288);
		out1.nilCheck, out1[0] = x304;
		out1.nilCheck, out1[1] = x305;
		out1.nilCheck, out1[2] = x306;
		out1.nilCheck, out1[3] = x307;
		out1.nilCheck, out1[4] = x308;
		out1.nilCheck, out1[5] = x309;
	};
	p384ToMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$100, _tuple$101, _tuple$102, _tuple$103, _tuple$104, _tuple$105, _tuple$106, _tuple$107, _tuple$108, _tuple$109, _tuple$11, _tuple$110, _tuple$111, _tuple$112, _tuple$113, _tuple$114, _tuple$115, _tuple$116, _tuple$117, _tuple$118, _tuple$119, _tuple$12, _tuple$120, _tuple$121, _tuple$122, _tuple$123, _tuple$124, _tuple$125, _tuple$126, _tuple$127, _tuple$128, _tuple$129, _tuple$13, _tuple$130, _tuple$131, _tuple$132, _tuple$133, _tuple$134, _tuple$135, _tuple$136, _tuple$137, _tuple$138, _tuple$139, _tuple$14, _tuple$140, _tuple$141, _tuple$142, _tuple$143, _tuple$144, _tuple$145, _tuple$146, _tuple$147, _tuple$148, _tuple$149, _tuple$15, _tuple$150, _tuple$151, _tuple$152, _tuple$153, _tuple$154, _tuple$155, _tuple$156, _tuple$157, _tuple$158, _tuple$159, _tuple$16, _tuple$160, _tuple$161, _tuple$162, _tuple$163, _tuple$164, _tuple$165, _tuple$166, _tuple$167, _tuple$168, _tuple$169, _tuple$17, _tuple$170, _tuple$171, _tuple$172, _tuple$173, _tuple$174, _tuple$175, _tuple$176, _tuple$177, _tuple$178, _tuple$179, _tuple$18, _tuple$180, _tuple$181, _tuple$182, _tuple$183, _tuple$184, _tuple$185, _tuple$186, _tuple$187, _tuple$188, _tuple$189, _tuple$19, _tuple$190, _tuple$191, _tuple$192, _tuple$193, _tuple$194, _tuple$195, _tuple$196, _tuple$197, _tuple$198, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, _tuple$92, _tuple$93, _tuple$94, _tuple$95, _tuple$96, _tuple$97, _tuple$98, _tuple$99, arg1, out1, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x198, x199, x2, x20, x200, x201, x202, x203, x204, x205, x206, x207, x208, x209, x21, x210, x211, x212, x213, x214, x215, x216, x217, x218, x219, x22, x220, x221, x223, x224, x225, x226, x227, x228, x229, x23, x230, x231, x232, x233, x234, x235, x236, x237, x238, x239, x240, x241, x242, x243, x244, x246, x247, x248, x249, x25, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x26, x260, x261, x262, x263, x264, x265, x266, x267, x268, x269, x27, x270, x271, x272, x273, x274, x275, x276, x277, x278, x279, x28, x280, x281, x282, x283, x284, x285, x286, x287, x289, x29, x290, x291, x292, x293, x294, x295, x296, x297, x298, x299, x3, x30, x300, x301, x302, x303, x304, x305, x306, x307, x308, x309, x31, x310, x312, x313, x314, x315, x316, x317, x318, x319, x32, x320, x321, x322, x323, x324, x325, x326, x327, x328, x329, x33, x330, x331, x332, x333, x334, x335, x336, x337, x338, x339, x34, x340, x341, x342, x343, x344, x345, x346, x347, x348, x349, x35, x350, x351, x352, x353, x355, x356, x357, x358, x359, x36, x360, x361, x362, x363, x364, x365, x366, x367, x368, x369, x37, x370, x371, x372, x373, x374, x375, x376, x378, x379, x38, x380, x381, x382, x383, x384, x385, x386, x387, x388, x389, x39, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x4, x40, x400, x401, x402, x404, x405, x405$24ptr, x406, x406$24ptr, x407, x407$24ptr, x408, x408$24ptr, x409, x409$24ptr, x41, x410, x410$24ptr, x42, x43, x44, x45, x46, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[4];
		x5 = arg1[5];
		x6 = arg1[0];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x6, new $Uint64(2, 0));
		x8 = _tuple[0];
		x7 = _tuple[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x6, new $Uint64(4294967294, 0));
		x10 = _tuple$1[0];
		x9 = _tuple$1[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x6, new $Uint64(2, 0));
		x12 = _tuple$2[0];
		x11 = _tuple$2[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x6, new $Uint64(4294967294, 1));
		x14 = _tuple$3[0];
		x13 = _tuple$3[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x14, x11, new $Uint64(0, 0));
		x15 = _tuple$4[0];
		x16 = _tuple$4[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x12, x9, ((x = (new p384Uint1(x16.$high, x16.$low)), new $Uint64(x.$high, x.$low))));
		x17 = _tuple$5[0];
		x18 = _tuple$5[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x10, x7, ((x$1 = (new p384Uint1(x18.$high, x18.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x19 = _tuple$6[0];
		x20 = _tuple$6[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x8, x6, ((x$2 = (new p384Uint1(x20.$high, x20.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x21 = _tuple$7[0];
		x22 = _tuple$7[1];
		x23 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x13, new $Uint64(1, 1));
		x23 = _tuple$8[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x23, new $Uint64(4294967295, 4294967295));
		x26 = _tuple$9[0];
		x25 = _tuple$9[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$10 = bits.Mul64(x23, new $Uint64(4294967295, 4294967295));
		x28 = _tuple$10[0];
		x27 = _tuple$10[1];
		x29 = new $Uint64(0, 0);
		x30 = new $Uint64(0, 0);
		_tuple$11 = bits.Mul64(x23, new $Uint64(4294967295, 4294967295));
		x30 = _tuple$11[0];
		x29 = _tuple$11[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$12 = bits.Mul64(x23, new $Uint64(4294967295, 4294967294));
		x32 = _tuple$12[0];
		x31 = _tuple$12[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$13 = bits.Mul64(x23, new $Uint64(4294967295, 0));
		x34 = _tuple$13[0];
		x33 = _tuple$13[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$14 = bits.Mul64(x23, new $Uint64(0, 4294967295));
		x36 = _tuple$14[0];
		x35 = _tuple$14[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x36, x33, new $Uint64(0, 0));
		x37 = _tuple$15[0];
		x38 = _tuple$15[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x34, x31, ((x$3 = (new p384Uint1(x38.$high, x38.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x39 = _tuple$16[0];
		x40 = _tuple$16[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x32, x29, ((x$4 = (new p384Uint1(x40.$high, x40.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x41 = _tuple$17[0];
		x42 = _tuple$17[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(x30, x27, ((x$5 = (new p384Uint1(x42.$high, x42.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x43 = _tuple$18[0];
		x44 = _tuple$18[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x28, x25, ((x$6 = (new p384Uint1(x44.$high, x44.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x45 = _tuple$19[0];
		x46 = _tuple$19[1];
		x48 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x13, x35, new $Uint64(0, 0));
		x48 = _tuple$20[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x15, x37, ((x$7 = (new p384Uint1(x48.$high, x48.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x49 = _tuple$21[0];
		x50 = _tuple$21[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x17, x39, ((x$8 = (new p384Uint1(x50.$high, x50.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x51 = _tuple$22[0];
		x52 = _tuple$22[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x19, x41, ((x$9 = (new p384Uint1(x52.$high, x52.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x53 = _tuple$23[0];
		x54 = _tuple$23[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x21, x43, ((x$10 = (new p384Uint1(x54.$high, x54.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x55 = _tuple$24[0];
		x56 = _tuple$24[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(((x$11 = (new p384Uint1(x22.$high, x22.$low)), new $Uint64(x$11.$high, x$11.$low))), x45, ((x$12 = (new p384Uint1(x56.$high, x56.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x57 = _tuple$25[0];
		x58 = _tuple$25[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(new $Uint64(0, 0), (x$13 = ((x$14 = (new p384Uint1(x46.$high, x46.$low)), new $Uint64(x$14.$high, x$14.$low))), new $Uint64(x$13.$high + x26.$high, x$13.$low + x26.$low)), ((x$15 = (new p384Uint1(x58.$high, x58.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x59 = _tuple$26[0];
		x60 = _tuple$26[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$27 = bits.Mul64(x1, new $Uint64(2, 0));
		x62 = _tuple$27[0];
		x61 = _tuple$27[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x1, new $Uint64(4294967294, 0));
		x64 = _tuple$28[0];
		x63 = _tuple$28[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x1, new $Uint64(2, 0));
		x66 = _tuple$29[0];
		x65 = _tuple$29[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x1, new $Uint64(4294967294, 1));
		x68 = _tuple$30[0];
		x67 = _tuple$30[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x68, x65, new $Uint64(0, 0));
		x69 = _tuple$31[0];
		x70 = _tuple$31[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x66, x63, ((x$16 = (new p384Uint1(x70.$high, x70.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x71 = _tuple$32[0];
		x72 = _tuple$32[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x64, x61, ((x$17 = (new p384Uint1(x72.$high, x72.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x73 = _tuple$33[0];
		x74 = _tuple$33[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x62, x1, ((x$18 = (new p384Uint1(x74.$high, x74.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x75 = _tuple$34[0];
		x76 = _tuple$34[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x49, x67, new $Uint64(0, 0));
		x77 = _tuple$35[0];
		x78 = _tuple$35[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x51, x69, ((x$19 = (new p384Uint1(x78.$high, x78.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x79 = _tuple$36[0];
		x80 = _tuple$36[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x53, x71, ((x$20 = (new p384Uint1(x80.$high, x80.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x81 = _tuple$37[0];
		x82 = _tuple$37[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x55, x73, ((x$21 = (new p384Uint1(x82.$high, x82.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x83 = _tuple$38[0];
		x84 = _tuple$38[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x57, x75, ((x$22 = (new p384Uint1(x84.$high, x84.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x85 = _tuple$39[0];
		x86 = _tuple$39[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x59, ((x$23 = (new p384Uint1(x76.$high, x76.$low)), new $Uint64(x$23.$high, x$23.$low))), ((x$24 = (new p384Uint1(x86.$high, x86.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x87 = _tuple$40[0];
		x88 = _tuple$40[1];
		x89 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x77, new $Uint64(1, 1));
		x89 = _tuple$41[1];
		x91 = new $Uint64(0, 0);
		x92 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x89, new $Uint64(4294967295, 4294967295));
		x92 = _tuple$42[0];
		x91 = _tuple$42[1];
		x93 = new $Uint64(0, 0);
		x94 = new $Uint64(0, 0);
		_tuple$43 = bits.Mul64(x89, new $Uint64(4294967295, 4294967295));
		x94 = _tuple$43[0];
		x93 = _tuple$43[1];
		x95 = new $Uint64(0, 0);
		x96 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x89, new $Uint64(4294967295, 4294967295));
		x96 = _tuple$44[0];
		x95 = _tuple$44[1];
		x97 = new $Uint64(0, 0);
		x98 = new $Uint64(0, 0);
		_tuple$45 = bits.Mul64(x89, new $Uint64(4294967295, 4294967294));
		x98 = _tuple$45[0];
		x97 = _tuple$45[1];
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$46 = bits.Mul64(x89, new $Uint64(4294967295, 0));
		x100 = _tuple$46[0];
		x99 = _tuple$46[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$47 = bits.Mul64(x89, new $Uint64(0, 4294967295));
		x102 = _tuple$47[0];
		x101 = _tuple$47[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x102, x99, new $Uint64(0, 0));
		x103 = _tuple$48[0];
		x104 = _tuple$48[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x100, x97, ((x$25 = (new p384Uint1(x104.$high, x104.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x105 = _tuple$49[0];
		x106 = _tuple$49[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x98, x95, ((x$26 = (new p384Uint1(x106.$high, x106.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x107 = _tuple$50[0];
		x108 = _tuple$50[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x96, x93, ((x$27 = (new p384Uint1(x108.$high, x108.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x109 = _tuple$51[0];
		x110 = _tuple$51[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x94, x91, ((x$28 = (new p384Uint1(x110.$high, x110.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x111 = _tuple$52[0];
		x112 = _tuple$52[1];
		x114 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x77, x101, new $Uint64(0, 0));
		x114 = _tuple$53[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x79, x103, ((x$29 = (new p384Uint1(x114.$high, x114.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x115 = _tuple$54[0];
		x116 = _tuple$54[1];
		x117 = new $Uint64(0, 0);
		x118 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x81, x105, ((x$30 = (new p384Uint1(x116.$high, x116.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x117 = _tuple$55[0];
		x118 = _tuple$55[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x83, x107, ((x$31 = (new p384Uint1(x118.$high, x118.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x119 = _tuple$56[0];
		x120 = _tuple$56[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x85, x109, ((x$32 = (new p384Uint1(x120.$high, x120.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x121 = _tuple$57[0];
		x122 = _tuple$57[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x87, x111, ((x$33 = (new p384Uint1(x122.$high, x122.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x123 = _tuple$58[0];
		x124 = _tuple$58[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64((x$34 = ((x$35 = (new p384Uint1(x88.$high, x88.$low)), new $Uint64(x$35.$high, x$35.$low))), x$36 = ((x$37 = (new p384Uint1(x60.$high, x60.$low)), new $Uint64(x$37.$high, x$37.$low))), new $Uint64(x$34.$high + x$36.$high, x$34.$low + x$36.$low)), (x$38 = ((x$39 = (new p384Uint1(x112.$high, x112.$low)), new $Uint64(x$39.$high, x$39.$low))), new $Uint64(x$38.$high + x92.$high, x$38.$low + x92.$low)), ((x$40 = (new p384Uint1(x124.$high, x124.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x125 = _tuple$59[0];
		x126 = _tuple$59[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$60 = bits.Mul64(x2, new $Uint64(2, 0));
		x128 = _tuple$60[0];
		x127 = _tuple$60[1];
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$61 = bits.Mul64(x2, new $Uint64(4294967294, 0));
		x130 = _tuple$61[0];
		x129 = _tuple$61[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$62 = bits.Mul64(x2, new $Uint64(2, 0));
		x132 = _tuple$62[0];
		x131 = _tuple$62[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$63 = bits.Mul64(x2, new $Uint64(4294967294, 1));
		x134 = _tuple$63[0];
		x133 = _tuple$63[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x134, x131, new $Uint64(0, 0));
		x135 = _tuple$64[0];
		x136 = _tuple$64[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x132, x129, ((x$41 = (new p384Uint1(x136.$high, x136.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x137 = _tuple$65[0];
		x138 = _tuple$65[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x130, x127, ((x$42 = (new p384Uint1(x138.$high, x138.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x139 = _tuple$66[0];
		x140 = _tuple$66[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x128, x2, ((x$43 = (new p384Uint1(x140.$high, x140.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x141 = _tuple$67[0];
		x142 = _tuple$67[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x115, x133, new $Uint64(0, 0));
		x143 = _tuple$68[0];
		x144 = _tuple$68[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x117, x135, ((x$44 = (new p384Uint1(x144.$high, x144.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x145 = _tuple$69[0];
		x146 = _tuple$69[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x119, x137, ((x$45 = (new p384Uint1(x146.$high, x146.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x147 = _tuple$70[0];
		x148 = _tuple$70[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$71 = bits.Add64(x121, x139, ((x$46 = (new p384Uint1(x148.$high, x148.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x149 = _tuple$71[0];
		x150 = _tuple$71[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$72 = bits.Add64(x123, x141, ((x$47 = (new p384Uint1(x150.$high, x150.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x151 = _tuple$72[0];
		x152 = _tuple$72[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x125, ((x$48 = (new p384Uint1(x142.$high, x142.$low)), new $Uint64(x$48.$high, x$48.$low))), ((x$49 = (new p384Uint1(x152.$high, x152.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x153 = _tuple$73[0];
		x154 = _tuple$73[1];
		x155 = new $Uint64(0, 0);
		_tuple$74 = bits.Mul64(x143, new $Uint64(1, 1));
		x155 = _tuple$74[1];
		x157 = new $Uint64(0, 0);
		x158 = new $Uint64(0, 0);
		_tuple$75 = bits.Mul64(x155, new $Uint64(4294967295, 4294967295));
		x158 = _tuple$75[0];
		x157 = _tuple$75[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x155, new $Uint64(4294967295, 4294967295));
		x160 = _tuple$76[0];
		x159 = _tuple$76[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x155, new $Uint64(4294967295, 4294967295));
		x162 = _tuple$77[0];
		x161 = _tuple$77[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x155, new $Uint64(4294967295, 4294967294));
		x164 = _tuple$78[0];
		x163 = _tuple$78[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x155, new $Uint64(4294967295, 0));
		x166 = _tuple$79[0];
		x165 = _tuple$79[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$80 = bits.Mul64(x155, new $Uint64(0, 4294967295));
		x168 = _tuple$80[0];
		x167 = _tuple$80[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x168, x165, new $Uint64(0, 0));
		x169 = _tuple$81[0];
		x170 = _tuple$81[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x166, x163, ((x$50 = (new p384Uint1(x170.$high, x170.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x171 = _tuple$82[0];
		x172 = _tuple$82[1];
		x173 = new $Uint64(0, 0);
		x174 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x164, x161, ((x$51 = (new p384Uint1(x172.$high, x172.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x173 = _tuple$83[0];
		x174 = _tuple$83[1];
		x175 = new $Uint64(0, 0);
		x176 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x162, x159, ((x$52 = (new p384Uint1(x174.$high, x174.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x175 = _tuple$84[0];
		x176 = _tuple$84[1];
		x177 = new $Uint64(0, 0);
		x178 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x160, x157, ((x$53 = (new p384Uint1(x176.$high, x176.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x177 = _tuple$85[0];
		x178 = _tuple$85[1];
		x180 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x143, x167, new $Uint64(0, 0));
		x180 = _tuple$86[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$87 = bits.Add64(x145, x169, ((x$54 = (new p384Uint1(x180.$high, x180.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x181 = _tuple$87[0];
		x182 = _tuple$87[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$88 = bits.Add64(x147, x171, ((x$55 = (new p384Uint1(x182.$high, x182.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x183 = _tuple$88[0];
		x184 = _tuple$88[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$89 = bits.Add64(x149, x173, ((x$56 = (new p384Uint1(x184.$high, x184.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x185 = _tuple$89[0];
		x186 = _tuple$89[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$90 = bits.Add64(x151, x175, ((x$57 = (new p384Uint1(x186.$high, x186.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x187 = _tuple$90[0];
		x188 = _tuple$90[1];
		x189 = new $Uint64(0, 0);
		x190 = new $Uint64(0, 0);
		_tuple$91 = bits.Add64(x153, x177, ((x$58 = (new p384Uint1(x188.$high, x188.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x189 = _tuple$91[0];
		x190 = _tuple$91[1];
		x191 = new $Uint64(0, 0);
		x192 = new $Uint64(0, 0);
		_tuple$92 = bits.Add64((x$59 = ((x$60 = (new p384Uint1(x154.$high, x154.$low)), new $Uint64(x$60.$high, x$60.$low))), x$61 = ((x$62 = (new p384Uint1(x126.$high, x126.$low)), new $Uint64(x$62.$high, x$62.$low))), new $Uint64(x$59.$high + x$61.$high, x$59.$low + x$61.$low)), (x$63 = ((x$64 = (new p384Uint1(x178.$high, x178.$low)), new $Uint64(x$64.$high, x$64.$low))), new $Uint64(x$63.$high + x158.$high, x$63.$low + x158.$low)), ((x$65 = (new p384Uint1(x190.$high, x190.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x191 = _tuple$92[0];
		x192 = _tuple$92[1];
		x193 = new $Uint64(0, 0);
		x194 = new $Uint64(0, 0);
		_tuple$93 = bits.Mul64(x3, new $Uint64(2, 0));
		x194 = _tuple$93[0];
		x193 = _tuple$93[1];
		x195 = new $Uint64(0, 0);
		x196 = new $Uint64(0, 0);
		_tuple$94 = bits.Mul64(x3, new $Uint64(4294967294, 0));
		x196 = _tuple$94[0];
		x195 = _tuple$94[1];
		x197 = new $Uint64(0, 0);
		x198 = new $Uint64(0, 0);
		_tuple$95 = bits.Mul64(x3, new $Uint64(2, 0));
		x198 = _tuple$95[0];
		x197 = _tuple$95[1];
		x199 = new $Uint64(0, 0);
		x200 = new $Uint64(0, 0);
		_tuple$96 = bits.Mul64(x3, new $Uint64(4294967294, 1));
		x200 = _tuple$96[0];
		x199 = _tuple$96[1];
		x201 = new $Uint64(0, 0);
		x202 = new $Uint64(0, 0);
		_tuple$97 = bits.Add64(x200, x197, new $Uint64(0, 0));
		x201 = _tuple$97[0];
		x202 = _tuple$97[1];
		x203 = new $Uint64(0, 0);
		x204 = new $Uint64(0, 0);
		_tuple$98 = bits.Add64(x198, x195, ((x$66 = (new p384Uint1(x202.$high, x202.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x203 = _tuple$98[0];
		x204 = _tuple$98[1];
		x205 = new $Uint64(0, 0);
		x206 = new $Uint64(0, 0);
		_tuple$99 = bits.Add64(x196, x193, ((x$67 = (new p384Uint1(x204.$high, x204.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x205 = _tuple$99[0];
		x206 = _tuple$99[1];
		x207 = new $Uint64(0, 0);
		x208 = new $Uint64(0, 0);
		_tuple$100 = bits.Add64(x194, x3, ((x$68 = (new p384Uint1(x206.$high, x206.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x207 = _tuple$100[0];
		x208 = _tuple$100[1];
		x209 = new $Uint64(0, 0);
		x210 = new $Uint64(0, 0);
		_tuple$101 = bits.Add64(x181, x199, new $Uint64(0, 0));
		x209 = _tuple$101[0];
		x210 = _tuple$101[1];
		x211 = new $Uint64(0, 0);
		x212 = new $Uint64(0, 0);
		_tuple$102 = bits.Add64(x183, x201, ((x$69 = (new p384Uint1(x210.$high, x210.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x211 = _tuple$102[0];
		x212 = _tuple$102[1];
		x213 = new $Uint64(0, 0);
		x214 = new $Uint64(0, 0);
		_tuple$103 = bits.Add64(x185, x203, ((x$70 = (new p384Uint1(x212.$high, x212.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x213 = _tuple$103[0];
		x214 = _tuple$103[1];
		x215 = new $Uint64(0, 0);
		x216 = new $Uint64(0, 0);
		_tuple$104 = bits.Add64(x187, x205, ((x$71 = (new p384Uint1(x214.$high, x214.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x215 = _tuple$104[0];
		x216 = _tuple$104[1];
		x217 = new $Uint64(0, 0);
		x218 = new $Uint64(0, 0);
		_tuple$105 = bits.Add64(x189, x207, ((x$72 = (new p384Uint1(x216.$high, x216.$low)), new $Uint64(x$72.$high, x$72.$low))));
		x217 = _tuple$105[0];
		x218 = _tuple$105[1];
		x219 = new $Uint64(0, 0);
		x220 = new $Uint64(0, 0);
		_tuple$106 = bits.Add64(x191, ((x$73 = (new p384Uint1(x208.$high, x208.$low)), new $Uint64(x$73.$high, x$73.$low))), ((x$74 = (new p384Uint1(x218.$high, x218.$low)), new $Uint64(x$74.$high, x$74.$low))));
		x219 = _tuple$106[0];
		x220 = _tuple$106[1];
		x221 = new $Uint64(0, 0);
		_tuple$107 = bits.Mul64(x209, new $Uint64(1, 1));
		x221 = _tuple$107[1];
		x223 = new $Uint64(0, 0);
		x224 = new $Uint64(0, 0);
		_tuple$108 = bits.Mul64(x221, new $Uint64(4294967295, 4294967295));
		x224 = _tuple$108[0];
		x223 = _tuple$108[1];
		x225 = new $Uint64(0, 0);
		x226 = new $Uint64(0, 0);
		_tuple$109 = bits.Mul64(x221, new $Uint64(4294967295, 4294967295));
		x226 = _tuple$109[0];
		x225 = _tuple$109[1];
		x227 = new $Uint64(0, 0);
		x228 = new $Uint64(0, 0);
		_tuple$110 = bits.Mul64(x221, new $Uint64(4294967295, 4294967295));
		x228 = _tuple$110[0];
		x227 = _tuple$110[1];
		x229 = new $Uint64(0, 0);
		x230 = new $Uint64(0, 0);
		_tuple$111 = bits.Mul64(x221, new $Uint64(4294967295, 4294967294));
		x230 = _tuple$111[0];
		x229 = _tuple$111[1];
		x231 = new $Uint64(0, 0);
		x232 = new $Uint64(0, 0);
		_tuple$112 = bits.Mul64(x221, new $Uint64(4294967295, 0));
		x232 = _tuple$112[0];
		x231 = _tuple$112[1];
		x233 = new $Uint64(0, 0);
		x234 = new $Uint64(0, 0);
		_tuple$113 = bits.Mul64(x221, new $Uint64(0, 4294967295));
		x234 = _tuple$113[0];
		x233 = _tuple$113[1];
		x235 = new $Uint64(0, 0);
		x236 = new $Uint64(0, 0);
		_tuple$114 = bits.Add64(x234, x231, new $Uint64(0, 0));
		x235 = _tuple$114[0];
		x236 = _tuple$114[1];
		x237 = new $Uint64(0, 0);
		x238 = new $Uint64(0, 0);
		_tuple$115 = bits.Add64(x232, x229, ((x$75 = (new p384Uint1(x236.$high, x236.$low)), new $Uint64(x$75.$high, x$75.$low))));
		x237 = _tuple$115[0];
		x238 = _tuple$115[1];
		x239 = new $Uint64(0, 0);
		x240 = new $Uint64(0, 0);
		_tuple$116 = bits.Add64(x230, x227, ((x$76 = (new p384Uint1(x238.$high, x238.$low)), new $Uint64(x$76.$high, x$76.$low))));
		x239 = _tuple$116[0];
		x240 = _tuple$116[1];
		x241 = new $Uint64(0, 0);
		x242 = new $Uint64(0, 0);
		_tuple$117 = bits.Add64(x228, x225, ((x$77 = (new p384Uint1(x240.$high, x240.$low)), new $Uint64(x$77.$high, x$77.$low))));
		x241 = _tuple$117[0];
		x242 = _tuple$117[1];
		x243 = new $Uint64(0, 0);
		x244 = new $Uint64(0, 0);
		_tuple$118 = bits.Add64(x226, x223, ((x$78 = (new p384Uint1(x242.$high, x242.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x243 = _tuple$118[0];
		x244 = _tuple$118[1];
		x246 = new $Uint64(0, 0);
		_tuple$119 = bits.Add64(x209, x233, new $Uint64(0, 0));
		x246 = _tuple$119[1];
		x247 = new $Uint64(0, 0);
		x248 = new $Uint64(0, 0);
		_tuple$120 = bits.Add64(x211, x235, ((x$79 = (new p384Uint1(x246.$high, x246.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x247 = _tuple$120[0];
		x248 = _tuple$120[1];
		x249 = new $Uint64(0, 0);
		x250 = new $Uint64(0, 0);
		_tuple$121 = bits.Add64(x213, x237, ((x$80 = (new p384Uint1(x248.$high, x248.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x249 = _tuple$121[0];
		x250 = _tuple$121[1];
		x251 = new $Uint64(0, 0);
		x252 = new $Uint64(0, 0);
		_tuple$122 = bits.Add64(x215, x239, ((x$81 = (new p384Uint1(x250.$high, x250.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x251 = _tuple$122[0];
		x252 = _tuple$122[1];
		x253 = new $Uint64(0, 0);
		x254 = new $Uint64(0, 0);
		_tuple$123 = bits.Add64(x217, x241, ((x$82 = (new p384Uint1(x252.$high, x252.$low)), new $Uint64(x$82.$high, x$82.$low))));
		x253 = _tuple$123[0];
		x254 = _tuple$123[1];
		x255 = new $Uint64(0, 0);
		x256 = new $Uint64(0, 0);
		_tuple$124 = bits.Add64(x219, x243, ((x$83 = (new p384Uint1(x254.$high, x254.$low)), new $Uint64(x$83.$high, x$83.$low))));
		x255 = _tuple$124[0];
		x256 = _tuple$124[1];
		x257 = new $Uint64(0, 0);
		x258 = new $Uint64(0, 0);
		_tuple$125 = bits.Add64((x$84 = ((x$85 = (new p384Uint1(x220.$high, x220.$low)), new $Uint64(x$85.$high, x$85.$low))), x$86 = ((x$87 = (new p384Uint1(x192.$high, x192.$low)), new $Uint64(x$87.$high, x$87.$low))), new $Uint64(x$84.$high + x$86.$high, x$84.$low + x$86.$low)), (x$88 = ((x$89 = (new p384Uint1(x244.$high, x244.$low)), new $Uint64(x$89.$high, x$89.$low))), new $Uint64(x$88.$high + x224.$high, x$88.$low + x224.$low)), ((x$90 = (new p384Uint1(x256.$high, x256.$low)), new $Uint64(x$90.$high, x$90.$low))));
		x257 = _tuple$125[0];
		x258 = _tuple$125[1];
		x259 = new $Uint64(0, 0);
		x260 = new $Uint64(0, 0);
		_tuple$126 = bits.Mul64(x4, new $Uint64(2, 0));
		x260 = _tuple$126[0];
		x259 = _tuple$126[1];
		x261 = new $Uint64(0, 0);
		x262 = new $Uint64(0, 0);
		_tuple$127 = bits.Mul64(x4, new $Uint64(4294967294, 0));
		x262 = _tuple$127[0];
		x261 = _tuple$127[1];
		x263 = new $Uint64(0, 0);
		x264 = new $Uint64(0, 0);
		_tuple$128 = bits.Mul64(x4, new $Uint64(2, 0));
		x264 = _tuple$128[0];
		x263 = _tuple$128[1];
		x265 = new $Uint64(0, 0);
		x266 = new $Uint64(0, 0);
		_tuple$129 = bits.Mul64(x4, new $Uint64(4294967294, 1));
		x266 = _tuple$129[0];
		x265 = _tuple$129[1];
		x267 = new $Uint64(0, 0);
		x268 = new $Uint64(0, 0);
		_tuple$130 = bits.Add64(x266, x263, new $Uint64(0, 0));
		x267 = _tuple$130[0];
		x268 = _tuple$130[1];
		x269 = new $Uint64(0, 0);
		x270 = new $Uint64(0, 0);
		_tuple$131 = bits.Add64(x264, x261, ((x$91 = (new p384Uint1(x268.$high, x268.$low)), new $Uint64(x$91.$high, x$91.$low))));
		x269 = _tuple$131[0];
		x270 = _tuple$131[1];
		x271 = new $Uint64(0, 0);
		x272 = new $Uint64(0, 0);
		_tuple$132 = bits.Add64(x262, x259, ((x$92 = (new p384Uint1(x270.$high, x270.$low)), new $Uint64(x$92.$high, x$92.$low))));
		x271 = _tuple$132[0];
		x272 = _tuple$132[1];
		x273 = new $Uint64(0, 0);
		x274 = new $Uint64(0, 0);
		_tuple$133 = bits.Add64(x260, x4, ((x$93 = (new p384Uint1(x272.$high, x272.$low)), new $Uint64(x$93.$high, x$93.$low))));
		x273 = _tuple$133[0];
		x274 = _tuple$133[1];
		x275 = new $Uint64(0, 0);
		x276 = new $Uint64(0, 0);
		_tuple$134 = bits.Add64(x247, x265, new $Uint64(0, 0));
		x275 = _tuple$134[0];
		x276 = _tuple$134[1];
		x277 = new $Uint64(0, 0);
		x278 = new $Uint64(0, 0);
		_tuple$135 = bits.Add64(x249, x267, ((x$94 = (new p384Uint1(x276.$high, x276.$low)), new $Uint64(x$94.$high, x$94.$low))));
		x277 = _tuple$135[0];
		x278 = _tuple$135[1];
		x279 = new $Uint64(0, 0);
		x280 = new $Uint64(0, 0);
		_tuple$136 = bits.Add64(x251, x269, ((x$95 = (new p384Uint1(x278.$high, x278.$low)), new $Uint64(x$95.$high, x$95.$low))));
		x279 = _tuple$136[0];
		x280 = _tuple$136[1];
		x281 = new $Uint64(0, 0);
		x282 = new $Uint64(0, 0);
		_tuple$137 = bits.Add64(x253, x271, ((x$96 = (new p384Uint1(x280.$high, x280.$low)), new $Uint64(x$96.$high, x$96.$low))));
		x281 = _tuple$137[0];
		x282 = _tuple$137[1];
		x283 = new $Uint64(0, 0);
		x284 = new $Uint64(0, 0);
		_tuple$138 = bits.Add64(x255, x273, ((x$97 = (new p384Uint1(x282.$high, x282.$low)), new $Uint64(x$97.$high, x$97.$low))));
		x283 = _tuple$138[0];
		x284 = _tuple$138[1];
		x285 = new $Uint64(0, 0);
		x286 = new $Uint64(0, 0);
		_tuple$139 = bits.Add64(x257, ((x$98 = (new p384Uint1(x274.$high, x274.$low)), new $Uint64(x$98.$high, x$98.$low))), ((x$99 = (new p384Uint1(x284.$high, x284.$low)), new $Uint64(x$99.$high, x$99.$low))));
		x285 = _tuple$139[0];
		x286 = _tuple$139[1];
		x287 = new $Uint64(0, 0);
		_tuple$140 = bits.Mul64(x275, new $Uint64(1, 1));
		x287 = _tuple$140[1];
		x289 = new $Uint64(0, 0);
		x290 = new $Uint64(0, 0);
		_tuple$141 = bits.Mul64(x287, new $Uint64(4294967295, 4294967295));
		x290 = _tuple$141[0];
		x289 = _tuple$141[1];
		x291 = new $Uint64(0, 0);
		x292 = new $Uint64(0, 0);
		_tuple$142 = bits.Mul64(x287, new $Uint64(4294967295, 4294967295));
		x292 = _tuple$142[0];
		x291 = _tuple$142[1];
		x293 = new $Uint64(0, 0);
		x294 = new $Uint64(0, 0);
		_tuple$143 = bits.Mul64(x287, new $Uint64(4294967295, 4294967295));
		x294 = _tuple$143[0];
		x293 = _tuple$143[1];
		x295 = new $Uint64(0, 0);
		x296 = new $Uint64(0, 0);
		_tuple$144 = bits.Mul64(x287, new $Uint64(4294967295, 4294967294));
		x296 = _tuple$144[0];
		x295 = _tuple$144[1];
		x297 = new $Uint64(0, 0);
		x298 = new $Uint64(0, 0);
		_tuple$145 = bits.Mul64(x287, new $Uint64(4294967295, 0));
		x298 = _tuple$145[0];
		x297 = _tuple$145[1];
		x299 = new $Uint64(0, 0);
		x300 = new $Uint64(0, 0);
		_tuple$146 = bits.Mul64(x287, new $Uint64(0, 4294967295));
		x300 = _tuple$146[0];
		x299 = _tuple$146[1];
		x301 = new $Uint64(0, 0);
		x302 = new $Uint64(0, 0);
		_tuple$147 = bits.Add64(x300, x297, new $Uint64(0, 0));
		x301 = _tuple$147[0];
		x302 = _tuple$147[1];
		x303 = new $Uint64(0, 0);
		x304 = new $Uint64(0, 0);
		_tuple$148 = bits.Add64(x298, x295, ((x$100 = (new p384Uint1(x302.$high, x302.$low)), new $Uint64(x$100.$high, x$100.$low))));
		x303 = _tuple$148[0];
		x304 = _tuple$148[1];
		x305 = new $Uint64(0, 0);
		x306 = new $Uint64(0, 0);
		_tuple$149 = bits.Add64(x296, x293, ((x$101 = (new p384Uint1(x304.$high, x304.$low)), new $Uint64(x$101.$high, x$101.$low))));
		x305 = _tuple$149[0];
		x306 = _tuple$149[1];
		x307 = new $Uint64(0, 0);
		x308 = new $Uint64(0, 0);
		_tuple$150 = bits.Add64(x294, x291, ((x$102 = (new p384Uint1(x306.$high, x306.$low)), new $Uint64(x$102.$high, x$102.$low))));
		x307 = _tuple$150[0];
		x308 = _tuple$150[1];
		x309 = new $Uint64(0, 0);
		x310 = new $Uint64(0, 0);
		_tuple$151 = bits.Add64(x292, x289, ((x$103 = (new p384Uint1(x308.$high, x308.$low)), new $Uint64(x$103.$high, x$103.$low))));
		x309 = _tuple$151[0];
		x310 = _tuple$151[1];
		x312 = new $Uint64(0, 0);
		_tuple$152 = bits.Add64(x275, x299, new $Uint64(0, 0));
		x312 = _tuple$152[1];
		x313 = new $Uint64(0, 0);
		x314 = new $Uint64(0, 0);
		_tuple$153 = bits.Add64(x277, x301, ((x$104 = (new p384Uint1(x312.$high, x312.$low)), new $Uint64(x$104.$high, x$104.$low))));
		x313 = _tuple$153[0];
		x314 = _tuple$153[1];
		x315 = new $Uint64(0, 0);
		x316 = new $Uint64(0, 0);
		_tuple$154 = bits.Add64(x279, x303, ((x$105 = (new p384Uint1(x314.$high, x314.$low)), new $Uint64(x$105.$high, x$105.$low))));
		x315 = _tuple$154[0];
		x316 = _tuple$154[1];
		x317 = new $Uint64(0, 0);
		x318 = new $Uint64(0, 0);
		_tuple$155 = bits.Add64(x281, x305, ((x$106 = (new p384Uint1(x316.$high, x316.$low)), new $Uint64(x$106.$high, x$106.$low))));
		x317 = _tuple$155[0];
		x318 = _tuple$155[1];
		x319 = new $Uint64(0, 0);
		x320 = new $Uint64(0, 0);
		_tuple$156 = bits.Add64(x283, x307, ((x$107 = (new p384Uint1(x318.$high, x318.$low)), new $Uint64(x$107.$high, x$107.$low))));
		x319 = _tuple$156[0];
		x320 = _tuple$156[1];
		x321 = new $Uint64(0, 0);
		x322 = new $Uint64(0, 0);
		_tuple$157 = bits.Add64(x285, x309, ((x$108 = (new p384Uint1(x320.$high, x320.$low)), new $Uint64(x$108.$high, x$108.$low))));
		x321 = _tuple$157[0];
		x322 = _tuple$157[1];
		x323 = new $Uint64(0, 0);
		x324 = new $Uint64(0, 0);
		_tuple$158 = bits.Add64((x$109 = ((x$110 = (new p384Uint1(x286.$high, x286.$low)), new $Uint64(x$110.$high, x$110.$low))), x$111 = ((x$112 = (new p384Uint1(x258.$high, x258.$low)), new $Uint64(x$112.$high, x$112.$low))), new $Uint64(x$109.$high + x$111.$high, x$109.$low + x$111.$low)), (x$113 = ((x$114 = (new p384Uint1(x310.$high, x310.$low)), new $Uint64(x$114.$high, x$114.$low))), new $Uint64(x$113.$high + x290.$high, x$113.$low + x290.$low)), ((x$115 = (new p384Uint1(x322.$high, x322.$low)), new $Uint64(x$115.$high, x$115.$low))));
		x323 = _tuple$158[0];
		x324 = _tuple$158[1];
		x325 = new $Uint64(0, 0);
		x326 = new $Uint64(0, 0);
		_tuple$159 = bits.Mul64(x5, new $Uint64(2, 0));
		x326 = _tuple$159[0];
		x325 = _tuple$159[1];
		x327 = new $Uint64(0, 0);
		x328 = new $Uint64(0, 0);
		_tuple$160 = bits.Mul64(x5, new $Uint64(4294967294, 0));
		x328 = _tuple$160[0];
		x327 = _tuple$160[1];
		x329 = new $Uint64(0, 0);
		x330 = new $Uint64(0, 0);
		_tuple$161 = bits.Mul64(x5, new $Uint64(2, 0));
		x330 = _tuple$161[0];
		x329 = _tuple$161[1];
		x331 = new $Uint64(0, 0);
		x332 = new $Uint64(0, 0);
		_tuple$162 = bits.Mul64(x5, new $Uint64(4294967294, 1));
		x332 = _tuple$162[0];
		x331 = _tuple$162[1];
		x333 = new $Uint64(0, 0);
		x334 = new $Uint64(0, 0);
		_tuple$163 = bits.Add64(x332, x329, new $Uint64(0, 0));
		x333 = _tuple$163[0];
		x334 = _tuple$163[1];
		x335 = new $Uint64(0, 0);
		x336 = new $Uint64(0, 0);
		_tuple$164 = bits.Add64(x330, x327, ((x$116 = (new p384Uint1(x334.$high, x334.$low)), new $Uint64(x$116.$high, x$116.$low))));
		x335 = _tuple$164[0];
		x336 = _tuple$164[1];
		x337 = new $Uint64(0, 0);
		x338 = new $Uint64(0, 0);
		_tuple$165 = bits.Add64(x328, x325, ((x$117 = (new p384Uint1(x336.$high, x336.$low)), new $Uint64(x$117.$high, x$117.$low))));
		x337 = _tuple$165[0];
		x338 = _tuple$165[1];
		x339 = new $Uint64(0, 0);
		x340 = new $Uint64(0, 0);
		_tuple$166 = bits.Add64(x326, x5, ((x$118 = (new p384Uint1(x338.$high, x338.$low)), new $Uint64(x$118.$high, x$118.$low))));
		x339 = _tuple$166[0];
		x340 = _tuple$166[1];
		x341 = new $Uint64(0, 0);
		x342 = new $Uint64(0, 0);
		_tuple$167 = bits.Add64(x313, x331, new $Uint64(0, 0));
		x341 = _tuple$167[0];
		x342 = _tuple$167[1];
		x343 = new $Uint64(0, 0);
		x344 = new $Uint64(0, 0);
		_tuple$168 = bits.Add64(x315, x333, ((x$119 = (new p384Uint1(x342.$high, x342.$low)), new $Uint64(x$119.$high, x$119.$low))));
		x343 = _tuple$168[0];
		x344 = _tuple$168[1];
		x345 = new $Uint64(0, 0);
		x346 = new $Uint64(0, 0);
		_tuple$169 = bits.Add64(x317, x335, ((x$120 = (new p384Uint1(x344.$high, x344.$low)), new $Uint64(x$120.$high, x$120.$low))));
		x345 = _tuple$169[0];
		x346 = _tuple$169[1];
		x347 = new $Uint64(0, 0);
		x348 = new $Uint64(0, 0);
		_tuple$170 = bits.Add64(x319, x337, ((x$121 = (new p384Uint1(x346.$high, x346.$low)), new $Uint64(x$121.$high, x$121.$low))));
		x347 = _tuple$170[0];
		x348 = _tuple$170[1];
		x349 = new $Uint64(0, 0);
		x350 = new $Uint64(0, 0);
		_tuple$171 = bits.Add64(x321, x339, ((x$122 = (new p384Uint1(x348.$high, x348.$low)), new $Uint64(x$122.$high, x$122.$low))));
		x349 = _tuple$171[0];
		x350 = _tuple$171[1];
		x351 = new $Uint64(0, 0);
		x352 = new $Uint64(0, 0);
		_tuple$172 = bits.Add64(x323, ((x$123 = (new p384Uint1(x340.$high, x340.$low)), new $Uint64(x$123.$high, x$123.$low))), ((x$124 = (new p384Uint1(x350.$high, x350.$low)), new $Uint64(x$124.$high, x$124.$low))));
		x351 = _tuple$172[0];
		x352 = _tuple$172[1];
		x353 = new $Uint64(0, 0);
		_tuple$173 = bits.Mul64(x341, new $Uint64(1, 1));
		x353 = _tuple$173[1];
		x355 = new $Uint64(0, 0);
		x356 = new $Uint64(0, 0);
		_tuple$174 = bits.Mul64(x353, new $Uint64(4294967295, 4294967295));
		x356 = _tuple$174[0];
		x355 = _tuple$174[1];
		x357 = new $Uint64(0, 0);
		x358 = new $Uint64(0, 0);
		_tuple$175 = bits.Mul64(x353, new $Uint64(4294967295, 4294967295));
		x358 = _tuple$175[0];
		x357 = _tuple$175[1];
		x359 = new $Uint64(0, 0);
		x360 = new $Uint64(0, 0);
		_tuple$176 = bits.Mul64(x353, new $Uint64(4294967295, 4294967295));
		x360 = _tuple$176[0];
		x359 = _tuple$176[1];
		x361 = new $Uint64(0, 0);
		x362 = new $Uint64(0, 0);
		_tuple$177 = bits.Mul64(x353, new $Uint64(4294967295, 4294967294));
		x362 = _tuple$177[0];
		x361 = _tuple$177[1];
		x363 = new $Uint64(0, 0);
		x364 = new $Uint64(0, 0);
		_tuple$178 = bits.Mul64(x353, new $Uint64(4294967295, 0));
		x364 = _tuple$178[0];
		x363 = _tuple$178[1];
		x365 = new $Uint64(0, 0);
		x366 = new $Uint64(0, 0);
		_tuple$179 = bits.Mul64(x353, new $Uint64(0, 4294967295));
		x366 = _tuple$179[0];
		x365 = _tuple$179[1];
		x367 = new $Uint64(0, 0);
		x368 = new $Uint64(0, 0);
		_tuple$180 = bits.Add64(x366, x363, new $Uint64(0, 0));
		x367 = _tuple$180[0];
		x368 = _tuple$180[1];
		x369 = new $Uint64(0, 0);
		x370 = new $Uint64(0, 0);
		_tuple$181 = bits.Add64(x364, x361, ((x$125 = (new p384Uint1(x368.$high, x368.$low)), new $Uint64(x$125.$high, x$125.$low))));
		x369 = _tuple$181[0];
		x370 = _tuple$181[1];
		x371 = new $Uint64(0, 0);
		x372 = new $Uint64(0, 0);
		_tuple$182 = bits.Add64(x362, x359, ((x$126 = (new p384Uint1(x370.$high, x370.$low)), new $Uint64(x$126.$high, x$126.$low))));
		x371 = _tuple$182[0];
		x372 = _tuple$182[1];
		x373 = new $Uint64(0, 0);
		x374 = new $Uint64(0, 0);
		_tuple$183 = bits.Add64(x360, x357, ((x$127 = (new p384Uint1(x372.$high, x372.$low)), new $Uint64(x$127.$high, x$127.$low))));
		x373 = _tuple$183[0];
		x374 = _tuple$183[1];
		x375 = new $Uint64(0, 0);
		x376 = new $Uint64(0, 0);
		_tuple$184 = bits.Add64(x358, x355, ((x$128 = (new p384Uint1(x374.$high, x374.$low)), new $Uint64(x$128.$high, x$128.$low))));
		x375 = _tuple$184[0];
		x376 = _tuple$184[1];
		x378 = new $Uint64(0, 0);
		_tuple$185 = bits.Add64(x341, x365, new $Uint64(0, 0));
		x378 = _tuple$185[1];
		x379 = new $Uint64(0, 0);
		x380 = new $Uint64(0, 0);
		_tuple$186 = bits.Add64(x343, x367, ((x$129 = (new p384Uint1(x378.$high, x378.$low)), new $Uint64(x$129.$high, x$129.$low))));
		x379 = _tuple$186[0];
		x380 = _tuple$186[1];
		x381 = new $Uint64(0, 0);
		x382 = new $Uint64(0, 0);
		_tuple$187 = bits.Add64(x345, x369, ((x$130 = (new p384Uint1(x380.$high, x380.$low)), new $Uint64(x$130.$high, x$130.$low))));
		x381 = _tuple$187[0];
		x382 = _tuple$187[1];
		x383 = new $Uint64(0, 0);
		x384 = new $Uint64(0, 0);
		_tuple$188 = bits.Add64(x347, x371, ((x$131 = (new p384Uint1(x382.$high, x382.$low)), new $Uint64(x$131.$high, x$131.$low))));
		x383 = _tuple$188[0];
		x384 = _tuple$188[1];
		x385 = new $Uint64(0, 0);
		x386 = new $Uint64(0, 0);
		_tuple$189 = bits.Add64(x349, x373, ((x$132 = (new p384Uint1(x384.$high, x384.$low)), new $Uint64(x$132.$high, x$132.$low))));
		x385 = _tuple$189[0];
		x386 = _tuple$189[1];
		x387 = new $Uint64(0, 0);
		x388 = new $Uint64(0, 0);
		_tuple$190 = bits.Add64(x351, x375, ((x$133 = (new p384Uint1(x386.$high, x386.$low)), new $Uint64(x$133.$high, x$133.$low))));
		x387 = _tuple$190[0];
		x388 = _tuple$190[1];
		x389 = new $Uint64(0, 0);
		x390 = new $Uint64(0, 0);
		_tuple$191 = bits.Add64((x$134 = ((x$135 = (new p384Uint1(x352.$high, x352.$low)), new $Uint64(x$135.$high, x$135.$low))), x$136 = ((x$137 = (new p384Uint1(x324.$high, x324.$low)), new $Uint64(x$137.$high, x$137.$low))), new $Uint64(x$134.$high + x$136.$high, x$134.$low + x$136.$low)), (x$138 = ((x$139 = (new p384Uint1(x376.$high, x376.$low)), new $Uint64(x$139.$high, x$139.$low))), new $Uint64(x$138.$high + x356.$high, x$138.$low + x356.$low)), ((x$140 = (new p384Uint1(x388.$high, x388.$low)), new $Uint64(x$140.$high, x$140.$low))));
		x389 = _tuple$191[0];
		x390 = _tuple$191[1];
		x391 = new $Uint64(0, 0);
		x392 = new $Uint64(0, 0);
		_tuple$192 = bits.Sub64(x379, new $Uint64(0, 4294967295), new $Uint64(0, 0));
		x391 = _tuple$192[0];
		x392 = _tuple$192[1];
		x393 = new $Uint64(0, 0);
		x394 = new $Uint64(0, 0);
		_tuple$193 = bits.Sub64(x381, new $Uint64(4294967295, 0), ((x$141 = (new p384Uint1(x392.$high, x392.$low)), new $Uint64(x$141.$high, x$141.$low))));
		x393 = _tuple$193[0];
		x394 = _tuple$193[1];
		x395 = new $Uint64(0, 0);
		x396 = new $Uint64(0, 0);
		_tuple$194 = bits.Sub64(x383, new $Uint64(4294967295, 4294967294), ((x$142 = (new p384Uint1(x394.$high, x394.$low)), new $Uint64(x$142.$high, x$142.$low))));
		x395 = _tuple$194[0];
		x396 = _tuple$194[1];
		x397 = new $Uint64(0, 0);
		x398 = new $Uint64(0, 0);
		_tuple$195 = bits.Sub64(x385, new $Uint64(4294967295, 4294967295), ((x$143 = (new p384Uint1(x396.$high, x396.$low)), new $Uint64(x$143.$high, x$143.$low))));
		x397 = _tuple$195[0];
		x398 = _tuple$195[1];
		x399 = new $Uint64(0, 0);
		x400 = new $Uint64(0, 0);
		_tuple$196 = bits.Sub64(x387, new $Uint64(4294967295, 4294967295), ((x$144 = (new p384Uint1(x398.$high, x398.$low)), new $Uint64(x$144.$high, x$144.$low))));
		x399 = _tuple$196[0];
		x400 = _tuple$196[1];
		x401 = new $Uint64(0, 0);
		x402 = new $Uint64(0, 0);
		_tuple$197 = bits.Sub64(x389, new $Uint64(4294967295, 4294967295), ((x$145 = (new p384Uint1(x400.$high, x400.$low)), new $Uint64(x$145.$high, x$145.$low))));
		x401 = _tuple$197[0];
		x402 = _tuple$197[1];
		x404 = new $Uint64(0, 0);
		_tuple$198 = bits.Sub64(((x$146 = (new p384Uint1(x390.$high, x390.$low)), new $Uint64(x$146.$high, x$146.$low))), new $Uint64(0, 0), ((x$147 = (new p384Uint1(x402.$high, x402.$low)), new $Uint64(x$147.$high, x$147.$low))));
		x404 = _tuple$198[1];
		x405 = new $Uint64(0, 0);
		p384CmovznzU64((x405$24ptr || (x405$24ptr = new ptrType(function() { return x405; }, function($v) { x405 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x391, x379);
		x406 = new $Uint64(0, 0);
		p384CmovznzU64((x406$24ptr || (x406$24ptr = new ptrType(function() { return x406; }, function($v) { x406 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x393, x381);
		x407 = new $Uint64(0, 0);
		p384CmovznzU64((x407$24ptr || (x407$24ptr = new ptrType(function() { return x407; }, function($v) { x407 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x395, x383);
		x408 = new $Uint64(0, 0);
		p384CmovznzU64((x408$24ptr || (x408$24ptr = new ptrType(function() { return x408; }, function($v) { x408 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x397, x385);
		x409 = new $Uint64(0, 0);
		p384CmovznzU64((x409$24ptr || (x409$24ptr = new ptrType(function() { return x409; }, function($v) { x409 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x399, x387);
		x410 = new $Uint64(0, 0);
		p384CmovznzU64((x410$24ptr || (x410$24ptr = new ptrType(function() { return x410; }, function($v) { x410 = $v; }))), (new p384Uint1(x404.$high, x404.$low)), x401, x389);
		out1.nilCheck, out1[0] = x405;
		out1.nilCheck, out1[1] = x406;
		out1.nilCheck, out1[2] = x407;
		out1.nilCheck, out1[3] = x408;
		out1.nilCheck, out1[4] = x409;
		out1.nilCheck, out1[5] = x410;
	};
	p384Selectznz = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x1, x1$24ptr, x2, x2$24ptr, x3, x3$24ptr, x4, x4$24ptr, x5, x5$24ptr, x6, x6$24ptr;
		x1 = new $Uint64(0, 0);
		p384CmovznzU64((x1$24ptr || (x1$24ptr = new ptrType(function() { return x1; }, function($v) { x1 = $v; }))), arg1, arg2[0], arg3[0]);
		x2 = new $Uint64(0, 0);
		p384CmovznzU64((x2$24ptr || (x2$24ptr = new ptrType(function() { return x2; }, function($v) { x2 = $v; }))), arg1, arg2[1], arg3[1]);
		x3 = new $Uint64(0, 0);
		p384CmovznzU64((x3$24ptr || (x3$24ptr = new ptrType(function() { return x3; }, function($v) { x3 = $v; }))), arg1, arg2[2], arg3[2]);
		x4 = new $Uint64(0, 0);
		p384CmovznzU64((x4$24ptr || (x4$24ptr = new ptrType(function() { return x4; }, function($v) { x4 = $v; }))), arg1, arg2[3], arg3[3]);
		x5 = new $Uint64(0, 0);
		p384CmovznzU64((x5$24ptr || (x5$24ptr = new ptrType(function() { return x5; }, function($v) { x5 = $v; }))), arg1, arg2[4], arg3[4]);
		x6 = new $Uint64(0, 0);
		p384CmovznzU64((x6$24ptr || (x6$24ptr = new ptrType(function() { return x6; }, function($v) { x6 = $v; }))), arg1, arg2[5], arg3[5]);
		out1.nilCheck, out1[0] = x1;
		out1.nilCheck, out1[1] = x2;
		out1.nilCheck, out1[2] = x3;
		out1.nilCheck, out1[3] = x4;
		out1.nilCheck, out1[4] = x5;
		out1.nilCheck, out1[5] = x6;
	};
	p384ToBytes = function(out1, arg1) {
		var arg1, out1, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90;
		x1 = arg1[5];
		x2 = arg1[4];
		x3 = arg1[3];
		x4 = arg1[2];
		x5 = arg1[1];
		x6 = arg1[0];
		x7 = ((((x6.$low << 24 >>> 24)) & 255) >>> 0);
		x8 = $shiftRightUint64(x6, 8);
		x9 = ((((x8.$low << 24 >>> 24)) & 255) >>> 0);
		x10 = $shiftRightUint64(x8, 8);
		x11 = ((((x10.$low << 24 >>> 24)) & 255) >>> 0);
		x12 = $shiftRightUint64(x10, 8);
		x13 = ((((x12.$low << 24 >>> 24)) & 255) >>> 0);
		x14 = $shiftRightUint64(x12, 8);
		x15 = ((((x14.$low << 24 >>> 24)) & 255) >>> 0);
		x16 = $shiftRightUint64(x14, 8);
		x17 = ((((x16.$low << 24 >>> 24)) & 255) >>> 0);
		x18 = $shiftRightUint64(x16, 8);
		x19 = ((((x18.$low << 24 >>> 24)) & 255) >>> 0);
		x20 = ((($shiftRightUint64(x18, 8)).$low << 24 >>> 24));
		x21 = ((((x5.$low << 24 >>> 24)) & 255) >>> 0);
		x22 = $shiftRightUint64(x5, 8);
		x23 = ((((x22.$low << 24 >>> 24)) & 255) >>> 0);
		x24 = $shiftRightUint64(x22, 8);
		x25 = ((((x24.$low << 24 >>> 24)) & 255) >>> 0);
		x26 = $shiftRightUint64(x24, 8);
		x27 = ((((x26.$low << 24 >>> 24)) & 255) >>> 0);
		x28 = $shiftRightUint64(x26, 8);
		x29 = ((((x28.$low << 24 >>> 24)) & 255) >>> 0);
		x30 = $shiftRightUint64(x28, 8);
		x31 = ((((x30.$low << 24 >>> 24)) & 255) >>> 0);
		x32 = $shiftRightUint64(x30, 8);
		x33 = ((((x32.$low << 24 >>> 24)) & 255) >>> 0);
		x34 = ((($shiftRightUint64(x32, 8)).$low << 24 >>> 24));
		x35 = ((((x4.$low << 24 >>> 24)) & 255) >>> 0);
		x36 = $shiftRightUint64(x4, 8);
		x37 = ((((x36.$low << 24 >>> 24)) & 255) >>> 0);
		x38 = $shiftRightUint64(x36, 8);
		x39 = ((((x38.$low << 24 >>> 24)) & 255) >>> 0);
		x40 = $shiftRightUint64(x38, 8);
		x41 = ((((x40.$low << 24 >>> 24)) & 255) >>> 0);
		x42 = $shiftRightUint64(x40, 8);
		x43 = ((((x42.$low << 24 >>> 24)) & 255) >>> 0);
		x44 = $shiftRightUint64(x42, 8);
		x45 = ((((x44.$low << 24 >>> 24)) & 255) >>> 0);
		x46 = $shiftRightUint64(x44, 8);
		x47 = ((((x46.$low << 24 >>> 24)) & 255) >>> 0);
		x48 = ((($shiftRightUint64(x46, 8)).$low << 24 >>> 24));
		x49 = ((((x3.$low << 24 >>> 24)) & 255) >>> 0);
		x50 = $shiftRightUint64(x3, 8);
		x51 = ((((x50.$low << 24 >>> 24)) & 255) >>> 0);
		x52 = $shiftRightUint64(x50, 8);
		x53 = ((((x52.$low << 24 >>> 24)) & 255) >>> 0);
		x54 = $shiftRightUint64(x52, 8);
		x55 = ((((x54.$low << 24 >>> 24)) & 255) >>> 0);
		x56 = $shiftRightUint64(x54, 8);
		x57 = ((((x56.$low << 24 >>> 24)) & 255) >>> 0);
		x58 = $shiftRightUint64(x56, 8);
		x59 = ((((x58.$low << 24 >>> 24)) & 255) >>> 0);
		x60 = $shiftRightUint64(x58, 8);
		x61 = ((((x60.$low << 24 >>> 24)) & 255) >>> 0);
		x62 = ((($shiftRightUint64(x60, 8)).$low << 24 >>> 24));
		x63 = ((((x2.$low << 24 >>> 24)) & 255) >>> 0);
		x64 = $shiftRightUint64(x2, 8);
		x65 = ((((x64.$low << 24 >>> 24)) & 255) >>> 0);
		x66 = $shiftRightUint64(x64, 8);
		x67 = ((((x66.$low << 24 >>> 24)) & 255) >>> 0);
		x68 = $shiftRightUint64(x66, 8);
		x69 = ((((x68.$low << 24 >>> 24)) & 255) >>> 0);
		x70 = $shiftRightUint64(x68, 8);
		x71 = ((((x70.$low << 24 >>> 24)) & 255) >>> 0);
		x72 = $shiftRightUint64(x70, 8);
		x73 = ((((x72.$low << 24 >>> 24)) & 255) >>> 0);
		x74 = $shiftRightUint64(x72, 8);
		x75 = ((((x74.$low << 24 >>> 24)) & 255) >>> 0);
		x76 = ((($shiftRightUint64(x74, 8)).$low << 24 >>> 24));
		x77 = ((((x1.$low << 24 >>> 24)) & 255) >>> 0);
		x78 = $shiftRightUint64(x1, 8);
		x79 = ((((x78.$low << 24 >>> 24)) & 255) >>> 0);
		x80 = $shiftRightUint64(x78, 8);
		x81 = ((((x80.$low << 24 >>> 24)) & 255) >>> 0);
		x82 = $shiftRightUint64(x80, 8);
		x83 = ((((x82.$low << 24 >>> 24)) & 255) >>> 0);
		x84 = $shiftRightUint64(x82, 8);
		x85 = ((((x84.$low << 24 >>> 24)) & 255) >>> 0);
		x86 = $shiftRightUint64(x84, 8);
		x87 = ((((x86.$low << 24 >>> 24)) & 255) >>> 0);
		x88 = $shiftRightUint64(x86, 8);
		x89 = ((((x88.$low << 24 >>> 24)) & 255) >>> 0);
		x90 = ((($shiftRightUint64(x88, 8)).$low << 24 >>> 24));
		out1.nilCheck, out1[0] = x7;
		out1.nilCheck, out1[1] = x9;
		out1.nilCheck, out1[2] = x11;
		out1.nilCheck, out1[3] = x13;
		out1.nilCheck, out1[4] = x15;
		out1.nilCheck, out1[5] = x17;
		out1.nilCheck, out1[6] = x19;
		out1.nilCheck, out1[7] = x20;
		out1.nilCheck, out1[8] = x21;
		out1.nilCheck, out1[9] = x23;
		out1.nilCheck, out1[10] = x25;
		out1.nilCheck, out1[11] = x27;
		out1.nilCheck, out1[12] = x29;
		out1.nilCheck, out1[13] = x31;
		out1.nilCheck, out1[14] = x33;
		out1.nilCheck, out1[15] = x34;
		out1.nilCheck, out1[16] = x35;
		out1.nilCheck, out1[17] = x37;
		out1.nilCheck, out1[18] = x39;
		out1.nilCheck, out1[19] = x41;
		out1.nilCheck, out1[20] = x43;
		out1.nilCheck, out1[21] = x45;
		out1.nilCheck, out1[22] = x47;
		out1.nilCheck, out1[23] = x48;
		out1.nilCheck, out1[24] = x49;
		out1.nilCheck, out1[25] = x51;
		out1.nilCheck, out1[26] = x53;
		out1.nilCheck, out1[27] = x55;
		out1.nilCheck, out1[28] = x57;
		out1.nilCheck, out1[29] = x59;
		out1.nilCheck, out1[30] = x61;
		out1.nilCheck, out1[31] = x62;
		out1.nilCheck, out1[32] = x63;
		out1.nilCheck, out1[33] = x65;
		out1.nilCheck, out1[34] = x67;
		out1.nilCheck, out1[35] = x69;
		out1.nilCheck, out1[36] = x71;
		out1.nilCheck, out1[37] = x73;
		out1.nilCheck, out1[38] = x75;
		out1.nilCheck, out1[39] = x76;
		out1.nilCheck, out1[40] = x77;
		out1.nilCheck, out1[41] = x79;
		out1.nilCheck, out1[42] = x81;
		out1.nilCheck, out1[43] = x83;
		out1.nilCheck, out1[44] = x85;
		out1.nilCheck, out1[45] = x87;
		out1.nilCheck, out1[46] = x89;
		out1.nilCheck, out1[47] = x90;
	};
	p384FromBytes = function(out1, arg1) {
		var arg1, out1, x, x$1, x$2, x$3, x$4, x$5, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90;
		x1 = $shiftLeft64((new $Uint64(0, arg1[47])), 56);
		x2 = $shiftLeft64((new $Uint64(0, arg1[46])), 48);
		x3 = $shiftLeft64((new $Uint64(0, arg1[45])), 40);
		x4 = $shiftLeft64((new $Uint64(0, arg1[44])), 32);
		x5 = $shiftLeft64((new $Uint64(0, arg1[43])), 24);
		x6 = $shiftLeft64((new $Uint64(0, arg1[42])), 16);
		x7 = $shiftLeft64((new $Uint64(0, arg1[41])), 8);
		x8 = arg1[40];
		x9 = $shiftLeft64((new $Uint64(0, arg1[39])), 56);
		x10 = $shiftLeft64((new $Uint64(0, arg1[38])), 48);
		x11 = $shiftLeft64((new $Uint64(0, arg1[37])), 40);
		x12 = $shiftLeft64((new $Uint64(0, arg1[36])), 32);
		x13 = $shiftLeft64((new $Uint64(0, arg1[35])), 24);
		x14 = $shiftLeft64((new $Uint64(0, arg1[34])), 16);
		x15 = $shiftLeft64((new $Uint64(0, arg1[33])), 8);
		x16 = arg1[32];
		x17 = $shiftLeft64((new $Uint64(0, arg1[31])), 56);
		x18 = $shiftLeft64((new $Uint64(0, arg1[30])), 48);
		x19 = $shiftLeft64((new $Uint64(0, arg1[29])), 40);
		x20 = $shiftLeft64((new $Uint64(0, arg1[28])), 32);
		x21 = $shiftLeft64((new $Uint64(0, arg1[27])), 24);
		x22 = $shiftLeft64((new $Uint64(0, arg1[26])), 16);
		x23 = $shiftLeft64((new $Uint64(0, arg1[25])), 8);
		x24 = arg1[24];
		x25 = $shiftLeft64((new $Uint64(0, arg1[23])), 56);
		x26 = $shiftLeft64((new $Uint64(0, arg1[22])), 48);
		x27 = $shiftLeft64((new $Uint64(0, arg1[21])), 40);
		x28 = $shiftLeft64((new $Uint64(0, arg1[20])), 32);
		x29 = $shiftLeft64((new $Uint64(0, arg1[19])), 24);
		x30 = $shiftLeft64((new $Uint64(0, arg1[18])), 16);
		x31 = $shiftLeft64((new $Uint64(0, arg1[17])), 8);
		x32 = arg1[16];
		x33 = $shiftLeft64((new $Uint64(0, arg1[15])), 56);
		x34 = $shiftLeft64((new $Uint64(0, arg1[14])), 48);
		x35 = $shiftLeft64((new $Uint64(0, arg1[13])), 40);
		x36 = $shiftLeft64((new $Uint64(0, arg1[12])), 32);
		x37 = $shiftLeft64((new $Uint64(0, arg1[11])), 24);
		x38 = $shiftLeft64((new $Uint64(0, arg1[10])), 16);
		x39 = $shiftLeft64((new $Uint64(0, arg1[9])), 8);
		x40 = arg1[8];
		x41 = $shiftLeft64((new $Uint64(0, arg1[7])), 56);
		x42 = $shiftLeft64((new $Uint64(0, arg1[6])), 48);
		x43 = $shiftLeft64((new $Uint64(0, arg1[5])), 40);
		x44 = $shiftLeft64((new $Uint64(0, arg1[4])), 32);
		x45 = $shiftLeft64((new $Uint64(0, arg1[3])), 24);
		x46 = $shiftLeft64((new $Uint64(0, arg1[2])), 16);
		x47 = $shiftLeft64((new $Uint64(0, arg1[1])), 8);
		x48 = arg1[0];
		x49 = (x = (new $Uint64(0, x48)), new $Uint64(x47.$high + x.$high, x47.$low + x.$low));
		x50 = new $Uint64(x46.$high + x49.$high, x46.$low + x49.$low);
		x51 = new $Uint64(x45.$high + x50.$high, x45.$low + x50.$low);
		x52 = new $Uint64(x44.$high + x51.$high, x44.$low + x51.$low);
		x53 = new $Uint64(x43.$high + x52.$high, x43.$low + x52.$low);
		x54 = new $Uint64(x42.$high + x53.$high, x42.$low + x53.$low);
		x55 = new $Uint64(x41.$high + x54.$high, x41.$low + x54.$low);
		x56 = (x$1 = (new $Uint64(0, x40)), new $Uint64(x39.$high + x$1.$high, x39.$low + x$1.$low));
		x57 = new $Uint64(x38.$high + x56.$high, x38.$low + x56.$low);
		x58 = new $Uint64(x37.$high + x57.$high, x37.$low + x57.$low);
		x59 = new $Uint64(x36.$high + x58.$high, x36.$low + x58.$low);
		x60 = new $Uint64(x35.$high + x59.$high, x35.$low + x59.$low);
		x61 = new $Uint64(x34.$high + x60.$high, x34.$low + x60.$low);
		x62 = new $Uint64(x33.$high + x61.$high, x33.$low + x61.$low);
		x63 = (x$2 = (new $Uint64(0, x32)), new $Uint64(x31.$high + x$2.$high, x31.$low + x$2.$low));
		x64 = new $Uint64(x30.$high + x63.$high, x30.$low + x63.$low);
		x65 = new $Uint64(x29.$high + x64.$high, x29.$low + x64.$low);
		x66 = new $Uint64(x28.$high + x65.$high, x28.$low + x65.$low);
		x67 = new $Uint64(x27.$high + x66.$high, x27.$low + x66.$low);
		x68 = new $Uint64(x26.$high + x67.$high, x26.$low + x67.$low);
		x69 = new $Uint64(x25.$high + x68.$high, x25.$low + x68.$low);
		x70 = (x$3 = (new $Uint64(0, x24)), new $Uint64(x23.$high + x$3.$high, x23.$low + x$3.$low));
		x71 = new $Uint64(x22.$high + x70.$high, x22.$low + x70.$low);
		x72 = new $Uint64(x21.$high + x71.$high, x21.$low + x71.$low);
		x73 = new $Uint64(x20.$high + x72.$high, x20.$low + x72.$low);
		x74 = new $Uint64(x19.$high + x73.$high, x19.$low + x73.$low);
		x75 = new $Uint64(x18.$high + x74.$high, x18.$low + x74.$low);
		x76 = new $Uint64(x17.$high + x75.$high, x17.$low + x75.$low);
		x77 = (x$4 = (new $Uint64(0, x16)), new $Uint64(x15.$high + x$4.$high, x15.$low + x$4.$low));
		x78 = new $Uint64(x14.$high + x77.$high, x14.$low + x77.$low);
		x79 = new $Uint64(x13.$high + x78.$high, x13.$low + x78.$low);
		x80 = new $Uint64(x12.$high + x79.$high, x12.$low + x79.$low);
		x81 = new $Uint64(x11.$high + x80.$high, x11.$low + x80.$low);
		x82 = new $Uint64(x10.$high + x81.$high, x10.$low + x81.$low);
		x83 = new $Uint64(x9.$high + x82.$high, x9.$low + x82.$low);
		x84 = (x$5 = (new $Uint64(0, x8)), new $Uint64(x7.$high + x$5.$high, x7.$low + x$5.$low));
		x85 = new $Uint64(x6.$high + x84.$high, x6.$low + x84.$low);
		x86 = new $Uint64(x5.$high + x85.$high, x5.$low + x85.$low);
		x87 = new $Uint64(x4.$high + x86.$high, x4.$low + x86.$low);
		x88 = new $Uint64(x3.$high + x87.$high, x3.$low + x87.$low);
		x89 = new $Uint64(x2.$high + x88.$high, x2.$low + x88.$low);
		x90 = new $Uint64(x1.$high + x89.$high, x1.$low + x89.$low);
		out1.nilCheck, out1[0] = x55;
		out1.nilCheck, out1[1] = x62;
		out1.nilCheck, out1[2] = x69;
		out1.nilCheck, out1[3] = x76;
		out1.nilCheck, out1[4] = x83;
		out1.nilCheck, out1[5] = x90;
	};
	P384Element.ptr.prototype.One = function() {
		var e;
		e = this;
		p384SetOne(e.x);
		return e;
	};
	P384Element.prototype.One = function() { return this.$val.One(); };
	P384Element.ptr.prototype.Equal = function(t) {
		var e, eBytes, t, tBytes;
		e = this;
		eBytes = e.Bytes();
		tBytes = t.Bytes();
		return subtle.ConstantTimeCompare(eBytes, tBytes);
	};
	P384Element.prototype.Equal = function(t) { return this.$val.Equal(t); };
	P384Element.ptr.prototype.IsZero = function() {
		var e, eBytes;
		e = this;
		eBytes = e.Bytes();
		return subtle.ConstantTimeCompare(eBytes, p384ZeroEncoding);
	};
	P384Element.prototype.IsZero = function() { return this.$val.IsZero(); };
	P384Element.ptr.prototype.Set = function(t) {
		var e, t;
		e = this;
		p384MontgomeryDomainFieldElement.copy(e.x, t.x);
		return e;
	};
	P384Element.prototype.Set = function(t) { return this.$val.Set(t); };
	P384Element.ptr.prototype.Bytes = function() {
		var e, out;
		e = this;
		out = arrayType$4.zero();
		return e.bytes(out);
	};
	P384Element.prototype.Bytes = function() { return this.$val.Bytes(); };
	P384Element.ptr.prototype.bytes = function(out) {
		var e, out, tmp;
		e = this;
		tmp = arrayType$1.zero();
		p384FromMontgomery(tmp, e.x);
		p384ToBytes(out, (tmp));
		p384InvertEndianness(new sliceType(out));
		return new sliceType(out);
	};
	P384Element.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P384Element.ptr.prototype.SetBytes = function(v) {
		var _i, _ref, e, i, in$1, tmp, v;
		e = this;
		if (!((v.$length === 48))) {
			return [ptrType$2.nil, errors.New("invalid P384Element encoding")];
		}
		_ref = v;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) < ((i < 0 || i >= p384MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p384MinusOneEncoding.$array[p384MinusOneEncoding.$offset + i])) {
				break;
			}
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) > ((i < 0 || i >= p384MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p384MinusOneEncoding.$array[p384MinusOneEncoding.$offset + i])) {
				return [ptrType$2.nil, errors.New("invalid P384Element encoding")];
			}
			_i++;
		}
		in$1 = arrayType$4.zero();
		$copySlice(new sliceType(in$1), v);
		p384InvertEndianness(new sliceType(in$1));
		tmp = arrayType$1.zero();
		p384FromBytes((tmp), in$1);
		p384ToMontgomery(e.x, tmp);
		return [e, $ifaceNil];
	};
	P384Element.prototype.SetBytes = function(v) { return this.$val.SetBytes(v); };
	P384Element.ptr.prototype.Add = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p384Add(e.x, t1.x, t2.x);
		return e;
	};
	P384Element.prototype.Add = function(t1, t2) { return this.$val.Add(t1, t2); };
	P384Element.ptr.prototype.Sub = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p384Sub(e.x, t1.x, t2.x);
		return e;
	};
	P384Element.prototype.Sub = function(t1, t2) { return this.$val.Sub(t1, t2); };
	P384Element.ptr.prototype.Mul = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p384Mul(e.x, t1.x, t2.x);
		return e;
	};
	P384Element.prototype.Mul = function(t1, t2) { return this.$val.Mul(t1, t2); };
	P384Element.ptr.prototype.Square = function(t) {
		var e, t;
		e = this;
		p384Square(e.x, t.x);
		return e;
	};
	P384Element.prototype.Square = function(t) { return this.$val.Square(t); };
	P384Element.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		p384Selectznz((v.x), (new p384Uint1(0, cond)), (b.x), (a.x));
		return v;
	};
	P384Element.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	p384InvertEndianness = function(v) {
		var _q, _tmp, _tmp$1, i, v, x, x$1;
		i = 0;
		while (true) {
			if (!(i < (_q = v.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tmp = (x = (v.$length - 1 >> 0) - i >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]));
			_tmp$1 = ((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]);
			((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i] = _tmp);
			(x$1 = (v.$length - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$1] = _tmp$1));
			i = i + (1) >> 0;
		}
	};
	P256Element.ptr.prototype.Invert = function(x) {
		var e, s, s$1, s$2, s$3, s$4, s$5, s$6, s$7, s$8, t0, t1, x, z;
		e = this;
		z = new P256Element.ptr(arrayType$2.zero()).Set(e);
		t0 = new P256Element.ptr(arrayType$2.zero());
		t1 = new P256Element.ptr(arrayType$2.zero());
		z.Square(x);
		z.Mul(x, z);
		z.Square(z);
		z.Mul(x, z);
		t0.Square(z);
		s = 1;
		while (true) {
			if (!(s < 3)) { break; }
			t0.Square(t0);
			s = s + (1) >> 0;
		}
		t0.Mul(z, t0);
		t1.Square(t0);
		s$1 = 1;
		while (true) {
			if (!(s$1 < 6)) { break; }
			t1.Square(t1);
			s$1 = s$1 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$2 = 0;
		while (true) {
			if (!(s$2 < 3)) { break; }
			t0.Square(t0);
			s$2 = s$2 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		t0.Mul(x, t0);
		t1.Square(t0);
		s$3 = 1;
		while (true) {
			if (!(s$3 < 16)) { break; }
			t1.Square(t1);
			s$3 = s$3 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$4 = 0;
		while (true) {
			if (!(s$4 < 15)) { break; }
			t0.Square(t0);
			s$4 = s$4 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$5 = 0;
		while (true) {
			if (!(s$5 < 17)) { break; }
			t0.Square(t0);
			s$5 = s$5 + (1) >> 0;
		}
		t0.Mul(x, t0);
		s$6 = 0;
		while (true) {
			if (!(s$6 < 143)) { break; }
			t0.Square(t0);
			s$6 = s$6 + (1) >> 0;
		}
		t0.Mul(z, t0);
		s$7 = 0;
		while (true) {
			if (!(s$7 < 47)) { break; }
			t0.Square(t0);
			s$7 = s$7 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$8 = 0;
		while (true) {
			if (!(s$8 < 2)) { break; }
			z.Square(z);
			s$8 = s$8 + (1) >> 0;
		}
		z.Mul(x, z);
		return e.Set(z);
	};
	P256Element.prototype.Invert = function(x) { return this.$val.Invert(x); };
	p256CmovznzU64 = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x, x$1, x$2, x1, x2;
		x1 = $mul64((new $Uint64(arg1.$high, arg1.$low)), new $Uint64(4294967295, 4294967295));
		x2 = (x = new $Uint64(x1.$high & arg3.$high, (x1.$low & arg3.$low) >>> 0), x$1 = (x$2 = new $Uint64(~x1.$high, ~x1.$low >>> 0), new $Uint64(x$2.$high & arg2.$high, (x$2.$low & arg2.$low) >>> 0)), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		out1.$set(x2);
	};
	p256Mul = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$9, arg1, arg2, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$7, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x183, x184, x184$24ptr, x185, x185$24ptr, x186, x186$24ptr, x187, x187$24ptr, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, arg2[3]);
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, arg2[2]);
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, arg2[1]);
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, arg2[0]);
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p256Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p256Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = (x$2 = ((x$3 = (new p256Uint1(x18.$high, x18.$low)), new $Uint64(x$3.$high, x$3.$low))), new $Uint64(x$2.$high + x6.$high, x$2.$low + x6.$low));
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 1));
		x21 = _tuple$7[0];
		x20 = _tuple$7[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x11, new $Uint64(0, 4294967295));
		x23 = _tuple$8[0];
		x22 = _tuple$8[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x25 = _tuple$9[0];
		x24 = _tuple$9[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x25, x22, new $Uint64(0, 0));
		x26 = _tuple$10[0];
		x27 = _tuple$10[1];
		x28 = (x$4 = ((x$5 = (new p256Uint1(x27.$high, x27.$low)), new $Uint64(x$5.$high, x$5.$low))), new $Uint64(x$4.$high + x23.$high, x$4.$low + x23.$low));
		x30 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x11, x24, new $Uint64(0, 0));
		x30 = _tuple$11[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x13, x26, ((x$6 = (new p256Uint1(x30.$high, x30.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x31 = _tuple$12[0];
		x32 = _tuple$12[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x15, x28, ((x$7 = (new p256Uint1(x32.$high, x32.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x33 = _tuple$13[0];
		x34 = _tuple$13[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x17, x20, ((x$8 = (new p256Uint1(x34.$high, x34.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x35 = _tuple$14[0];
		x36 = _tuple$14[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x19, x21, ((x$9 = (new p256Uint1(x36.$high, x36.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x37 = _tuple$15[0];
		x38 = _tuple$15[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x1, arg2[3]);
		x40 = _tuple$16[0];
		x39 = _tuple$16[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x1, arg2[2]);
		x42 = _tuple$17[0];
		x41 = _tuple$17[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, arg2[1]);
		x44 = _tuple$18[0];
		x43 = _tuple$18[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, arg2[0]);
		x46 = _tuple$19[0];
		x45 = _tuple$19[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x46, x43, new $Uint64(0, 0));
		x47 = _tuple$20[0];
		x48 = _tuple$20[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x44, x41, ((x$10 = (new p256Uint1(x48.$high, x48.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x49 = _tuple$21[0];
		x50 = _tuple$21[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x42, x39, ((x$11 = (new p256Uint1(x50.$high, x50.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x51 = _tuple$22[0];
		x52 = _tuple$22[1];
		x53 = (x$12 = ((x$13 = (new p256Uint1(x52.$high, x52.$low)), new $Uint64(x$13.$high, x$13.$low))), new $Uint64(x$12.$high + x40.$high, x$12.$low + x40.$low));
		x54 = new $Uint64(0, 0);
		x55 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x31, x45, new $Uint64(0, 0));
		x54 = _tuple$23[0];
		x55 = _tuple$23[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x33, x47, ((x$14 = (new p256Uint1(x55.$high, x55.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x56 = _tuple$24[0];
		x57 = _tuple$24[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x35, x49, ((x$15 = (new p256Uint1(x57.$high, x57.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x58 = _tuple$25[0];
		x59 = _tuple$25[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x37, x51, ((x$16 = (new p256Uint1(x59.$high, x59.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x60 = _tuple$26[0];
		x61 = _tuple$26[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(((x$17 = (new p256Uint1(x38.$high, x38.$low)), new $Uint64(x$17.$high, x$17.$low))), x53, ((x$18 = (new p256Uint1(x61.$high, x61.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x62 = _tuple$27[0];
		x63 = _tuple$27[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x54, new $Uint64(4294967295, 1));
		x65 = _tuple$28[0];
		x64 = _tuple$28[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x54, new $Uint64(0, 4294967295));
		x67 = _tuple$29[0];
		x66 = _tuple$29[1];
		x68 = new $Uint64(0, 0);
		x69 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x69 = _tuple$30[0];
		x68 = _tuple$30[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x69, x66, new $Uint64(0, 0));
		x70 = _tuple$31[0];
		x71 = _tuple$31[1];
		x72 = (x$19 = ((x$20 = (new p256Uint1(x71.$high, x71.$low)), new $Uint64(x$20.$high, x$20.$low))), new $Uint64(x$19.$high + x67.$high, x$19.$low + x67.$low));
		x74 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x54, x68, new $Uint64(0, 0));
		x74 = _tuple$32[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x56, x70, ((x$21 = (new p256Uint1(x74.$high, x74.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x75 = _tuple$33[0];
		x76 = _tuple$33[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x58, x72, ((x$22 = (new p256Uint1(x76.$high, x76.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x77 = _tuple$34[0];
		x78 = _tuple$34[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x60, x64, ((x$23 = (new p256Uint1(x78.$high, x78.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x79 = _tuple$35[0];
		x80 = _tuple$35[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x62, x65, ((x$24 = (new p256Uint1(x80.$high, x80.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x81 = _tuple$36[0];
		x82 = _tuple$36[1];
		x83 = (x$25 = ((x$26 = (new p256Uint1(x82.$high, x82.$low)), new $Uint64(x$26.$high, x$26.$low))), x$27 = ((x$28 = (new p256Uint1(x63.$high, x63.$low)), new $Uint64(x$28.$high, x$28.$low))), new $Uint64(x$25.$high + x$27.$high, x$25.$low + x$27.$low));
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$37 = bits.Mul64(x2, arg2[3]);
		x85 = _tuple$37[0];
		x84 = _tuple$37[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x2, arg2[2]);
		x87 = _tuple$38[0];
		x86 = _tuple$38[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x2, arg2[1]);
		x89 = _tuple$39[0];
		x88 = _tuple$39[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x2, arg2[0]);
		x91 = _tuple$40[0];
		x90 = _tuple$40[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x91, x88, new $Uint64(0, 0));
		x92 = _tuple$41[0];
		x93 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x89, x86, ((x$29 = (new p256Uint1(x93.$high, x93.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x94 = _tuple$42[0];
		x95 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x87, x84, ((x$30 = (new p256Uint1(x95.$high, x95.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x96 = _tuple$43[0];
		x97 = _tuple$43[1];
		x98 = (x$31 = ((x$32 = (new p256Uint1(x97.$high, x97.$low)), new $Uint64(x$32.$high, x$32.$low))), new $Uint64(x$31.$high + x85.$high, x$31.$low + x85.$low));
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x75, x90, new $Uint64(0, 0));
		x99 = _tuple$44[0];
		x100 = _tuple$44[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x77, x92, ((x$33 = (new p256Uint1(x100.$high, x100.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x101 = _tuple$45[0];
		x102 = _tuple$45[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x79, x94, ((x$34 = (new p256Uint1(x102.$high, x102.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x103 = _tuple$46[0];
		x104 = _tuple$46[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x81, x96, ((x$35 = (new p256Uint1(x104.$high, x104.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x105 = _tuple$47[0];
		x106 = _tuple$47[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x83, x98, ((x$36 = (new p256Uint1(x106.$high, x106.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x107 = _tuple$48[0];
		x108 = _tuple$48[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x99, new $Uint64(4294967295, 1));
		x110 = _tuple$49[0];
		x109 = _tuple$49[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x99, new $Uint64(0, 4294967295));
		x112 = _tuple$50[0];
		x111 = _tuple$50[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x99, new $Uint64(4294967295, 4294967295));
		x114 = _tuple$51[0];
		x113 = _tuple$51[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x114, x111, new $Uint64(0, 0));
		x115 = _tuple$52[0];
		x116 = _tuple$52[1];
		x117 = (x$37 = ((x$38 = (new p256Uint1(x116.$high, x116.$low)), new $Uint64(x$38.$high, x$38.$low))), new $Uint64(x$37.$high + x112.$high, x$37.$low + x112.$low));
		x119 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x99, x113, new $Uint64(0, 0));
		x119 = _tuple$53[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x101, x115, ((x$39 = (new p256Uint1(x119.$high, x119.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x120 = _tuple$54[0];
		x121 = _tuple$54[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x103, x117, ((x$40 = (new p256Uint1(x121.$high, x121.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x122 = _tuple$55[0];
		x123 = _tuple$55[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x105, x109, ((x$41 = (new p256Uint1(x123.$high, x123.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x124 = _tuple$56[0];
		x125 = _tuple$56[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x107, x110, ((x$42 = (new p256Uint1(x125.$high, x125.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x126 = _tuple$57[0];
		x127 = _tuple$57[1];
		x128 = (x$43 = ((x$44 = (new p256Uint1(x127.$high, x127.$low)), new $Uint64(x$44.$high, x$44.$low))), x$45 = ((x$46 = (new p256Uint1(x108.$high, x108.$low)), new $Uint64(x$46.$high, x$46.$low))), new $Uint64(x$43.$high + x$45.$high, x$43.$low + x$45.$low));
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$58 = bits.Mul64(x3, arg2[3]);
		x130 = _tuple$58[0];
		x129 = _tuple$58[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$59 = bits.Mul64(x3, arg2[2]);
		x132 = _tuple$59[0];
		x131 = _tuple$59[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$60 = bits.Mul64(x3, arg2[1]);
		x134 = _tuple$60[0];
		x133 = _tuple$60[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$61 = bits.Mul64(x3, arg2[0]);
		x136 = _tuple$61[0];
		x135 = _tuple$61[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x136, x133, new $Uint64(0, 0));
		x137 = _tuple$62[0];
		x138 = _tuple$62[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x134, x131, ((x$47 = (new p256Uint1(x138.$high, x138.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x139 = _tuple$63[0];
		x140 = _tuple$63[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x132, x129, ((x$48 = (new p256Uint1(x140.$high, x140.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x141 = _tuple$64[0];
		x142 = _tuple$64[1];
		x143 = (x$49 = ((x$50 = (new p256Uint1(x142.$high, x142.$low)), new $Uint64(x$50.$high, x$50.$low))), new $Uint64(x$49.$high + x130.$high, x$49.$low + x130.$low));
		x144 = new $Uint64(0, 0);
		x145 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x120, x135, new $Uint64(0, 0));
		x144 = _tuple$65[0];
		x145 = _tuple$65[1];
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x122, x137, ((x$51 = (new p256Uint1(x145.$high, x145.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x146 = _tuple$66[0];
		x147 = _tuple$66[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x124, x139, ((x$52 = (new p256Uint1(x147.$high, x147.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x148 = _tuple$67[0];
		x149 = _tuple$67[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x126, x141, ((x$53 = (new p256Uint1(x149.$high, x149.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x150 = _tuple$68[0];
		x151 = _tuple$68[1];
		x152 = new $Uint64(0, 0);
		x153 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x128, x143, ((x$54 = (new p256Uint1(x151.$high, x151.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x152 = _tuple$69[0];
		x153 = _tuple$69[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x144, new $Uint64(4294967295, 1));
		x155 = _tuple$70[0];
		x154 = _tuple$70[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x144, new $Uint64(0, 4294967295));
		x157 = _tuple$71[0];
		x156 = _tuple$71[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x144, new $Uint64(4294967295, 4294967295));
		x159 = _tuple$72[0];
		x158 = _tuple$72[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x159, x156, new $Uint64(0, 0));
		x160 = _tuple$73[0];
		x161 = _tuple$73[1];
		x162 = (x$55 = ((x$56 = (new p256Uint1(x161.$high, x161.$low)), new $Uint64(x$56.$high, x$56.$low))), new $Uint64(x$55.$high + x157.$high, x$55.$low + x157.$low));
		x164 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x144, x158, new $Uint64(0, 0));
		x164 = _tuple$74[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x146, x160, ((x$57 = (new p256Uint1(x164.$high, x164.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x165 = _tuple$75[0];
		x166 = _tuple$75[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$76 = bits.Add64(x148, x162, ((x$58 = (new p256Uint1(x166.$high, x166.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x167 = _tuple$76[0];
		x168 = _tuple$76[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x150, x154, ((x$59 = (new p256Uint1(x168.$high, x168.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x169 = _tuple$77[0];
		x170 = _tuple$77[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x152, x155, ((x$60 = (new p256Uint1(x170.$high, x170.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x171 = _tuple$78[0];
		x172 = _tuple$78[1];
		x173 = (x$61 = ((x$62 = (new p256Uint1(x172.$high, x172.$low)), new $Uint64(x$62.$high, x$62.$low))), x$63 = ((x$64 = (new p256Uint1(x153.$high, x153.$low)), new $Uint64(x$64.$high, x$64.$low))), new $Uint64(x$61.$high + x$63.$high, x$61.$low + x$63.$low));
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$79 = bits.Sub64(x165, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x174 = _tuple$79[0];
		x175 = _tuple$79[1];
		x176 = new $Uint64(0, 0);
		x177 = new $Uint64(0, 0);
		_tuple$80 = bits.Sub64(x167, new $Uint64(0, 4294967295), ((x$65 = (new p256Uint1(x175.$high, x175.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x176 = _tuple$80[0];
		x177 = _tuple$80[1];
		x178 = new $Uint64(0, 0);
		x179 = new $Uint64(0, 0);
		_tuple$81 = bits.Sub64(x169, new $Uint64(0, 0), ((x$66 = (new p256Uint1(x177.$high, x177.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x178 = _tuple$81[0];
		x179 = _tuple$81[1];
		x180 = new $Uint64(0, 0);
		x181 = new $Uint64(0, 0);
		_tuple$82 = bits.Sub64(x171, new $Uint64(4294967295, 1), ((x$67 = (new p256Uint1(x179.$high, x179.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x180 = _tuple$82[0];
		x181 = _tuple$82[1];
		x183 = new $Uint64(0, 0);
		_tuple$83 = bits.Sub64(x173, new $Uint64(0, 0), ((x$68 = (new p256Uint1(x181.$high, x181.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x183 = _tuple$83[1];
		x184 = new $Uint64(0, 0);
		p256CmovznzU64((x184$24ptr || (x184$24ptr = new ptrType(function() { return x184; }, function($v) { x184 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x174, x165);
		x185 = new $Uint64(0, 0);
		p256CmovznzU64((x185$24ptr || (x185$24ptr = new ptrType(function() { return x185; }, function($v) { x185 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x176, x167);
		x186 = new $Uint64(0, 0);
		p256CmovznzU64((x186$24ptr || (x186$24ptr = new ptrType(function() { return x186; }, function($v) { x186 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x178, x169);
		x187 = new $Uint64(0, 0);
		p256CmovznzU64((x187$24ptr || (x187$24ptr = new ptrType(function() { return x187; }, function($v) { x187 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x180, x171);
		out1.nilCheck, out1[0] = x184;
		out1.nilCheck, out1[1] = x185;
		out1.nilCheck, out1[2] = x186;
		out1.nilCheck, out1[3] = x187;
	};
	p256Square = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$9, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$7, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x179, x18, x180, x181, x183, x184, x184$24ptr, x185, x185$24ptr, x186, x186$24ptr, x187, x187$24ptr, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, arg1[3]);
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, arg1[2]);
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, arg1[1]);
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, arg1[0]);
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p256Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p256Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = (x$2 = ((x$3 = (new p256Uint1(x18.$high, x18.$low)), new $Uint64(x$3.$high, x$3.$low))), new $Uint64(x$2.$high + x6.$high, x$2.$low + x6.$low));
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 1));
		x21 = _tuple$7[0];
		x20 = _tuple$7[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x11, new $Uint64(0, 4294967295));
		x23 = _tuple$8[0];
		x22 = _tuple$8[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x25 = _tuple$9[0];
		x24 = _tuple$9[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x25, x22, new $Uint64(0, 0));
		x26 = _tuple$10[0];
		x27 = _tuple$10[1];
		x28 = (x$4 = ((x$5 = (new p256Uint1(x27.$high, x27.$low)), new $Uint64(x$5.$high, x$5.$low))), new $Uint64(x$4.$high + x23.$high, x$4.$low + x23.$low));
		x30 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x11, x24, new $Uint64(0, 0));
		x30 = _tuple$11[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x13, x26, ((x$6 = (new p256Uint1(x30.$high, x30.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x31 = _tuple$12[0];
		x32 = _tuple$12[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x15, x28, ((x$7 = (new p256Uint1(x32.$high, x32.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x33 = _tuple$13[0];
		x34 = _tuple$13[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x17, x20, ((x$8 = (new p256Uint1(x34.$high, x34.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x35 = _tuple$14[0];
		x36 = _tuple$14[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x19, x21, ((x$9 = (new p256Uint1(x36.$high, x36.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x37 = _tuple$15[0];
		x38 = _tuple$15[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x1, arg1[3]);
		x40 = _tuple$16[0];
		x39 = _tuple$16[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x1, arg1[2]);
		x42 = _tuple$17[0];
		x41 = _tuple$17[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, arg1[1]);
		x44 = _tuple$18[0];
		x43 = _tuple$18[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, arg1[0]);
		x46 = _tuple$19[0];
		x45 = _tuple$19[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x46, x43, new $Uint64(0, 0));
		x47 = _tuple$20[0];
		x48 = _tuple$20[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x44, x41, ((x$10 = (new p256Uint1(x48.$high, x48.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x49 = _tuple$21[0];
		x50 = _tuple$21[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x42, x39, ((x$11 = (new p256Uint1(x50.$high, x50.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x51 = _tuple$22[0];
		x52 = _tuple$22[1];
		x53 = (x$12 = ((x$13 = (new p256Uint1(x52.$high, x52.$low)), new $Uint64(x$13.$high, x$13.$low))), new $Uint64(x$12.$high + x40.$high, x$12.$low + x40.$low));
		x54 = new $Uint64(0, 0);
		x55 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x31, x45, new $Uint64(0, 0));
		x54 = _tuple$23[0];
		x55 = _tuple$23[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x33, x47, ((x$14 = (new p256Uint1(x55.$high, x55.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x56 = _tuple$24[0];
		x57 = _tuple$24[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x35, x49, ((x$15 = (new p256Uint1(x57.$high, x57.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x58 = _tuple$25[0];
		x59 = _tuple$25[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x37, x51, ((x$16 = (new p256Uint1(x59.$high, x59.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x60 = _tuple$26[0];
		x61 = _tuple$26[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(((x$17 = (new p256Uint1(x38.$high, x38.$low)), new $Uint64(x$17.$high, x$17.$low))), x53, ((x$18 = (new p256Uint1(x61.$high, x61.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x62 = _tuple$27[0];
		x63 = _tuple$27[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x54, new $Uint64(4294967295, 1));
		x65 = _tuple$28[0];
		x64 = _tuple$28[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x54, new $Uint64(0, 4294967295));
		x67 = _tuple$29[0];
		x66 = _tuple$29[1];
		x68 = new $Uint64(0, 0);
		x69 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x69 = _tuple$30[0];
		x68 = _tuple$30[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x69, x66, new $Uint64(0, 0));
		x70 = _tuple$31[0];
		x71 = _tuple$31[1];
		x72 = (x$19 = ((x$20 = (new p256Uint1(x71.$high, x71.$low)), new $Uint64(x$20.$high, x$20.$low))), new $Uint64(x$19.$high + x67.$high, x$19.$low + x67.$low));
		x74 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x54, x68, new $Uint64(0, 0));
		x74 = _tuple$32[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x56, x70, ((x$21 = (new p256Uint1(x74.$high, x74.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x75 = _tuple$33[0];
		x76 = _tuple$33[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x58, x72, ((x$22 = (new p256Uint1(x76.$high, x76.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x77 = _tuple$34[0];
		x78 = _tuple$34[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x60, x64, ((x$23 = (new p256Uint1(x78.$high, x78.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x79 = _tuple$35[0];
		x80 = _tuple$35[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x62, x65, ((x$24 = (new p256Uint1(x80.$high, x80.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x81 = _tuple$36[0];
		x82 = _tuple$36[1];
		x83 = (x$25 = ((x$26 = (new p256Uint1(x82.$high, x82.$low)), new $Uint64(x$26.$high, x$26.$low))), x$27 = ((x$28 = (new p256Uint1(x63.$high, x63.$low)), new $Uint64(x$28.$high, x$28.$low))), new $Uint64(x$25.$high + x$27.$high, x$25.$low + x$27.$low));
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$37 = bits.Mul64(x2, arg1[3]);
		x85 = _tuple$37[0];
		x84 = _tuple$37[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x2, arg1[2]);
		x87 = _tuple$38[0];
		x86 = _tuple$38[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x2, arg1[1]);
		x89 = _tuple$39[0];
		x88 = _tuple$39[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x2, arg1[0]);
		x91 = _tuple$40[0];
		x90 = _tuple$40[1];
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x91, x88, new $Uint64(0, 0));
		x92 = _tuple$41[0];
		x93 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x89, x86, ((x$29 = (new p256Uint1(x93.$high, x93.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x94 = _tuple$42[0];
		x95 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x87, x84, ((x$30 = (new p256Uint1(x95.$high, x95.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x96 = _tuple$43[0];
		x97 = _tuple$43[1];
		x98 = (x$31 = ((x$32 = (new p256Uint1(x97.$high, x97.$low)), new $Uint64(x$32.$high, x$32.$low))), new $Uint64(x$31.$high + x85.$high, x$31.$low + x85.$low));
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x75, x90, new $Uint64(0, 0));
		x99 = _tuple$44[0];
		x100 = _tuple$44[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x77, x92, ((x$33 = (new p256Uint1(x100.$high, x100.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x101 = _tuple$45[0];
		x102 = _tuple$45[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x79, x94, ((x$34 = (new p256Uint1(x102.$high, x102.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x103 = _tuple$46[0];
		x104 = _tuple$46[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x81, x96, ((x$35 = (new p256Uint1(x104.$high, x104.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x105 = _tuple$47[0];
		x106 = _tuple$47[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x83, x98, ((x$36 = (new p256Uint1(x106.$high, x106.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x107 = _tuple$48[0];
		x108 = _tuple$48[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x99, new $Uint64(4294967295, 1));
		x110 = _tuple$49[0];
		x109 = _tuple$49[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x99, new $Uint64(0, 4294967295));
		x112 = _tuple$50[0];
		x111 = _tuple$50[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x99, new $Uint64(4294967295, 4294967295));
		x114 = _tuple$51[0];
		x113 = _tuple$51[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x114, x111, new $Uint64(0, 0));
		x115 = _tuple$52[0];
		x116 = _tuple$52[1];
		x117 = (x$37 = ((x$38 = (new p256Uint1(x116.$high, x116.$low)), new $Uint64(x$38.$high, x$38.$low))), new $Uint64(x$37.$high + x112.$high, x$37.$low + x112.$low));
		x119 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x99, x113, new $Uint64(0, 0));
		x119 = _tuple$53[1];
		x120 = new $Uint64(0, 0);
		x121 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x101, x115, ((x$39 = (new p256Uint1(x119.$high, x119.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x120 = _tuple$54[0];
		x121 = _tuple$54[1];
		x122 = new $Uint64(0, 0);
		x123 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x103, x117, ((x$40 = (new p256Uint1(x121.$high, x121.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x122 = _tuple$55[0];
		x123 = _tuple$55[1];
		x124 = new $Uint64(0, 0);
		x125 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x105, x109, ((x$41 = (new p256Uint1(x123.$high, x123.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x124 = _tuple$56[0];
		x125 = _tuple$56[1];
		x126 = new $Uint64(0, 0);
		x127 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x107, x110, ((x$42 = (new p256Uint1(x125.$high, x125.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x126 = _tuple$57[0];
		x127 = _tuple$57[1];
		x128 = (x$43 = ((x$44 = (new p256Uint1(x127.$high, x127.$low)), new $Uint64(x$44.$high, x$44.$low))), x$45 = ((x$46 = (new p256Uint1(x108.$high, x108.$low)), new $Uint64(x$46.$high, x$46.$low))), new $Uint64(x$43.$high + x$45.$high, x$43.$low + x$45.$low));
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$58 = bits.Mul64(x3, arg1[3]);
		x130 = _tuple$58[0];
		x129 = _tuple$58[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$59 = bits.Mul64(x3, arg1[2]);
		x132 = _tuple$59[0];
		x131 = _tuple$59[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$60 = bits.Mul64(x3, arg1[1]);
		x134 = _tuple$60[0];
		x133 = _tuple$60[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$61 = bits.Mul64(x3, arg1[0]);
		x136 = _tuple$61[0];
		x135 = _tuple$61[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x136, x133, new $Uint64(0, 0));
		x137 = _tuple$62[0];
		x138 = _tuple$62[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x134, x131, ((x$47 = (new p256Uint1(x138.$high, x138.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x139 = _tuple$63[0];
		x140 = _tuple$63[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x132, x129, ((x$48 = (new p256Uint1(x140.$high, x140.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x141 = _tuple$64[0];
		x142 = _tuple$64[1];
		x143 = (x$49 = ((x$50 = (new p256Uint1(x142.$high, x142.$low)), new $Uint64(x$50.$high, x$50.$low))), new $Uint64(x$49.$high + x130.$high, x$49.$low + x130.$low));
		x144 = new $Uint64(0, 0);
		x145 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x120, x135, new $Uint64(0, 0));
		x144 = _tuple$65[0];
		x145 = _tuple$65[1];
		x146 = new $Uint64(0, 0);
		x147 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x122, x137, ((x$51 = (new p256Uint1(x145.$high, x145.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x146 = _tuple$66[0];
		x147 = _tuple$66[1];
		x148 = new $Uint64(0, 0);
		x149 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x124, x139, ((x$52 = (new p256Uint1(x147.$high, x147.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x148 = _tuple$67[0];
		x149 = _tuple$67[1];
		x150 = new $Uint64(0, 0);
		x151 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x126, x141, ((x$53 = (new p256Uint1(x149.$high, x149.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x150 = _tuple$68[0];
		x151 = _tuple$68[1];
		x152 = new $Uint64(0, 0);
		x153 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x128, x143, ((x$54 = (new p256Uint1(x151.$high, x151.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x152 = _tuple$69[0];
		x153 = _tuple$69[1];
		x154 = new $Uint64(0, 0);
		x155 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x144, new $Uint64(4294967295, 1));
		x155 = _tuple$70[0];
		x154 = _tuple$70[1];
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x144, new $Uint64(0, 4294967295));
		x157 = _tuple$71[0];
		x156 = _tuple$71[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x144, new $Uint64(4294967295, 4294967295));
		x159 = _tuple$72[0];
		x158 = _tuple$72[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x159, x156, new $Uint64(0, 0));
		x160 = _tuple$73[0];
		x161 = _tuple$73[1];
		x162 = (x$55 = ((x$56 = (new p256Uint1(x161.$high, x161.$low)), new $Uint64(x$56.$high, x$56.$low))), new $Uint64(x$55.$high + x157.$high, x$55.$low + x157.$low));
		x164 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x144, x158, new $Uint64(0, 0));
		x164 = _tuple$74[1];
		x165 = new $Uint64(0, 0);
		x166 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x146, x160, ((x$57 = (new p256Uint1(x164.$high, x164.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x165 = _tuple$75[0];
		x166 = _tuple$75[1];
		x167 = new $Uint64(0, 0);
		x168 = new $Uint64(0, 0);
		_tuple$76 = bits.Add64(x148, x162, ((x$58 = (new p256Uint1(x166.$high, x166.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x167 = _tuple$76[0];
		x168 = _tuple$76[1];
		x169 = new $Uint64(0, 0);
		x170 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x150, x154, ((x$59 = (new p256Uint1(x168.$high, x168.$low)), new $Uint64(x$59.$high, x$59.$low))));
		x169 = _tuple$77[0];
		x170 = _tuple$77[1];
		x171 = new $Uint64(0, 0);
		x172 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x152, x155, ((x$60 = (new p256Uint1(x170.$high, x170.$low)), new $Uint64(x$60.$high, x$60.$low))));
		x171 = _tuple$78[0];
		x172 = _tuple$78[1];
		x173 = (x$61 = ((x$62 = (new p256Uint1(x172.$high, x172.$low)), new $Uint64(x$62.$high, x$62.$low))), x$63 = ((x$64 = (new p256Uint1(x153.$high, x153.$low)), new $Uint64(x$64.$high, x$64.$low))), new $Uint64(x$61.$high + x$63.$high, x$61.$low + x$63.$low));
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$79 = bits.Sub64(x165, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x174 = _tuple$79[0];
		x175 = _tuple$79[1];
		x176 = new $Uint64(0, 0);
		x177 = new $Uint64(0, 0);
		_tuple$80 = bits.Sub64(x167, new $Uint64(0, 4294967295), ((x$65 = (new p256Uint1(x175.$high, x175.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x176 = _tuple$80[0];
		x177 = _tuple$80[1];
		x178 = new $Uint64(0, 0);
		x179 = new $Uint64(0, 0);
		_tuple$81 = bits.Sub64(x169, new $Uint64(0, 0), ((x$66 = (new p256Uint1(x177.$high, x177.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x178 = _tuple$81[0];
		x179 = _tuple$81[1];
		x180 = new $Uint64(0, 0);
		x181 = new $Uint64(0, 0);
		_tuple$82 = bits.Sub64(x171, new $Uint64(4294967295, 1), ((x$67 = (new p256Uint1(x179.$high, x179.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x180 = _tuple$82[0];
		x181 = _tuple$82[1];
		x183 = new $Uint64(0, 0);
		_tuple$83 = bits.Sub64(x173, new $Uint64(0, 0), ((x$68 = (new p256Uint1(x181.$high, x181.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x183 = _tuple$83[1];
		x184 = new $Uint64(0, 0);
		p256CmovznzU64((x184$24ptr || (x184$24ptr = new ptrType(function() { return x184; }, function($v) { x184 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x174, x165);
		x185 = new $Uint64(0, 0);
		p256CmovznzU64((x185$24ptr || (x185$24ptr = new ptrType(function() { return x185; }, function($v) { x185 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x176, x167);
		x186 = new $Uint64(0, 0);
		p256CmovznzU64((x186$24ptr || (x186$24ptr = new ptrType(function() { return x186; }, function($v) { x186 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x178, x169);
		x187 = new $Uint64(0, 0);
		p256CmovznzU64((x187$24ptr || (x187$24ptr = new ptrType(function() { return x187; }, function($v) { x187 = $v; }))), (new p256Uint1(x183.$high, x183.$low)), x180, x171);
		out1.nilCheck, out1[0] = x184;
		out1.nilCheck, out1[1] = x185;
		out1.nilCheck, out1[2] = x186;
		out1.nilCheck, out1[3] = x187;
	};
	p256Add = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, arg1, arg2, out1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x1, x10, x11, x12, x13, x14, x15, x16, x18, x19, x19$24ptr, x2, x20, x20$24ptr, x21, x21$24ptr, x22, x22$24ptr, x3, x4, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Add64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Add64(arg1[1], arg2[1], ((x = (new p256Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Add64(arg1[2], arg2[2], ((x$1 = (new p256Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Add64(arg1[3], arg2[3], ((x$2 = (new p256Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Sub64(x1, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Sub64(x3, new $Uint64(0, 4294967295), ((x$3 = (new p256Uint1(x10.$high, x10.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Sub64(x5, new $Uint64(0, 0), ((x$4 = (new p256Uint1(x12.$high, x12.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x13 = _tuple$6[0];
		x14 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Sub64(x7, new $Uint64(4294967295, 1), ((x$5 = (new p256Uint1(x14.$high, x14.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x15 = _tuple$7[0];
		x16 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Sub64(((x$6 = (new p256Uint1(x8.$high, x8.$low)), new $Uint64(x$6.$high, x$6.$low))), new $Uint64(0, 0), ((x$7 = (new p256Uint1(x16.$high, x16.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x18 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		p256CmovznzU64((x19$24ptr || (x19$24ptr = new ptrType(function() { return x19; }, function($v) { x19 = $v; }))), (new p256Uint1(x18.$high, x18.$low)), x9, x1);
		x20 = new $Uint64(0, 0);
		p256CmovznzU64((x20$24ptr || (x20$24ptr = new ptrType(function() { return x20; }, function($v) { x20 = $v; }))), (new p256Uint1(x18.$high, x18.$low)), x11, x3);
		x21 = new $Uint64(0, 0);
		p256CmovznzU64((x21$24ptr || (x21$24ptr = new ptrType(function() { return x21; }, function($v) { x21 = $v; }))), (new p256Uint1(x18.$high, x18.$low)), x13, x5);
		x22 = new $Uint64(0, 0);
		p256CmovznzU64((x22$24ptr || (x22$24ptr = new ptrType(function() { return x22; }, function($v) { x22 = $v; }))), (new p256Uint1(x18.$high, x18.$low)), x15, x7);
		out1.nilCheck, out1[0] = x19;
		out1.nilCheck, out1[1] = x20;
		out1.nilCheck, out1[2] = x21;
		out1.nilCheck, out1[3] = x22;
	};
	p256Sub = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, arg1, arg2, out1, x, x$1, x$2, x$3, x$4, x$5, x1, x10, x11, x12, x13, x14, x15, x16, x2, x3, x4, x5, x6, x7, x8, x9, x9$24ptr;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Sub64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Sub64(arg1[1], arg2[1], ((x = (new p256Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Sub64(arg1[2], arg2[2], ((x$1 = (new p256Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Sub64(arg1[3], arg2[3], ((x$2 = (new p256Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		p256CmovznzU64((x9$24ptr || (x9$24ptr = new ptrType(function() { return x9; }, function($v) { x9 = $v; }))), (new p256Uint1(x8.$high, x8.$low)), new $Uint64(0, 0), new $Uint64(4294967295, 4294967295));
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x1, x9, new $Uint64(0, 0));
		x10 = _tuple$4[0];
		x11 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x3, new $Uint64(x9.$high & 0, (x9.$low & 4294967295) >>> 0), ((x$3 = (new p256Uint1(x11.$high, x11.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x12 = _tuple$5[0];
		x13 = _tuple$5[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x5, new $Uint64(0, 0), ((x$4 = (new p256Uint1(x13.$high, x13.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x14 = _tuple$6[0];
		x15 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x7, new $Uint64(x9.$high & 4294967295, (x9.$low & 1) >>> 0), ((x$5 = (new p256Uint1(x15.$high, x15.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x16 = _tuple$7[0];
		out1.nilCheck, out1[0] = x10;
		out1.nilCheck, out1[1] = x12;
		out1.nilCheck, out1[2] = x14;
		out1.nilCheck, out1[3] = x16;
	};
	p256SetOne = function(out1) {
		var out1;
		out1.nilCheck, out1[0] = new $Uint64(0, 1);
		out1.nilCheck, out1[1] = new $Uint64(4294967295, 0);
		out1.nilCheck, out1[2] = new $Uint64(4294967295, 4294967295);
		out1.nilCheck, out1[3] = new $Uint64(0, 4294967294);
	};
	p256FromMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$5, x$6, x$7, x$8, x$9, x1, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x86, x87, x87$24ptr, x88, x88$24ptr, x89, x89$24ptr, x9, x90, x90$24ptr;
		x1 = arg1[0];
		x2 = new $Uint64(0, 0);
		x3 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x1, new $Uint64(4294967295, 1));
		x3 = _tuple[0];
		x2 = _tuple[1];
		x4 = new $Uint64(0, 0);
		x5 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x1, new $Uint64(0, 4294967295));
		x5 = _tuple$1[0];
		x4 = _tuple$1[1];
		x6 = new $Uint64(0, 0);
		x7 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x7 = _tuple$2[0];
		x6 = _tuple$2[1];
		x8 = new $Uint64(0, 0);
		x9 = new $Uint64(0, 0);
		_tuple$3 = bits.Add64(x7, x4, new $Uint64(0, 0));
		x8 = _tuple$3[0];
		x9 = _tuple$3[1];
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x1, x6, new $Uint64(0, 0));
		x11 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(new $Uint64(0, 0), x8, ((x = (new p256Uint1(x11.$high, x11.$low)), new $Uint64(x.$high, x.$low))));
		x12 = _tuple$5[0];
		x13 = _tuple$5[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x12, arg1[1], new $Uint64(0, 0));
		x14 = _tuple$6[0];
		x15 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x14, new $Uint64(4294967295, 1));
		x17 = _tuple$7[0];
		x16 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x14, new $Uint64(0, 4294967295));
		x19 = _tuple$8[0];
		x18 = _tuple$8[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x14, new $Uint64(4294967295, 4294967295));
		x21 = _tuple$9[0];
		x20 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x21, x18, new $Uint64(0, 0));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x25 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x14, x20, new $Uint64(0, 0));
		x25 = _tuple$11[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64((x$1 = ((x$2 = (new p256Uint1(x15.$high, x15.$low)), new $Uint64(x$2.$high, x$2.$low))), x$3 = (x$4 = ((x$5 = (new p256Uint1(x13.$high, x13.$low)), new $Uint64(x$5.$high, x$5.$low))), x$6 = (x$7 = ((x$8 = (new p256Uint1(x9.$high, x9.$low)), new $Uint64(x$8.$high, x$8.$low))), new $Uint64(x$7.$high + x5.$high, x$7.$low + x5.$low)), new $Uint64(x$4.$high + x$6.$high, x$4.$low + x$6.$low)), new $Uint64(x$1.$high + x$3.$high, x$1.$low + x$3.$low)), x22, ((x$9 = (new p256Uint1(x25.$high, x25.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x26 = _tuple$12[0];
		x27 = _tuple$12[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x2, (x$10 = ((x$11 = (new p256Uint1(x23.$high, x23.$low)), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$10.$high + x19.$high, x$10.$low + x19.$low)), ((x$12 = (new p256Uint1(x27.$high, x27.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x28 = _tuple$13[0];
		x29 = _tuple$13[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x3, x16, ((x$13 = (new p256Uint1(x29.$high, x29.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x30 = _tuple$14[0];
		x31 = _tuple$14[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x26, arg1[2], new $Uint64(0, 0));
		x32 = _tuple$15[0];
		x33 = _tuple$15[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x28, new $Uint64(0, 0), ((x$14 = (new p256Uint1(x33.$high, x33.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x34 = _tuple$16[0];
		x35 = _tuple$16[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x30, new $Uint64(0, 0), ((x$15 = (new p256Uint1(x35.$high, x35.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x36 = _tuple$17[0];
		x37 = _tuple$17[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x32, new $Uint64(4294967295, 1));
		x39 = _tuple$18[0];
		x38 = _tuple$18[1];
		x40 = new $Uint64(0, 0);
		x41 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x32, new $Uint64(0, 4294967295));
		x41 = _tuple$19[0];
		x40 = _tuple$19[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x32, new $Uint64(4294967295, 4294967295));
		x43 = _tuple$20[0];
		x42 = _tuple$20[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x43, x40, new $Uint64(0, 0));
		x44 = _tuple$21[0];
		x45 = _tuple$21[1];
		x47 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x32, x42, new $Uint64(0, 0));
		x47 = _tuple$22[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x34, x44, ((x$16 = (new p256Uint1(x47.$high, x47.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x48 = _tuple$23[0];
		x49 = _tuple$23[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x36, (x$17 = ((x$18 = (new p256Uint1(x45.$high, x45.$low)), new $Uint64(x$18.$high, x$18.$low))), new $Uint64(x$17.$high + x41.$high, x$17.$low + x41.$low)), ((x$19 = (new p256Uint1(x49.$high, x49.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x50 = _tuple$24[0];
		x51 = _tuple$24[1];
		x52 = new $Uint64(0, 0);
		x53 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64((x$20 = ((x$21 = (new p256Uint1(x37.$high, x37.$low)), new $Uint64(x$21.$high, x$21.$low))), x$22 = (x$23 = ((x$24 = (new p256Uint1(x31.$high, x31.$low)), new $Uint64(x$24.$high, x$24.$low))), new $Uint64(x$23.$high + x17.$high, x$23.$low + x17.$low)), new $Uint64(x$20.$high + x$22.$high, x$20.$low + x$22.$low)), x38, ((x$25 = (new p256Uint1(x51.$high, x51.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x52 = _tuple$25[0];
		x53 = _tuple$25[1];
		x54 = new $Uint64(0, 0);
		x55 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x48, arg1[3], new $Uint64(0, 0));
		x54 = _tuple$26[0];
		x55 = _tuple$26[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x50, new $Uint64(0, 0), ((x$26 = (new p256Uint1(x55.$high, x55.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x56 = _tuple$27[0];
		x57 = _tuple$27[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x52, new $Uint64(0, 0), ((x$27 = (new p256Uint1(x57.$high, x57.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x58 = _tuple$28[0];
		x59 = _tuple$28[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x54, new $Uint64(4294967295, 1));
		x61 = _tuple$29[0];
		x60 = _tuple$29[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x54, new $Uint64(0, 4294967295));
		x63 = _tuple$30[0];
		x62 = _tuple$30[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x65 = _tuple$31[0];
		x64 = _tuple$31[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x65, x62, new $Uint64(0, 0));
		x66 = _tuple$32[0];
		x67 = _tuple$32[1];
		x69 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x54, x64, new $Uint64(0, 0));
		x69 = _tuple$33[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x56, x66, ((x$28 = (new p256Uint1(x69.$high, x69.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x70 = _tuple$34[0];
		x71 = _tuple$34[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x58, (x$29 = ((x$30 = (new p256Uint1(x67.$high, x67.$low)), new $Uint64(x$30.$high, x$30.$low))), new $Uint64(x$29.$high + x63.$high, x$29.$low + x63.$low)), ((x$31 = (new p256Uint1(x71.$high, x71.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x72 = _tuple$35[0];
		x73 = _tuple$35[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64((x$32 = ((x$33 = (new p256Uint1(x59.$high, x59.$low)), new $Uint64(x$33.$high, x$33.$low))), x$34 = (x$35 = ((x$36 = (new p256Uint1(x53.$high, x53.$low)), new $Uint64(x$36.$high, x$36.$low))), new $Uint64(x$35.$high + x39.$high, x$35.$low + x39.$low)), new $Uint64(x$32.$high + x$34.$high, x$32.$low + x$34.$low)), x60, ((x$37 = (new p256Uint1(x73.$high, x73.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x74 = _tuple$36[0];
		x75 = _tuple$36[1];
		x76 = (x$38 = ((x$39 = (new p256Uint1(x75.$high, x75.$low)), new $Uint64(x$39.$high, x$39.$low))), new $Uint64(x$38.$high + x61.$high, x$38.$low + x61.$low));
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$37 = bits.Sub64(x70, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x77 = _tuple$37[0];
		x78 = _tuple$37[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$38 = bits.Sub64(x72, new $Uint64(0, 4294967295), ((x$40 = (new p256Uint1(x78.$high, x78.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x79 = _tuple$38[0];
		x80 = _tuple$38[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$39 = bits.Sub64(x74, new $Uint64(0, 0), ((x$41 = (new p256Uint1(x80.$high, x80.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x81 = _tuple$39[0];
		x82 = _tuple$39[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$40 = bits.Sub64(x76, new $Uint64(4294967295, 1), ((x$42 = (new p256Uint1(x82.$high, x82.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x83 = _tuple$40[0];
		x84 = _tuple$40[1];
		x86 = new $Uint64(0, 0);
		_tuple$41 = bits.Sub64(new $Uint64(0, 0), new $Uint64(0, 0), ((x$43 = (new p256Uint1(x84.$high, x84.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x86 = _tuple$41[1];
		x87 = new $Uint64(0, 0);
		p256CmovznzU64((x87$24ptr || (x87$24ptr = new ptrType(function() { return x87; }, function($v) { x87 = $v; }))), (new p256Uint1(x86.$high, x86.$low)), x77, x70);
		x88 = new $Uint64(0, 0);
		p256CmovznzU64((x88$24ptr || (x88$24ptr = new ptrType(function() { return x88; }, function($v) { x88 = $v; }))), (new p256Uint1(x86.$high, x86.$low)), x79, x72);
		x89 = new $Uint64(0, 0);
		p256CmovznzU64((x89$24ptr || (x89$24ptr = new ptrType(function() { return x89; }, function($v) { x89 = $v; }))), (new p256Uint1(x86.$high, x86.$low)), x81, x74);
		x90 = new $Uint64(0, 0);
		p256CmovznzU64((x90$24ptr || (x90$24ptr = new ptrType(function() { return x90; }, function($v) { x90 = $v; }))), (new p256Uint1(x86.$high, x86.$low)), x83, x76);
		out1.nilCheck, out1[0] = x87;
		out1.nilCheck, out1[1] = x88;
		out1.nilCheck, out1[2] = x89;
		out1.nilCheck, out1[3] = x90;
	};
	p256ToMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$9, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x166, x167, x167$24ptr, x168, x168$24ptr, x169, x169$24ptr, x17, x170, x170$24ptr, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, new $Uint64(4, 4294967293));
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, new $Uint64(4294967295, 4294967294));
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, new $Uint64(4294967291, 4294967295));
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, new $Uint64(0, 3));
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p256Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p256Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = new $Uint64(0, 0);
		x20 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 1));
		x20 = _tuple$7[0];
		x19 = _tuple$7[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x11, new $Uint64(0, 4294967295));
		x22 = _tuple$8[0];
		x21 = _tuple$8[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x24 = _tuple$9[0];
		x23 = _tuple$9[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x24, x21, new $Uint64(0, 0));
		x25 = _tuple$10[0];
		x26 = _tuple$10[1];
		x28 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x11, x23, new $Uint64(0, 0));
		x28 = _tuple$11[1];
		x29 = new $Uint64(0, 0);
		x30 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x13, x25, ((x$2 = (new p256Uint1(x28.$high, x28.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x29 = _tuple$12[0];
		x30 = _tuple$12[1];
		x31 = new $Uint64(0, 0);
		x32 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x15, (x$3 = ((x$4 = (new p256Uint1(x26.$high, x26.$low)), new $Uint64(x$4.$high, x$4.$low))), new $Uint64(x$3.$high + x22.$high, x$3.$low + x22.$low)), ((x$5 = (new p256Uint1(x30.$high, x30.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x31 = _tuple$13[0];
		x32 = _tuple$13[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x17, x19, ((x$6 = (new p256Uint1(x32.$high, x32.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x33 = _tuple$14[0];
		x34 = _tuple$14[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64((x$7 = ((x$8 = (new p256Uint1(x18.$high, x18.$low)), new $Uint64(x$8.$high, x$8.$low))), new $Uint64(x$7.$high + x6.$high, x$7.$low + x6.$low)), x20, ((x$9 = (new p256Uint1(x34.$high, x34.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x35 = _tuple$15[0];
		x36 = _tuple$15[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x1, new $Uint64(4, 4294967293));
		x38 = _tuple$16[0];
		x37 = _tuple$16[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x1, new $Uint64(4294967295, 4294967294));
		x40 = _tuple$17[0];
		x39 = _tuple$17[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, new $Uint64(4294967291, 4294967295));
		x42 = _tuple$18[0];
		x41 = _tuple$18[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, new $Uint64(0, 3));
		x44 = _tuple$19[0];
		x43 = _tuple$19[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x44, x41, new $Uint64(0, 0));
		x45 = _tuple$20[0];
		x46 = _tuple$20[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x42, x39, ((x$10 = (new p256Uint1(x46.$high, x46.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x47 = _tuple$21[0];
		x48 = _tuple$21[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x40, x37, ((x$11 = (new p256Uint1(x48.$high, x48.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x49 = _tuple$22[0];
		x50 = _tuple$22[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x29, x43, new $Uint64(0, 0));
		x51 = _tuple$23[0];
		x52 = _tuple$23[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x31, x45, ((x$12 = (new p256Uint1(x52.$high, x52.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x53 = _tuple$24[0];
		x54 = _tuple$24[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x33, x47, ((x$13 = (new p256Uint1(x54.$high, x54.$low)), new $Uint64(x$13.$high, x$13.$low))));
		x55 = _tuple$25[0];
		x56 = _tuple$25[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x35, x49, ((x$14 = (new p256Uint1(x56.$high, x56.$low)), new $Uint64(x$14.$high, x$14.$low))));
		x57 = _tuple$26[0];
		x58 = _tuple$26[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$27 = bits.Mul64(x51, new $Uint64(4294967295, 1));
		x60 = _tuple$27[0];
		x59 = _tuple$27[1];
		x61 = new $Uint64(0, 0);
		x62 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x51, new $Uint64(0, 4294967295));
		x62 = _tuple$28[0];
		x61 = _tuple$28[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x51, new $Uint64(4294967295, 4294967295));
		x64 = _tuple$29[0];
		x63 = _tuple$29[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x64, x61, new $Uint64(0, 0));
		x65 = _tuple$30[0];
		x66 = _tuple$30[1];
		x68 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x51, x63, new $Uint64(0, 0));
		x68 = _tuple$31[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x53, x65, ((x$15 = (new p256Uint1(x68.$high, x68.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x69 = _tuple$32[0];
		x70 = _tuple$32[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x55, (x$16 = ((x$17 = (new p256Uint1(x66.$high, x66.$low)), new $Uint64(x$17.$high, x$17.$low))), new $Uint64(x$16.$high + x62.$high, x$16.$low + x62.$low)), ((x$18 = (new p256Uint1(x70.$high, x70.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x71 = _tuple$33[0];
		x72 = _tuple$33[1];
		x73 = new $Uint64(0, 0);
		x74 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x57, x59, ((x$19 = (new p256Uint1(x72.$high, x72.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x73 = _tuple$34[0];
		x74 = _tuple$34[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64((x$20 = (x$21 = ((x$22 = (new p256Uint1(x58.$high, x58.$low)), new $Uint64(x$22.$high, x$22.$low))), x$23 = ((x$24 = (new p256Uint1(x36.$high, x36.$low)), new $Uint64(x$24.$high, x$24.$low))), new $Uint64(x$21.$high + x$23.$high, x$21.$low + x$23.$low)), x$25 = (x$26 = ((x$27 = (new p256Uint1(x50.$high, x50.$low)), new $Uint64(x$27.$high, x$27.$low))), new $Uint64(x$26.$high + x38.$high, x$26.$low + x38.$low)), new $Uint64(x$20.$high + x$25.$high, x$20.$low + x$25.$low)), x60, ((x$28 = (new p256Uint1(x74.$high, x74.$low)), new $Uint64(x$28.$high, x$28.$low))));
		x75 = _tuple$35[0];
		x76 = _tuple$35[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$36 = bits.Mul64(x2, new $Uint64(4, 4294967293));
		x78 = _tuple$36[0];
		x77 = _tuple$36[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$37 = bits.Mul64(x2, new $Uint64(4294967295, 4294967294));
		x80 = _tuple$37[0];
		x79 = _tuple$37[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x2, new $Uint64(4294967291, 4294967295));
		x82 = _tuple$38[0];
		x81 = _tuple$38[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x2, new $Uint64(0, 3));
		x84 = _tuple$39[0];
		x83 = _tuple$39[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x84, x81, new $Uint64(0, 0));
		x85 = _tuple$40[0];
		x86 = _tuple$40[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$41 = bits.Add64(x82, x79, ((x$29 = (new p256Uint1(x86.$high, x86.$low)), new $Uint64(x$29.$high, x$29.$low))));
		x87 = _tuple$41[0];
		x88 = _tuple$41[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x80, x77, ((x$30 = (new p256Uint1(x88.$high, x88.$low)), new $Uint64(x$30.$high, x$30.$low))));
		x89 = _tuple$42[0];
		x90 = _tuple$42[1];
		x91 = new $Uint64(0, 0);
		x92 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x69, x83, new $Uint64(0, 0));
		x91 = _tuple$43[0];
		x92 = _tuple$43[1];
		x93 = new $Uint64(0, 0);
		x94 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x71, x85, ((x$31 = (new p256Uint1(x92.$high, x92.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x93 = _tuple$44[0];
		x94 = _tuple$44[1];
		x95 = new $Uint64(0, 0);
		x96 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x73, x87, ((x$32 = (new p256Uint1(x94.$high, x94.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x95 = _tuple$45[0];
		x96 = _tuple$45[1];
		x97 = new $Uint64(0, 0);
		x98 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x75, x89, ((x$33 = (new p256Uint1(x96.$high, x96.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x97 = _tuple$46[0];
		x98 = _tuple$46[1];
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$47 = bits.Mul64(x91, new $Uint64(4294967295, 1));
		x100 = _tuple$47[0];
		x99 = _tuple$47[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$48 = bits.Mul64(x91, new $Uint64(0, 4294967295));
		x102 = _tuple$48[0];
		x101 = _tuple$48[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x91, new $Uint64(4294967295, 4294967295));
		x104 = _tuple$49[0];
		x103 = _tuple$49[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x104, x101, new $Uint64(0, 0));
		x105 = _tuple$50[0];
		x106 = _tuple$50[1];
		x108 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x91, x103, new $Uint64(0, 0));
		x108 = _tuple$51[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x93, x105, ((x$34 = (new p256Uint1(x108.$high, x108.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x109 = _tuple$52[0];
		x110 = _tuple$52[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x95, (x$35 = ((x$36 = (new p256Uint1(x106.$high, x106.$low)), new $Uint64(x$36.$high, x$36.$low))), new $Uint64(x$35.$high + x102.$high, x$35.$low + x102.$low)), ((x$37 = (new p256Uint1(x110.$high, x110.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x111 = _tuple$53[0];
		x112 = _tuple$53[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x97, x99, ((x$38 = (new p256Uint1(x112.$high, x112.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x113 = _tuple$54[0];
		x114 = _tuple$54[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64((x$39 = (x$40 = ((x$41 = (new p256Uint1(x98.$high, x98.$low)), new $Uint64(x$41.$high, x$41.$low))), x$42 = ((x$43 = (new p256Uint1(x76.$high, x76.$low)), new $Uint64(x$43.$high, x$43.$low))), new $Uint64(x$40.$high + x$42.$high, x$40.$low + x$42.$low)), x$44 = (x$45 = ((x$46 = (new p256Uint1(x90.$high, x90.$low)), new $Uint64(x$46.$high, x$46.$low))), new $Uint64(x$45.$high + x78.$high, x$45.$low + x78.$low)), new $Uint64(x$39.$high + x$44.$high, x$39.$low + x$44.$low)), x100, ((x$47 = (new p256Uint1(x114.$high, x114.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x115 = _tuple$55[0];
		x116 = _tuple$55[1];
		x117 = new $Uint64(0, 0);
		x118 = new $Uint64(0, 0);
		_tuple$56 = bits.Mul64(x3, new $Uint64(4, 4294967293));
		x118 = _tuple$56[0];
		x117 = _tuple$56[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$57 = bits.Mul64(x3, new $Uint64(4294967295, 4294967294));
		x120 = _tuple$57[0];
		x119 = _tuple$57[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$58 = bits.Mul64(x3, new $Uint64(4294967291, 4294967295));
		x122 = _tuple$58[0];
		x121 = _tuple$58[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$59 = bits.Mul64(x3, new $Uint64(0, 3));
		x124 = _tuple$59[0];
		x123 = _tuple$59[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x124, x121, new $Uint64(0, 0));
		x125 = _tuple$60[0];
		x126 = _tuple$60[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x122, x119, ((x$48 = (new p256Uint1(x126.$high, x126.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x127 = _tuple$61[0];
		x128 = _tuple$61[1];
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x120, x117, ((x$49 = (new p256Uint1(x128.$high, x128.$low)), new $Uint64(x$49.$high, x$49.$low))));
		x129 = _tuple$62[0];
		x130 = _tuple$62[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x109, x123, new $Uint64(0, 0));
		x131 = _tuple$63[0];
		x132 = _tuple$63[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x111, x125, ((x$50 = (new p256Uint1(x132.$high, x132.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x133 = _tuple$64[0];
		x134 = _tuple$64[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x113, x127, ((x$51 = (new p256Uint1(x134.$high, x134.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x135 = _tuple$65[0];
		x136 = _tuple$65[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x115, x129, ((x$52 = (new p256Uint1(x136.$high, x136.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x137 = _tuple$66[0];
		x138 = _tuple$66[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$67 = bits.Mul64(x131, new $Uint64(4294967295, 1));
		x140 = _tuple$67[0];
		x139 = _tuple$67[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$68 = bits.Mul64(x131, new $Uint64(0, 4294967295));
		x142 = _tuple$68[0];
		x141 = _tuple$68[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$69 = bits.Mul64(x131, new $Uint64(4294967295, 4294967295));
		x144 = _tuple$69[0];
		x143 = _tuple$69[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x144, x141, new $Uint64(0, 0));
		x145 = _tuple$70[0];
		x146 = _tuple$70[1];
		x148 = new $Uint64(0, 0);
		_tuple$71 = bits.Add64(x131, x143, new $Uint64(0, 0));
		x148 = _tuple$71[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$72 = bits.Add64(x133, x145, ((x$53 = (new p256Uint1(x148.$high, x148.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x149 = _tuple$72[0];
		x150 = _tuple$72[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x135, (x$54 = ((x$55 = (new p256Uint1(x146.$high, x146.$low)), new $Uint64(x$55.$high, x$55.$low))), new $Uint64(x$54.$high + x142.$high, x$54.$low + x142.$low)), ((x$56 = (new p256Uint1(x150.$high, x150.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x151 = _tuple$73[0];
		x152 = _tuple$73[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x137, x139, ((x$57 = (new p256Uint1(x152.$high, x152.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x153 = _tuple$74[0];
		x154 = _tuple$74[1];
		x155 = new $Uint64(0, 0);
		x156 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64((x$58 = (x$59 = ((x$60 = (new p256Uint1(x138.$high, x138.$low)), new $Uint64(x$60.$high, x$60.$low))), x$61 = ((x$62 = (new p256Uint1(x116.$high, x116.$low)), new $Uint64(x$62.$high, x$62.$low))), new $Uint64(x$59.$high + x$61.$high, x$59.$low + x$61.$low)), x$63 = (x$64 = ((x$65 = (new p256Uint1(x130.$high, x130.$low)), new $Uint64(x$65.$high, x$65.$low))), new $Uint64(x$64.$high + x118.$high, x$64.$low + x118.$low)), new $Uint64(x$58.$high + x$63.$high, x$58.$low + x$63.$low)), x140, ((x$66 = (new p256Uint1(x154.$high, x154.$low)), new $Uint64(x$66.$high, x$66.$low))));
		x155 = _tuple$75[0];
		x156 = _tuple$75[1];
		x157 = new $Uint64(0, 0);
		x158 = new $Uint64(0, 0);
		_tuple$76 = bits.Sub64(x149, new $Uint64(4294967295, 4294967295), new $Uint64(0, 0));
		x157 = _tuple$76[0];
		x158 = _tuple$76[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$77 = bits.Sub64(x151, new $Uint64(0, 4294967295), ((x$67 = (new p256Uint1(x158.$high, x158.$low)), new $Uint64(x$67.$high, x$67.$low))));
		x159 = _tuple$77[0];
		x160 = _tuple$77[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$78 = bits.Sub64(x153, new $Uint64(0, 0), ((x$68 = (new p256Uint1(x160.$high, x160.$low)), new $Uint64(x$68.$high, x$68.$low))));
		x161 = _tuple$78[0];
		x162 = _tuple$78[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$79 = bits.Sub64(x155, new $Uint64(4294967295, 1), ((x$69 = (new p256Uint1(x162.$high, x162.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x163 = _tuple$79[0];
		x164 = _tuple$79[1];
		x166 = new $Uint64(0, 0);
		_tuple$80 = bits.Sub64(((x$70 = (new p256Uint1(x156.$high, x156.$low)), new $Uint64(x$70.$high, x$70.$low))), new $Uint64(0, 0), ((x$71 = (new p256Uint1(x164.$high, x164.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x166 = _tuple$80[1];
		x167 = new $Uint64(0, 0);
		p256CmovznzU64((x167$24ptr || (x167$24ptr = new ptrType(function() { return x167; }, function($v) { x167 = $v; }))), (new p256Uint1(x166.$high, x166.$low)), x157, x149);
		x168 = new $Uint64(0, 0);
		p256CmovznzU64((x168$24ptr || (x168$24ptr = new ptrType(function() { return x168; }, function($v) { x168 = $v; }))), (new p256Uint1(x166.$high, x166.$low)), x159, x151);
		x169 = new $Uint64(0, 0);
		p256CmovznzU64((x169$24ptr || (x169$24ptr = new ptrType(function() { return x169; }, function($v) { x169 = $v; }))), (new p256Uint1(x166.$high, x166.$low)), x161, x153);
		x170 = new $Uint64(0, 0);
		p256CmovznzU64((x170$24ptr || (x170$24ptr = new ptrType(function() { return x170; }, function($v) { x170 = $v; }))), (new p256Uint1(x166.$high, x166.$low)), x163, x155);
		out1.nilCheck, out1[0] = x167;
		out1.nilCheck, out1[1] = x168;
		out1.nilCheck, out1[2] = x169;
		out1.nilCheck, out1[3] = x170;
	};
	p256Selectznz = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x1, x1$24ptr, x2, x2$24ptr, x3, x3$24ptr, x4, x4$24ptr;
		x1 = new $Uint64(0, 0);
		p256CmovznzU64((x1$24ptr || (x1$24ptr = new ptrType(function() { return x1; }, function($v) { x1 = $v; }))), arg1, arg2[0], arg3[0]);
		x2 = new $Uint64(0, 0);
		p256CmovznzU64((x2$24ptr || (x2$24ptr = new ptrType(function() { return x2; }, function($v) { x2 = $v; }))), arg1, arg2[1], arg3[1]);
		x3 = new $Uint64(0, 0);
		p256CmovznzU64((x3$24ptr || (x3$24ptr = new ptrType(function() { return x3; }, function($v) { x3 = $v; }))), arg1, arg2[2], arg3[2]);
		x4 = new $Uint64(0, 0);
		p256CmovznzU64((x4$24ptr || (x4$24ptr = new ptrType(function() { return x4; }, function($v) { x4 = $v; }))), arg1, arg2[3], arg3[3]);
		out1.nilCheck, out1[0] = x1;
		out1.nilCheck, out1[1] = x2;
		out1.nilCheck, out1[2] = x3;
		out1.nilCheck, out1[3] = x4;
	};
	p256ToBytes = function(out1, arg1) {
		var arg1, out1, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x7, x8, x9;
		x1 = arg1[3];
		x2 = arg1[2];
		x3 = arg1[1];
		x4 = arg1[0];
		x5 = ((((x4.$low << 24 >>> 24)) & 255) >>> 0);
		x6 = $shiftRightUint64(x4, 8);
		x7 = ((((x6.$low << 24 >>> 24)) & 255) >>> 0);
		x8 = $shiftRightUint64(x6, 8);
		x9 = ((((x8.$low << 24 >>> 24)) & 255) >>> 0);
		x10 = $shiftRightUint64(x8, 8);
		x11 = ((((x10.$low << 24 >>> 24)) & 255) >>> 0);
		x12 = $shiftRightUint64(x10, 8);
		x13 = ((((x12.$low << 24 >>> 24)) & 255) >>> 0);
		x14 = $shiftRightUint64(x12, 8);
		x15 = ((((x14.$low << 24 >>> 24)) & 255) >>> 0);
		x16 = $shiftRightUint64(x14, 8);
		x17 = ((((x16.$low << 24 >>> 24)) & 255) >>> 0);
		x18 = ((($shiftRightUint64(x16, 8)).$low << 24 >>> 24));
		x19 = ((((x3.$low << 24 >>> 24)) & 255) >>> 0);
		x20 = $shiftRightUint64(x3, 8);
		x21 = ((((x20.$low << 24 >>> 24)) & 255) >>> 0);
		x22 = $shiftRightUint64(x20, 8);
		x23 = ((((x22.$low << 24 >>> 24)) & 255) >>> 0);
		x24 = $shiftRightUint64(x22, 8);
		x25 = ((((x24.$low << 24 >>> 24)) & 255) >>> 0);
		x26 = $shiftRightUint64(x24, 8);
		x27 = ((((x26.$low << 24 >>> 24)) & 255) >>> 0);
		x28 = $shiftRightUint64(x26, 8);
		x29 = ((((x28.$low << 24 >>> 24)) & 255) >>> 0);
		x30 = $shiftRightUint64(x28, 8);
		x31 = ((((x30.$low << 24 >>> 24)) & 255) >>> 0);
		x32 = ((($shiftRightUint64(x30, 8)).$low << 24 >>> 24));
		x33 = ((((x2.$low << 24 >>> 24)) & 255) >>> 0);
		x34 = $shiftRightUint64(x2, 8);
		x35 = ((((x34.$low << 24 >>> 24)) & 255) >>> 0);
		x36 = $shiftRightUint64(x34, 8);
		x37 = ((((x36.$low << 24 >>> 24)) & 255) >>> 0);
		x38 = $shiftRightUint64(x36, 8);
		x39 = ((((x38.$low << 24 >>> 24)) & 255) >>> 0);
		x40 = $shiftRightUint64(x38, 8);
		x41 = ((((x40.$low << 24 >>> 24)) & 255) >>> 0);
		x42 = $shiftRightUint64(x40, 8);
		x43 = ((((x42.$low << 24 >>> 24)) & 255) >>> 0);
		x44 = $shiftRightUint64(x42, 8);
		x45 = ((((x44.$low << 24 >>> 24)) & 255) >>> 0);
		x46 = ((($shiftRightUint64(x44, 8)).$low << 24 >>> 24));
		x47 = ((((x1.$low << 24 >>> 24)) & 255) >>> 0);
		x48 = $shiftRightUint64(x1, 8);
		x49 = ((((x48.$low << 24 >>> 24)) & 255) >>> 0);
		x50 = $shiftRightUint64(x48, 8);
		x51 = ((((x50.$low << 24 >>> 24)) & 255) >>> 0);
		x52 = $shiftRightUint64(x50, 8);
		x53 = ((((x52.$low << 24 >>> 24)) & 255) >>> 0);
		x54 = $shiftRightUint64(x52, 8);
		x55 = ((((x54.$low << 24 >>> 24)) & 255) >>> 0);
		x56 = $shiftRightUint64(x54, 8);
		x57 = ((((x56.$low << 24 >>> 24)) & 255) >>> 0);
		x58 = $shiftRightUint64(x56, 8);
		x59 = ((((x58.$low << 24 >>> 24)) & 255) >>> 0);
		x60 = ((($shiftRightUint64(x58, 8)).$low << 24 >>> 24));
		out1.nilCheck, out1[0] = x5;
		out1.nilCheck, out1[1] = x7;
		out1.nilCheck, out1[2] = x9;
		out1.nilCheck, out1[3] = x11;
		out1.nilCheck, out1[4] = x13;
		out1.nilCheck, out1[5] = x15;
		out1.nilCheck, out1[6] = x17;
		out1.nilCheck, out1[7] = x18;
		out1.nilCheck, out1[8] = x19;
		out1.nilCheck, out1[9] = x21;
		out1.nilCheck, out1[10] = x23;
		out1.nilCheck, out1[11] = x25;
		out1.nilCheck, out1[12] = x27;
		out1.nilCheck, out1[13] = x29;
		out1.nilCheck, out1[14] = x31;
		out1.nilCheck, out1[15] = x32;
		out1.nilCheck, out1[16] = x33;
		out1.nilCheck, out1[17] = x35;
		out1.nilCheck, out1[18] = x37;
		out1.nilCheck, out1[19] = x39;
		out1.nilCheck, out1[20] = x41;
		out1.nilCheck, out1[21] = x43;
		out1.nilCheck, out1[22] = x45;
		out1.nilCheck, out1[23] = x46;
		out1.nilCheck, out1[24] = x47;
		out1.nilCheck, out1[25] = x49;
		out1.nilCheck, out1[26] = x51;
		out1.nilCheck, out1[27] = x53;
		out1.nilCheck, out1[28] = x55;
		out1.nilCheck, out1[29] = x57;
		out1.nilCheck, out1[30] = x59;
		out1.nilCheck, out1[31] = x60;
	};
	p256FromBytes = function(out1, arg1) {
		var arg1, out1, x, x$1, x$2, x$3, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x7, x8, x9;
		x1 = $shiftLeft64((new $Uint64(0, arg1[31])), 56);
		x2 = $shiftLeft64((new $Uint64(0, arg1[30])), 48);
		x3 = $shiftLeft64((new $Uint64(0, arg1[29])), 40);
		x4 = $shiftLeft64((new $Uint64(0, arg1[28])), 32);
		x5 = $shiftLeft64((new $Uint64(0, arg1[27])), 24);
		x6 = $shiftLeft64((new $Uint64(0, arg1[26])), 16);
		x7 = $shiftLeft64((new $Uint64(0, arg1[25])), 8);
		x8 = arg1[24];
		x9 = $shiftLeft64((new $Uint64(0, arg1[23])), 56);
		x10 = $shiftLeft64((new $Uint64(0, arg1[22])), 48);
		x11 = $shiftLeft64((new $Uint64(0, arg1[21])), 40);
		x12 = $shiftLeft64((new $Uint64(0, arg1[20])), 32);
		x13 = $shiftLeft64((new $Uint64(0, arg1[19])), 24);
		x14 = $shiftLeft64((new $Uint64(0, arg1[18])), 16);
		x15 = $shiftLeft64((new $Uint64(0, arg1[17])), 8);
		x16 = arg1[16];
		x17 = $shiftLeft64((new $Uint64(0, arg1[15])), 56);
		x18 = $shiftLeft64((new $Uint64(0, arg1[14])), 48);
		x19 = $shiftLeft64((new $Uint64(0, arg1[13])), 40);
		x20 = $shiftLeft64((new $Uint64(0, arg1[12])), 32);
		x21 = $shiftLeft64((new $Uint64(0, arg1[11])), 24);
		x22 = $shiftLeft64((new $Uint64(0, arg1[10])), 16);
		x23 = $shiftLeft64((new $Uint64(0, arg1[9])), 8);
		x24 = arg1[8];
		x25 = $shiftLeft64((new $Uint64(0, arg1[7])), 56);
		x26 = $shiftLeft64((new $Uint64(0, arg1[6])), 48);
		x27 = $shiftLeft64((new $Uint64(0, arg1[5])), 40);
		x28 = $shiftLeft64((new $Uint64(0, arg1[4])), 32);
		x29 = $shiftLeft64((new $Uint64(0, arg1[3])), 24);
		x30 = $shiftLeft64((new $Uint64(0, arg1[2])), 16);
		x31 = $shiftLeft64((new $Uint64(0, arg1[1])), 8);
		x32 = arg1[0];
		x33 = (x = (new $Uint64(0, x32)), new $Uint64(x31.$high + x.$high, x31.$low + x.$low));
		x34 = new $Uint64(x30.$high + x33.$high, x30.$low + x33.$low);
		x35 = new $Uint64(x29.$high + x34.$high, x29.$low + x34.$low);
		x36 = new $Uint64(x28.$high + x35.$high, x28.$low + x35.$low);
		x37 = new $Uint64(x27.$high + x36.$high, x27.$low + x36.$low);
		x38 = new $Uint64(x26.$high + x37.$high, x26.$low + x37.$low);
		x39 = new $Uint64(x25.$high + x38.$high, x25.$low + x38.$low);
		x40 = (x$1 = (new $Uint64(0, x24)), new $Uint64(x23.$high + x$1.$high, x23.$low + x$1.$low));
		x41 = new $Uint64(x22.$high + x40.$high, x22.$low + x40.$low);
		x42 = new $Uint64(x21.$high + x41.$high, x21.$low + x41.$low);
		x43 = new $Uint64(x20.$high + x42.$high, x20.$low + x42.$low);
		x44 = new $Uint64(x19.$high + x43.$high, x19.$low + x43.$low);
		x45 = new $Uint64(x18.$high + x44.$high, x18.$low + x44.$low);
		x46 = new $Uint64(x17.$high + x45.$high, x17.$low + x45.$low);
		x47 = (x$2 = (new $Uint64(0, x16)), new $Uint64(x15.$high + x$2.$high, x15.$low + x$2.$low));
		x48 = new $Uint64(x14.$high + x47.$high, x14.$low + x47.$low);
		x49 = new $Uint64(x13.$high + x48.$high, x13.$low + x48.$low);
		x50 = new $Uint64(x12.$high + x49.$high, x12.$low + x49.$low);
		x51 = new $Uint64(x11.$high + x50.$high, x11.$low + x50.$low);
		x52 = new $Uint64(x10.$high + x51.$high, x10.$low + x51.$low);
		x53 = new $Uint64(x9.$high + x52.$high, x9.$low + x52.$low);
		x54 = (x$3 = (new $Uint64(0, x8)), new $Uint64(x7.$high + x$3.$high, x7.$low + x$3.$low));
		x55 = new $Uint64(x6.$high + x54.$high, x6.$low + x54.$low);
		x56 = new $Uint64(x5.$high + x55.$high, x5.$low + x55.$low);
		x57 = new $Uint64(x4.$high + x56.$high, x4.$low + x56.$low);
		x58 = new $Uint64(x3.$high + x57.$high, x3.$low + x57.$low);
		x59 = new $Uint64(x2.$high + x58.$high, x2.$low + x58.$low);
		x60 = new $Uint64(x1.$high + x59.$high, x1.$low + x59.$low);
		out1.nilCheck, out1[0] = x39;
		out1.nilCheck, out1[1] = x46;
		out1.nilCheck, out1[2] = x53;
		out1.nilCheck, out1[3] = x60;
	};
	P256Element.ptr.prototype.One = function() {
		var e;
		e = this;
		p256SetOne(e.x);
		return e;
	};
	P256Element.prototype.One = function() { return this.$val.One(); };
	P256Element.ptr.prototype.Equal = function(t) {
		var e, eBytes, t, tBytes;
		e = this;
		eBytes = e.Bytes();
		tBytes = t.Bytes();
		return subtle.ConstantTimeCompare(eBytes, tBytes);
	};
	P256Element.prototype.Equal = function(t) { return this.$val.Equal(t); };
	P256Element.ptr.prototype.IsZero = function() {
		var e, eBytes;
		e = this;
		eBytes = e.Bytes();
		return subtle.ConstantTimeCompare(eBytes, p256ZeroEncoding);
	};
	P256Element.prototype.IsZero = function() { return this.$val.IsZero(); };
	P256Element.ptr.prototype.Set = function(t) {
		var e, t;
		e = this;
		p256MontgomeryDomainFieldElement.copy(e.x, t.x);
		return e;
	};
	P256Element.prototype.Set = function(t) { return this.$val.Set(t); };
	P256Element.ptr.prototype.Bytes = function() {
		var e, out;
		e = this;
		out = arrayType$5.zero();
		return e.bytes(out);
	};
	P256Element.prototype.Bytes = function() { return this.$val.Bytes(); };
	P256Element.ptr.prototype.bytes = function(out) {
		var e, out, tmp;
		e = this;
		tmp = arrayType$2.zero();
		p256FromMontgomery(tmp, e.x);
		p256ToBytes(out, (tmp));
		p256InvertEndianness(new sliceType(out));
		return new sliceType(out);
	};
	P256Element.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P256Element.ptr.prototype.SetBytes = function(v) {
		var _i, _ref, e, i, in$1, tmp, v;
		e = this;
		if (!((v.$length === 32))) {
			return [ptrType$3.nil, errors.New("invalid P256Element encoding")];
		}
		_ref = v;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) < ((i < 0 || i >= p256MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p256MinusOneEncoding.$array[p256MinusOneEncoding.$offset + i])) {
				break;
			}
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) > ((i < 0 || i >= p256MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p256MinusOneEncoding.$array[p256MinusOneEncoding.$offset + i])) {
				return [ptrType$3.nil, errors.New("invalid P256Element encoding")];
			}
			_i++;
		}
		in$1 = arrayType$5.zero();
		$copySlice(new sliceType(in$1), v);
		p256InvertEndianness(new sliceType(in$1));
		tmp = arrayType$2.zero();
		p256FromBytes((tmp), in$1);
		p256ToMontgomery(e.x, tmp);
		return [e, $ifaceNil];
	};
	P256Element.prototype.SetBytes = function(v) { return this.$val.SetBytes(v); };
	P256Element.ptr.prototype.Add = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p256Add(e.x, t1.x, t2.x);
		return e;
	};
	P256Element.prototype.Add = function(t1, t2) { return this.$val.Add(t1, t2); };
	P256Element.ptr.prototype.Sub = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p256Sub(e.x, t1.x, t2.x);
		return e;
	};
	P256Element.prototype.Sub = function(t1, t2) { return this.$val.Sub(t1, t2); };
	P256Element.ptr.prototype.Mul = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p256Mul(e.x, t1.x, t2.x);
		return e;
	};
	P256Element.prototype.Mul = function(t1, t2) { return this.$val.Mul(t1, t2); };
	P256Element.ptr.prototype.Square = function(t) {
		var e, t;
		e = this;
		p256Square(e.x, t.x);
		return e;
	};
	P256Element.prototype.Square = function(t) { return this.$val.Square(t); };
	P256Element.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		p256Selectznz((v.x), (new p256Uint1(0, cond)), (b.x), (a.x));
		return v;
	};
	P256Element.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	p256InvertEndianness = function(v) {
		var _q, _tmp, _tmp$1, i, v, x, x$1;
		i = 0;
		while (true) {
			if (!(i < (_q = v.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tmp = (x = (v.$length - 1 >> 0) - i >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]));
			_tmp$1 = ((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]);
			((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i] = _tmp);
			(x$1 = (v.$length - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$1] = _tmp$1));
			i = i + (1) >> 0;
		}
	};
	P224Element.ptr.prototype.Invert = function(x) {
		var e, s, s$1, s$2, s$3, s$4, s$5, s$6, s$7, s$8, t0, t1, t2, x, z;
		e = this;
		z = new P224Element.ptr(arrayType$2.zero()).Set(e);
		t0 = new P224Element.ptr(arrayType$2.zero());
		t1 = new P224Element.ptr(arrayType$2.zero());
		t2 = new P224Element.ptr(arrayType$2.zero());
		z.Square(x);
		t0.Mul(x, z);
		z.Square(t0);
		z.Mul(x, z);
		t1.Square(z);
		s = 1;
		while (true) {
			if (!(s < 3)) { break; }
			t1.Square(t1);
			s = s + (1) >> 0;
		}
		t1.Mul(z, t1);
		t2.Square(t1);
		s$1 = 1;
		while (true) {
			if (!(s$1 < 6)) { break; }
			t2.Square(t2);
			s$1 = s$1 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		s$2 = 0;
		while (true) {
			if (!(s$2 < 2)) { break; }
			t1.Square(t1);
			s$2 = s$2 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		t1.Square(t0);
		s$3 = 1;
		while (true) {
			if (!(s$3 < 3)) { break; }
			t1.Square(t1);
			s$3 = s$3 + (1) >> 0;
		}
		z.Mul(z, t1);
		t1.Square(z);
		s$4 = 1;
		while (true) {
			if (!(s$4 < 14)) { break; }
			t1.Square(t1);
			s$4 = s$4 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		t1.Square(t0);
		s$5 = 1;
		while (true) {
			if (!(s$5 < 17)) { break; }
			t1.Square(t1);
			s$5 = s$5 + (1) >> 0;
		}
		z.Mul(z, t1);
		t1.Square(z);
		s$6 = 1;
		while (true) {
			if (!(s$6 < 48)) { break; }
			t1.Square(t1);
			s$6 = s$6 + (1) >> 0;
		}
		z.Mul(z, t1);
		t1.Square(z);
		s$7 = 1;
		while (true) {
			if (!(s$7 < 31)) { break; }
			t1.Square(t1);
			s$7 = s$7 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$8 = 0;
		while (true) {
			if (!(s$8 < 97)) { break; }
			t0.Square(t0);
			s$8 = s$8 + (1) >> 0;
		}
		z.Mul(z, t0);
		return e.Set(z);
	};
	P224Element.prototype.Invert = function(x) { return this.$val.Invert(x); };
	p224CmovznzU64 = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x, x$1, x$2, x1, x2;
		x1 = $mul64((new $Uint64(arg1.$high, arg1.$low)), new $Uint64(4294967295, 4294967295));
		x2 = (x = new $Uint64(x1.$high & arg3.$high, (x1.$low & arg3.$low) >>> 0), x$1 = (x$2 = new $Uint64(~x1.$high, ~x1.$low >>> 0), new $Uint64(x$2.$high & arg2.$high, (x$2.$low & arg2.$low) >>> 0)), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		out1.$set(x2);
	};
	p224Mul = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, arg1, arg2, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x199, x2, x20, x200, x200$24ptr, x201, x201$24ptr, x202, x202$24ptr, x203, x203$24ptr, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, arg2[3]);
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, arg2[2]);
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, arg2[1]);
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, arg2[0]);
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p224Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p224Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = (x$2 = ((x$3 = (new p224Uint1(x18.$high, x18.$low)), new $Uint64(x$3.$high, x$3.$low))), new $Uint64(x$2.$high + x6.$high, x$2.$low + x6.$low));
		x20 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x20 = _tuple$7[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x20, new $Uint64(0, 4294967295));
		x23 = _tuple$8[0];
		x22 = _tuple$8[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x20, new $Uint64(4294967295, 4294967295));
		x25 = _tuple$9[0];
		x24 = _tuple$9[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$10 = bits.Mul64(x20, new $Uint64(4294967295, 0));
		x27 = _tuple$10[0];
		x26 = _tuple$10[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x27, x24, new $Uint64(0, 0));
		x28 = _tuple$11[0];
		x29 = _tuple$11[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x25, x22, ((x$4 = (new p224Uint1(x29.$high, x29.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x30 = _tuple$12[0];
		x31 = _tuple$12[1];
		x32 = (x$5 = ((x$6 = (new p224Uint1(x31.$high, x31.$low)), new $Uint64(x$6.$high, x$6.$low))), new $Uint64(x$5.$high + x23.$high, x$5.$low + x23.$low));
		x34 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x11, x20, new $Uint64(0, 0));
		x34 = _tuple$13[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x13, x26, ((x$7 = (new p224Uint1(x34.$high, x34.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x35 = _tuple$14[0];
		x36 = _tuple$14[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x15, x28, ((x$8 = (new p224Uint1(x36.$high, x36.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x37 = _tuple$15[0];
		x38 = _tuple$15[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x17, x30, ((x$9 = (new p224Uint1(x38.$high, x38.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x39 = _tuple$16[0];
		x40 = _tuple$16[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x19, x32, ((x$10 = (new p224Uint1(x40.$high, x40.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x41 = _tuple$17[0];
		x42 = _tuple$17[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, arg2[3]);
		x44 = _tuple$18[0];
		x43 = _tuple$18[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, arg2[2]);
		x46 = _tuple$19[0];
		x45 = _tuple$19[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x1, arg2[1]);
		x48 = _tuple$20[0];
		x47 = _tuple$20[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$21 = bits.Mul64(x1, arg2[0]);
		x50 = _tuple$21[0];
		x49 = _tuple$21[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x50, x47, new $Uint64(0, 0));
		x51 = _tuple$22[0];
		x52 = _tuple$22[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x48, x45, ((x$11 = (new p224Uint1(x52.$high, x52.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x53 = _tuple$23[0];
		x54 = _tuple$23[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x46, x43, ((x$12 = (new p224Uint1(x54.$high, x54.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x55 = _tuple$24[0];
		x56 = _tuple$24[1];
		x57 = (x$13 = ((x$14 = (new p224Uint1(x56.$high, x56.$low)), new $Uint64(x$14.$high, x$14.$low))), new $Uint64(x$13.$high + x44.$high, x$13.$low + x44.$low));
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x35, x49, new $Uint64(0, 0));
		x58 = _tuple$25[0];
		x59 = _tuple$25[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x37, x51, ((x$15 = (new p224Uint1(x59.$high, x59.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x60 = _tuple$26[0];
		x61 = _tuple$26[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x39, x53, ((x$16 = (new p224Uint1(x61.$high, x61.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x62 = _tuple$27[0];
		x63 = _tuple$27[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x41, x55, ((x$17 = (new p224Uint1(x63.$high, x63.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x64 = _tuple$28[0];
		x65 = _tuple$28[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(((x$18 = (new p224Uint1(x42.$high, x42.$low)), new $Uint64(x$18.$high, x$18.$low))), x57, ((x$19 = (new p224Uint1(x65.$high, x65.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x66 = _tuple$29[0];
		x67 = _tuple$29[1];
		x68 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x58, new $Uint64(4294967295, 4294967295));
		x68 = _tuple$30[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x68, new $Uint64(0, 4294967295));
		x71 = _tuple$31[0];
		x70 = _tuple$31[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$32 = bits.Mul64(x68, new $Uint64(4294967295, 4294967295));
		x73 = _tuple$32[0];
		x72 = _tuple$32[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$33 = bits.Mul64(x68, new $Uint64(4294967295, 0));
		x75 = _tuple$33[0];
		x74 = _tuple$33[1];
		x76 = new $Uint64(0, 0);
		x77 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x75, x72, new $Uint64(0, 0));
		x76 = _tuple$34[0];
		x77 = _tuple$34[1];
		x78 = new $Uint64(0, 0);
		x79 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x73, x70, ((x$20 = (new p224Uint1(x77.$high, x77.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x78 = _tuple$35[0];
		x79 = _tuple$35[1];
		x80 = (x$21 = ((x$22 = (new p224Uint1(x79.$high, x79.$low)), new $Uint64(x$22.$high, x$22.$low))), new $Uint64(x$21.$high + x71.$high, x$21.$low + x71.$low));
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x58, x68, new $Uint64(0, 0));
		x82 = _tuple$36[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x60, x74, ((x$23 = (new p224Uint1(x82.$high, x82.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x83 = _tuple$37[0];
		x84 = _tuple$37[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x62, x76, ((x$24 = (new p224Uint1(x84.$high, x84.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x85 = _tuple$38[0];
		x86 = _tuple$38[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x64, x78, ((x$25 = (new p224Uint1(x86.$high, x86.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x87 = _tuple$39[0];
		x88 = _tuple$39[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x66, x80, ((x$26 = (new p224Uint1(x88.$high, x88.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x89 = _tuple$40[0];
		x90 = _tuple$40[1];
		x91 = (x$27 = ((x$28 = (new p224Uint1(x90.$high, x90.$low)), new $Uint64(x$28.$high, x$28.$low))), x$29 = ((x$30 = (new p224Uint1(x67.$high, x67.$low)), new $Uint64(x$30.$high, x$30.$low))), new $Uint64(x$27.$high + x$29.$high, x$27.$low + x$29.$low));
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x2, arg2[3]);
		x93 = _tuple$41[0];
		x92 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x2, arg2[2]);
		x95 = _tuple$42[0];
		x94 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Mul64(x2, arg2[1]);
		x97 = _tuple$43[0];
		x96 = _tuple$43[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x2, arg2[0]);
		x99 = _tuple$44[0];
		x98 = _tuple$44[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x99, x96, new $Uint64(0, 0));
		x100 = _tuple$45[0];
		x101 = _tuple$45[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x97, x94, ((x$31 = (new p224Uint1(x101.$high, x101.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x102 = _tuple$46[0];
		x103 = _tuple$46[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x95, x92, ((x$32 = (new p224Uint1(x103.$high, x103.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x104 = _tuple$47[0];
		x105 = _tuple$47[1];
		x106 = (x$33 = ((x$34 = (new p224Uint1(x105.$high, x105.$low)), new $Uint64(x$34.$high, x$34.$low))), new $Uint64(x$33.$high + x93.$high, x$33.$low + x93.$low));
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x83, x98, new $Uint64(0, 0));
		x107 = _tuple$48[0];
		x108 = _tuple$48[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x85, x100, ((x$35 = (new p224Uint1(x108.$high, x108.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x109 = _tuple$49[0];
		x110 = _tuple$49[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x87, x102, ((x$36 = (new p224Uint1(x110.$high, x110.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x111 = _tuple$50[0];
		x112 = _tuple$50[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x89, x104, ((x$37 = (new p224Uint1(x112.$high, x112.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x113 = _tuple$51[0];
		x114 = _tuple$51[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x91, x106, ((x$38 = (new p224Uint1(x114.$high, x114.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x115 = _tuple$52[0];
		x116 = _tuple$52[1];
		x117 = new $Uint64(0, 0);
		_tuple$53 = bits.Mul64(x107, new $Uint64(4294967295, 4294967295));
		x117 = _tuple$53[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$54 = bits.Mul64(x117, new $Uint64(0, 4294967295));
		x120 = _tuple$54[0];
		x119 = _tuple$54[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$55 = bits.Mul64(x117, new $Uint64(4294967295, 4294967295));
		x122 = _tuple$55[0];
		x121 = _tuple$55[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$56 = bits.Mul64(x117, new $Uint64(4294967295, 0));
		x124 = _tuple$56[0];
		x123 = _tuple$56[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x124, x121, new $Uint64(0, 0));
		x125 = _tuple$57[0];
		x126 = _tuple$57[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x122, x119, ((x$39 = (new p224Uint1(x126.$high, x126.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x127 = _tuple$58[0];
		x128 = _tuple$58[1];
		x129 = (x$40 = ((x$41 = (new p224Uint1(x128.$high, x128.$low)), new $Uint64(x$41.$high, x$41.$low))), new $Uint64(x$40.$high + x120.$high, x$40.$low + x120.$low));
		x131 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x107, x117, new $Uint64(0, 0));
		x131 = _tuple$59[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x109, x123, ((x$42 = (new p224Uint1(x131.$high, x131.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x132 = _tuple$60[0];
		x133 = _tuple$60[1];
		x134 = new $Uint64(0, 0);
		x135 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x111, x125, ((x$43 = (new p224Uint1(x133.$high, x133.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x134 = _tuple$61[0];
		x135 = _tuple$61[1];
		x136 = new $Uint64(0, 0);
		x137 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x113, x127, ((x$44 = (new p224Uint1(x135.$high, x135.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x136 = _tuple$62[0];
		x137 = _tuple$62[1];
		x138 = new $Uint64(0, 0);
		x139 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x115, x129, ((x$45 = (new p224Uint1(x137.$high, x137.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x138 = _tuple$63[0];
		x139 = _tuple$63[1];
		x140 = (x$46 = ((x$47 = (new p224Uint1(x139.$high, x139.$low)), new $Uint64(x$47.$high, x$47.$low))), x$48 = ((x$49 = (new p224Uint1(x116.$high, x116.$low)), new $Uint64(x$49.$high, x$49.$low))), new $Uint64(x$46.$high + x$48.$high, x$46.$low + x$48.$low));
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Mul64(x3, arg2[3]);
		x142 = _tuple$64[0];
		x141 = _tuple$64[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$65 = bits.Mul64(x3, arg2[2]);
		x144 = _tuple$65[0];
		x143 = _tuple$65[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$66 = bits.Mul64(x3, arg2[1]);
		x146 = _tuple$66[0];
		x145 = _tuple$66[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$67 = bits.Mul64(x3, arg2[0]);
		x148 = _tuple$67[0];
		x147 = _tuple$67[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x148, x145, new $Uint64(0, 0));
		x149 = _tuple$68[0];
		x150 = _tuple$68[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x146, x143, ((x$50 = (new p224Uint1(x150.$high, x150.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x151 = _tuple$69[0];
		x152 = _tuple$69[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x144, x141, ((x$51 = (new p224Uint1(x152.$high, x152.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x153 = _tuple$70[0];
		x154 = _tuple$70[1];
		x155 = (x$52 = ((x$53 = (new p224Uint1(x154.$high, x154.$low)), new $Uint64(x$53.$high, x$53.$low))), new $Uint64(x$52.$high + x142.$high, x$52.$low + x142.$low));
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$71 = bits.Add64(x132, x147, new $Uint64(0, 0));
		x156 = _tuple$71[0];
		x157 = _tuple$71[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$72 = bits.Add64(x134, x149, ((x$54 = (new p224Uint1(x157.$high, x157.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x158 = _tuple$72[0];
		x159 = _tuple$72[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x136, x151, ((x$55 = (new p224Uint1(x159.$high, x159.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x160 = _tuple$73[0];
		x161 = _tuple$73[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x138, x153, ((x$56 = (new p224Uint1(x161.$high, x161.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x162 = _tuple$74[0];
		x163 = _tuple$74[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x140, x155, ((x$57 = (new p224Uint1(x163.$high, x163.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x164 = _tuple$75[0];
		x165 = _tuple$75[1];
		x166 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x156, new $Uint64(4294967295, 4294967295));
		x166 = _tuple$76[1];
		x168 = new $Uint64(0, 0);
		x169 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x166, new $Uint64(0, 4294967295));
		x169 = _tuple$77[0];
		x168 = _tuple$77[1];
		x170 = new $Uint64(0, 0);
		x171 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x166, new $Uint64(4294967295, 4294967295));
		x171 = _tuple$78[0];
		x170 = _tuple$78[1];
		x172 = new $Uint64(0, 0);
		x173 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x166, new $Uint64(4294967295, 0));
		x173 = _tuple$79[0];
		x172 = _tuple$79[1];
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x173, x170, new $Uint64(0, 0));
		x174 = _tuple$80[0];
		x175 = _tuple$80[1];
		x176 = new $Uint64(0, 0);
		x177 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x171, x168, ((x$58 = (new p224Uint1(x175.$high, x175.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x176 = _tuple$81[0];
		x177 = _tuple$81[1];
		x178 = (x$59 = ((x$60 = (new p224Uint1(x177.$high, x177.$low)), new $Uint64(x$60.$high, x$60.$low))), new $Uint64(x$59.$high + x169.$high, x$59.$low + x169.$low));
		x180 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x156, x166, new $Uint64(0, 0));
		x180 = _tuple$82[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x158, x172, ((x$61 = (new p224Uint1(x180.$high, x180.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x181 = _tuple$83[0];
		x182 = _tuple$83[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x160, x174, ((x$62 = (new p224Uint1(x182.$high, x182.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x183 = _tuple$84[0];
		x184 = _tuple$84[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x162, x176, ((x$63 = (new p224Uint1(x184.$high, x184.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x185 = _tuple$85[0];
		x186 = _tuple$85[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x164, x178, ((x$64 = (new p224Uint1(x186.$high, x186.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x187 = _tuple$86[0];
		x188 = _tuple$86[1];
		x189 = (x$65 = ((x$66 = (new p224Uint1(x188.$high, x188.$low)), new $Uint64(x$66.$high, x$66.$low))), x$67 = ((x$68 = (new p224Uint1(x165.$high, x165.$low)), new $Uint64(x$68.$high, x$68.$low))), new $Uint64(x$65.$high + x$67.$high, x$65.$low + x$67.$low));
		x190 = new $Uint64(0, 0);
		x191 = new $Uint64(0, 0);
		_tuple$87 = bits.Sub64(x181, new $Uint64(0, 1), new $Uint64(0, 0));
		x190 = _tuple$87[0];
		x191 = _tuple$87[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$88 = bits.Sub64(x183, new $Uint64(4294967295, 0), ((x$69 = (new p224Uint1(x191.$high, x191.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x192 = _tuple$88[0];
		x193 = _tuple$88[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$89 = bits.Sub64(x185, new $Uint64(4294967295, 4294967295), ((x$70 = (new p224Uint1(x193.$high, x193.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x194 = _tuple$89[0];
		x195 = _tuple$89[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$90 = bits.Sub64(x187, new $Uint64(0, 4294967295), ((x$71 = (new p224Uint1(x195.$high, x195.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x196 = _tuple$90[0];
		x197 = _tuple$90[1];
		x199 = new $Uint64(0, 0);
		_tuple$91 = bits.Sub64(x189, new $Uint64(0, 0), ((x$72 = (new p224Uint1(x197.$high, x197.$low)), new $Uint64(x$72.$high, x$72.$low))));
		x199 = _tuple$91[1];
		x200 = new $Uint64(0, 0);
		p224CmovznzU64((x200$24ptr || (x200$24ptr = new ptrType(function() { return x200; }, function($v) { x200 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x190, x181);
		x201 = new $Uint64(0, 0);
		p224CmovznzU64((x201$24ptr || (x201$24ptr = new ptrType(function() { return x201; }, function($v) { x201 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x192, x183);
		x202 = new $Uint64(0, 0);
		p224CmovznzU64((x202$24ptr || (x202$24ptr = new ptrType(function() { return x202; }, function($v) { x202 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x194, x185);
		x203 = new $Uint64(0, 0);
		p224CmovznzU64((x203$24ptr || (x203$24ptr = new ptrType(function() { return x203; }, function($v) { x203 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x196, x187);
		out1.nilCheck, out1[0] = x200;
		out1.nilCheck, out1[1] = x201;
		out1.nilCheck, out1[2] = x202;
		out1.nilCheck, out1[3] = x203;
	};
	p224Square = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$85, _tuple$86, _tuple$87, _tuple$88, _tuple$89, _tuple$9, _tuple$90, _tuple$91, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x115, x116, x117, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x146, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x157, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x168, x169, x17, x170, x171, x172, x173, x174, x175, x176, x177, x178, x18, x180, x181, x182, x183, x184, x185, x186, x187, x188, x189, x19, x190, x191, x192, x193, x194, x195, x196, x197, x199, x2, x20, x200, x200$24ptr, x201, x201$24ptr, x202, x202$24ptr, x203, x203$24ptr, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x66, x67, x68, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, arg1[3]);
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, arg1[2]);
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, arg1[1]);
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, arg1[0]);
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p224Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p224Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = (x$2 = ((x$3 = (new p224Uint1(x18.$high, x18.$low)), new $Uint64(x$3.$high, x$3.$low))), new $Uint64(x$2.$high + x6.$high, x$2.$low + x6.$low));
		x20 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x20 = _tuple$7[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x20, new $Uint64(0, 4294967295));
		x23 = _tuple$8[0];
		x22 = _tuple$8[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x20, new $Uint64(4294967295, 4294967295));
		x25 = _tuple$9[0];
		x24 = _tuple$9[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$10 = bits.Mul64(x20, new $Uint64(4294967295, 0));
		x27 = _tuple$10[0];
		x26 = _tuple$10[1];
		x28 = new $Uint64(0, 0);
		x29 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x27, x24, new $Uint64(0, 0));
		x28 = _tuple$11[0];
		x29 = _tuple$11[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x25, x22, ((x$4 = (new p224Uint1(x29.$high, x29.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x30 = _tuple$12[0];
		x31 = _tuple$12[1];
		x32 = (x$5 = ((x$6 = (new p224Uint1(x31.$high, x31.$low)), new $Uint64(x$6.$high, x$6.$low))), new $Uint64(x$5.$high + x23.$high, x$5.$low + x23.$low));
		x34 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x11, x20, new $Uint64(0, 0));
		x34 = _tuple$13[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x13, x26, ((x$7 = (new p224Uint1(x34.$high, x34.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x35 = _tuple$14[0];
		x36 = _tuple$14[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x15, x28, ((x$8 = (new p224Uint1(x36.$high, x36.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x37 = _tuple$15[0];
		x38 = _tuple$15[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x17, x30, ((x$9 = (new p224Uint1(x38.$high, x38.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x39 = _tuple$16[0];
		x40 = _tuple$16[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x19, x32, ((x$10 = (new p224Uint1(x40.$high, x40.$low)), new $Uint64(x$10.$high, x$10.$low))));
		x41 = _tuple$17[0];
		x42 = _tuple$17[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, arg1[3]);
		x44 = _tuple$18[0];
		x43 = _tuple$18[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, arg1[2]);
		x46 = _tuple$19[0];
		x45 = _tuple$19[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x1, arg1[1]);
		x48 = _tuple$20[0];
		x47 = _tuple$20[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$21 = bits.Mul64(x1, arg1[0]);
		x50 = _tuple$21[0];
		x49 = _tuple$21[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x50, x47, new $Uint64(0, 0));
		x51 = _tuple$22[0];
		x52 = _tuple$22[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x48, x45, ((x$11 = (new p224Uint1(x52.$high, x52.$low)), new $Uint64(x$11.$high, x$11.$low))));
		x53 = _tuple$23[0];
		x54 = _tuple$23[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x46, x43, ((x$12 = (new p224Uint1(x54.$high, x54.$low)), new $Uint64(x$12.$high, x$12.$low))));
		x55 = _tuple$24[0];
		x56 = _tuple$24[1];
		x57 = (x$13 = ((x$14 = (new p224Uint1(x56.$high, x56.$low)), new $Uint64(x$14.$high, x$14.$low))), new $Uint64(x$13.$high + x44.$high, x$13.$low + x44.$low));
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x35, x49, new $Uint64(0, 0));
		x58 = _tuple$25[0];
		x59 = _tuple$25[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x37, x51, ((x$15 = (new p224Uint1(x59.$high, x59.$low)), new $Uint64(x$15.$high, x$15.$low))));
		x60 = _tuple$26[0];
		x61 = _tuple$26[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64(x39, x53, ((x$16 = (new p224Uint1(x61.$high, x61.$low)), new $Uint64(x$16.$high, x$16.$low))));
		x62 = _tuple$27[0];
		x63 = _tuple$27[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$28 = bits.Add64(x41, x55, ((x$17 = (new p224Uint1(x63.$high, x63.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x64 = _tuple$28[0];
		x65 = _tuple$28[1];
		x66 = new $Uint64(0, 0);
		x67 = new $Uint64(0, 0);
		_tuple$29 = bits.Add64(((x$18 = (new p224Uint1(x42.$high, x42.$low)), new $Uint64(x$18.$high, x$18.$low))), x57, ((x$19 = (new p224Uint1(x65.$high, x65.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x66 = _tuple$29[0];
		x67 = _tuple$29[1];
		x68 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x58, new $Uint64(4294967295, 4294967295));
		x68 = _tuple$30[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x68, new $Uint64(0, 4294967295));
		x71 = _tuple$31[0];
		x70 = _tuple$31[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$32 = bits.Mul64(x68, new $Uint64(4294967295, 4294967295));
		x73 = _tuple$32[0];
		x72 = _tuple$32[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$33 = bits.Mul64(x68, new $Uint64(4294967295, 0));
		x75 = _tuple$33[0];
		x74 = _tuple$33[1];
		x76 = new $Uint64(0, 0);
		x77 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x75, x72, new $Uint64(0, 0));
		x76 = _tuple$34[0];
		x77 = _tuple$34[1];
		x78 = new $Uint64(0, 0);
		x79 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x73, x70, ((x$20 = (new p224Uint1(x77.$high, x77.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x78 = _tuple$35[0];
		x79 = _tuple$35[1];
		x80 = (x$21 = ((x$22 = (new p224Uint1(x79.$high, x79.$low)), new $Uint64(x$22.$high, x$22.$low))), new $Uint64(x$21.$high + x71.$high, x$21.$low + x71.$low));
		x82 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x58, x68, new $Uint64(0, 0));
		x82 = _tuple$36[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x60, x74, ((x$23 = (new p224Uint1(x82.$high, x82.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x83 = _tuple$37[0];
		x84 = _tuple$37[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x62, x76, ((x$24 = (new p224Uint1(x84.$high, x84.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x85 = _tuple$38[0];
		x86 = _tuple$38[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$39 = bits.Add64(x64, x78, ((x$25 = (new p224Uint1(x86.$high, x86.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x87 = _tuple$39[0];
		x88 = _tuple$39[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$40 = bits.Add64(x66, x80, ((x$26 = (new p224Uint1(x88.$high, x88.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x89 = _tuple$40[0];
		x90 = _tuple$40[1];
		x91 = (x$27 = ((x$28 = (new p224Uint1(x90.$high, x90.$low)), new $Uint64(x$28.$high, x$28.$low))), x$29 = ((x$30 = (new p224Uint1(x67.$high, x67.$low)), new $Uint64(x$30.$high, x$30.$low))), new $Uint64(x$27.$high + x$29.$high, x$27.$low + x$29.$low));
		x92 = new $Uint64(0, 0);
		x93 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x2, arg1[3]);
		x93 = _tuple$41[0];
		x92 = _tuple$41[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x2, arg1[2]);
		x95 = _tuple$42[0];
		x94 = _tuple$42[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$43 = bits.Mul64(x2, arg1[1]);
		x97 = _tuple$43[0];
		x96 = _tuple$43[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$44 = bits.Mul64(x2, arg1[0]);
		x99 = _tuple$44[0];
		x98 = _tuple$44[1];
		x100 = new $Uint64(0, 0);
		x101 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x99, x96, new $Uint64(0, 0));
		x100 = _tuple$45[0];
		x101 = _tuple$45[1];
		x102 = new $Uint64(0, 0);
		x103 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x97, x94, ((x$31 = (new p224Uint1(x101.$high, x101.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x102 = _tuple$46[0];
		x103 = _tuple$46[1];
		x104 = new $Uint64(0, 0);
		x105 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x95, x92, ((x$32 = (new p224Uint1(x103.$high, x103.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x104 = _tuple$47[0];
		x105 = _tuple$47[1];
		x106 = (x$33 = ((x$34 = (new p224Uint1(x105.$high, x105.$low)), new $Uint64(x$34.$high, x$34.$low))), new $Uint64(x$33.$high + x93.$high, x$33.$low + x93.$low));
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64(x83, x98, new $Uint64(0, 0));
		x107 = _tuple$48[0];
		x108 = _tuple$48[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$49 = bits.Add64(x85, x100, ((x$35 = (new p224Uint1(x108.$high, x108.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x109 = _tuple$49[0];
		x110 = _tuple$49[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$50 = bits.Add64(x87, x102, ((x$36 = (new p224Uint1(x110.$high, x110.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x111 = _tuple$50[0];
		x112 = _tuple$50[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$51 = bits.Add64(x89, x104, ((x$37 = (new p224Uint1(x112.$high, x112.$low)), new $Uint64(x$37.$high, x$37.$low))));
		x113 = _tuple$51[0];
		x114 = _tuple$51[1];
		x115 = new $Uint64(0, 0);
		x116 = new $Uint64(0, 0);
		_tuple$52 = bits.Add64(x91, x106, ((x$38 = (new p224Uint1(x114.$high, x114.$low)), new $Uint64(x$38.$high, x$38.$low))));
		x115 = _tuple$52[0];
		x116 = _tuple$52[1];
		x117 = new $Uint64(0, 0);
		_tuple$53 = bits.Mul64(x107, new $Uint64(4294967295, 4294967295));
		x117 = _tuple$53[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$54 = bits.Mul64(x117, new $Uint64(0, 4294967295));
		x120 = _tuple$54[0];
		x119 = _tuple$54[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$55 = bits.Mul64(x117, new $Uint64(4294967295, 4294967295));
		x122 = _tuple$55[0];
		x121 = _tuple$55[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$56 = bits.Mul64(x117, new $Uint64(4294967295, 0));
		x124 = _tuple$56[0];
		x123 = _tuple$56[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x124, x121, new $Uint64(0, 0));
		x125 = _tuple$57[0];
		x126 = _tuple$57[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x122, x119, ((x$39 = (new p224Uint1(x126.$high, x126.$low)), new $Uint64(x$39.$high, x$39.$low))));
		x127 = _tuple$58[0];
		x128 = _tuple$58[1];
		x129 = (x$40 = ((x$41 = (new p224Uint1(x128.$high, x128.$low)), new $Uint64(x$41.$high, x$41.$low))), new $Uint64(x$40.$high + x120.$high, x$40.$low + x120.$low));
		x131 = new $Uint64(0, 0);
		_tuple$59 = bits.Add64(x107, x117, new $Uint64(0, 0));
		x131 = _tuple$59[1];
		x132 = new $Uint64(0, 0);
		x133 = new $Uint64(0, 0);
		_tuple$60 = bits.Add64(x109, x123, ((x$42 = (new p224Uint1(x131.$high, x131.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x132 = _tuple$60[0];
		x133 = _tuple$60[1];
		x134 = new $Uint64(0, 0);
		x135 = new $Uint64(0, 0);
		_tuple$61 = bits.Add64(x111, x125, ((x$43 = (new p224Uint1(x133.$high, x133.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x134 = _tuple$61[0];
		x135 = _tuple$61[1];
		x136 = new $Uint64(0, 0);
		x137 = new $Uint64(0, 0);
		_tuple$62 = bits.Add64(x113, x127, ((x$44 = (new p224Uint1(x135.$high, x135.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x136 = _tuple$62[0];
		x137 = _tuple$62[1];
		x138 = new $Uint64(0, 0);
		x139 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x115, x129, ((x$45 = (new p224Uint1(x137.$high, x137.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x138 = _tuple$63[0];
		x139 = _tuple$63[1];
		x140 = (x$46 = ((x$47 = (new p224Uint1(x139.$high, x139.$low)), new $Uint64(x$47.$high, x$47.$low))), x$48 = ((x$49 = (new p224Uint1(x116.$high, x116.$low)), new $Uint64(x$49.$high, x$49.$low))), new $Uint64(x$46.$high + x$48.$high, x$46.$low + x$48.$low));
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$64 = bits.Mul64(x3, arg1[3]);
		x142 = _tuple$64[0];
		x141 = _tuple$64[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$65 = bits.Mul64(x3, arg1[2]);
		x144 = _tuple$65[0];
		x143 = _tuple$65[1];
		x145 = new $Uint64(0, 0);
		x146 = new $Uint64(0, 0);
		_tuple$66 = bits.Mul64(x3, arg1[1]);
		x146 = _tuple$66[0];
		x145 = _tuple$66[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$67 = bits.Mul64(x3, arg1[0]);
		x148 = _tuple$67[0];
		x147 = _tuple$67[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x148, x145, new $Uint64(0, 0));
		x149 = _tuple$68[0];
		x150 = _tuple$68[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64(x146, x143, ((x$50 = (new p224Uint1(x150.$high, x150.$low)), new $Uint64(x$50.$high, x$50.$low))));
		x151 = _tuple$69[0];
		x152 = _tuple$69[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$70 = bits.Add64(x144, x141, ((x$51 = (new p224Uint1(x152.$high, x152.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x153 = _tuple$70[0];
		x154 = _tuple$70[1];
		x155 = (x$52 = ((x$53 = (new p224Uint1(x154.$high, x154.$low)), new $Uint64(x$53.$high, x$53.$low))), new $Uint64(x$52.$high + x142.$high, x$52.$low + x142.$low));
		x156 = new $Uint64(0, 0);
		x157 = new $Uint64(0, 0);
		_tuple$71 = bits.Add64(x132, x147, new $Uint64(0, 0));
		x156 = _tuple$71[0];
		x157 = _tuple$71[1];
		x158 = new $Uint64(0, 0);
		x159 = new $Uint64(0, 0);
		_tuple$72 = bits.Add64(x134, x149, ((x$54 = (new p224Uint1(x157.$high, x157.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x158 = _tuple$72[0];
		x159 = _tuple$72[1];
		x160 = new $Uint64(0, 0);
		x161 = new $Uint64(0, 0);
		_tuple$73 = bits.Add64(x136, x151, ((x$55 = (new p224Uint1(x159.$high, x159.$low)), new $Uint64(x$55.$high, x$55.$low))));
		x160 = _tuple$73[0];
		x161 = _tuple$73[1];
		x162 = new $Uint64(0, 0);
		x163 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x138, x153, ((x$56 = (new p224Uint1(x161.$high, x161.$low)), new $Uint64(x$56.$high, x$56.$low))));
		x162 = _tuple$74[0];
		x163 = _tuple$74[1];
		x164 = new $Uint64(0, 0);
		x165 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x140, x155, ((x$57 = (new p224Uint1(x163.$high, x163.$low)), new $Uint64(x$57.$high, x$57.$low))));
		x164 = _tuple$75[0];
		x165 = _tuple$75[1];
		x166 = new $Uint64(0, 0);
		_tuple$76 = bits.Mul64(x156, new $Uint64(4294967295, 4294967295));
		x166 = _tuple$76[1];
		x168 = new $Uint64(0, 0);
		x169 = new $Uint64(0, 0);
		_tuple$77 = bits.Mul64(x166, new $Uint64(0, 4294967295));
		x169 = _tuple$77[0];
		x168 = _tuple$77[1];
		x170 = new $Uint64(0, 0);
		x171 = new $Uint64(0, 0);
		_tuple$78 = bits.Mul64(x166, new $Uint64(4294967295, 4294967295));
		x171 = _tuple$78[0];
		x170 = _tuple$78[1];
		x172 = new $Uint64(0, 0);
		x173 = new $Uint64(0, 0);
		_tuple$79 = bits.Mul64(x166, new $Uint64(4294967295, 0));
		x173 = _tuple$79[0];
		x172 = _tuple$79[1];
		x174 = new $Uint64(0, 0);
		x175 = new $Uint64(0, 0);
		_tuple$80 = bits.Add64(x173, x170, new $Uint64(0, 0));
		x174 = _tuple$80[0];
		x175 = _tuple$80[1];
		x176 = new $Uint64(0, 0);
		x177 = new $Uint64(0, 0);
		_tuple$81 = bits.Add64(x171, x168, ((x$58 = (new p224Uint1(x175.$high, x175.$low)), new $Uint64(x$58.$high, x$58.$low))));
		x176 = _tuple$81[0];
		x177 = _tuple$81[1];
		x178 = (x$59 = ((x$60 = (new p224Uint1(x177.$high, x177.$low)), new $Uint64(x$60.$high, x$60.$low))), new $Uint64(x$59.$high + x169.$high, x$59.$low + x169.$low));
		x180 = new $Uint64(0, 0);
		_tuple$82 = bits.Add64(x156, x166, new $Uint64(0, 0));
		x180 = _tuple$82[1];
		x181 = new $Uint64(0, 0);
		x182 = new $Uint64(0, 0);
		_tuple$83 = bits.Add64(x158, x172, ((x$61 = (new p224Uint1(x180.$high, x180.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x181 = _tuple$83[0];
		x182 = _tuple$83[1];
		x183 = new $Uint64(0, 0);
		x184 = new $Uint64(0, 0);
		_tuple$84 = bits.Add64(x160, x174, ((x$62 = (new p224Uint1(x182.$high, x182.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x183 = _tuple$84[0];
		x184 = _tuple$84[1];
		x185 = new $Uint64(0, 0);
		x186 = new $Uint64(0, 0);
		_tuple$85 = bits.Add64(x162, x176, ((x$63 = (new p224Uint1(x184.$high, x184.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x185 = _tuple$85[0];
		x186 = _tuple$85[1];
		x187 = new $Uint64(0, 0);
		x188 = new $Uint64(0, 0);
		_tuple$86 = bits.Add64(x164, x178, ((x$64 = (new p224Uint1(x186.$high, x186.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x187 = _tuple$86[0];
		x188 = _tuple$86[1];
		x189 = (x$65 = ((x$66 = (new p224Uint1(x188.$high, x188.$low)), new $Uint64(x$66.$high, x$66.$low))), x$67 = ((x$68 = (new p224Uint1(x165.$high, x165.$low)), new $Uint64(x$68.$high, x$68.$low))), new $Uint64(x$65.$high + x$67.$high, x$65.$low + x$67.$low));
		x190 = new $Uint64(0, 0);
		x191 = new $Uint64(0, 0);
		_tuple$87 = bits.Sub64(x181, new $Uint64(0, 1), new $Uint64(0, 0));
		x190 = _tuple$87[0];
		x191 = _tuple$87[1];
		x192 = new $Uint64(0, 0);
		x193 = new $Uint64(0, 0);
		_tuple$88 = bits.Sub64(x183, new $Uint64(4294967295, 0), ((x$69 = (new p224Uint1(x191.$high, x191.$low)), new $Uint64(x$69.$high, x$69.$low))));
		x192 = _tuple$88[0];
		x193 = _tuple$88[1];
		x194 = new $Uint64(0, 0);
		x195 = new $Uint64(0, 0);
		_tuple$89 = bits.Sub64(x185, new $Uint64(4294967295, 4294967295), ((x$70 = (new p224Uint1(x193.$high, x193.$low)), new $Uint64(x$70.$high, x$70.$low))));
		x194 = _tuple$89[0];
		x195 = _tuple$89[1];
		x196 = new $Uint64(0, 0);
		x197 = new $Uint64(0, 0);
		_tuple$90 = bits.Sub64(x187, new $Uint64(0, 4294967295), ((x$71 = (new p224Uint1(x195.$high, x195.$low)), new $Uint64(x$71.$high, x$71.$low))));
		x196 = _tuple$90[0];
		x197 = _tuple$90[1];
		x199 = new $Uint64(0, 0);
		_tuple$91 = bits.Sub64(x189, new $Uint64(0, 0), ((x$72 = (new p224Uint1(x197.$high, x197.$low)), new $Uint64(x$72.$high, x$72.$low))));
		x199 = _tuple$91[1];
		x200 = new $Uint64(0, 0);
		p224CmovznzU64((x200$24ptr || (x200$24ptr = new ptrType(function() { return x200; }, function($v) { x200 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x190, x181);
		x201 = new $Uint64(0, 0);
		p224CmovznzU64((x201$24ptr || (x201$24ptr = new ptrType(function() { return x201; }, function($v) { x201 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x192, x183);
		x202 = new $Uint64(0, 0);
		p224CmovznzU64((x202$24ptr || (x202$24ptr = new ptrType(function() { return x202; }, function($v) { x202 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x194, x185);
		x203 = new $Uint64(0, 0);
		p224CmovznzU64((x203$24ptr || (x203$24ptr = new ptrType(function() { return x203; }, function($v) { x203 = $v; }))), (new p224Uint1(x199.$high, x199.$low)), x196, x187);
		out1.nilCheck, out1[0] = x200;
		out1.nilCheck, out1[1] = x201;
		out1.nilCheck, out1[2] = x202;
		out1.nilCheck, out1[3] = x203;
	};
	p224Add = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, arg1, arg2, out1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x1, x10, x11, x12, x13, x14, x15, x16, x18, x19, x19$24ptr, x2, x20, x20$24ptr, x21, x21$24ptr, x22, x22$24ptr, x3, x4, x5, x6, x7, x8, x9;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Add64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Add64(arg1[1], arg2[1], ((x = (new p224Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Add64(arg1[2], arg2[2], ((x$1 = (new p224Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Add64(arg1[3], arg2[3], ((x$2 = (new p224Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$4 = bits.Sub64(x1, new $Uint64(0, 1), new $Uint64(0, 0));
		x9 = _tuple$4[0];
		x10 = _tuple$4[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$5 = bits.Sub64(x3, new $Uint64(4294967295, 0), ((x$3 = (new p224Uint1(x10.$high, x10.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x11 = _tuple$5[0];
		x12 = _tuple$5[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$6 = bits.Sub64(x5, new $Uint64(4294967295, 4294967295), ((x$4 = (new p224Uint1(x12.$high, x12.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x13 = _tuple$6[0];
		x14 = _tuple$6[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Sub64(x7, new $Uint64(0, 4294967295), ((x$5 = (new p224Uint1(x14.$high, x14.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x15 = _tuple$7[0];
		x16 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		_tuple$8 = bits.Sub64(((x$6 = (new p224Uint1(x8.$high, x8.$low)), new $Uint64(x$6.$high, x$6.$low))), new $Uint64(0, 0), ((x$7 = (new p224Uint1(x16.$high, x16.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x18 = _tuple$8[1];
		x19 = new $Uint64(0, 0);
		p224CmovznzU64((x19$24ptr || (x19$24ptr = new ptrType(function() { return x19; }, function($v) { x19 = $v; }))), (new p224Uint1(x18.$high, x18.$low)), x9, x1);
		x20 = new $Uint64(0, 0);
		p224CmovznzU64((x20$24ptr || (x20$24ptr = new ptrType(function() { return x20; }, function($v) { x20 = $v; }))), (new p224Uint1(x18.$high, x18.$low)), x11, x3);
		x21 = new $Uint64(0, 0);
		p224CmovznzU64((x21$24ptr || (x21$24ptr = new ptrType(function() { return x21; }, function($v) { x21 = $v; }))), (new p224Uint1(x18.$high, x18.$low)), x13, x5);
		x22 = new $Uint64(0, 0);
		p224CmovznzU64((x22$24ptr || (x22$24ptr = new ptrType(function() { return x22; }, function($v) { x22 = $v; }))), (new p224Uint1(x18.$high, x18.$low)), x15, x7);
		out1.nilCheck, out1[0] = x19;
		out1.nilCheck, out1[1] = x20;
		out1.nilCheck, out1[2] = x21;
		out1.nilCheck, out1[3] = x22;
	};
	p224Sub = function(out1, arg1, arg2) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, arg1, arg2, out1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x1, x10, x11, x12, x13, x14, x15, x16, x2, x3, x4, x5, x6, x7, x8, x9, x9$24ptr;
		x1 = new $Uint64(0, 0);
		x2 = new $Uint64(0, 0);
		_tuple = bits.Sub64(arg1[0], arg2[0], new $Uint64(0, 0));
		x1 = _tuple[0];
		x2 = _tuple[1];
		x3 = new $Uint64(0, 0);
		x4 = new $Uint64(0, 0);
		_tuple$1 = bits.Sub64(arg1[1], arg2[1], ((x = (new p224Uint1(x2.$high, x2.$low)), new $Uint64(x.$high, x.$low))));
		x3 = _tuple$1[0];
		x4 = _tuple$1[1];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple$2 = bits.Sub64(arg1[2], arg2[2], ((x$1 = (new p224Uint1(x4.$high, x4.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x5 = _tuple$2[0];
		x6 = _tuple$2[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$3 = bits.Sub64(arg1[3], arg2[3], ((x$2 = (new p224Uint1(x6.$high, x6.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x7 = _tuple$3[0];
		x8 = _tuple$3[1];
		x9 = new $Uint64(0, 0);
		p224CmovznzU64((x9$24ptr || (x9$24ptr = new ptrType(function() { return x9; }, function($v) { x9 = $v; }))), (new p224Uint1(x8.$high, x8.$low)), new $Uint64(0, 0), new $Uint64(4294967295, 4294967295));
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x1, ((x$3 = (x$4 = (new p224Uint1(x9.$high, x9.$low)), new p224Uint1(x$4.$high & 0, (x$4.$low & 1) >>> 0)), new $Uint64(x$3.$high, x$3.$low))), new $Uint64(0, 0));
		x10 = _tuple$4[0];
		x11 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x3, new $Uint64(x9.$high & 4294967295, (x9.$low & 0) >>> 0), ((x$5 = (new p224Uint1(x11.$high, x11.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x12 = _tuple$5[0];
		x13 = _tuple$5[1];
		x14 = new $Uint64(0, 0);
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x5, x9, ((x$6 = (new p224Uint1(x13.$high, x13.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x14 = _tuple$6[0];
		x15 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(x7, new $Uint64(x9.$high & 0, (x9.$low & 4294967295) >>> 0), ((x$7 = (new p224Uint1(x15.$high, x15.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x16 = _tuple$7[0];
		out1.nilCheck, out1[0] = x10;
		out1.nilCheck, out1[1] = x12;
		out1.nilCheck, out1[2] = x14;
		out1.nilCheck, out1[3] = x16;
	};
	p224SetOne = function(out1) {
		var out1;
		out1.nilCheck, out1[0] = new $Uint64(4294967295, 0);
		out1.nilCheck, out1[1] = new $Uint64(4294967295, 4294967295);
		out1.nilCheck, out1[2] = new $Uint64(0, 0);
		out1.nilCheck, out1[3] = new $Uint64(0, 0);
	};
	p224FromMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$6, _tuple$7, _tuple$8, _tuple$9, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$6, x$7, x$8, x$9, x1, x10, x100, x101, x102, x103, x104, x105, x106, x107, x108, x11, x110, x111, x111$24ptr, x112, x112$24ptr, x113, x113$24ptr, x114, x114$24ptr, x12, x13, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x56, x57, x58, x59, x6, x60, x61, x62, x63, x64, x65, x67, x68, x69, x7, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x8, x80, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[0];
		x2 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x1, new $Uint64(4294967295, 4294967295));
		x2 = _tuple[1];
		x4 = new $Uint64(0, 0);
		x5 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x2, new $Uint64(0, 4294967295));
		x5 = _tuple$1[0];
		x4 = _tuple$1[1];
		x6 = new $Uint64(0, 0);
		x7 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x2, new $Uint64(4294967295, 4294967295));
		x7 = _tuple$2[0];
		x6 = _tuple$2[1];
		x8 = new $Uint64(0, 0);
		x9 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x2, new $Uint64(4294967295, 0));
		x9 = _tuple$3[0];
		x8 = _tuple$3[1];
		x10 = new $Uint64(0, 0);
		x11 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x9, x6, new $Uint64(0, 0));
		x10 = _tuple$4[0];
		x11 = _tuple$4[1];
		x12 = new $Uint64(0, 0);
		x13 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x7, x4, ((x = (new p224Uint1(x11.$high, x11.$low)), new $Uint64(x.$high, x.$low))));
		x12 = _tuple$5[0];
		x13 = _tuple$5[1];
		x15 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x1, x2, new $Uint64(0, 0));
		x15 = _tuple$6[1];
		x16 = new $Uint64(0, 0);
		x17 = new $Uint64(0, 0);
		_tuple$7 = bits.Add64(new $Uint64(0, 0), x8, ((x$1 = (new p224Uint1(x15.$high, x15.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x16 = _tuple$7[0];
		x17 = _tuple$7[1];
		x18 = new $Uint64(0, 0);
		x19 = new $Uint64(0, 0);
		_tuple$8 = bits.Add64(new $Uint64(0, 0), x10, ((x$2 = (new p224Uint1(x17.$high, x17.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x18 = _tuple$8[0];
		x19 = _tuple$8[1];
		x20 = new $Uint64(0, 0);
		x21 = new $Uint64(0, 0);
		_tuple$9 = bits.Add64(new $Uint64(0, 0), x12, ((x$3 = (new p224Uint1(x19.$high, x19.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x20 = _tuple$9[0];
		x21 = _tuple$9[1];
		x22 = new $Uint64(0, 0);
		x23 = new $Uint64(0, 0);
		_tuple$10 = bits.Add64(x16, arg1[1], new $Uint64(0, 0));
		x22 = _tuple$10[0];
		x23 = _tuple$10[1];
		x24 = new $Uint64(0, 0);
		x25 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x18, new $Uint64(0, 0), ((x$4 = (new p224Uint1(x23.$high, x23.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x24 = _tuple$11[0];
		x25 = _tuple$11[1];
		x26 = new $Uint64(0, 0);
		x27 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x20, new $Uint64(0, 0), ((x$5 = (new p224Uint1(x25.$high, x25.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x26 = _tuple$12[0];
		x27 = _tuple$12[1];
		x28 = new $Uint64(0, 0);
		_tuple$13 = bits.Mul64(x22, new $Uint64(4294967295, 4294967295));
		x28 = _tuple$13[1];
		x30 = new $Uint64(0, 0);
		x31 = new $Uint64(0, 0);
		_tuple$14 = bits.Mul64(x28, new $Uint64(0, 4294967295));
		x31 = _tuple$14[0];
		x30 = _tuple$14[1];
		x32 = new $Uint64(0, 0);
		x33 = new $Uint64(0, 0);
		_tuple$15 = bits.Mul64(x28, new $Uint64(4294967295, 4294967295));
		x33 = _tuple$15[0];
		x32 = _tuple$15[1];
		x34 = new $Uint64(0, 0);
		x35 = new $Uint64(0, 0);
		_tuple$16 = bits.Mul64(x28, new $Uint64(4294967295, 0));
		x35 = _tuple$16[0];
		x34 = _tuple$16[1];
		x36 = new $Uint64(0, 0);
		x37 = new $Uint64(0, 0);
		_tuple$17 = bits.Add64(x35, x32, new $Uint64(0, 0));
		x36 = _tuple$17[0];
		x37 = _tuple$17[1];
		x38 = new $Uint64(0, 0);
		x39 = new $Uint64(0, 0);
		_tuple$18 = bits.Add64(x33, x30, ((x$6 = (new p224Uint1(x37.$high, x37.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x38 = _tuple$18[0];
		x39 = _tuple$18[1];
		x41 = new $Uint64(0, 0);
		_tuple$19 = bits.Add64(x22, x28, new $Uint64(0, 0));
		x41 = _tuple$19[1];
		x42 = new $Uint64(0, 0);
		x43 = new $Uint64(0, 0);
		_tuple$20 = bits.Add64(x24, x34, ((x$7 = (new p224Uint1(x41.$high, x41.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x42 = _tuple$20[0];
		x43 = _tuple$20[1];
		x44 = new $Uint64(0, 0);
		x45 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x26, x36, ((x$8 = (new p224Uint1(x43.$high, x43.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x44 = _tuple$21[0];
		x45 = _tuple$21[1];
		x46 = new $Uint64(0, 0);
		x47 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64((x$9 = ((x$10 = (new p224Uint1(x27.$high, x27.$low)), new $Uint64(x$10.$high, x$10.$low))), x$11 = (x$12 = ((x$13 = (new p224Uint1(x21.$high, x21.$low)), new $Uint64(x$13.$high, x$13.$low))), x$14 = (x$15 = ((x$16 = (new p224Uint1(x13.$high, x13.$low)), new $Uint64(x$16.$high, x$16.$low))), new $Uint64(x$15.$high + x5.$high, x$15.$low + x5.$low)), new $Uint64(x$12.$high + x$14.$high, x$12.$low + x$14.$low)), new $Uint64(x$9.$high + x$11.$high, x$9.$low + x$11.$low)), x38, ((x$17 = (new p224Uint1(x45.$high, x45.$low)), new $Uint64(x$17.$high, x$17.$low))));
		x46 = _tuple$22[0];
		x47 = _tuple$22[1];
		x48 = new $Uint64(0, 0);
		x49 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x42, arg1[2], new $Uint64(0, 0));
		x48 = _tuple$23[0];
		x49 = _tuple$23[1];
		x50 = new $Uint64(0, 0);
		x51 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x44, new $Uint64(0, 0), ((x$18 = (new p224Uint1(x49.$high, x49.$low)), new $Uint64(x$18.$high, x$18.$low))));
		x50 = _tuple$24[0];
		x51 = _tuple$24[1];
		x52 = new $Uint64(0, 0);
		x53 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x46, new $Uint64(0, 0), ((x$19 = (new p224Uint1(x51.$high, x51.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x52 = _tuple$25[0];
		x53 = _tuple$25[1];
		x54 = new $Uint64(0, 0);
		_tuple$26 = bits.Mul64(x48, new $Uint64(4294967295, 4294967295));
		x54 = _tuple$26[1];
		x56 = new $Uint64(0, 0);
		x57 = new $Uint64(0, 0);
		_tuple$27 = bits.Mul64(x54, new $Uint64(0, 4294967295));
		x57 = _tuple$27[0];
		x56 = _tuple$27[1];
		x58 = new $Uint64(0, 0);
		x59 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x54, new $Uint64(4294967295, 4294967295));
		x59 = _tuple$28[0];
		x58 = _tuple$28[1];
		x60 = new $Uint64(0, 0);
		x61 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x54, new $Uint64(4294967295, 0));
		x61 = _tuple$29[0];
		x60 = _tuple$29[1];
		x62 = new $Uint64(0, 0);
		x63 = new $Uint64(0, 0);
		_tuple$30 = bits.Add64(x61, x58, new $Uint64(0, 0));
		x62 = _tuple$30[0];
		x63 = _tuple$30[1];
		x64 = new $Uint64(0, 0);
		x65 = new $Uint64(0, 0);
		_tuple$31 = bits.Add64(x59, x56, ((x$20 = (new p224Uint1(x63.$high, x63.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x64 = _tuple$31[0];
		x65 = _tuple$31[1];
		x67 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x48, x54, new $Uint64(0, 0));
		x67 = _tuple$32[1];
		x68 = new $Uint64(0, 0);
		x69 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x50, x60, ((x$21 = (new p224Uint1(x67.$high, x67.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x68 = _tuple$33[0];
		x69 = _tuple$33[1];
		x70 = new $Uint64(0, 0);
		x71 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x52, x62, ((x$22 = (new p224Uint1(x69.$high, x69.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x70 = _tuple$34[0];
		x71 = _tuple$34[1];
		x72 = new $Uint64(0, 0);
		x73 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64((x$23 = ((x$24 = (new p224Uint1(x53.$high, x53.$low)), new $Uint64(x$24.$high, x$24.$low))), x$25 = (x$26 = ((x$27 = (new p224Uint1(x47.$high, x47.$low)), new $Uint64(x$27.$high, x$27.$low))), x$28 = (x$29 = ((x$30 = (new p224Uint1(x39.$high, x39.$low)), new $Uint64(x$30.$high, x$30.$low))), new $Uint64(x$29.$high + x31.$high, x$29.$low + x31.$low)), new $Uint64(x$26.$high + x$28.$high, x$26.$low + x$28.$low)), new $Uint64(x$23.$high + x$25.$high, x$23.$low + x$25.$low)), x64, ((x$31 = (new p224Uint1(x71.$high, x71.$low)), new $Uint64(x$31.$high, x$31.$low))));
		x72 = _tuple$35[0];
		x73 = _tuple$35[1];
		x74 = new $Uint64(0, 0);
		x75 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x68, arg1[3], new $Uint64(0, 0));
		x74 = _tuple$36[0];
		x75 = _tuple$36[1];
		x76 = new $Uint64(0, 0);
		x77 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x70, new $Uint64(0, 0), ((x$32 = (new p224Uint1(x75.$high, x75.$low)), new $Uint64(x$32.$high, x$32.$low))));
		x76 = _tuple$37[0];
		x77 = _tuple$37[1];
		x78 = new $Uint64(0, 0);
		x79 = new $Uint64(0, 0);
		_tuple$38 = bits.Add64(x72, new $Uint64(0, 0), ((x$33 = (new p224Uint1(x77.$high, x77.$low)), new $Uint64(x$33.$high, x$33.$low))));
		x78 = _tuple$38[0];
		x79 = _tuple$38[1];
		x80 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x74, new $Uint64(4294967295, 4294967295));
		x80 = _tuple$39[1];
		x82 = new $Uint64(0, 0);
		x83 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x80, new $Uint64(0, 4294967295));
		x83 = _tuple$40[0];
		x82 = _tuple$40[1];
		x84 = new $Uint64(0, 0);
		x85 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x80, new $Uint64(4294967295, 4294967295));
		x85 = _tuple$41[0];
		x84 = _tuple$41[1];
		x86 = new $Uint64(0, 0);
		x87 = new $Uint64(0, 0);
		_tuple$42 = bits.Mul64(x80, new $Uint64(4294967295, 0));
		x87 = _tuple$42[0];
		x86 = _tuple$42[1];
		x88 = new $Uint64(0, 0);
		x89 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x87, x84, new $Uint64(0, 0));
		x88 = _tuple$43[0];
		x89 = _tuple$43[1];
		x90 = new $Uint64(0, 0);
		x91 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x85, x82, ((x$34 = (new p224Uint1(x89.$high, x89.$low)), new $Uint64(x$34.$high, x$34.$low))));
		x90 = _tuple$44[0];
		x91 = _tuple$44[1];
		x93 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x74, x80, new $Uint64(0, 0));
		x93 = _tuple$45[1];
		x94 = new $Uint64(0, 0);
		x95 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x76, x86, ((x$35 = (new p224Uint1(x93.$high, x93.$low)), new $Uint64(x$35.$high, x$35.$low))));
		x94 = _tuple$46[0];
		x95 = _tuple$46[1];
		x96 = new $Uint64(0, 0);
		x97 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x78, x88, ((x$36 = (new p224Uint1(x95.$high, x95.$low)), new $Uint64(x$36.$high, x$36.$low))));
		x96 = _tuple$47[0];
		x97 = _tuple$47[1];
		x98 = new $Uint64(0, 0);
		x99 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64((x$37 = ((x$38 = (new p224Uint1(x79.$high, x79.$low)), new $Uint64(x$38.$high, x$38.$low))), x$39 = (x$40 = ((x$41 = (new p224Uint1(x73.$high, x73.$low)), new $Uint64(x$41.$high, x$41.$low))), x$42 = (x$43 = ((x$44 = (new p224Uint1(x65.$high, x65.$low)), new $Uint64(x$44.$high, x$44.$low))), new $Uint64(x$43.$high + x57.$high, x$43.$low + x57.$low)), new $Uint64(x$40.$high + x$42.$high, x$40.$low + x$42.$low)), new $Uint64(x$37.$high + x$39.$high, x$37.$low + x$39.$low)), x90, ((x$45 = (new p224Uint1(x97.$high, x97.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x98 = _tuple$48[0];
		x99 = _tuple$48[1];
		x100 = (x$46 = ((x$47 = (new p224Uint1(x99.$high, x99.$low)), new $Uint64(x$47.$high, x$47.$low))), x$48 = (x$49 = ((x$50 = (new p224Uint1(x91.$high, x91.$low)), new $Uint64(x$50.$high, x$50.$low))), new $Uint64(x$49.$high + x83.$high, x$49.$low + x83.$low)), new $Uint64(x$46.$high + x$48.$high, x$46.$low + x$48.$low));
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$49 = bits.Sub64(x94, new $Uint64(0, 1), new $Uint64(0, 0));
		x101 = _tuple$49[0];
		x102 = _tuple$49[1];
		x103 = new $Uint64(0, 0);
		x104 = new $Uint64(0, 0);
		_tuple$50 = bits.Sub64(x96, new $Uint64(4294967295, 0), ((x$51 = (new p224Uint1(x102.$high, x102.$low)), new $Uint64(x$51.$high, x$51.$low))));
		x103 = _tuple$50[0];
		x104 = _tuple$50[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$51 = bits.Sub64(x98, new $Uint64(4294967295, 4294967295), ((x$52 = (new p224Uint1(x104.$high, x104.$low)), new $Uint64(x$52.$high, x$52.$low))));
		x105 = _tuple$51[0];
		x106 = _tuple$51[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$52 = bits.Sub64(x100, new $Uint64(0, 4294967295), ((x$53 = (new p224Uint1(x106.$high, x106.$low)), new $Uint64(x$53.$high, x$53.$low))));
		x107 = _tuple$52[0];
		x108 = _tuple$52[1];
		x110 = new $Uint64(0, 0);
		_tuple$53 = bits.Sub64(new $Uint64(0, 0), new $Uint64(0, 0), ((x$54 = (new p224Uint1(x108.$high, x108.$low)), new $Uint64(x$54.$high, x$54.$low))));
		x110 = _tuple$53[1];
		x111 = new $Uint64(0, 0);
		p224CmovznzU64((x111$24ptr || (x111$24ptr = new ptrType(function() { return x111; }, function($v) { x111 = $v; }))), (new p224Uint1(x110.$high, x110.$low)), x101, x94);
		x112 = new $Uint64(0, 0);
		p224CmovznzU64((x112$24ptr || (x112$24ptr = new ptrType(function() { return x112; }, function($v) { x112 = $v; }))), (new p224Uint1(x110.$high, x110.$low)), x103, x96);
		x113 = new $Uint64(0, 0);
		p224CmovznzU64((x113$24ptr || (x113$24ptr = new ptrType(function() { return x113; }, function($v) { x113 = $v; }))), (new p224Uint1(x110.$high, x110.$low)), x105, x98);
		x114 = new $Uint64(0, 0);
		p224CmovznzU64((x114$24ptr || (x114$24ptr = new ptrType(function() { return x114; }, function($v) { x114 = $v; }))), (new p224Uint1(x110.$high, x110.$low)), x107, x100);
		out1.nilCheck, out1[0] = x111;
		out1.nilCheck, out1[1] = x112;
		out1.nilCheck, out1[2] = x113;
		out1.nilCheck, out1[3] = x114;
	};
	p224ToMontgomery = function(out1, arg1) {
		var _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$33, _tuple$34, _tuple$35, _tuple$36, _tuple$37, _tuple$38, _tuple$39, _tuple$4, _tuple$40, _tuple$41, _tuple$42, _tuple$43, _tuple$44, _tuple$45, _tuple$46, _tuple$47, _tuple$48, _tuple$49, _tuple$5, _tuple$50, _tuple$51, _tuple$52, _tuple$53, _tuple$54, _tuple$55, _tuple$56, _tuple$57, _tuple$58, _tuple$59, _tuple$6, _tuple$60, _tuple$61, _tuple$62, _tuple$63, _tuple$64, _tuple$65, _tuple$66, _tuple$67, _tuple$68, _tuple$69, _tuple$7, _tuple$70, _tuple$71, _tuple$72, _tuple$73, _tuple$74, _tuple$75, _tuple$76, _tuple$77, _tuple$78, _tuple$79, _tuple$8, _tuple$80, _tuple$81, _tuple$82, _tuple$83, _tuple$84, _tuple$9, arg1, out1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$9, x1, x10, x100, x101, x102, x103, x105, x106, x107, x108, x109, x11, x110, x111, x112, x113, x114, x116, x117, x118, x119, x12, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129, x13, x130, x131, x132, x133, x134, x135, x136, x137, x138, x139, x14, x140, x141, x142, x143, x144, x145, x147, x148, x149, x15, x150, x151, x152, x153, x154, x155, x156, x158, x159, x16, x160, x161, x162, x163, x164, x165, x166, x167, x168, x169, x17, x170, x171, x172, x173, x175, x176, x176$24ptr, x177, x177$24ptr, x178, x178$24ptr, x179, x179$24ptr, x18, x19, x2, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x6, x60, x61, x63, x64, x65, x66, x67, x68, x69, x7, x70, x71, x72, x74, x75, x76, x77, x78, x79, x8, x80, x81, x82, x83, x84, x85, x86, x87, x88, x89, x9, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99;
		x1 = arg1[1];
		x2 = arg1[2];
		x3 = arg1[3];
		x4 = arg1[0];
		x5 = new $Uint64(0, 0);
		x6 = new $Uint64(0, 0);
		_tuple = bits.Mul64(x4, new $Uint64(0, 4294967295));
		x6 = _tuple[0];
		x5 = _tuple[1];
		x7 = new $Uint64(0, 0);
		x8 = new $Uint64(0, 0);
		_tuple$1 = bits.Mul64(x4, new $Uint64(4294967294, 0));
		x8 = _tuple$1[0];
		x7 = _tuple$1[1];
		x9 = new $Uint64(0, 0);
		x10 = new $Uint64(0, 0);
		_tuple$2 = bits.Mul64(x4, new $Uint64(4294967295, 0));
		x10 = _tuple$2[0];
		x9 = _tuple$2[1];
		x11 = new $Uint64(0, 0);
		x12 = new $Uint64(0, 0);
		_tuple$3 = bits.Mul64(x4, new $Uint64(4294967295, 1));
		x12 = _tuple$3[0];
		x11 = _tuple$3[1];
		x13 = new $Uint64(0, 0);
		x14 = new $Uint64(0, 0);
		_tuple$4 = bits.Add64(x12, x9, new $Uint64(0, 0));
		x13 = _tuple$4[0];
		x14 = _tuple$4[1];
		x15 = new $Uint64(0, 0);
		x16 = new $Uint64(0, 0);
		_tuple$5 = bits.Add64(x10, x7, ((x = (new p224Uint1(x14.$high, x14.$low)), new $Uint64(x.$high, x.$low))));
		x15 = _tuple$5[0];
		x16 = _tuple$5[1];
		x17 = new $Uint64(0, 0);
		x18 = new $Uint64(0, 0);
		_tuple$6 = bits.Add64(x8, x5, ((x$1 = (new p224Uint1(x16.$high, x16.$low)), new $Uint64(x$1.$high, x$1.$low))));
		x17 = _tuple$6[0];
		x18 = _tuple$6[1];
		x19 = new $Uint64(0, 0);
		_tuple$7 = bits.Mul64(x11, new $Uint64(4294967295, 4294967295));
		x19 = _tuple$7[1];
		x21 = new $Uint64(0, 0);
		x22 = new $Uint64(0, 0);
		_tuple$8 = bits.Mul64(x19, new $Uint64(0, 4294967295));
		x22 = _tuple$8[0];
		x21 = _tuple$8[1];
		x23 = new $Uint64(0, 0);
		x24 = new $Uint64(0, 0);
		_tuple$9 = bits.Mul64(x19, new $Uint64(4294967295, 4294967295));
		x24 = _tuple$9[0];
		x23 = _tuple$9[1];
		x25 = new $Uint64(0, 0);
		x26 = new $Uint64(0, 0);
		_tuple$10 = bits.Mul64(x19, new $Uint64(4294967295, 0));
		x26 = _tuple$10[0];
		x25 = _tuple$10[1];
		x27 = new $Uint64(0, 0);
		x28 = new $Uint64(0, 0);
		_tuple$11 = bits.Add64(x26, x23, new $Uint64(0, 0));
		x27 = _tuple$11[0];
		x28 = _tuple$11[1];
		x29 = new $Uint64(0, 0);
		x30 = new $Uint64(0, 0);
		_tuple$12 = bits.Add64(x24, x21, ((x$2 = (new p224Uint1(x28.$high, x28.$low)), new $Uint64(x$2.$high, x$2.$low))));
		x29 = _tuple$12[0];
		x30 = _tuple$12[1];
		x32 = new $Uint64(0, 0);
		_tuple$13 = bits.Add64(x11, x19, new $Uint64(0, 0));
		x32 = _tuple$13[1];
		x33 = new $Uint64(0, 0);
		x34 = new $Uint64(0, 0);
		_tuple$14 = bits.Add64(x13, x25, ((x$3 = (new p224Uint1(x32.$high, x32.$low)), new $Uint64(x$3.$high, x$3.$low))));
		x33 = _tuple$14[0];
		x34 = _tuple$14[1];
		x35 = new $Uint64(0, 0);
		x36 = new $Uint64(0, 0);
		_tuple$15 = bits.Add64(x15, x27, ((x$4 = (new p224Uint1(x34.$high, x34.$low)), new $Uint64(x$4.$high, x$4.$low))));
		x35 = _tuple$15[0];
		x36 = _tuple$15[1];
		x37 = new $Uint64(0, 0);
		x38 = new $Uint64(0, 0);
		_tuple$16 = bits.Add64(x17, x29, ((x$5 = (new p224Uint1(x36.$high, x36.$low)), new $Uint64(x$5.$high, x$5.$low))));
		x37 = _tuple$16[0];
		x38 = _tuple$16[1];
		x39 = new $Uint64(0, 0);
		x40 = new $Uint64(0, 0);
		_tuple$17 = bits.Mul64(x1, new $Uint64(0, 4294967295));
		x40 = _tuple$17[0];
		x39 = _tuple$17[1];
		x41 = new $Uint64(0, 0);
		x42 = new $Uint64(0, 0);
		_tuple$18 = bits.Mul64(x1, new $Uint64(4294967294, 0));
		x42 = _tuple$18[0];
		x41 = _tuple$18[1];
		x43 = new $Uint64(0, 0);
		x44 = new $Uint64(0, 0);
		_tuple$19 = bits.Mul64(x1, new $Uint64(4294967295, 0));
		x44 = _tuple$19[0];
		x43 = _tuple$19[1];
		x45 = new $Uint64(0, 0);
		x46 = new $Uint64(0, 0);
		_tuple$20 = bits.Mul64(x1, new $Uint64(4294967295, 1));
		x46 = _tuple$20[0];
		x45 = _tuple$20[1];
		x47 = new $Uint64(0, 0);
		x48 = new $Uint64(0, 0);
		_tuple$21 = bits.Add64(x46, x43, new $Uint64(0, 0));
		x47 = _tuple$21[0];
		x48 = _tuple$21[1];
		x49 = new $Uint64(0, 0);
		x50 = new $Uint64(0, 0);
		_tuple$22 = bits.Add64(x44, x41, ((x$6 = (new p224Uint1(x48.$high, x48.$low)), new $Uint64(x$6.$high, x$6.$low))));
		x49 = _tuple$22[0];
		x50 = _tuple$22[1];
		x51 = new $Uint64(0, 0);
		x52 = new $Uint64(0, 0);
		_tuple$23 = bits.Add64(x42, x39, ((x$7 = (new p224Uint1(x50.$high, x50.$low)), new $Uint64(x$7.$high, x$7.$low))));
		x51 = _tuple$23[0];
		x52 = _tuple$23[1];
		x53 = new $Uint64(0, 0);
		x54 = new $Uint64(0, 0);
		_tuple$24 = bits.Add64(x33, x45, new $Uint64(0, 0));
		x53 = _tuple$24[0];
		x54 = _tuple$24[1];
		x55 = new $Uint64(0, 0);
		x56 = new $Uint64(0, 0);
		_tuple$25 = bits.Add64(x35, x47, ((x$8 = (new p224Uint1(x54.$high, x54.$low)), new $Uint64(x$8.$high, x$8.$low))));
		x55 = _tuple$25[0];
		x56 = _tuple$25[1];
		x57 = new $Uint64(0, 0);
		x58 = new $Uint64(0, 0);
		_tuple$26 = bits.Add64(x37, x49, ((x$9 = (new p224Uint1(x56.$high, x56.$low)), new $Uint64(x$9.$high, x$9.$low))));
		x57 = _tuple$26[0];
		x58 = _tuple$26[1];
		x59 = new $Uint64(0, 0);
		x60 = new $Uint64(0, 0);
		_tuple$27 = bits.Add64((x$10 = (x$11 = ((x$12 = (new p224Uint1(x38.$high, x38.$low)), new $Uint64(x$12.$high, x$12.$low))), x$13 = (x$14 = ((x$15 = (new p224Uint1(x18.$high, x18.$low)), new $Uint64(x$15.$high, x$15.$low))), new $Uint64(x$14.$high + x6.$high, x$14.$low + x6.$low)), new $Uint64(x$11.$high + x$13.$high, x$11.$low + x$13.$low)), x$16 = (x$17 = ((x$18 = (new p224Uint1(x30.$high, x30.$low)), new $Uint64(x$18.$high, x$18.$low))), new $Uint64(x$17.$high + x22.$high, x$17.$low + x22.$low)), new $Uint64(x$10.$high + x$16.$high, x$10.$low + x$16.$low)), x51, ((x$19 = (new p224Uint1(x58.$high, x58.$low)), new $Uint64(x$19.$high, x$19.$low))));
		x59 = _tuple$27[0];
		x60 = _tuple$27[1];
		x61 = new $Uint64(0, 0);
		_tuple$28 = bits.Mul64(x53, new $Uint64(4294967295, 4294967295));
		x61 = _tuple$28[1];
		x63 = new $Uint64(0, 0);
		x64 = new $Uint64(0, 0);
		_tuple$29 = bits.Mul64(x61, new $Uint64(0, 4294967295));
		x64 = _tuple$29[0];
		x63 = _tuple$29[1];
		x65 = new $Uint64(0, 0);
		x66 = new $Uint64(0, 0);
		_tuple$30 = bits.Mul64(x61, new $Uint64(4294967295, 4294967295));
		x66 = _tuple$30[0];
		x65 = _tuple$30[1];
		x67 = new $Uint64(0, 0);
		x68 = new $Uint64(0, 0);
		_tuple$31 = bits.Mul64(x61, new $Uint64(4294967295, 0));
		x68 = _tuple$31[0];
		x67 = _tuple$31[1];
		x69 = new $Uint64(0, 0);
		x70 = new $Uint64(0, 0);
		_tuple$32 = bits.Add64(x68, x65, new $Uint64(0, 0));
		x69 = _tuple$32[0];
		x70 = _tuple$32[1];
		x71 = new $Uint64(0, 0);
		x72 = new $Uint64(0, 0);
		_tuple$33 = bits.Add64(x66, x63, ((x$20 = (new p224Uint1(x70.$high, x70.$low)), new $Uint64(x$20.$high, x$20.$low))));
		x71 = _tuple$33[0];
		x72 = _tuple$33[1];
		x74 = new $Uint64(0, 0);
		_tuple$34 = bits.Add64(x53, x61, new $Uint64(0, 0));
		x74 = _tuple$34[1];
		x75 = new $Uint64(0, 0);
		x76 = new $Uint64(0, 0);
		_tuple$35 = bits.Add64(x55, x67, ((x$21 = (new p224Uint1(x74.$high, x74.$low)), new $Uint64(x$21.$high, x$21.$low))));
		x75 = _tuple$35[0];
		x76 = _tuple$35[1];
		x77 = new $Uint64(0, 0);
		x78 = new $Uint64(0, 0);
		_tuple$36 = bits.Add64(x57, x69, ((x$22 = (new p224Uint1(x76.$high, x76.$low)), new $Uint64(x$22.$high, x$22.$low))));
		x77 = _tuple$36[0];
		x78 = _tuple$36[1];
		x79 = new $Uint64(0, 0);
		x80 = new $Uint64(0, 0);
		_tuple$37 = bits.Add64(x59, x71, ((x$23 = (new p224Uint1(x78.$high, x78.$low)), new $Uint64(x$23.$high, x$23.$low))));
		x79 = _tuple$37[0];
		x80 = _tuple$37[1];
		x81 = new $Uint64(0, 0);
		x82 = new $Uint64(0, 0);
		_tuple$38 = bits.Mul64(x2, new $Uint64(0, 4294967295));
		x82 = _tuple$38[0];
		x81 = _tuple$38[1];
		x83 = new $Uint64(0, 0);
		x84 = new $Uint64(0, 0);
		_tuple$39 = bits.Mul64(x2, new $Uint64(4294967294, 0));
		x84 = _tuple$39[0];
		x83 = _tuple$39[1];
		x85 = new $Uint64(0, 0);
		x86 = new $Uint64(0, 0);
		_tuple$40 = bits.Mul64(x2, new $Uint64(4294967295, 0));
		x86 = _tuple$40[0];
		x85 = _tuple$40[1];
		x87 = new $Uint64(0, 0);
		x88 = new $Uint64(0, 0);
		_tuple$41 = bits.Mul64(x2, new $Uint64(4294967295, 1));
		x88 = _tuple$41[0];
		x87 = _tuple$41[1];
		x89 = new $Uint64(0, 0);
		x90 = new $Uint64(0, 0);
		_tuple$42 = bits.Add64(x88, x85, new $Uint64(0, 0));
		x89 = _tuple$42[0];
		x90 = _tuple$42[1];
		x91 = new $Uint64(0, 0);
		x92 = new $Uint64(0, 0);
		_tuple$43 = bits.Add64(x86, x83, ((x$24 = (new p224Uint1(x90.$high, x90.$low)), new $Uint64(x$24.$high, x$24.$low))));
		x91 = _tuple$43[0];
		x92 = _tuple$43[1];
		x93 = new $Uint64(0, 0);
		x94 = new $Uint64(0, 0);
		_tuple$44 = bits.Add64(x84, x81, ((x$25 = (new p224Uint1(x92.$high, x92.$low)), new $Uint64(x$25.$high, x$25.$low))));
		x93 = _tuple$44[0];
		x94 = _tuple$44[1];
		x95 = new $Uint64(0, 0);
		x96 = new $Uint64(0, 0);
		_tuple$45 = bits.Add64(x75, x87, new $Uint64(0, 0));
		x95 = _tuple$45[0];
		x96 = _tuple$45[1];
		x97 = new $Uint64(0, 0);
		x98 = new $Uint64(0, 0);
		_tuple$46 = bits.Add64(x77, x89, ((x$26 = (new p224Uint1(x96.$high, x96.$low)), new $Uint64(x$26.$high, x$26.$low))));
		x97 = _tuple$46[0];
		x98 = _tuple$46[1];
		x99 = new $Uint64(0, 0);
		x100 = new $Uint64(0, 0);
		_tuple$47 = bits.Add64(x79, x91, ((x$27 = (new p224Uint1(x98.$high, x98.$low)), new $Uint64(x$27.$high, x$27.$low))));
		x99 = _tuple$47[0];
		x100 = _tuple$47[1];
		x101 = new $Uint64(0, 0);
		x102 = new $Uint64(0, 0);
		_tuple$48 = bits.Add64((x$28 = (x$29 = ((x$30 = (new p224Uint1(x80.$high, x80.$low)), new $Uint64(x$30.$high, x$30.$low))), x$31 = (x$32 = ((x$33 = (new p224Uint1(x60.$high, x60.$low)), new $Uint64(x$33.$high, x$33.$low))), x$34 = (x$35 = ((x$36 = (new p224Uint1(x52.$high, x52.$low)), new $Uint64(x$36.$high, x$36.$low))), new $Uint64(x$35.$high + x40.$high, x$35.$low + x40.$low)), new $Uint64(x$32.$high + x$34.$high, x$32.$low + x$34.$low)), new $Uint64(x$29.$high + x$31.$high, x$29.$low + x$31.$low)), x$37 = (x$38 = ((x$39 = (new p224Uint1(x72.$high, x72.$low)), new $Uint64(x$39.$high, x$39.$low))), new $Uint64(x$38.$high + x64.$high, x$38.$low + x64.$low)), new $Uint64(x$28.$high + x$37.$high, x$28.$low + x$37.$low)), x93, ((x$40 = (new p224Uint1(x100.$high, x100.$low)), new $Uint64(x$40.$high, x$40.$low))));
		x101 = _tuple$48[0];
		x102 = _tuple$48[1];
		x103 = new $Uint64(0, 0);
		_tuple$49 = bits.Mul64(x95, new $Uint64(4294967295, 4294967295));
		x103 = _tuple$49[1];
		x105 = new $Uint64(0, 0);
		x106 = new $Uint64(0, 0);
		_tuple$50 = bits.Mul64(x103, new $Uint64(0, 4294967295));
		x106 = _tuple$50[0];
		x105 = _tuple$50[1];
		x107 = new $Uint64(0, 0);
		x108 = new $Uint64(0, 0);
		_tuple$51 = bits.Mul64(x103, new $Uint64(4294967295, 4294967295));
		x108 = _tuple$51[0];
		x107 = _tuple$51[1];
		x109 = new $Uint64(0, 0);
		x110 = new $Uint64(0, 0);
		_tuple$52 = bits.Mul64(x103, new $Uint64(4294967295, 0));
		x110 = _tuple$52[0];
		x109 = _tuple$52[1];
		x111 = new $Uint64(0, 0);
		x112 = new $Uint64(0, 0);
		_tuple$53 = bits.Add64(x110, x107, new $Uint64(0, 0));
		x111 = _tuple$53[0];
		x112 = _tuple$53[1];
		x113 = new $Uint64(0, 0);
		x114 = new $Uint64(0, 0);
		_tuple$54 = bits.Add64(x108, x105, ((x$41 = (new p224Uint1(x112.$high, x112.$low)), new $Uint64(x$41.$high, x$41.$low))));
		x113 = _tuple$54[0];
		x114 = _tuple$54[1];
		x116 = new $Uint64(0, 0);
		_tuple$55 = bits.Add64(x95, x103, new $Uint64(0, 0));
		x116 = _tuple$55[1];
		x117 = new $Uint64(0, 0);
		x118 = new $Uint64(0, 0);
		_tuple$56 = bits.Add64(x97, x109, ((x$42 = (new p224Uint1(x116.$high, x116.$low)), new $Uint64(x$42.$high, x$42.$low))));
		x117 = _tuple$56[0];
		x118 = _tuple$56[1];
		x119 = new $Uint64(0, 0);
		x120 = new $Uint64(0, 0);
		_tuple$57 = bits.Add64(x99, x111, ((x$43 = (new p224Uint1(x118.$high, x118.$low)), new $Uint64(x$43.$high, x$43.$low))));
		x119 = _tuple$57[0];
		x120 = _tuple$57[1];
		x121 = new $Uint64(0, 0);
		x122 = new $Uint64(0, 0);
		_tuple$58 = bits.Add64(x101, x113, ((x$44 = (new p224Uint1(x120.$high, x120.$low)), new $Uint64(x$44.$high, x$44.$low))));
		x121 = _tuple$58[0];
		x122 = _tuple$58[1];
		x123 = new $Uint64(0, 0);
		x124 = new $Uint64(0, 0);
		_tuple$59 = bits.Mul64(x3, new $Uint64(0, 4294967295));
		x124 = _tuple$59[0];
		x123 = _tuple$59[1];
		x125 = new $Uint64(0, 0);
		x126 = new $Uint64(0, 0);
		_tuple$60 = bits.Mul64(x3, new $Uint64(4294967294, 0));
		x126 = _tuple$60[0];
		x125 = _tuple$60[1];
		x127 = new $Uint64(0, 0);
		x128 = new $Uint64(0, 0);
		_tuple$61 = bits.Mul64(x3, new $Uint64(4294967295, 0));
		x128 = _tuple$61[0];
		x127 = _tuple$61[1];
		x129 = new $Uint64(0, 0);
		x130 = new $Uint64(0, 0);
		_tuple$62 = bits.Mul64(x3, new $Uint64(4294967295, 1));
		x130 = _tuple$62[0];
		x129 = _tuple$62[1];
		x131 = new $Uint64(0, 0);
		x132 = new $Uint64(0, 0);
		_tuple$63 = bits.Add64(x130, x127, new $Uint64(0, 0));
		x131 = _tuple$63[0];
		x132 = _tuple$63[1];
		x133 = new $Uint64(0, 0);
		x134 = new $Uint64(0, 0);
		_tuple$64 = bits.Add64(x128, x125, ((x$45 = (new p224Uint1(x132.$high, x132.$low)), new $Uint64(x$45.$high, x$45.$low))));
		x133 = _tuple$64[0];
		x134 = _tuple$64[1];
		x135 = new $Uint64(0, 0);
		x136 = new $Uint64(0, 0);
		_tuple$65 = bits.Add64(x126, x123, ((x$46 = (new p224Uint1(x134.$high, x134.$low)), new $Uint64(x$46.$high, x$46.$low))));
		x135 = _tuple$65[0];
		x136 = _tuple$65[1];
		x137 = new $Uint64(0, 0);
		x138 = new $Uint64(0, 0);
		_tuple$66 = bits.Add64(x117, x129, new $Uint64(0, 0));
		x137 = _tuple$66[0];
		x138 = _tuple$66[1];
		x139 = new $Uint64(0, 0);
		x140 = new $Uint64(0, 0);
		_tuple$67 = bits.Add64(x119, x131, ((x$47 = (new p224Uint1(x138.$high, x138.$low)), new $Uint64(x$47.$high, x$47.$low))));
		x139 = _tuple$67[0];
		x140 = _tuple$67[1];
		x141 = new $Uint64(0, 0);
		x142 = new $Uint64(0, 0);
		_tuple$68 = bits.Add64(x121, x133, ((x$48 = (new p224Uint1(x140.$high, x140.$low)), new $Uint64(x$48.$high, x$48.$low))));
		x141 = _tuple$68[0];
		x142 = _tuple$68[1];
		x143 = new $Uint64(0, 0);
		x144 = new $Uint64(0, 0);
		_tuple$69 = bits.Add64((x$49 = (x$50 = ((x$51 = (new p224Uint1(x122.$high, x122.$low)), new $Uint64(x$51.$high, x$51.$low))), x$52 = (x$53 = ((x$54 = (new p224Uint1(x102.$high, x102.$low)), new $Uint64(x$54.$high, x$54.$low))), x$55 = (x$56 = ((x$57 = (new p224Uint1(x94.$high, x94.$low)), new $Uint64(x$57.$high, x$57.$low))), new $Uint64(x$56.$high + x82.$high, x$56.$low + x82.$low)), new $Uint64(x$53.$high + x$55.$high, x$53.$low + x$55.$low)), new $Uint64(x$50.$high + x$52.$high, x$50.$low + x$52.$low)), x$58 = (x$59 = ((x$60 = (new p224Uint1(x114.$high, x114.$low)), new $Uint64(x$60.$high, x$60.$low))), new $Uint64(x$59.$high + x106.$high, x$59.$low + x106.$low)), new $Uint64(x$49.$high + x$58.$high, x$49.$low + x$58.$low)), x135, ((x$61 = (new p224Uint1(x142.$high, x142.$low)), new $Uint64(x$61.$high, x$61.$low))));
		x143 = _tuple$69[0];
		x144 = _tuple$69[1];
		x145 = new $Uint64(0, 0);
		_tuple$70 = bits.Mul64(x137, new $Uint64(4294967295, 4294967295));
		x145 = _tuple$70[1];
		x147 = new $Uint64(0, 0);
		x148 = new $Uint64(0, 0);
		_tuple$71 = bits.Mul64(x145, new $Uint64(0, 4294967295));
		x148 = _tuple$71[0];
		x147 = _tuple$71[1];
		x149 = new $Uint64(0, 0);
		x150 = new $Uint64(0, 0);
		_tuple$72 = bits.Mul64(x145, new $Uint64(4294967295, 4294967295));
		x150 = _tuple$72[0];
		x149 = _tuple$72[1];
		x151 = new $Uint64(0, 0);
		x152 = new $Uint64(0, 0);
		_tuple$73 = bits.Mul64(x145, new $Uint64(4294967295, 0));
		x152 = _tuple$73[0];
		x151 = _tuple$73[1];
		x153 = new $Uint64(0, 0);
		x154 = new $Uint64(0, 0);
		_tuple$74 = bits.Add64(x152, x149, new $Uint64(0, 0));
		x153 = _tuple$74[0];
		x154 = _tuple$74[1];
		x155 = new $Uint64(0, 0);
		x156 = new $Uint64(0, 0);
		_tuple$75 = bits.Add64(x150, x147, ((x$62 = (new p224Uint1(x154.$high, x154.$low)), new $Uint64(x$62.$high, x$62.$low))));
		x155 = _tuple$75[0];
		x156 = _tuple$75[1];
		x158 = new $Uint64(0, 0);
		_tuple$76 = bits.Add64(x137, x145, new $Uint64(0, 0));
		x158 = _tuple$76[1];
		x159 = new $Uint64(0, 0);
		x160 = new $Uint64(0, 0);
		_tuple$77 = bits.Add64(x139, x151, ((x$63 = (new p224Uint1(x158.$high, x158.$low)), new $Uint64(x$63.$high, x$63.$low))));
		x159 = _tuple$77[0];
		x160 = _tuple$77[1];
		x161 = new $Uint64(0, 0);
		x162 = new $Uint64(0, 0);
		_tuple$78 = bits.Add64(x141, x153, ((x$64 = (new p224Uint1(x160.$high, x160.$low)), new $Uint64(x$64.$high, x$64.$low))));
		x161 = _tuple$78[0];
		x162 = _tuple$78[1];
		x163 = new $Uint64(0, 0);
		x164 = new $Uint64(0, 0);
		_tuple$79 = bits.Add64(x143, x155, ((x$65 = (new p224Uint1(x162.$high, x162.$low)), new $Uint64(x$65.$high, x$65.$low))));
		x163 = _tuple$79[0];
		x164 = _tuple$79[1];
		x165 = (x$66 = (x$67 = ((x$68 = (new p224Uint1(x164.$high, x164.$low)), new $Uint64(x$68.$high, x$68.$low))), x$69 = (x$70 = ((x$71 = (new p224Uint1(x144.$high, x144.$low)), new $Uint64(x$71.$high, x$71.$low))), x$72 = (x$73 = ((x$74 = (new p224Uint1(x136.$high, x136.$low)), new $Uint64(x$74.$high, x$74.$low))), new $Uint64(x$73.$high + x124.$high, x$73.$low + x124.$low)), new $Uint64(x$70.$high + x$72.$high, x$70.$low + x$72.$low)), new $Uint64(x$67.$high + x$69.$high, x$67.$low + x$69.$low)), x$75 = (x$76 = ((x$77 = (new p224Uint1(x156.$high, x156.$low)), new $Uint64(x$77.$high, x$77.$low))), new $Uint64(x$76.$high + x148.$high, x$76.$low + x148.$low)), new $Uint64(x$66.$high + x$75.$high, x$66.$low + x$75.$low));
		x166 = new $Uint64(0, 0);
		x167 = new $Uint64(0, 0);
		_tuple$80 = bits.Sub64(x159, new $Uint64(0, 1), new $Uint64(0, 0));
		x166 = _tuple$80[0];
		x167 = _tuple$80[1];
		x168 = new $Uint64(0, 0);
		x169 = new $Uint64(0, 0);
		_tuple$81 = bits.Sub64(x161, new $Uint64(4294967295, 0), ((x$78 = (new p224Uint1(x167.$high, x167.$low)), new $Uint64(x$78.$high, x$78.$low))));
		x168 = _tuple$81[0];
		x169 = _tuple$81[1];
		x170 = new $Uint64(0, 0);
		x171 = new $Uint64(0, 0);
		_tuple$82 = bits.Sub64(x163, new $Uint64(4294967295, 4294967295), ((x$79 = (new p224Uint1(x169.$high, x169.$low)), new $Uint64(x$79.$high, x$79.$low))));
		x170 = _tuple$82[0];
		x171 = _tuple$82[1];
		x172 = new $Uint64(0, 0);
		x173 = new $Uint64(0, 0);
		_tuple$83 = bits.Sub64(x165, new $Uint64(0, 4294967295), ((x$80 = (new p224Uint1(x171.$high, x171.$low)), new $Uint64(x$80.$high, x$80.$low))));
		x172 = _tuple$83[0];
		x173 = _tuple$83[1];
		x175 = new $Uint64(0, 0);
		_tuple$84 = bits.Sub64(new $Uint64(0, 0), new $Uint64(0, 0), ((x$81 = (new p224Uint1(x173.$high, x173.$low)), new $Uint64(x$81.$high, x$81.$low))));
		x175 = _tuple$84[1];
		x176 = new $Uint64(0, 0);
		p224CmovznzU64((x176$24ptr || (x176$24ptr = new ptrType(function() { return x176; }, function($v) { x176 = $v; }))), (new p224Uint1(x175.$high, x175.$low)), x166, x159);
		x177 = new $Uint64(0, 0);
		p224CmovznzU64((x177$24ptr || (x177$24ptr = new ptrType(function() { return x177; }, function($v) { x177 = $v; }))), (new p224Uint1(x175.$high, x175.$low)), x168, x161);
		x178 = new $Uint64(0, 0);
		p224CmovznzU64((x178$24ptr || (x178$24ptr = new ptrType(function() { return x178; }, function($v) { x178 = $v; }))), (new p224Uint1(x175.$high, x175.$low)), x170, x163);
		x179 = new $Uint64(0, 0);
		p224CmovznzU64((x179$24ptr || (x179$24ptr = new ptrType(function() { return x179; }, function($v) { x179 = $v; }))), (new p224Uint1(x175.$high, x175.$low)), x172, x165);
		out1.nilCheck, out1[0] = x176;
		out1.nilCheck, out1[1] = x177;
		out1.nilCheck, out1[2] = x178;
		out1.nilCheck, out1[3] = x179;
	};
	p224Selectznz = function(out1, arg1, arg2, arg3) {
		var arg1, arg2, arg3, out1, x1, x1$24ptr, x2, x2$24ptr, x3, x3$24ptr, x4, x4$24ptr;
		x1 = new $Uint64(0, 0);
		p224CmovznzU64((x1$24ptr || (x1$24ptr = new ptrType(function() { return x1; }, function($v) { x1 = $v; }))), arg1, arg2[0], arg3[0]);
		x2 = new $Uint64(0, 0);
		p224CmovznzU64((x2$24ptr || (x2$24ptr = new ptrType(function() { return x2; }, function($v) { x2 = $v; }))), arg1, arg2[1], arg3[1]);
		x3 = new $Uint64(0, 0);
		p224CmovznzU64((x3$24ptr || (x3$24ptr = new ptrType(function() { return x3; }, function($v) { x3 = $v; }))), arg1, arg2[2], arg3[2]);
		x4 = new $Uint64(0, 0);
		p224CmovznzU64((x4$24ptr || (x4$24ptr = new ptrType(function() { return x4; }, function($v) { x4 = $v; }))), arg1, arg2[3], arg3[3]);
		out1.nilCheck, out1[0] = x1;
		out1.nilCheck, out1[1] = x2;
		out1.nilCheck, out1[2] = x3;
		out1.nilCheck, out1[3] = x4;
	};
	p224ToBytes = function(out1, arg1) {
		var arg1, out1, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x6, x7, x8, x9;
		x1 = arg1[3];
		x2 = arg1[2];
		x3 = arg1[1];
		x4 = arg1[0];
		x5 = ((((x4.$low << 24 >>> 24)) & 255) >>> 0);
		x6 = $shiftRightUint64(x4, 8);
		x7 = ((((x6.$low << 24 >>> 24)) & 255) >>> 0);
		x8 = $shiftRightUint64(x6, 8);
		x9 = ((((x8.$low << 24 >>> 24)) & 255) >>> 0);
		x10 = $shiftRightUint64(x8, 8);
		x11 = ((((x10.$low << 24 >>> 24)) & 255) >>> 0);
		x12 = $shiftRightUint64(x10, 8);
		x13 = ((((x12.$low << 24 >>> 24)) & 255) >>> 0);
		x14 = $shiftRightUint64(x12, 8);
		x15 = ((((x14.$low << 24 >>> 24)) & 255) >>> 0);
		x16 = $shiftRightUint64(x14, 8);
		x17 = ((((x16.$low << 24 >>> 24)) & 255) >>> 0);
		x18 = ((($shiftRightUint64(x16, 8)).$low << 24 >>> 24));
		x19 = ((((x3.$low << 24 >>> 24)) & 255) >>> 0);
		x20 = $shiftRightUint64(x3, 8);
		x21 = ((((x20.$low << 24 >>> 24)) & 255) >>> 0);
		x22 = $shiftRightUint64(x20, 8);
		x23 = ((((x22.$low << 24 >>> 24)) & 255) >>> 0);
		x24 = $shiftRightUint64(x22, 8);
		x25 = ((((x24.$low << 24 >>> 24)) & 255) >>> 0);
		x26 = $shiftRightUint64(x24, 8);
		x27 = ((((x26.$low << 24 >>> 24)) & 255) >>> 0);
		x28 = $shiftRightUint64(x26, 8);
		x29 = ((((x28.$low << 24 >>> 24)) & 255) >>> 0);
		x30 = $shiftRightUint64(x28, 8);
		x31 = ((((x30.$low << 24 >>> 24)) & 255) >>> 0);
		x32 = ((($shiftRightUint64(x30, 8)).$low << 24 >>> 24));
		x33 = ((((x2.$low << 24 >>> 24)) & 255) >>> 0);
		x34 = $shiftRightUint64(x2, 8);
		x35 = ((((x34.$low << 24 >>> 24)) & 255) >>> 0);
		x36 = $shiftRightUint64(x34, 8);
		x37 = ((((x36.$low << 24 >>> 24)) & 255) >>> 0);
		x38 = $shiftRightUint64(x36, 8);
		x39 = ((((x38.$low << 24 >>> 24)) & 255) >>> 0);
		x40 = $shiftRightUint64(x38, 8);
		x41 = ((((x40.$low << 24 >>> 24)) & 255) >>> 0);
		x42 = $shiftRightUint64(x40, 8);
		x43 = ((((x42.$low << 24 >>> 24)) & 255) >>> 0);
		x44 = $shiftRightUint64(x42, 8);
		x45 = ((((x44.$low << 24 >>> 24)) & 255) >>> 0);
		x46 = ((($shiftRightUint64(x44, 8)).$low << 24 >>> 24));
		x47 = ((((x1.$low << 24 >>> 24)) & 255) >>> 0);
		x48 = $shiftRightUint64(x1, 8);
		x49 = ((((x48.$low << 24 >>> 24)) & 255) >>> 0);
		x50 = $shiftRightUint64(x48, 8);
		x51 = ((((x50.$low << 24 >>> 24)) & 255) >>> 0);
		x52 = ((($shiftRightUint64(x50, 8)).$low << 24 >>> 24));
		out1.nilCheck, out1[0] = x5;
		out1.nilCheck, out1[1] = x7;
		out1.nilCheck, out1[2] = x9;
		out1.nilCheck, out1[3] = x11;
		out1.nilCheck, out1[4] = x13;
		out1.nilCheck, out1[5] = x15;
		out1.nilCheck, out1[6] = x17;
		out1.nilCheck, out1[7] = x18;
		out1.nilCheck, out1[8] = x19;
		out1.nilCheck, out1[9] = x21;
		out1.nilCheck, out1[10] = x23;
		out1.nilCheck, out1[11] = x25;
		out1.nilCheck, out1[12] = x27;
		out1.nilCheck, out1[13] = x29;
		out1.nilCheck, out1[14] = x31;
		out1.nilCheck, out1[15] = x32;
		out1.nilCheck, out1[16] = x33;
		out1.nilCheck, out1[17] = x35;
		out1.nilCheck, out1[18] = x37;
		out1.nilCheck, out1[19] = x39;
		out1.nilCheck, out1[20] = x41;
		out1.nilCheck, out1[21] = x43;
		out1.nilCheck, out1[22] = x45;
		out1.nilCheck, out1[23] = x46;
		out1.nilCheck, out1[24] = x47;
		out1.nilCheck, out1[25] = x49;
		out1.nilCheck, out1[26] = x51;
		out1.nilCheck, out1[27] = x52;
	};
	p224FromBytes = function(out1, arg1) {
		var arg1, out1, x, x$1, x$2, x$3, x1, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x2, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x3, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x4, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x5, x50, x51, x52, x6, x7, x8, x9;
		x1 = $shiftLeft64((new $Uint64(0, arg1[27])), 24);
		x2 = $shiftLeft64((new $Uint64(0, arg1[26])), 16);
		x3 = $shiftLeft64((new $Uint64(0, arg1[25])), 8);
		x4 = arg1[24];
		x5 = $shiftLeft64((new $Uint64(0, arg1[23])), 56);
		x6 = $shiftLeft64((new $Uint64(0, arg1[22])), 48);
		x7 = $shiftLeft64((new $Uint64(0, arg1[21])), 40);
		x8 = $shiftLeft64((new $Uint64(0, arg1[20])), 32);
		x9 = $shiftLeft64((new $Uint64(0, arg1[19])), 24);
		x10 = $shiftLeft64((new $Uint64(0, arg1[18])), 16);
		x11 = $shiftLeft64((new $Uint64(0, arg1[17])), 8);
		x12 = arg1[16];
		x13 = $shiftLeft64((new $Uint64(0, arg1[15])), 56);
		x14 = $shiftLeft64((new $Uint64(0, arg1[14])), 48);
		x15 = $shiftLeft64((new $Uint64(0, arg1[13])), 40);
		x16 = $shiftLeft64((new $Uint64(0, arg1[12])), 32);
		x17 = $shiftLeft64((new $Uint64(0, arg1[11])), 24);
		x18 = $shiftLeft64((new $Uint64(0, arg1[10])), 16);
		x19 = $shiftLeft64((new $Uint64(0, arg1[9])), 8);
		x20 = arg1[8];
		x21 = $shiftLeft64((new $Uint64(0, arg1[7])), 56);
		x22 = $shiftLeft64((new $Uint64(0, arg1[6])), 48);
		x23 = $shiftLeft64((new $Uint64(0, arg1[5])), 40);
		x24 = $shiftLeft64((new $Uint64(0, arg1[4])), 32);
		x25 = $shiftLeft64((new $Uint64(0, arg1[3])), 24);
		x26 = $shiftLeft64((new $Uint64(0, arg1[2])), 16);
		x27 = $shiftLeft64((new $Uint64(0, arg1[1])), 8);
		x28 = arg1[0];
		x29 = (x = (new $Uint64(0, x28)), new $Uint64(x27.$high + x.$high, x27.$low + x.$low));
		x30 = new $Uint64(x26.$high + x29.$high, x26.$low + x29.$low);
		x31 = new $Uint64(x25.$high + x30.$high, x25.$low + x30.$low);
		x32 = new $Uint64(x24.$high + x31.$high, x24.$low + x31.$low);
		x33 = new $Uint64(x23.$high + x32.$high, x23.$low + x32.$low);
		x34 = new $Uint64(x22.$high + x33.$high, x22.$low + x33.$low);
		x35 = new $Uint64(x21.$high + x34.$high, x21.$low + x34.$low);
		x36 = (x$1 = (new $Uint64(0, x20)), new $Uint64(x19.$high + x$1.$high, x19.$low + x$1.$low));
		x37 = new $Uint64(x18.$high + x36.$high, x18.$low + x36.$low);
		x38 = new $Uint64(x17.$high + x37.$high, x17.$low + x37.$low);
		x39 = new $Uint64(x16.$high + x38.$high, x16.$low + x38.$low);
		x40 = new $Uint64(x15.$high + x39.$high, x15.$low + x39.$low);
		x41 = new $Uint64(x14.$high + x40.$high, x14.$low + x40.$low);
		x42 = new $Uint64(x13.$high + x41.$high, x13.$low + x41.$low);
		x43 = (x$2 = (new $Uint64(0, x12)), new $Uint64(x11.$high + x$2.$high, x11.$low + x$2.$low));
		x44 = new $Uint64(x10.$high + x43.$high, x10.$low + x43.$low);
		x45 = new $Uint64(x9.$high + x44.$high, x9.$low + x44.$low);
		x46 = new $Uint64(x8.$high + x45.$high, x8.$low + x45.$low);
		x47 = new $Uint64(x7.$high + x46.$high, x7.$low + x46.$low);
		x48 = new $Uint64(x6.$high + x47.$high, x6.$low + x47.$low);
		x49 = new $Uint64(x5.$high + x48.$high, x5.$low + x48.$low);
		x50 = (x$3 = (new $Uint64(0, x4)), new $Uint64(x3.$high + x$3.$high, x3.$low + x$3.$low));
		x51 = new $Uint64(x2.$high + x50.$high, x2.$low + x50.$low);
		x52 = new $Uint64(x1.$high + x51.$high, x1.$low + x51.$low);
		out1.nilCheck, out1[0] = x35;
		out1.nilCheck, out1[1] = x42;
		out1.nilCheck, out1[2] = x49;
		out1.nilCheck, out1[3] = x52;
	};
	P224Element.ptr.prototype.One = function() {
		var e;
		e = this;
		p224SetOne(e.x);
		return e;
	};
	P224Element.prototype.One = function() { return this.$val.One(); };
	P224Element.ptr.prototype.Equal = function(t) {
		var e, eBytes, t, tBytes;
		e = this;
		eBytes = e.Bytes();
		tBytes = t.Bytes();
		return subtle.ConstantTimeCompare(eBytes, tBytes);
	};
	P224Element.prototype.Equal = function(t) { return this.$val.Equal(t); };
	P224Element.ptr.prototype.IsZero = function() {
		var e, eBytes;
		e = this;
		eBytes = e.Bytes();
		return subtle.ConstantTimeCompare(eBytes, p224ZeroEncoding);
	};
	P224Element.prototype.IsZero = function() { return this.$val.IsZero(); };
	P224Element.ptr.prototype.Set = function(t) {
		var e, t;
		e = this;
		p224MontgomeryDomainFieldElement.copy(e.x, t.x);
		return e;
	};
	P224Element.prototype.Set = function(t) { return this.$val.Set(t); };
	P224Element.ptr.prototype.Bytes = function() {
		var e, out;
		e = this;
		out = arrayType$6.zero();
		return e.bytes(out);
	};
	P224Element.prototype.Bytes = function() { return this.$val.Bytes(); };
	P224Element.ptr.prototype.bytes = function(out) {
		var e, out, tmp;
		e = this;
		tmp = arrayType$2.zero();
		p224FromMontgomery(tmp, e.x);
		p224ToBytes(out, (tmp));
		p224InvertEndianness(new sliceType(out));
		return new sliceType(out);
	};
	P224Element.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P224Element.ptr.prototype.SetBytes = function(v) {
		var _i, _ref, e, i, in$1, tmp, v;
		e = this;
		if (!((v.$length === 28))) {
			return [ptrType$4.nil, errors.New("invalid P224Element encoding")];
		}
		_ref = v;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) < ((i < 0 || i >= p224MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p224MinusOneEncoding.$array[p224MinusOneEncoding.$offset + i])) {
				break;
			}
			if (((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) > ((i < 0 || i >= p224MinusOneEncoding.$length) ? ($throwRuntimeError("index out of range"), undefined) : p224MinusOneEncoding.$array[p224MinusOneEncoding.$offset + i])) {
				return [ptrType$4.nil, errors.New("invalid P224Element encoding")];
			}
			_i++;
		}
		in$1 = arrayType$6.zero();
		$copySlice(new sliceType(in$1), v);
		p224InvertEndianness(new sliceType(in$1));
		tmp = arrayType$2.zero();
		p224FromBytes((tmp), in$1);
		p224ToMontgomery(e.x, tmp);
		return [e, $ifaceNil];
	};
	P224Element.prototype.SetBytes = function(v) { return this.$val.SetBytes(v); };
	P224Element.ptr.prototype.Add = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p224Add(e.x, t1.x, t2.x);
		return e;
	};
	P224Element.prototype.Add = function(t1, t2) { return this.$val.Add(t1, t2); };
	P224Element.ptr.prototype.Sub = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p224Sub(e.x, t1.x, t2.x);
		return e;
	};
	P224Element.prototype.Sub = function(t1, t2) { return this.$val.Sub(t1, t2); };
	P224Element.ptr.prototype.Mul = function(t1, t2) {
		var e, t1, t2;
		e = this;
		p224Mul(e.x, t1.x, t2.x);
		return e;
	};
	P224Element.prototype.Mul = function(t1, t2) { return this.$val.Mul(t1, t2); };
	P224Element.ptr.prototype.Square = function(t) {
		var e, t;
		e = this;
		p224Square(e.x, t.x);
		return e;
	};
	P224Element.prototype.Square = function(t) { return this.$val.Square(t); };
	P224Element.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		p224Selectznz((v.x), (new p224Uint1(0, cond)), (b.x), (a.x));
		return v;
	};
	P224Element.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	p224InvertEndianness = function(v) {
		var _q, _tmp, _tmp$1, i, v, x, x$1;
		i = 0;
		while (true) {
			if (!(i < (_q = v.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tmp = (x = (v.$length - 1 >> 0) - i >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]));
			_tmp$1 = ((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]);
			((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i] = _tmp);
			(x$1 = (v.$length - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$1] = _tmp$1));
			i = i + (1) >> 0;
		}
	};
	ptrType$1.methods = [{prop: "Invert", name: "Invert", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "One", name: "One", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec/fiat", typ: $funcType([ptrType$5], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$1, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Square", name: "Square", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$1, ptrType$1, $Int], [ptrType$1], false)}];
	ptrType$2.methods = [{prop: "Invert", name: "Invert", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "One", name: "One", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$2], [$Int], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec/fiat", typ: $funcType([ptrType$6], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$2, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Square", name: "Square", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$2, ptrType$2, $Int], [ptrType$2], false)}];
	ptrType$3.methods = [{prop: "Invert", name: "Invert", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "One", name: "One", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$3], [$Int], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec/fiat", typ: $funcType([ptrType$7], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$3, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$3, ptrType$3], [ptrType$3], false)}, {prop: "Square", name: "Square", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$3, ptrType$3, $Int], [ptrType$3], false)}];
	ptrType$4.methods = [{prop: "Invert", name: "Invert", pkg: "", typ: $funcType([ptrType$4], [ptrType$4], false)}, {prop: "One", name: "One", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$4], [$Int], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$4], [ptrType$4], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec/fiat", typ: $funcType([ptrType$8], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$4, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$4, ptrType$4], [ptrType$4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$4, ptrType$4], [ptrType$4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$4, ptrType$4], [ptrType$4], false)}, {prop: "Square", name: "Square", pkg: "", typ: $funcType([ptrType$4], [ptrType$4], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$4, ptrType$4, $Int], [ptrType$4], false)}];
	p521MontgomeryDomainFieldElement.init($Uint64, 9);
	P521Element.init("crypto/internal/nistec/fiat", [{prop: "x", name: "x", embedded: false, exported: false, typ: p521MontgomeryDomainFieldElement, tag: ""}]);
	p384MontgomeryDomainFieldElement.init($Uint64, 6);
	P384Element.init("crypto/internal/nistec/fiat", [{prop: "x", name: "x", embedded: false, exported: false, typ: p384MontgomeryDomainFieldElement, tag: ""}]);
	p256MontgomeryDomainFieldElement.init($Uint64, 4);
	P256Element.init("crypto/internal/nistec/fiat", [{prop: "x", name: "x", embedded: false, exported: false, typ: p256MontgomeryDomainFieldElement, tag: ""}]);
	p224MontgomeryDomainFieldElement.init($Uint64, 4);
	P224Element.init("crypto/internal/nistec/fiat", [{prop: "x", name: "x", embedded: false, exported: false, typ: p224MontgomeryDomainFieldElement, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = subtle.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p521ZeroEncoding = new P521Element.ptr(arrayType.zero()).Bytes();
		p521MinusOneEncoding = new P521Element.ptr(arrayType.zero()).Sub(new P521Element.ptr(arrayType.zero()), new P521Element.ptr(arrayType.zero()).One()).Bytes();
		p384ZeroEncoding = new P384Element.ptr(arrayType$1.zero()).Bytes();
		p384MinusOneEncoding = new P384Element.ptr(arrayType$1.zero()).Sub(new P384Element.ptr(arrayType$1.zero()), new P384Element.ptr(arrayType$1.zero()).One()).Bytes();
		p256ZeroEncoding = new P256Element.ptr(arrayType$2.zero()).Bytes();
		p256MinusOneEncoding = new P256Element.ptr(arrayType$2.zero()).Sub(new P256Element.ptr(arrayType$2.zero()), new P256Element.ptr(arrayType$2.zero()).One()).Bytes();
		p224ZeroEncoding = new P224Element.ptr(arrayType$2.zero()).Bytes();
		p224MinusOneEncoding = new P224Element.ptr(arrayType$2.zero()).Sub(new P224Element.ptr(arrayType$2.zero()), new P224Element.ptr(arrayType$2.zero()).One()).Bytes();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/nistec"] = (function() {
	var $pkg = {}, $init, fiat, subtle, errors, sync, P521Point, p521Table, P384Point, p384Table, P256Point, p256Table, P224Point, p224Table, WrappedPoint, p224Wrapper, p256Wrapper, p521Wrapper, p384Wrapper, arrayType, ptrType, arrayType$1, ptrType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$3, arrayType$4, ptrType$4, arrayType$5, sliceType, arrayType$6, arrayType$7, ptrType$5, ptrType$6, arrayType$8, arrayType$9, ptrType$7, arrayType$10, ptrType$8, ptrType$9, arrayType$11, arrayType$12, ptrType$10, arrayType$13, ptrType$11, ptrType$12, arrayType$14, arrayType$15, ptrType$13, arrayType$16, ptrType$14, ptrType$15, arrayType$17, arrayType$18, ptrType$16, arrayType$19, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, p521B, p521G, p521GeneratorTable, p521GeneratorTableOnce, p384B, p384G, p384GeneratorTable, p384GeneratorTableOnce, p256B, p256G, p256GeneratorTable, p256GeneratorTableOnce, p224GG, p224GGOnce, p224MinusOne, p224B, p224G, p224GeneratorTable, p224GeneratorTableOnce, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _r, NewP521Point, NewP521Generator, p521Polynomial, p521CheckOnCurve, p521Sqrt, p521SqrtCandidate, NewP384Point, NewP384Generator, p384Polynomial, p384CheckOnCurve, p384Sqrt, p384SqrtCandidate, NewP256Point, NewP256Generator, p256Polynomial, p256CheckOnCurve, p256Sqrt, p256SqrtCandidate, p224SqrtCandidate, NewP224Point, NewP224Generator, p224Polynomial, p224CheckOnCurve, p224Sqrt, wrapP224, NewP224WrappedPoint, wrapP256, NewP256WrappedPoint, wrapP521, NewP521WrappedPoint, wrapP384, NewP384WrappedPoint;
	fiat = $packages["crypto/internal/nistec/fiat"];
	subtle = $packages["crypto/subtle"];
	errors = $packages["errors"];
	sync = $packages["sync"];
	P521Point = $pkg.P521Point = $newType(0, $kindStruct, "nistec.P521Point", true, "crypto/internal/nistec", true, function(x_, y_, z_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType$5.nil;
			this.y = ptrType$5.nil;
			this.z = ptrType$5.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.z = z_;
	});
	p521Table = $pkg.p521Table = $newType(60, $kindArray, "nistec.p521Table", true, "crypto/internal/nistec", false, null);
	P384Point = $pkg.P384Point = $newType(0, $kindStruct, "nistec.P384Point", true, "crypto/internal/nistec", true, function(x_, y_, z_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType$8.nil;
			this.y = ptrType$8.nil;
			this.z = ptrType$8.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.z = z_;
	});
	p384Table = $pkg.p384Table = $newType(60, $kindArray, "nistec.p384Table", true, "crypto/internal/nistec", false, null);
	P256Point = $pkg.P256Point = $newType(0, $kindStruct, "nistec.P256Point", true, "crypto/internal/nistec", true, function(x_, y_, z_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType$11.nil;
			this.y = ptrType$11.nil;
			this.z = ptrType$11.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.z = z_;
	});
	p256Table = $pkg.p256Table = $newType(60, $kindArray, "nistec.p256Table", true, "crypto/internal/nistec", false, null);
	P224Point = $pkg.P224Point = $newType(0, $kindStruct, "nistec.P224Point", true, "crypto/internal/nistec", true, function(x_, y_, z_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType$14.nil;
			this.y = ptrType$14.nil;
			this.z = ptrType$14.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.z = z_;
	});
	p224Table = $pkg.p224Table = $newType(60, $kindArray, "nistec.p224Table", true, "crypto/internal/nistec", false, null);
	WrappedPoint = $pkg.WrappedPoint = $newType(8, $kindInterface, "nistec.WrappedPoint", true, "crypto/internal/nistec", true, null);
	p224Wrapper = $pkg.p224Wrapper = $newType(0, $kindStruct, "nistec.p224Wrapper", true, "crypto/internal/nistec", false, function(point_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.point = ptrType$15.nil;
			return;
		}
		this.point = point_;
	});
	p256Wrapper = $pkg.p256Wrapper = $newType(0, $kindStruct, "nistec.p256Wrapper", true, "crypto/internal/nistec", false, function(point_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.point = ptrType$12.nil;
			return;
		}
		this.point = point_;
	});
	p521Wrapper = $pkg.p521Wrapper = $newType(0, $kindStruct, "nistec.p521Wrapper", true, "crypto/internal/nistec", false, function(point_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.point = ptrType$6.nil;
			return;
		}
		this.point = point_;
	});
	p384Wrapper = $pkg.p384Wrapper = $newType(0, $kindStruct, "nistec.p384Wrapper", true, "crypto/internal/nistec", false, function(point_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.point = ptrType$9.nil;
			return;
		}
		this.point = point_;
	});
	arrayType = $arrayType(p521Table, 132);
	ptrType = $ptrType(arrayType);
	arrayType$1 = $arrayType(p384Table, 96);
	ptrType$1 = $ptrType(arrayType$1);
	arrayType$2 = $arrayType(p256Table, 64);
	ptrType$2 = $ptrType(arrayType$2);
	arrayType$3 = $arrayType(fiat.P224Element, 96);
	ptrType$3 = $ptrType(arrayType$3);
	arrayType$4 = $arrayType(p224Table, 56);
	ptrType$4 = $ptrType(arrayType$4);
	arrayType$5 = $arrayType($Uint64, 9);
	sliceType = $sliceType($Uint8);
	arrayType$6 = $arrayType($Uint64, 6);
	arrayType$7 = $arrayType($Uint64, 4);
	ptrType$5 = $ptrType(fiat.P521Element);
	ptrType$6 = $ptrType(P521Point);
	arrayType$8 = $arrayType($Uint8, 133);
	arrayType$9 = $arrayType($Uint8, 67);
	ptrType$7 = $ptrType(p521Table);
	arrayType$10 = $arrayType(ptrType$6, 15);
	ptrType$8 = $ptrType(fiat.P384Element);
	ptrType$9 = $ptrType(P384Point);
	arrayType$11 = $arrayType($Uint8, 97);
	arrayType$12 = $arrayType($Uint8, 49);
	ptrType$10 = $ptrType(p384Table);
	arrayType$13 = $arrayType(ptrType$9, 15);
	ptrType$11 = $ptrType(fiat.P256Element);
	ptrType$12 = $ptrType(P256Point);
	arrayType$14 = $arrayType($Uint8, 65);
	arrayType$15 = $arrayType($Uint8, 33);
	ptrType$13 = $ptrType(p256Table);
	arrayType$16 = $arrayType(ptrType$12, 15);
	ptrType$14 = $ptrType(fiat.P224Element);
	ptrType$15 = $ptrType(P224Point);
	arrayType$17 = $arrayType($Uint8, 57);
	arrayType$18 = $arrayType($Uint8, 29);
	ptrType$16 = $ptrType(p224Table);
	arrayType$19 = $arrayType(ptrType$15, 15);
	ptrType$17 = $ptrType(arrayType$8);
	ptrType$18 = $ptrType(arrayType$9);
	ptrType$19 = $ptrType(arrayType$11);
	ptrType$20 = $ptrType(arrayType$12);
	ptrType$21 = $ptrType(arrayType$14);
	ptrType$22 = $ptrType(arrayType$15);
	ptrType$23 = $ptrType(arrayType$17);
	ptrType$24 = $ptrType(arrayType$18);
	NewP521Point = function() {
		return new P521Point.ptr(new fiat.P521Element.ptr(arrayType$5.zero()), new fiat.P521Element.ptr(arrayType$5.zero()).One(), new fiat.P521Element.ptr(arrayType$5.zero()));
	};
	$pkg.NewP521Point = NewP521Point;
	NewP521Generator = function() {
		return (new P521Point.ptr(new fiat.P521Element.ptr(arrayType$5.zero()), new fiat.P521Element.ptr(arrayType$5.zero()), new fiat.P521Element.ptr(arrayType$5.zero()))).Set(p521G);
	};
	$pkg.NewP521Generator = NewP521Generator;
	P521Point.ptr.prototype.Set = function(q) {
		var p, q;
		p = this;
		p.x.Set(q.x);
		p.y.Set(q.y);
		p.z.Set(q.z);
		return p;
	};
	P521Point.prototype.Set = function(q) { return this.$val.Set(q); };
	P521Point.ptr.prototype.SetBytes = function(b) {
		var _tuple$10, _tuple$8, _tuple$9, b, cond, err, err$1, err$2, otherRoot, p, x, x$1, x$2, y, y$1;
		p = this;
		if ((b.$length === 1) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 0)) {
			return [p.Set(NewP521Point()), $ifaceNil];
		} else if ((b.$length === 133) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 4)) {
			_tuple$8 = new fiat.P521Element.ptr(arrayType$5.zero()).SetBytes($subslice(b, 1, 67));
			x = _tuple$8[0];
			err = _tuple$8[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$6.nil, err];
			}
			_tuple$9 = new fiat.P521Element.ptr(arrayType$5.zero()).SetBytes($subslice(b, 67));
			y = _tuple$9[0];
			err = _tuple$9[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$6.nil, err];
			}
			err$1 = p521CheckOnCurve(x, y);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$6.nil, err$1];
			}
			p.x.Set(x);
			p.y.Set(y);
			p.z.One();
			return [p, $ifaceNil];
		} else if ((b.$length === 67) && (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 2) || ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 3))) {
			_tuple$10 = new fiat.P521Element.ptr(arrayType$5.zero()).SetBytes($subslice(b, 1));
			x$1 = _tuple$10[0];
			err$2 = _tuple$10[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [ptrType$6.nil, err$2];
			}
			y$1 = p521Polynomial(new fiat.P521Element.ptr(arrayType$5.zero()), x$1);
			if (!p521Sqrt(y$1, y$1)) {
				return [ptrType$6.nil, errors.New("invalid P521 compressed point encoding")];
			}
			otherRoot = new fiat.P521Element.ptr(arrayType$5.zero());
			otherRoot.Sub(otherRoot, y$1);
			cond = ((((x$2 = y$1.Bytes(), (65 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 65])) & 1) >>> 0) ^ (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) & 1) >>> 0)) << 24 >>> 24;
			y$1.Select(otherRoot, y$1, ((cond >> 0)));
			p.x.Set(x$1);
			p.y.Set(y$1);
			p.z.One();
			return [p, $ifaceNil];
		} else {
			return [ptrType$6.nil, errors.New("invalid P521 point encoding")];
		}
	};
	P521Point.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p521Polynomial = function(y2, x) {
		var threeX, x, y2;
		y2.Square(x);
		y2.Mul(y2, x);
		threeX = new fiat.P521Element.ptr(arrayType$5.zero()).Add(x, x);
		threeX.Add(threeX, x);
		y2.Sub(y2, threeX);
		return y2.Add(y2, p521B);
	};
	p521CheckOnCurve = function(x, y) {
		var lhs, rhs, x, y;
		rhs = p521Polynomial(new fiat.P521Element.ptr(arrayType$5.zero()), x);
		lhs = new fiat.P521Element.ptr(arrayType$5.zero()).Square(y);
		if (!((rhs.Equal(lhs) === 1))) {
			return errors.New("P521 point not on curve");
		}
		return $ifaceNil;
	};
	P521Point.ptr.prototype.Bytes = function() {
		var out, p;
		p = this;
		out = arrayType$8.zero();
		return p.bytes(out);
	};
	P521Point.prototype.Bytes = function() { return this.$val.Bytes(); };
	P521Point.ptr.prototype.bytes = function(out) {
		var buf, out, p, x, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P521Element.ptr(arrayType$5.zero()).Invert(p.z);
		x = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.x, zinv);
		y = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 4);
		buf = $appendSlice(buf, x.Bytes());
		buf = $appendSlice(buf, y.Bytes());
		return buf;
	};
	P521Point.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P521Point.ptr.prototype.BytesCompressed = function() {
		var out, p;
		p = this;
		out = arrayType$9.zero();
		return p.bytesCompressed(out);
	};
	P521Point.prototype.BytesCompressed = function() { return this.$val.BytesCompressed(); };
	P521Point.ptr.prototype.bytesCompressed = function(out) {
		var buf, out, p, x, x$1, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P521Element.ptr(arrayType$5.zero()).Invert(p.z);
		x = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.x, zinv);
		y = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 2);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) | ((((x$1 = y.Bytes(), (65 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 65])) & 1) >>> 0))) >>> 0));
		buf = $appendSlice(buf, x.Bytes());
		return buf;
	};
	P521Point.prototype.bytesCompressed = function(out) { return this.$val.bytesCompressed(out); };
	P521Point.ptr.prototype.Add = function(p1, p2) {
		var p1, p2, q, t0, t1, t2, t3, t4, x3, y3, z3;
		q = this;
		t0 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p1.x, p2.x);
		t1 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p1.y, p2.y);
		t2 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p1.z, p2.z);
		t3 = new fiat.P521Element.ptr(arrayType$5.zero()).Add(p1.x, p1.y);
		t4 = new fiat.P521Element.ptr(arrayType$5.zero()).Add(p2.x, p2.y);
		t3.Mul(t3, t4);
		t4.Add(t0, t1);
		t3.Sub(t3, t4);
		t4.Add(p1.y, p1.z);
		x3 = new fiat.P521Element.ptr(arrayType$5.zero()).Add(p2.y, p2.z);
		t4.Mul(t4, x3);
		x3.Add(t1, t2);
		t4.Sub(t4, x3);
		x3.Add(p1.x, p1.z);
		y3 = new fiat.P521Element.ptr(arrayType$5.zero()).Add(p2.x, p2.z);
		x3.Mul(x3, y3);
		y3.Add(t0, t2);
		y3.Sub(x3, y3);
		z3 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p521B, t2);
		x3.Sub(y3, z3);
		z3.Add(x3, x3);
		x3.Add(x3, z3);
		z3.Sub(t1, x3);
		x3.Add(t1, x3);
		y3.Mul(p521B, y3);
		t1.Add(t2, t2);
		t2.Add(t1, t2);
		y3.Sub(y3, t2);
		y3.Sub(y3, t0);
		t1.Add(y3, y3);
		y3.Add(t1, y3);
		t1.Add(t0, t0);
		t0.Add(t1, t0);
		t0.Sub(t0, t2);
		t1.Mul(t4, y3);
		t2.Mul(t0, y3);
		y3.Mul(x3, z3);
		y3.Add(y3, t2);
		x3.Mul(t3, x3);
		x3.Sub(x3, t1);
		z3.Mul(t4, z3);
		t1.Mul(t3, t0);
		z3.Add(z3, t1);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P521Point.prototype.Add = function(p1, p2) { return this.$val.Add(p1, p2); };
	P521Point.ptr.prototype.Double = function(p) {
		var p, q, t0, t1, t2, t3, x3, y3, z3;
		q = this;
		t0 = new fiat.P521Element.ptr(arrayType$5.zero()).Square(p.x);
		t1 = new fiat.P521Element.ptr(arrayType$5.zero()).Square(p.y);
		t2 = new fiat.P521Element.ptr(arrayType$5.zero()).Square(p.z);
		t3 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.x, p.y);
		t3.Add(t3, t3);
		z3 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p.x, p.z);
		z3.Add(z3, z3);
		y3 = new fiat.P521Element.ptr(arrayType$5.zero()).Mul(p521B, t2);
		y3.Sub(y3, z3);
		x3 = new fiat.P521Element.ptr(arrayType$5.zero()).Add(y3, y3);
		y3.Add(x3, y3);
		x3.Sub(t1, y3);
		y3.Add(t1, y3);
		y3.Mul(x3, y3);
		x3.Mul(x3, t3);
		t3.Add(t2, t2);
		t2.Add(t2, t3);
		z3.Mul(p521B, z3);
		z3.Sub(z3, t2);
		z3.Sub(z3, t0);
		t3.Add(z3, z3);
		z3.Add(z3, t3);
		t3.Add(t0, t0);
		t0.Add(t3, t0);
		t0.Sub(t0, t2);
		t0.Mul(t0, z3);
		y3.Add(y3, t0);
		t0.Mul(p.y, p.z);
		t0.Add(t0, t0);
		z3.Mul(t0, z3);
		x3.Sub(x3, z3);
		z3.Mul(t0, t1);
		z3.Add(z3, z3);
		z3.Add(z3, z3);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P521Point.prototype.Double = function(p) { return this.$val.Double(p); };
	P521Point.ptr.prototype.Select = function(p1, p2, cond) {
		var cond, p1, p2, q;
		q = this;
		q.x.Select(p1.x, p2.x, cond);
		q.y.Select(p1.y, p2.y, cond);
		q.z.Select(p1.z, p2.z, cond);
		return q;
	};
	P521Point.prototype.Select = function(p1, p2, cond) { return this.$val.Select(p1, p2, cond); };
	p521Table.prototype.Select = function(p, n) {
		var cond, i, n, p, table, x, x$1;
		table = this.$val;
		if (n >= 16) {
			$panic(new $String("nistec: internal error: p521Table called with out-of-bounds value"));
		}
		p.Set(NewP521Point());
		i = 1;
		while (true) {
			if (!(i < 16)) { break; }
			cond = subtle.ConstantTimeByteEq(i, n);
			p.Select((x = table, x$1 = i - 1 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), p, cond);
			i = i + (1) << 24 >>> 24;
		}
	};
	$ptrType(p521Table).prototype.Select = function(p, n) { return (new p521Table(this.$get())).Select(p, n); };
	P521Point.ptr.prototype.ScalarMult = function(q, scalar) {
		var _i, _q, _ref, byte$1, i, i$1, p, q, scalar, t, table, windowValue, x, x$1;
		p = this;
		table = $toNativeArray($kindPtr, [NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point()]);
		table[0].Set(q);
		i = 1;
		while (true) {
			if (!(i < 15)) { break; }
			((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]).Double((x = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x < 0 || x >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x])));
			(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x$1])).Add(((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]), q);
			i = i + (2) >> 0;
		}
		t = NewP521Point();
		p.Set(NewP521Point());
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((i$1 === 0))) {
				p.Double(p);
				p.Double(p);
				p.Double(p);
				p.Double(p);
			}
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$7(table).Select(t, windowValue);
			p.Add(p, t);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$7(table).Select(t, windowValue);
			p.Add(p, t);
			_i++;
		}
		return [p, $ifaceNil];
	};
	P521Point.prototype.ScalarMult = function(q, scalar) { return this.$val.ScalarMult(q, scalar); };
	P521Point.ptr.prototype.generatorTable = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p521GeneratorTableOnce.Do((function() {
			var base, i, j, x, x$1, x$2, x$3, x$4, x$5;
			p521GeneratorTable = arrayType.zero();
			base = NewP521Generator();
			i = 0;
			while (true) {
				if (!(i < 132)) { break; }
				(x = p521GeneratorTable, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))[0] = NewP521Point().Set(base);
				j = 1;
				while (true) {
					if (!(j < 15)) { break; }
					(x$4 = (x$5 = p521GeneratorTable, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), ((j < 0 || j >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[j] = NewP521Point().Add((x$1 = (x$2 = p521GeneratorTable, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])), x$3 = j - 1 >> 0, ((x$3 < 0 || x$3 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$3])), base)));
					j = j + (1) >> 0;
				}
				base.Double(base);
				base.Double(base);
				base.Double(base);
				base.Double(base);
				i = i + (1) >> 0;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p521GeneratorTable;
		/* */ } return; } var $f = {$blk: P521Point.ptr.prototype.generatorTable, $c: true, $r, p, $s};return $f;
	};
	P521Point.prototype.generatorTable = function() { return this.$val.generatorTable(); };
	P521Point.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((scalar.$length === 66))) {
			$s = -1; return [ptrType$6.nil, errors.New("invalid scalar length")];
		}
		_r$1 = p.generatorTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tables = _r$1;
		t = NewP521Point();
		p.Set(NewP521Point());
		tableIndex = 131;
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$7((x = tables, ((tableIndex < 0 || tableIndex >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$7((x$1 = tables, ((tableIndex < 0 || tableIndex >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } var $f = {$blk: P521Point.ptr.prototype.ScalarBaseMult, $c: true, $r, _i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s};return $f;
	};
	P521Point.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p521Sqrt = function(e, x) {
		var candidate, e, isSquare, square, x;
		isSquare = false;
		candidate = new fiat.P521Element.ptr(arrayType$5.zero());
		p521SqrtCandidate(candidate, x);
		square = new fiat.P521Element.ptr(arrayType$5.zero()).Square(candidate);
		if (!((square.Equal(x) === 1))) {
			isSquare = false;
			return isSquare;
		}
		e.Set(candidate);
		isSquare = true;
		return isSquare;
	};
	p521SqrtCandidate = function(z, x) {
		var s, x, z;
		z.Square(x);
		s = 1;
		while (true) {
			if (!(s < 519)) { break; }
			z.Square(z);
			s = s + (1) >> 0;
		}
	};
	NewP384Point = function() {
		return new P384Point.ptr(new fiat.P384Element.ptr(arrayType$6.zero()), new fiat.P384Element.ptr(arrayType$6.zero()).One(), new fiat.P384Element.ptr(arrayType$6.zero()));
	};
	$pkg.NewP384Point = NewP384Point;
	NewP384Generator = function() {
		return (new P384Point.ptr(new fiat.P384Element.ptr(arrayType$6.zero()), new fiat.P384Element.ptr(arrayType$6.zero()), new fiat.P384Element.ptr(arrayType$6.zero()))).Set(p384G);
	};
	$pkg.NewP384Generator = NewP384Generator;
	P384Point.ptr.prototype.Set = function(q) {
		var p, q;
		p = this;
		p.x.Set(q.x);
		p.y.Set(q.y);
		p.z.Set(q.z);
		return p;
	};
	P384Point.prototype.Set = function(q) { return this.$val.Set(q); };
	P384Point.ptr.prototype.SetBytes = function(b) {
		var _tuple$10, _tuple$8, _tuple$9, b, cond, err, err$1, err$2, otherRoot, p, x, x$1, x$2, y, y$1;
		p = this;
		if ((b.$length === 1) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 0)) {
			return [p.Set(NewP384Point()), $ifaceNil];
		} else if ((b.$length === 97) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 4)) {
			_tuple$8 = new fiat.P384Element.ptr(arrayType$6.zero()).SetBytes($subslice(b, 1, 49));
			x = _tuple$8[0];
			err = _tuple$8[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$9.nil, err];
			}
			_tuple$9 = new fiat.P384Element.ptr(arrayType$6.zero()).SetBytes($subslice(b, 49));
			y = _tuple$9[0];
			err = _tuple$9[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$9.nil, err];
			}
			err$1 = p384CheckOnCurve(x, y);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$9.nil, err$1];
			}
			p.x.Set(x);
			p.y.Set(y);
			p.z.One();
			return [p, $ifaceNil];
		} else if ((b.$length === 49) && (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 2) || ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 3))) {
			_tuple$10 = new fiat.P384Element.ptr(arrayType$6.zero()).SetBytes($subslice(b, 1));
			x$1 = _tuple$10[0];
			err$2 = _tuple$10[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [ptrType$9.nil, err$2];
			}
			y$1 = p384Polynomial(new fiat.P384Element.ptr(arrayType$6.zero()), x$1);
			if (!p384Sqrt(y$1, y$1)) {
				return [ptrType$9.nil, errors.New("invalid P384 compressed point encoding")];
			}
			otherRoot = new fiat.P384Element.ptr(arrayType$6.zero());
			otherRoot.Sub(otherRoot, y$1);
			cond = ((((x$2 = y$1.Bytes(), (47 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 47])) & 1) >>> 0) ^ (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) & 1) >>> 0)) << 24 >>> 24;
			y$1.Select(otherRoot, y$1, ((cond >> 0)));
			p.x.Set(x$1);
			p.y.Set(y$1);
			p.z.One();
			return [p, $ifaceNil];
		} else {
			return [ptrType$9.nil, errors.New("invalid P384 point encoding")];
		}
	};
	P384Point.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p384Polynomial = function(y2, x) {
		var threeX, x, y2;
		y2.Square(x);
		y2.Mul(y2, x);
		threeX = new fiat.P384Element.ptr(arrayType$6.zero()).Add(x, x);
		threeX.Add(threeX, x);
		y2.Sub(y2, threeX);
		return y2.Add(y2, p384B);
	};
	p384CheckOnCurve = function(x, y) {
		var lhs, rhs, x, y;
		rhs = p384Polynomial(new fiat.P384Element.ptr(arrayType$6.zero()), x);
		lhs = new fiat.P384Element.ptr(arrayType$6.zero()).Square(y);
		if (!((rhs.Equal(lhs) === 1))) {
			return errors.New("P384 point not on curve");
		}
		return $ifaceNil;
	};
	P384Point.ptr.prototype.Bytes = function() {
		var out, p;
		p = this;
		out = arrayType$11.zero();
		return p.bytes(out);
	};
	P384Point.prototype.Bytes = function() { return this.$val.Bytes(); };
	P384Point.ptr.prototype.bytes = function(out) {
		var buf, out, p, x, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P384Element.ptr(arrayType$6.zero()).Invert(p.z);
		x = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.x, zinv);
		y = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 4);
		buf = $appendSlice(buf, x.Bytes());
		buf = $appendSlice(buf, y.Bytes());
		return buf;
	};
	P384Point.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P384Point.ptr.prototype.BytesCompressed = function() {
		var out, p;
		p = this;
		out = arrayType$12.zero();
		return p.bytesCompressed(out);
	};
	P384Point.prototype.BytesCompressed = function() { return this.$val.BytesCompressed(); };
	P384Point.ptr.prototype.bytesCompressed = function(out) {
		var buf, out, p, x, x$1, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P384Element.ptr(arrayType$6.zero()).Invert(p.z);
		x = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.x, zinv);
		y = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 2);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) | ((((x$1 = y.Bytes(), (47 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 47])) & 1) >>> 0))) >>> 0));
		buf = $appendSlice(buf, x.Bytes());
		return buf;
	};
	P384Point.prototype.bytesCompressed = function(out) { return this.$val.bytesCompressed(out); };
	P384Point.ptr.prototype.Add = function(p1, p2) {
		var p1, p2, q, t0, t1, t2, t3, t4, x3, y3, z3;
		q = this;
		t0 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p1.x, p2.x);
		t1 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p1.y, p2.y);
		t2 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p1.z, p2.z);
		t3 = new fiat.P384Element.ptr(arrayType$6.zero()).Add(p1.x, p1.y);
		t4 = new fiat.P384Element.ptr(arrayType$6.zero()).Add(p2.x, p2.y);
		t3.Mul(t3, t4);
		t4.Add(t0, t1);
		t3.Sub(t3, t4);
		t4.Add(p1.y, p1.z);
		x3 = new fiat.P384Element.ptr(arrayType$6.zero()).Add(p2.y, p2.z);
		t4.Mul(t4, x3);
		x3.Add(t1, t2);
		t4.Sub(t4, x3);
		x3.Add(p1.x, p1.z);
		y3 = new fiat.P384Element.ptr(arrayType$6.zero()).Add(p2.x, p2.z);
		x3.Mul(x3, y3);
		y3.Add(t0, t2);
		y3.Sub(x3, y3);
		z3 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p384B, t2);
		x3.Sub(y3, z3);
		z3.Add(x3, x3);
		x3.Add(x3, z3);
		z3.Sub(t1, x3);
		x3.Add(t1, x3);
		y3.Mul(p384B, y3);
		t1.Add(t2, t2);
		t2.Add(t1, t2);
		y3.Sub(y3, t2);
		y3.Sub(y3, t0);
		t1.Add(y3, y3);
		y3.Add(t1, y3);
		t1.Add(t0, t0);
		t0.Add(t1, t0);
		t0.Sub(t0, t2);
		t1.Mul(t4, y3);
		t2.Mul(t0, y3);
		y3.Mul(x3, z3);
		y3.Add(y3, t2);
		x3.Mul(t3, x3);
		x3.Sub(x3, t1);
		z3.Mul(t4, z3);
		t1.Mul(t3, t0);
		z3.Add(z3, t1);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P384Point.prototype.Add = function(p1, p2) { return this.$val.Add(p1, p2); };
	P384Point.ptr.prototype.Double = function(p) {
		var p, q, t0, t1, t2, t3, x3, y3, z3;
		q = this;
		t0 = new fiat.P384Element.ptr(arrayType$6.zero()).Square(p.x);
		t1 = new fiat.P384Element.ptr(arrayType$6.zero()).Square(p.y);
		t2 = new fiat.P384Element.ptr(arrayType$6.zero()).Square(p.z);
		t3 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.x, p.y);
		t3.Add(t3, t3);
		z3 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p.x, p.z);
		z3.Add(z3, z3);
		y3 = new fiat.P384Element.ptr(arrayType$6.zero()).Mul(p384B, t2);
		y3.Sub(y3, z3);
		x3 = new fiat.P384Element.ptr(arrayType$6.zero()).Add(y3, y3);
		y3.Add(x3, y3);
		x3.Sub(t1, y3);
		y3.Add(t1, y3);
		y3.Mul(x3, y3);
		x3.Mul(x3, t3);
		t3.Add(t2, t2);
		t2.Add(t2, t3);
		z3.Mul(p384B, z3);
		z3.Sub(z3, t2);
		z3.Sub(z3, t0);
		t3.Add(z3, z3);
		z3.Add(z3, t3);
		t3.Add(t0, t0);
		t0.Add(t3, t0);
		t0.Sub(t0, t2);
		t0.Mul(t0, z3);
		y3.Add(y3, t0);
		t0.Mul(p.y, p.z);
		t0.Add(t0, t0);
		z3.Mul(t0, z3);
		x3.Sub(x3, z3);
		z3.Mul(t0, t1);
		z3.Add(z3, z3);
		z3.Add(z3, z3);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P384Point.prototype.Double = function(p) { return this.$val.Double(p); };
	P384Point.ptr.prototype.Select = function(p1, p2, cond) {
		var cond, p1, p2, q;
		q = this;
		q.x.Select(p1.x, p2.x, cond);
		q.y.Select(p1.y, p2.y, cond);
		q.z.Select(p1.z, p2.z, cond);
		return q;
	};
	P384Point.prototype.Select = function(p1, p2, cond) { return this.$val.Select(p1, p2, cond); };
	p384Table.prototype.Select = function(p, n) {
		var cond, i, n, p, table, x, x$1;
		table = this.$val;
		if (n >= 16) {
			$panic(new $String("nistec: internal error: p384Table called with out-of-bounds value"));
		}
		p.Set(NewP384Point());
		i = 1;
		while (true) {
			if (!(i < 16)) { break; }
			cond = subtle.ConstantTimeByteEq(i, n);
			p.Select((x = table, x$1 = i - 1 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), p, cond);
			i = i + (1) << 24 >>> 24;
		}
	};
	$ptrType(p384Table).prototype.Select = function(p, n) { return (new p384Table(this.$get())).Select(p, n); };
	P384Point.ptr.prototype.ScalarMult = function(q, scalar) {
		var _i, _q, _ref, byte$1, i, i$1, p, q, scalar, t, table, windowValue, x, x$1;
		p = this;
		table = $toNativeArray($kindPtr, [NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point(), NewP384Point()]);
		table[0].Set(q);
		i = 1;
		while (true) {
			if (!(i < 15)) { break; }
			((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]).Double((x = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x < 0 || x >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x])));
			(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x$1])).Add(((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]), q);
			i = i + (2) >> 0;
		}
		t = NewP384Point();
		p.Set(NewP384Point());
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((i$1 === 0))) {
				p.Double(p);
				p.Double(p);
				p.Double(p);
				p.Double(p);
			}
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$10(table).Select(t, windowValue);
			p.Add(p, t);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$10(table).Select(t, windowValue);
			p.Add(p, t);
			_i++;
		}
		return [p, $ifaceNil];
	};
	P384Point.prototype.ScalarMult = function(q, scalar) { return this.$val.ScalarMult(q, scalar); };
	P384Point.ptr.prototype.generatorTable = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p384GeneratorTableOnce.Do((function() {
			var base, i, j, x, x$1, x$2, x$3, x$4, x$5;
			p384GeneratorTable = arrayType$1.zero();
			base = NewP384Generator();
			i = 0;
			while (true) {
				if (!(i < 96)) { break; }
				(x = p384GeneratorTable, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))[0] = NewP384Point().Set(base);
				j = 1;
				while (true) {
					if (!(j < 15)) { break; }
					(x$4 = (x$5 = p384GeneratorTable, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), ((j < 0 || j >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[j] = NewP384Point().Add((x$1 = (x$2 = p384GeneratorTable, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])), x$3 = j - 1 >> 0, ((x$3 < 0 || x$3 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$3])), base)));
					j = j + (1) >> 0;
				}
				base.Double(base);
				base.Double(base);
				base.Double(base);
				base.Double(base);
				i = i + (1) >> 0;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p384GeneratorTable;
		/* */ } return; } var $f = {$blk: P384Point.ptr.prototype.generatorTable, $c: true, $r, p, $s};return $f;
	};
	P384Point.prototype.generatorTable = function() { return this.$val.generatorTable(); };
	P384Point.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((scalar.$length === 48))) {
			$s = -1; return [ptrType$9.nil, errors.New("invalid scalar length")];
		}
		_r$1 = p.generatorTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tables = _r$1;
		t = NewP384Point();
		p.Set(NewP384Point());
		tableIndex = 95;
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$10((x = tables, ((tableIndex < 0 || tableIndex >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$10((x$1 = tables, ((tableIndex < 0 || tableIndex >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } var $f = {$blk: P384Point.ptr.prototype.ScalarBaseMult, $c: true, $r, _i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s};return $f;
	};
	P384Point.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p384Sqrt = function(e, x) {
		var candidate, e, isSquare, square, x;
		isSquare = false;
		candidate = new fiat.P384Element.ptr(arrayType$6.zero());
		p384SqrtCandidate(candidate, x);
		square = new fiat.P384Element.ptr(arrayType$6.zero()).Square(candidate);
		if (!((square.Equal(x) === 1))) {
			isSquare = false;
			return isSquare;
		}
		e.Set(candidate);
		isSquare = true;
		return isSquare;
	};
	p384SqrtCandidate = function(z, x) {
		var s, s$1, s$10, s$2, s$3, s$4, s$5, s$6, s$7, s$8, s$9, t0, t1, t2, x, z;
		t0 = new fiat.P384Element.ptr(arrayType$6.zero());
		t1 = new fiat.P384Element.ptr(arrayType$6.zero());
		t2 = new fiat.P384Element.ptr(arrayType$6.zero());
		z.Square(x);
		z.Mul(x, z);
		z.Square(z);
		t0.Mul(x, z);
		z.Square(t0);
		s = 1;
		while (true) {
			if (!(s < 3)) { break; }
			z.Square(z);
			s = s + (1) >> 0;
		}
		t1.Mul(t0, z);
		t2.Square(t1);
		z.Mul(x, t2);
		s$1 = 0;
		while (true) {
			if (!(s$1 < 5)) { break; }
			t2.Square(t2);
			s$1 = s$1 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		t2.Square(t1);
		s$2 = 1;
		while (true) {
			if (!(s$2 < 12)) { break; }
			t2.Square(t2);
			s$2 = s$2 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		s$3 = 0;
		while (true) {
			if (!(s$3 < 7)) { break; }
			t1.Square(t1);
			s$3 = s$3 + (1) >> 0;
		}
		t1.Mul(z, t1);
		z.Square(t1);
		z.Mul(x, z);
		t2.Square(z);
		s$4 = 1;
		while (true) {
			if (!(s$4 < 31)) { break; }
			t2.Square(t2);
			s$4 = s$4 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		t2.Square(t1);
		s$5 = 1;
		while (true) {
			if (!(s$5 < 63)) { break; }
			t2.Square(t2);
			s$5 = s$5 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		t2.Square(t1);
		s$6 = 1;
		while (true) {
			if (!(s$6 < 126)) { break; }
			t2.Square(t2);
			s$6 = s$6 + (1) >> 0;
		}
		t1.Mul(t1, t2);
		s$7 = 0;
		while (true) {
			if (!(s$7 < 3)) { break; }
			t1.Square(t1);
			s$7 = s$7 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$8 = 0;
		while (true) {
			if (!(s$8 < 33)) { break; }
			t0.Square(t0);
			s$8 = s$8 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$9 = 0;
		while (true) {
			if (!(s$9 < 64)) { break; }
			z.Square(z);
			s$9 = s$9 + (1) >> 0;
		}
		z.Mul(x, z);
		s$10 = 0;
		while (true) {
			if (!(s$10 < 30)) { break; }
			z.Square(z);
			s$10 = s$10 + (1) >> 0;
		}
	};
	NewP256Point = function() {
		return new P256Point.ptr(new fiat.P256Element.ptr(arrayType$7.zero()), new fiat.P256Element.ptr(arrayType$7.zero()).One(), new fiat.P256Element.ptr(arrayType$7.zero()));
	};
	$pkg.NewP256Point = NewP256Point;
	NewP256Generator = function() {
		return (new P256Point.ptr(new fiat.P256Element.ptr(arrayType$7.zero()), new fiat.P256Element.ptr(arrayType$7.zero()), new fiat.P256Element.ptr(arrayType$7.zero()))).Set(p256G);
	};
	$pkg.NewP256Generator = NewP256Generator;
	P256Point.ptr.prototype.Set = function(q) {
		var p, q;
		p = this;
		p.x.Set(q.x);
		p.y.Set(q.y);
		p.z.Set(q.z);
		return p;
	};
	P256Point.prototype.Set = function(q) { return this.$val.Set(q); };
	P256Point.ptr.prototype.SetBytes = function(b) {
		var _tuple$10, _tuple$8, _tuple$9, b, cond, err, err$1, err$2, otherRoot, p, x, x$1, x$2, y, y$1;
		p = this;
		if ((b.$length === 1) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 0)) {
			return [p.Set(NewP256Point()), $ifaceNil];
		} else if ((b.$length === 65) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 4)) {
			_tuple$8 = new fiat.P256Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 1, 33));
			x = _tuple$8[0];
			err = _tuple$8[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$12.nil, err];
			}
			_tuple$9 = new fiat.P256Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 33));
			y = _tuple$9[0];
			err = _tuple$9[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$12.nil, err];
			}
			err$1 = p256CheckOnCurve(x, y);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$12.nil, err$1];
			}
			p.x.Set(x);
			p.y.Set(y);
			p.z.One();
			return [p, $ifaceNil];
		} else if ((b.$length === 33) && (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 2) || ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 3))) {
			_tuple$10 = new fiat.P256Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 1));
			x$1 = _tuple$10[0];
			err$2 = _tuple$10[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [ptrType$12.nil, err$2];
			}
			y$1 = p256Polynomial(new fiat.P256Element.ptr(arrayType$7.zero()), x$1);
			if (!p256Sqrt(y$1, y$1)) {
				return [ptrType$12.nil, errors.New("invalid P256 compressed point encoding")];
			}
			otherRoot = new fiat.P256Element.ptr(arrayType$7.zero());
			otherRoot.Sub(otherRoot, y$1);
			cond = ((((x$2 = y$1.Bytes(), (31 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 31])) & 1) >>> 0) ^ (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) & 1) >>> 0)) << 24 >>> 24;
			y$1.Select(otherRoot, y$1, ((cond >> 0)));
			p.x.Set(x$1);
			p.y.Set(y$1);
			p.z.One();
			return [p, $ifaceNil];
		} else {
			return [ptrType$12.nil, errors.New("invalid P256 point encoding")];
		}
	};
	P256Point.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p256Polynomial = function(y2, x) {
		var threeX, x, y2;
		y2.Square(x);
		y2.Mul(y2, x);
		threeX = new fiat.P256Element.ptr(arrayType$7.zero()).Add(x, x);
		threeX.Add(threeX, x);
		y2.Sub(y2, threeX);
		return y2.Add(y2, p256B);
	};
	p256CheckOnCurve = function(x, y) {
		var lhs, rhs, x, y;
		rhs = p256Polynomial(new fiat.P256Element.ptr(arrayType$7.zero()), x);
		lhs = new fiat.P256Element.ptr(arrayType$7.zero()).Square(y);
		if (!((rhs.Equal(lhs) === 1))) {
			return errors.New("P256 point not on curve");
		}
		return $ifaceNil;
	};
	P256Point.ptr.prototype.Bytes = function() {
		var out, p;
		p = this;
		out = arrayType$14.zero();
		return p.bytes(out);
	};
	P256Point.prototype.Bytes = function() { return this.$val.Bytes(); };
	P256Point.ptr.prototype.bytes = function(out) {
		var buf, out, p, x, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P256Element.ptr(arrayType$7.zero()).Invert(p.z);
		x = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.x, zinv);
		y = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 4);
		buf = $appendSlice(buf, x.Bytes());
		buf = $appendSlice(buf, y.Bytes());
		return buf;
	};
	P256Point.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P256Point.ptr.prototype.BytesCompressed = function() {
		var out, p;
		p = this;
		out = arrayType$15.zero();
		return p.bytesCompressed(out);
	};
	P256Point.prototype.BytesCompressed = function() { return this.$val.BytesCompressed(); };
	P256Point.ptr.prototype.bytesCompressed = function(out) {
		var buf, out, p, x, x$1, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P256Element.ptr(arrayType$7.zero()).Invert(p.z);
		x = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.x, zinv);
		y = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 2);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) | ((((x$1 = y.Bytes(), (31 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 31])) & 1) >>> 0))) >>> 0));
		buf = $appendSlice(buf, x.Bytes());
		return buf;
	};
	P256Point.prototype.bytesCompressed = function(out) { return this.$val.bytesCompressed(out); };
	P256Point.ptr.prototype.Add = function(p1, p2) {
		var p1, p2, q, t0, t1, t2, t3, t4, x3, y3, z3;
		q = this;
		t0 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p1.x, p2.x);
		t1 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p1.y, p2.y);
		t2 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p1.z, p2.z);
		t3 = new fiat.P256Element.ptr(arrayType$7.zero()).Add(p1.x, p1.y);
		t4 = new fiat.P256Element.ptr(arrayType$7.zero()).Add(p2.x, p2.y);
		t3.Mul(t3, t4);
		t4.Add(t0, t1);
		t3.Sub(t3, t4);
		t4.Add(p1.y, p1.z);
		x3 = new fiat.P256Element.ptr(arrayType$7.zero()).Add(p2.y, p2.z);
		t4.Mul(t4, x3);
		x3.Add(t1, t2);
		t4.Sub(t4, x3);
		x3.Add(p1.x, p1.z);
		y3 = new fiat.P256Element.ptr(arrayType$7.zero()).Add(p2.x, p2.z);
		x3.Mul(x3, y3);
		y3.Add(t0, t2);
		y3.Sub(x3, y3);
		z3 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p256B, t2);
		x3.Sub(y3, z3);
		z3.Add(x3, x3);
		x3.Add(x3, z3);
		z3.Sub(t1, x3);
		x3.Add(t1, x3);
		y3.Mul(p256B, y3);
		t1.Add(t2, t2);
		t2.Add(t1, t2);
		y3.Sub(y3, t2);
		y3.Sub(y3, t0);
		t1.Add(y3, y3);
		y3.Add(t1, y3);
		t1.Add(t0, t0);
		t0.Add(t1, t0);
		t0.Sub(t0, t2);
		t1.Mul(t4, y3);
		t2.Mul(t0, y3);
		y3.Mul(x3, z3);
		y3.Add(y3, t2);
		x3.Mul(t3, x3);
		x3.Sub(x3, t1);
		z3.Mul(t4, z3);
		t1.Mul(t3, t0);
		z3.Add(z3, t1);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P256Point.prototype.Add = function(p1, p2) { return this.$val.Add(p1, p2); };
	P256Point.ptr.prototype.Double = function(p) {
		var p, q, t0, t1, t2, t3, x3, y3, z3;
		q = this;
		t0 = new fiat.P256Element.ptr(arrayType$7.zero()).Square(p.x);
		t1 = new fiat.P256Element.ptr(arrayType$7.zero()).Square(p.y);
		t2 = new fiat.P256Element.ptr(arrayType$7.zero()).Square(p.z);
		t3 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.x, p.y);
		t3.Add(t3, t3);
		z3 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p.x, p.z);
		z3.Add(z3, z3);
		y3 = new fiat.P256Element.ptr(arrayType$7.zero()).Mul(p256B, t2);
		y3.Sub(y3, z3);
		x3 = new fiat.P256Element.ptr(arrayType$7.zero()).Add(y3, y3);
		y3.Add(x3, y3);
		x3.Sub(t1, y3);
		y3.Add(t1, y3);
		y3.Mul(x3, y3);
		x3.Mul(x3, t3);
		t3.Add(t2, t2);
		t2.Add(t2, t3);
		z3.Mul(p256B, z3);
		z3.Sub(z3, t2);
		z3.Sub(z3, t0);
		t3.Add(z3, z3);
		z3.Add(z3, t3);
		t3.Add(t0, t0);
		t0.Add(t3, t0);
		t0.Sub(t0, t2);
		t0.Mul(t0, z3);
		y3.Add(y3, t0);
		t0.Mul(p.y, p.z);
		t0.Add(t0, t0);
		z3.Mul(t0, z3);
		x3.Sub(x3, z3);
		z3.Mul(t0, t1);
		z3.Add(z3, z3);
		z3.Add(z3, z3);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P256Point.prototype.Double = function(p) { return this.$val.Double(p); };
	P256Point.ptr.prototype.Select = function(p1, p2, cond) {
		var cond, p1, p2, q;
		q = this;
		q.x.Select(p1.x, p2.x, cond);
		q.y.Select(p1.y, p2.y, cond);
		q.z.Select(p1.z, p2.z, cond);
		return q;
	};
	P256Point.prototype.Select = function(p1, p2, cond) { return this.$val.Select(p1, p2, cond); };
	p256Table.prototype.Select = function(p, n) {
		var cond, i, n, p, table, x, x$1;
		table = this.$val;
		if (n >= 16) {
			$panic(new $String("nistec: internal error: p256Table called with out-of-bounds value"));
		}
		p.Set(NewP256Point());
		i = 1;
		while (true) {
			if (!(i < 16)) { break; }
			cond = subtle.ConstantTimeByteEq(i, n);
			p.Select((x = table, x$1 = i - 1 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), p, cond);
			i = i + (1) << 24 >>> 24;
		}
	};
	$ptrType(p256Table).prototype.Select = function(p, n) { return (new p256Table(this.$get())).Select(p, n); };
	P256Point.ptr.prototype.ScalarMult = function(q, scalar) {
		var _i, _q, _ref, byte$1, i, i$1, p, q, scalar, t, table, windowValue, x, x$1;
		p = this;
		table = $toNativeArray($kindPtr, [NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point(), NewP256Point()]);
		table[0].Set(q);
		i = 1;
		while (true) {
			if (!(i < 15)) { break; }
			((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]).Double((x = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x < 0 || x >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x])));
			(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x$1])).Add(((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]), q);
			i = i + (2) >> 0;
		}
		t = NewP256Point();
		p.Set(NewP256Point());
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((i$1 === 0))) {
				p.Double(p);
				p.Double(p);
				p.Double(p);
				p.Double(p);
			}
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$13(table).Select(t, windowValue);
			p.Add(p, t);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$13(table).Select(t, windowValue);
			p.Add(p, t);
			_i++;
		}
		return [p, $ifaceNil];
	};
	P256Point.prototype.ScalarMult = function(q, scalar) { return this.$val.ScalarMult(q, scalar); };
	P256Point.ptr.prototype.generatorTable = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p256GeneratorTableOnce.Do((function() {
			var base, i, j, x, x$1, x$2, x$3, x$4, x$5;
			p256GeneratorTable = arrayType$2.zero();
			base = NewP256Generator();
			i = 0;
			while (true) {
				if (!(i < 64)) { break; }
				(x = p256GeneratorTable, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))[0] = NewP256Point().Set(base);
				j = 1;
				while (true) {
					if (!(j < 15)) { break; }
					(x$4 = (x$5 = p256GeneratorTable, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), ((j < 0 || j >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[j] = NewP256Point().Add((x$1 = (x$2 = p256GeneratorTable, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])), x$3 = j - 1 >> 0, ((x$3 < 0 || x$3 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$3])), base)));
					j = j + (1) >> 0;
				}
				base.Double(base);
				base.Double(base);
				base.Double(base);
				base.Double(base);
				i = i + (1) >> 0;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p256GeneratorTable;
		/* */ } return; } var $f = {$blk: P256Point.ptr.prototype.generatorTable, $c: true, $r, p, $s};return $f;
	};
	P256Point.prototype.generatorTable = function() { return this.$val.generatorTable(); };
	P256Point.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((scalar.$length === 32))) {
			$s = -1; return [ptrType$12.nil, errors.New("invalid scalar length")];
		}
		_r$1 = p.generatorTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tables = _r$1;
		t = NewP256Point();
		p.Set(NewP256Point());
		tableIndex = 63;
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$13((x = tables, ((tableIndex < 0 || tableIndex >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$13((x$1 = tables, ((tableIndex < 0 || tableIndex >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } var $f = {$blk: P256Point.ptr.prototype.ScalarBaseMult, $c: true, $r, _i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s};return $f;
	};
	P256Point.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p256Sqrt = function(e, x) {
		var candidate, e, isSquare, square, x;
		isSquare = false;
		candidate = new fiat.P256Element.ptr(arrayType$7.zero());
		p256SqrtCandidate(candidate, x);
		square = new fiat.P256Element.ptr(arrayType$7.zero()).Square(candidate);
		if (!((square.Equal(x) === 1))) {
			isSquare = false;
			return isSquare;
		}
		e.Set(candidate);
		isSquare = true;
		return isSquare;
	};
	p256SqrtCandidate = function(z, x) {
		var s, s$1, s$2, s$3, s$4, s$5, s$6, t0, x, z;
		t0 = new fiat.P256Element.ptr(arrayType$7.zero());
		z.Square(x);
		z.Mul(x, z);
		t0.Square(z);
		s = 1;
		while (true) {
			if (!(s < 2)) { break; }
			t0.Square(t0);
			s = s + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$1 = 1;
		while (true) {
			if (!(s$1 < 4)) { break; }
			t0.Square(t0);
			s$1 = s$1 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$2 = 1;
		while (true) {
			if (!(s$2 < 8)) { break; }
			t0.Square(t0);
			s$2 = s$2 + (1) >> 0;
		}
		z.Mul(z, t0);
		t0.Square(z);
		s$3 = 1;
		while (true) {
			if (!(s$3 < 16)) { break; }
			t0.Square(t0);
			s$3 = s$3 + (1) >> 0;
		}
		z.Mul(z, t0);
		s$4 = 0;
		while (true) {
			if (!(s$4 < 32)) { break; }
			z.Square(z);
			s$4 = s$4 + (1) >> 0;
		}
		z.Mul(x, z);
		s$5 = 0;
		while (true) {
			if (!(s$5 < 96)) { break; }
			z.Square(z);
			s$5 = s$5 + (1) >> 0;
		}
		z.Mul(x, z);
		s$6 = 0;
		while (true) {
			if (!(s$6 < 94)) { break; }
			z.Square(z);
			s$6 = s$6 + (1) >> 0;
		}
	};
	p224SqrtCandidate = function(r, x) {
		var {cond, i, j, r, s, s$1, s$2, s$3, s$4, s$5, s$6, t0, t1, v, w, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {r, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = p224GGOnce.Do((function() {
			var _i, _ref, i, x$1, x$2, x$3, x$4;
			p224GG = arrayType$3.zero();
			_ref = p224GG;
			_i = 0;
			while (true) {
				if (!(_i < 96)) { break; }
				i = _i;
				if (i === 0) {
					(x$1 = p224GG, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])).SetBytes(new sliceType([106, 15, 236, 103, 133, 152, 167, 146, 12, 85, 178, 212, 11, 45, 111, 251, 190, 163, 216, 206, 243, 251, 54, 50, 220, 105, 27, 116]));
				} else {
					(x$2 = p224GG, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])).Square((x$3 = p224GG, x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])));
				}
				_i++;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t0 = new fiat.P224Element.ptr(arrayType$7.zero());
		t1 = new fiat.P224Element.ptr(arrayType$7.zero());
		r.Square(x);
		r.Mul(x, r);
		r.Square(r);
		r.Mul(x, r);
		t0.Square(r);
		s = 1;
		while (true) {
			if (!(s < 3)) { break; }
			t0.Square(t0);
			s = s + (1) >> 0;
		}
		t0.Mul(r, t0);
		t1.Square(t0);
		r.Mul(x, t1);
		s$1 = 0;
		while (true) {
			if (!(s$1 < 5)) { break; }
			t1.Square(t1);
			s$1 = s$1 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		t1.Square(t0);
		s$2 = 1;
		while (true) {
			if (!(s$2 < 12)) { break; }
			t1.Square(t1);
			s$2 = s$2 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		t1.Square(t0);
		s$3 = 1;
		while (true) {
			if (!(s$3 < 7)) { break; }
			t1.Square(t1);
			s$3 = s$3 + (1) >> 0;
		}
		r.Mul(r, t1);
		s$4 = 0;
		while (true) {
			if (!(s$4 < 17)) { break; }
			t1.Square(t1);
			s$4 = s$4 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		t1.Square(t0);
		s$5 = 1;
		while (true) {
			if (!(s$5 < 48)) { break; }
			t1.Square(t1);
			s$5 = s$5 + (1) >> 0;
		}
		t0.Mul(t0, t1);
		s$6 = 0;
		while (true) {
			if (!(s$6 < 31)) { break; }
			t0.Square(t0);
			s$6 = s$6 + (1) >> 0;
		}
		r.Mul(r, t0);
		v = new fiat.P224Element.ptr(arrayType$7.zero()).Square(r);
		v.Mul(v, x);
		r.Mul(r, x);
		i = 95;
		while (true) {
			if (!(i >= 1)) { break; }
			w = new fiat.P224Element.ptr(arrayType$7.zero()).Set(v);
			j = 0;
			while (true) {
				if (!(j < (i - 1 >> 0))) { break; }
				w.Square(w);
				j = j + (1) >> 0;
			}
			cond = w.Equal(p224MinusOne);
			v.Select(t0.Mul(v, (x$1 = p224GG, x$2 = 96 - i >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2]))), v, cond);
			r.Select(t0.Mul(r, (x$3 = p224GG, x$4 = (96 - i >> 0) - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))), r, cond);
			i = i - (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: p224SqrtCandidate, $c: true, $r, cond, i, j, r, s, s$1, s$2, s$3, s$4, s$5, s$6, t0, t1, v, w, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	NewP224Point = function() {
		return new P224Point.ptr(new fiat.P224Element.ptr(arrayType$7.zero()), new fiat.P224Element.ptr(arrayType$7.zero()).One(), new fiat.P224Element.ptr(arrayType$7.zero()));
	};
	$pkg.NewP224Point = NewP224Point;
	NewP224Generator = function() {
		return (new P224Point.ptr(new fiat.P224Element.ptr(arrayType$7.zero()), new fiat.P224Element.ptr(arrayType$7.zero()), new fiat.P224Element.ptr(arrayType$7.zero()))).Set(p224G);
	};
	$pkg.NewP224Generator = NewP224Generator;
	P224Point.ptr.prototype.Set = function(q) {
		var p, q;
		p = this;
		p.x.Set(q.x);
		p.y.Set(q.y);
		p.z.Set(q.z);
		return p;
	};
	P224Point.prototype.Set = function(q) { return this.$val.Set(q); };
	P224Point.ptr.prototype.SetBytes = function(b) {
		var {_r$1, _tuple$10, _tuple$8, _tuple$9, b, cond, err, err$1, err$2, otherRoot, p, x, x$1, x$2, y, y$1, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			/* */ if ((b.$length === 1) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 0)) { $s = 2; continue; }
			/* */ if ((b.$length === 57) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 4)) { $s = 3; continue; }
			/* */ if ((b.$length === 29) && (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 2) || ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 3))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((b.$length === 1) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 0)) { */ case 2:
				$s = -1; return [p.Set(NewP224Point()), $ifaceNil];
			/* } else if ((b.$length === 57) && ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 4)) { */ case 3:
				_tuple$8 = new fiat.P224Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 1, 29));
				x = _tuple$8[0];
				err = _tuple$8[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType$15.nil, err];
				}
				_tuple$9 = new fiat.P224Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 29));
				y = _tuple$9[0];
				err = _tuple$9[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType$15.nil, err];
				}
				err$1 = p224CheckOnCurve(x, y);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [ptrType$15.nil, err$1];
				}
				p.x.Set(x);
				p.y.Set(y);
				p.z.One();
				$s = -1; return [p, $ifaceNil];
			/* } else if ((b.$length === 29) && (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 2) || ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 3))) { */ case 4:
				_tuple$10 = new fiat.P224Element.ptr(arrayType$7.zero()).SetBytes($subslice(b, 1));
				x$1 = _tuple$10[0];
				err$2 = _tuple$10[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return [ptrType$15.nil, err$2];
				}
				y$1 = p224Polynomial(new fiat.P224Element.ptr(arrayType$7.zero()), x$1);
				_r$1 = p224Sqrt(y$1, y$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!_r$1) { */ case 7:
					$s = -1; return [ptrType$15.nil, errors.New("invalid P224 compressed point encoding")];
				/* } */ case 8:
				otherRoot = new fiat.P224Element.ptr(arrayType$7.zero());
				otherRoot.Sub(otherRoot, y$1);
				cond = ((((x$2 = y$1.Bytes(), (27 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 27])) & 1) >>> 0) ^ (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) & 1) >>> 0)) << 24 >>> 24;
				y$1.Select(otherRoot, y$1, ((cond >> 0)));
				p.x.Set(x$1);
				p.y.Set(y$1);
				p.z.One();
				$s = -1; return [p, $ifaceNil];
			/* } else { */ case 5:
				$s = -1; return [ptrType$15.nil, errors.New("invalid P224 point encoding")];
			/* } */ case 6:
		case 1:
		$s = -1; return [ptrType$15.nil, $ifaceNil];
		/* */ } return; } var $f = {$blk: P224Point.ptr.prototype.SetBytes, $c: true, $r, _r$1, _tuple$10, _tuple$8, _tuple$9, b, cond, err, err$1, err$2, otherRoot, p, x, x$1, x$2, y, y$1, $s};return $f;
	};
	P224Point.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p224Polynomial = function(y2, x) {
		var threeX, x, y2;
		y2.Square(x);
		y2.Mul(y2, x);
		threeX = new fiat.P224Element.ptr(arrayType$7.zero()).Add(x, x);
		threeX.Add(threeX, x);
		y2.Sub(y2, threeX);
		return y2.Add(y2, p224B);
	};
	p224CheckOnCurve = function(x, y) {
		var lhs, rhs, x, y;
		rhs = p224Polynomial(new fiat.P224Element.ptr(arrayType$7.zero()), x);
		lhs = new fiat.P224Element.ptr(arrayType$7.zero()).Square(y);
		if (!((rhs.Equal(lhs) === 1))) {
			return errors.New("P224 point not on curve");
		}
		return $ifaceNil;
	};
	P224Point.ptr.prototype.Bytes = function() {
		var out, p;
		p = this;
		out = arrayType$17.zero();
		return p.bytes(out);
	};
	P224Point.prototype.Bytes = function() { return this.$val.Bytes(); };
	P224Point.ptr.prototype.bytes = function(out) {
		var buf, out, p, x, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P224Element.ptr(arrayType$7.zero()).Invert(p.z);
		x = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.x, zinv);
		y = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 4);
		buf = $appendSlice(buf, x.Bytes());
		buf = $appendSlice(buf, y.Bytes());
		return buf;
	};
	P224Point.prototype.bytes = function(out) { return this.$val.bytes(out); };
	P224Point.ptr.prototype.BytesCompressed = function() {
		var out, p;
		p = this;
		out = arrayType$18.zero();
		return p.bytesCompressed(out);
	};
	P224Point.prototype.BytesCompressed = function() { return this.$val.BytesCompressed(); };
	P224Point.ptr.prototype.bytesCompressed = function(out) {
		var buf, out, p, x, x$1, y, zinv;
		p = this;
		if (p.z.IsZero() === 1) {
			return $append($subslice(new sliceType(out), 0, 0), 0);
		}
		zinv = new fiat.P224Element.ptr(arrayType$7.zero()).Invert(p.z);
		x = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.x, zinv);
		y = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.y, zinv);
		buf = $append($subslice(new sliceType(out), 0, 0), 2);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) | ((((x$1 = y.Bytes(), (27 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 27])) & 1) >>> 0))) >>> 0));
		buf = $appendSlice(buf, x.Bytes());
		return buf;
	};
	P224Point.prototype.bytesCompressed = function(out) { return this.$val.bytesCompressed(out); };
	P224Point.ptr.prototype.Add = function(p1, p2) {
		var p1, p2, q, t0, t1, t2, t3, t4, x3, y3, z3;
		q = this;
		t0 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p1.x, p2.x);
		t1 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p1.y, p2.y);
		t2 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p1.z, p2.z);
		t3 = new fiat.P224Element.ptr(arrayType$7.zero()).Add(p1.x, p1.y);
		t4 = new fiat.P224Element.ptr(arrayType$7.zero()).Add(p2.x, p2.y);
		t3.Mul(t3, t4);
		t4.Add(t0, t1);
		t3.Sub(t3, t4);
		t4.Add(p1.y, p1.z);
		x3 = new fiat.P224Element.ptr(arrayType$7.zero()).Add(p2.y, p2.z);
		t4.Mul(t4, x3);
		x3.Add(t1, t2);
		t4.Sub(t4, x3);
		x3.Add(p1.x, p1.z);
		y3 = new fiat.P224Element.ptr(arrayType$7.zero()).Add(p2.x, p2.z);
		x3.Mul(x3, y3);
		y3.Add(t0, t2);
		y3.Sub(x3, y3);
		z3 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p224B, t2);
		x3.Sub(y3, z3);
		z3.Add(x3, x3);
		x3.Add(x3, z3);
		z3.Sub(t1, x3);
		x3.Add(t1, x3);
		y3.Mul(p224B, y3);
		t1.Add(t2, t2);
		t2.Add(t1, t2);
		y3.Sub(y3, t2);
		y3.Sub(y3, t0);
		t1.Add(y3, y3);
		y3.Add(t1, y3);
		t1.Add(t0, t0);
		t0.Add(t1, t0);
		t0.Sub(t0, t2);
		t1.Mul(t4, y3);
		t2.Mul(t0, y3);
		y3.Mul(x3, z3);
		y3.Add(y3, t2);
		x3.Mul(t3, x3);
		x3.Sub(x3, t1);
		z3.Mul(t4, z3);
		t1.Mul(t3, t0);
		z3.Add(z3, t1);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P224Point.prototype.Add = function(p1, p2) { return this.$val.Add(p1, p2); };
	P224Point.ptr.prototype.Double = function(p) {
		var p, q, t0, t1, t2, t3, x3, y3, z3;
		q = this;
		t0 = new fiat.P224Element.ptr(arrayType$7.zero()).Square(p.x);
		t1 = new fiat.P224Element.ptr(arrayType$7.zero()).Square(p.y);
		t2 = new fiat.P224Element.ptr(arrayType$7.zero()).Square(p.z);
		t3 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.x, p.y);
		t3.Add(t3, t3);
		z3 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p.x, p.z);
		z3.Add(z3, z3);
		y3 = new fiat.P224Element.ptr(arrayType$7.zero()).Mul(p224B, t2);
		y3.Sub(y3, z3);
		x3 = new fiat.P224Element.ptr(arrayType$7.zero()).Add(y3, y3);
		y3.Add(x3, y3);
		x3.Sub(t1, y3);
		y3.Add(t1, y3);
		y3.Mul(x3, y3);
		x3.Mul(x3, t3);
		t3.Add(t2, t2);
		t2.Add(t2, t3);
		z3.Mul(p224B, z3);
		z3.Sub(z3, t2);
		z3.Sub(z3, t0);
		t3.Add(z3, z3);
		z3.Add(z3, t3);
		t3.Add(t0, t0);
		t0.Add(t3, t0);
		t0.Sub(t0, t2);
		t0.Mul(t0, z3);
		y3.Add(y3, t0);
		t0.Mul(p.y, p.z);
		t0.Add(t0, t0);
		z3.Mul(t0, z3);
		x3.Sub(x3, z3);
		z3.Mul(t0, t1);
		z3.Add(z3, z3);
		z3.Add(z3, z3);
		q.x.Set(x3);
		q.y.Set(y3);
		q.z.Set(z3);
		return q;
	};
	P224Point.prototype.Double = function(p) { return this.$val.Double(p); };
	P224Point.ptr.prototype.Select = function(p1, p2, cond) {
		var cond, p1, p2, q;
		q = this;
		q.x.Select(p1.x, p2.x, cond);
		q.y.Select(p1.y, p2.y, cond);
		q.z.Select(p1.z, p2.z, cond);
		return q;
	};
	P224Point.prototype.Select = function(p1, p2, cond) { return this.$val.Select(p1, p2, cond); };
	p224Table.prototype.Select = function(p, n) {
		var cond, i, n, p, table, x, x$1;
		table = this.$val;
		if (n >= 16) {
			$panic(new $String("nistec: internal error: p224Table called with out-of-bounds value"));
		}
		p.Set(NewP224Point());
		i = 1;
		while (true) {
			if (!(i < 16)) { break; }
			cond = subtle.ConstantTimeByteEq(i, n);
			p.Select((x = table, x$1 = i - 1 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), p, cond);
			i = i + (1) << 24 >>> 24;
		}
	};
	$ptrType(p224Table).prototype.Select = function(p, n) { return (new p224Table(this.$get())).Select(p, n); };
	P224Point.ptr.prototype.ScalarMult = function(q, scalar) {
		var _i, _q, _ref, byte$1, i, i$1, p, q, scalar, t, table, windowValue, x, x$1;
		p = this;
		table = $toNativeArray($kindPtr, [NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point()]);
		table[0].Set(q);
		i = 1;
		while (true) {
			if (!(i < 15)) { break; }
			((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]).Double((x = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x < 0 || x >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x])));
			(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[x$1])).Add(((i < 0 || i >= table.length) ? ($throwRuntimeError("index out of range"), undefined) : table[i]), q);
			i = i + (2) >> 0;
		}
		t = NewP224Point();
		p.Set(NewP224Point());
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((i$1 === 0))) {
				p.Double(p);
				p.Double(p);
				p.Double(p);
				p.Double(p);
			}
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$16(table).Select(t, windowValue);
			p.Add(p, t);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			p.Double(p);
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$16(table).Select(t, windowValue);
			p.Add(p, t);
			_i++;
		}
		return [p, $ifaceNil];
	};
	P224Point.prototype.ScalarMult = function(q, scalar) { return this.$val.ScalarMult(q, scalar); };
	P224Point.ptr.prototype.generatorTable = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p224GeneratorTableOnce.Do((function() {
			var base, i, j, x, x$1, x$2, x$3, x$4, x$5;
			p224GeneratorTable = arrayType$4.zero();
			base = NewP224Generator();
			i = 0;
			while (true) {
				if (!(i < 56)) { break; }
				(x = p224GeneratorTable, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))[0] = NewP224Point().Set(base);
				j = 1;
				while (true) {
					if (!(j < 15)) { break; }
					(x$4 = (x$5 = p224GeneratorTable, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), ((j < 0 || j >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[j] = NewP224Point().Add((x$1 = (x$2 = p224GeneratorTable, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])), x$3 = j - 1 >> 0, ((x$3 < 0 || x$3 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$3])), base)));
					j = j + (1) >> 0;
				}
				base.Double(base);
				base.Double(base);
				base.Double(base);
				base.Double(base);
				i = i + (1) >> 0;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p224GeneratorTable;
		/* */ } return; } var $f = {$blk: P224Point.ptr.prototype.generatorTable, $c: true, $r, p, $s};return $f;
	};
	P224Point.prototype.generatorTable = function() { return this.$val.generatorTable(); };
	P224Point.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((scalar.$length === 28))) {
			$s = -1; return [ptrType$15.nil, errors.New("invalid scalar length")];
		}
		_r$1 = p.generatorTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tables = _r$1;
		t = NewP224Point();
		p.Set(NewP224Point());
		tableIndex = 55;
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			windowValue = byte$1 >>> 4 << 24 >>> 24;
			new ptrType$16((x = tables, ((tableIndex < 0 || tableIndex >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			windowValue = (byte$1 & 15) >>> 0;
			new ptrType$16((x$1 = tables, ((tableIndex < 0 || tableIndex >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tableIndex]))).Select(t, windowValue);
			p.Add(p, t);
			tableIndex = tableIndex - (1) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } var $f = {$blk: P224Point.ptr.prototype.ScalarBaseMult, $c: true, $r, _i, _r$1, _ref, byte$1, p, scalar, t, tableIndex, tables, windowValue, x, x$1, $s};return $f;
	};
	P224Point.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p224Sqrt = function(e, x) {
		var {candidate, e, isSquare, square, x, $s, $r, $c} = $restore(this, {e, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		isSquare = false;
		candidate = new fiat.P224Element.ptr(arrayType$7.zero());
		$r = p224SqrtCandidate(candidate, x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		square = new fiat.P224Element.ptr(arrayType$7.zero()).Square(candidate);
		if (!((square.Equal(x) === 1))) {
			isSquare = false;
			$s = -1; return isSquare;
		}
		e.Set(candidate);
		isSquare = true;
		$s = -1; return isSquare;
		/* */ } return; } var $f = {$blk: p224Sqrt, $c: true, $r, candidate, e, isSquare, square, x, $s};return $f;
	};
	wrapP224 = function(point) {
		var point, x;
		return (x = new p224Wrapper.ptr(point), new x.constructor.elem(x));
	};
	NewP224WrappedPoint = function() {
		return wrapP224(NewP224Point());
	};
	$pkg.NewP224WrappedPoint = NewP224WrappedPoint;
	p224Wrapper.ptr.prototype.Bytes = function() {
		var w;
		w = this;
		return w.point.Bytes();
	};
	p224Wrapper.prototype.Bytes = function() { return this.$val.Bytes(); };
	p224Wrapper.ptr.prototype.SetBytes = function(b) {
		var {_r$1, _tuple$8, b, err, p, w, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		_r$1 = w.point.SetBytes(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$8 = _r$1;
		p = _tuple$8[0];
		err = _tuple$8[1];
		$s = -1; return [wrapP224(p), err];
		/* */ } return; } var $f = {$blk: p224Wrapper.ptr.prototype.SetBytes, $c: true, $r, _r$1, _tuple$8, b, err, p, w, $s};return $f;
	};
	p224Wrapper.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p224Wrapper.ptr.prototype.Add = function(w1, w2) {
		var w, w1, w2;
		w = this;
		return wrapP224(w.point.Add($assertType(w1, p224Wrapper).point, $assertType(w2, p224Wrapper).point));
	};
	p224Wrapper.prototype.Add = function(w1, w2) { return this.$val.Add(w1, w2); };
	p224Wrapper.ptr.prototype.Double = function(w1) {
		var w, w1;
		w = this;
		return wrapP224(w.point.Double($assertType(w1, p224Wrapper).point));
	};
	p224Wrapper.prototype.Double = function(w1) { return this.$val.Double(w1); };
	p224Wrapper.ptr.prototype.ScalarMult = function(w1, scalar) {
		var _tuple$8, err, p, scalar, w, w1;
		w = this;
		_tuple$8 = w.point.ScalarMult($assertType(w1, p224Wrapper).point, scalar);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP224(p), err];
	};
	p224Wrapper.prototype.ScalarMult = function(w1, scalar) { return this.$val.ScalarMult(w1, scalar); };
	p224Wrapper.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_r$1, _tuple$8, err, p, scalar, w, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		_r$1 = w.point.ScalarBaseMult(scalar); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$8 = _r$1;
		p = _tuple$8[0];
		err = _tuple$8[1];
		$s = -1; return [wrapP224(p), err];
		/* */ } return; } var $f = {$blk: p224Wrapper.ptr.prototype.ScalarBaseMult, $c: true, $r, _r$1, _tuple$8, err, p, scalar, w, $s};return $f;
	};
	p224Wrapper.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	wrapP256 = function(point) {
		var point, x;
		return (x = new p256Wrapper.ptr(point), new x.constructor.elem(x));
	};
	NewP256WrappedPoint = function() {
		return wrapP256(NewP256Point());
	};
	$pkg.NewP256WrappedPoint = NewP256WrappedPoint;
	p256Wrapper.ptr.prototype.Bytes = function() {
		var w;
		w = this;
		return w.point.Bytes();
	};
	p256Wrapper.prototype.Bytes = function() { return this.$val.Bytes(); };
	p256Wrapper.ptr.prototype.SetBytes = function(b) {
		var _tuple$8, b, err, p, w;
		w = this;
		_tuple$8 = w.point.SetBytes(b);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP256(p), err];
	};
	p256Wrapper.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p256Wrapper.ptr.prototype.Add = function(w1, w2) {
		var w, w1, w2;
		w = this;
		return wrapP256(w.point.Add($assertType(w1, p256Wrapper).point, $assertType(w2, p256Wrapper).point));
	};
	p256Wrapper.prototype.Add = function(w1, w2) { return this.$val.Add(w1, w2); };
	p256Wrapper.ptr.prototype.Double = function(w1) {
		var w, w1;
		w = this;
		return wrapP256(w.point.Double($assertType(w1, p256Wrapper).point));
	};
	p256Wrapper.prototype.Double = function(w1) { return this.$val.Double(w1); };
	p256Wrapper.ptr.prototype.ScalarMult = function(w1, scalar) {
		var _tuple$8, err, p, scalar, w, w1;
		w = this;
		_tuple$8 = w.point.ScalarMult($assertType(w1, p256Wrapper).point, scalar);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP256(p), err];
	};
	p256Wrapper.prototype.ScalarMult = function(w1, scalar) { return this.$val.ScalarMult(w1, scalar); };
	p256Wrapper.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_r$1, _tuple$8, err, p, scalar, w, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		_r$1 = w.point.ScalarBaseMult(scalar); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$8 = _r$1;
		p = _tuple$8[0];
		err = _tuple$8[1];
		$s = -1; return [wrapP256(p), err];
		/* */ } return; } var $f = {$blk: p256Wrapper.ptr.prototype.ScalarBaseMult, $c: true, $r, _r$1, _tuple$8, err, p, scalar, w, $s};return $f;
	};
	p256Wrapper.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	wrapP521 = function(point) {
		var point, x;
		return (x = new p521Wrapper.ptr(point), new x.constructor.elem(x));
	};
	NewP521WrappedPoint = function() {
		return wrapP521(NewP521Point());
	};
	$pkg.NewP521WrappedPoint = NewP521WrappedPoint;
	p521Wrapper.ptr.prototype.Bytes = function() {
		var w;
		w = this;
		return w.point.Bytes();
	};
	p521Wrapper.prototype.Bytes = function() { return this.$val.Bytes(); };
	p521Wrapper.ptr.prototype.SetBytes = function(b) {
		var _tuple$8, b, err, p, w;
		w = this;
		_tuple$8 = w.point.SetBytes(b);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP521(p), err];
	};
	p521Wrapper.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p521Wrapper.ptr.prototype.Add = function(w1, w2) {
		var w, w1, w2;
		w = this;
		return wrapP521(w.point.Add($assertType(w1, p521Wrapper).point, $assertType(w2, p521Wrapper).point));
	};
	p521Wrapper.prototype.Add = function(w1, w2) { return this.$val.Add(w1, w2); };
	p521Wrapper.ptr.prototype.Double = function(w1) {
		var w, w1;
		w = this;
		return wrapP521(w.point.Double($assertType(w1, p521Wrapper).point));
	};
	p521Wrapper.prototype.Double = function(w1) { return this.$val.Double(w1); };
	p521Wrapper.ptr.prototype.ScalarMult = function(w1, scalar) {
		var _tuple$8, err, p, scalar, w, w1;
		w = this;
		_tuple$8 = w.point.ScalarMult($assertType(w1, p521Wrapper).point, scalar);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP521(p), err];
	};
	p521Wrapper.prototype.ScalarMult = function(w1, scalar) { return this.$val.ScalarMult(w1, scalar); };
	p521Wrapper.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_r$1, _tuple$8, err, p, scalar, w, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		_r$1 = w.point.ScalarBaseMult(scalar); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$8 = _r$1;
		p = _tuple$8[0];
		err = _tuple$8[1];
		$s = -1; return [wrapP521(p), err];
		/* */ } return; } var $f = {$blk: p521Wrapper.ptr.prototype.ScalarBaseMult, $c: true, $r, _r$1, _tuple$8, err, p, scalar, w, $s};return $f;
	};
	p521Wrapper.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	wrapP384 = function(point) {
		var point, x;
		return (x = new p384Wrapper.ptr(point), new x.constructor.elem(x));
	};
	NewP384WrappedPoint = function() {
		return wrapP384(NewP384Point());
	};
	$pkg.NewP384WrappedPoint = NewP384WrappedPoint;
	p384Wrapper.ptr.prototype.Bytes = function() {
		var w;
		w = this;
		return w.point.Bytes();
	};
	p384Wrapper.prototype.Bytes = function() { return this.$val.Bytes(); };
	p384Wrapper.ptr.prototype.SetBytes = function(b) {
		var _tuple$8, b, err, p, w;
		w = this;
		_tuple$8 = w.point.SetBytes(b);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP384(p), err];
	};
	p384Wrapper.prototype.SetBytes = function(b) { return this.$val.SetBytes(b); };
	p384Wrapper.ptr.prototype.Add = function(w1, w2) {
		var w, w1, w2;
		w = this;
		return wrapP384(w.point.Add($assertType(w1, p384Wrapper).point, $assertType(w2, p384Wrapper).point));
	};
	p384Wrapper.prototype.Add = function(w1, w2) { return this.$val.Add(w1, w2); };
	p384Wrapper.ptr.prototype.Double = function(w1) {
		var w, w1;
		w = this;
		return wrapP384(w.point.Double($assertType(w1, p384Wrapper).point));
	};
	p384Wrapper.prototype.Double = function(w1) { return this.$val.Double(w1); };
	p384Wrapper.ptr.prototype.ScalarMult = function(w1, scalar) {
		var _tuple$8, err, p, scalar, w, w1;
		w = this;
		_tuple$8 = w.point.ScalarMult($assertType(w1, p384Wrapper).point, scalar);
		p = _tuple$8[0];
		err = _tuple$8[1];
		return [wrapP384(p), err];
	};
	p384Wrapper.prototype.ScalarMult = function(w1, scalar) { return this.$val.ScalarMult(w1, scalar); };
	p384Wrapper.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {_r$1, _tuple$8, err, p, scalar, w, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		_r$1 = w.point.ScalarBaseMult(scalar); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$8 = _r$1;
		p = _tuple$8[0];
		err = _tuple$8[1];
		$s = -1; return [wrapP384(p), err];
		/* */ } return; } var $f = {$blk: p384Wrapper.ptr.prototype.ScalarBaseMult, $c: true, $r, _r$1, _tuple$8, err, p, scalar, w, $s};return $f;
	};
	p384Wrapper.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	ptrType$6.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$6, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$17], [sliceType], false)}, {prop: "BytesCompressed", name: "BytesCompressed", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytesCompressed", name: "bytesCompressed", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$18], [sliceType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$6, ptrType$6], [ptrType$6], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$6], [ptrType$6], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$6, ptrType$6, $Int], [ptrType$6], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$6, sliceType], [ptrType$6, $error], false)}, {prop: "generatorTable", name: "generatorTable", pkg: "crypto/internal/nistec", typ: $funcType([], [ptrType], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$6, $error], false)}];
	ptrType$7.methods = [{prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$6, $Uint8], [], false)}];
	ptrType$9.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$9], [ptrType$9], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$9, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$19], [sliceType], false)}, {prop: "BytesCompressed", name: "BytesCompressed", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytesCompressed", name: "bytesCompressed", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$20], [sliceType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$9, ptrType$9], [ptrType$9], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$9], [ptrType$9], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$9, ptrType$9, $Int], [ptrType$9], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$9, sliceType], [ptrType$9, $error], false)}, {prop: "generatorTable", name: "generatorTable", pkg: "crypto/internal/nistec", typ: $funcType([], [ptrType$1], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$9, $error], false)}];
	ptrType$10.methods = [{prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$9, $Uint8], [], false)}];
	ptrType$12.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$12], [ptrType$12], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$12, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$21], [sliceType], false)}, {prop: "BytesCompressed", name: "BytesCompressed", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytesCompressed", name: "bytesCompressed", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$22], [sliceType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$12, ptrType$12], [ptrType$12], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$12], [ptrType$12], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$12, ptrType$12, $Int], [ptrType$12], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$12, sliceType], [ptrType$12, $error], false)}, {prop: "generatorTable", name: "generatorTable", pkg: "crypto/internal/nistec", typ: $funcType([], [ptrType$2], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$12, $error], false)}];
	ptrType$13.methods = [{prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$12, $Uint8], [], false)}];
	ptrType$15.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$15], [ptrType$15], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType$15, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$23], [sliceType], false)}, {prop: "BytesCompressed", name: "BytesCompressed", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytesCompressed", name: "bytesCompressed", pkg: "crypto/internal/nistec", typ: $funcType([ptrType$24], [sliceType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$15, ptrType$15], [ptrType$15], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$15], [ptrType$15], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$15, ptrType$15, $Int], [ptrType$15], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$15, sliceType], [ptrType$15, $error], false)}, {prop: "generatorTable", name: "generatorTable", pkg: "crypto/internal/nistec", typ: $funcType([], [ptrType$4], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$15, $error], false)}];
	ptrType$16.methods = [{prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$15, $Uint8], [], false)}];
	p224Wrapper.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([WrappedPoint, WrappedPoint], [WrappedPoint], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([WrappedPoint], [WrappedPoint], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([WrappedPoint, sliceType], [WrappedPoint, $error], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}];
	p256Wrapper.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([WrappedPoint, WrappedPoint], [WrappedPoint], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([WrappedPoint], [WrappedPoint], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([WrappedPoint, sliceType], [WrappedPoint, $error], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}];
	p521Wrapper.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([WrappedPoint, WrappedPoint], [WrappedPoint], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([WrappedPoint], [WrappedPoint], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([WrappedPoint, sliceType], [WrappedPoint, $error], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}];
	p384Wrapper.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([WrappedPoint, WrappedPoint], [WrappedPoint], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([WrappedPoint], [WrappedPoint], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([WrappedPoint, sliceType], [WrappedPoint, $error], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}];
	P521Point.init("crypto/internal/nistec", [{prop: "x", name: "x", embedded: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "y", name: "y", embedded: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "z", name: "z", embedded: false, exported: false, typ: ptrType$5, tag: ""}]);
	p521Table.init(ptrType$6, 15);
	P384Point.init("crypto/internal/nistec", [{prop: "x", name: "x", embedded: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "y", name: "y", embedded: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "z", name: "z", embedded: false, exported: false, typ: ptrType$8, tag: ""}]);
	p384Table.init(ptrType$9, 15);
	P256Point.init("crypto/internal/nistec", [{prop: "x", name: "x", embedded: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "y", name: "y", embedded: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "z", name: "z", embedded: false, exported: false, typ: ptrType$11, tag: ""}]);
	p256Table.init(ptrType$12, 15);
	P224Point.init("crypto/internal/nistec", [{prop: "x", name: "x", embedded: false, exported: false, typ: ptrType$14, tag: ""}, {prop: "y", name: "y", embedded: false, exported: false, typ: ptrType$14, tag: ""}, {prop: "z", name: "z", embedded: false, exported: false, typ: ptrType$14, tag: ""}]);
	p224Table.init(ptrType$15, 15);
	WrappedPoint.init([{prop: "Add", name: "Add", pkg: "", typ: $funcType([WrappedPoint, WrappedPoint], [WrappedPoint], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([WrappedPoint], [WrappedPoint], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([WrappedPoint, sliceType], [WrappedPoint, $error], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [WrappedPoint, $error], false)}]);
	p224Wrapper.init("crypto/internal/nistec", [{prop: "point", name: "point", embedded: false, exported: false, typ: ptrType$15, tag: ""}]);
	p256Wrapper.init("crypto/internal/nistec", [{prop: "point", name: "point", embedded: false, exported: false, typ: ptrType$12, tag: ""}]);
	p521Wrapper.init("crypto/internal/nistec", [{prop: "point", name: "point", embedded: false, exported: false, typ: ptrType$6, tag: ""}]);
	p384Wrapper.init("crypto/internal/nistec", [{prop: "point", name: "point", embedded: false, exported: false, typ: ptrType$9, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fiat.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p521GeneratorTable = ptrType.nil;
		p521GeneratorTableOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		p384GeneratorTable = ptrType$1.nil;
		p384GeneratorTableOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		p256GeneratorTable = ptrType$2.nil;
		p256GeneratorTableOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		p224GG = ptrType$3.nil;
		p224GGOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		p224GeneratorTable = ptrType$4.nil;
		p224GeneratorTableOnce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		_tuple = new fiat.P521Element.ptr(arrayType$5.zero()).SetBytes(new sliceType([0, 81, 149, 62, 185, 97, 142, 28, 154, 31, 146, 154, 33, 160, 182, 133, 64, 238, 162, 218, 114, 91, 153, 179, 21, 243, 184, 180, 137, 145, 142, 241, 9, 225, 86, 25, 57, 81, 236, 126, 147, 123, 22, 82, 192, 189, 59, 177, 191, 7, 53, 115, 223, 136, 61, 44, 52, 241, 239, 69, 31, 212, 107, 80, 63, 0]));
		p521B = _tuple[0];
		_tuple$1 = NewP521Point().SetBytes(new sliceType([4, 0, 198, 133, 142, 6, 183, 4, 4, 233, 205, 158, 62, 203, 102, 35, 149, 180, 66, 156, 100, 129, 57, 5, 63, 181, 33, 248, 40, 175, 96, 107, 77, 61, 186, 161, 75, 94, 119, 239, 231, 89, 40, 254, 29, 193, 39, 162, 255, 168, 222, 51, 72, 179, 193, 133, 106, 66, 155, 249, 126, 126, 49, 194, 229, 189, 102, 1, 24, 57, 41, 106, 120, 154, 59, 192, 4, 92, 138, 95, 180, 44, 125, 27, 217, 152, 245, 68, 73, 87, 155, 68, 104, 23, 175, 189, 23, 39, 62, 102, 44, 151, 238, 114, 153, 94, 244, 38, 64, 197, 80, 185, 1, 63, 173, 7, 97, 53, 60, 112, 134, 162, 114, 194, 64, 136, 190, 148, 118, 159, 209, 102, 80]));
		p521G = _tuple$1[0];
		_tuple$2 = new fiat.P384Element.ptr(arrayType$6.zero()).SetBytes(new sliceType([179, 49, 47, 167, 226, 62, 231, 228, 152, 142, 5, 107, 227, 248, 45, 25, 24, 29, 156, 110, 254, 129, 65, 18, 3, 20, 8, 143, 80, 19, 135, 90, 198, 86, 57, 141, 138, 46, 209, 157, 42, 133, 200, 237, 211, 236, 42, 239]));
		p384B = _tuple$2[0];
		_tuple$3 = NewP384Point().SetBytes(new sliceType([4, 170, 135, 202, 34, 190, 139, 5, 55, 142, 177, 199, 30, 243, 32, 173, 116, 110, 29, 59, 98, 139, 167, 155, 152, 89, 247, 65, 224, 130, 84, 42, 56, 85, 2, 242, 93, 191, 85, 41, 108, 58, 84, 94, 56, 114, 118, 10, 183, 54, 23, 222, 74, 150, 38, 44, 111, 93, 158, 152, 191, 146, 146, 220, 41, 248, 244, 29, 189, 40, 154, 20, 124, 233, 218, 49, 19, 181, 240, 184, 192, 10, 96, 177, 206, 29, 126, 129, 157, 122, 67, 29, 124, 144, 234, 14, 95]));
		p384G = _tuple$3[0];
		_tuple$4 = new fiat.P256Element.ptr(arrayType$7.zero()).SetBytes(new sliceType([90, 198, 53, 216, 170, 58, 147, 231, 179, 235, 189, 85, 118, 152, 134, 188, 101, 29, 6, 176, 204, 83, 176, 246, 59, 206, 60, 62, 39, 210, 96, 75]));
		p256B = _tuple$4[0];
		_tuple$5 = NewP256Point().SetBytes(new sliceType([4, 107, 23, 209, 242, 225, 44, 66, 71, 248, 188, 230, 229, 99, 164, 64, 242, 119, 3, 125, 129, 45, 235, 51, 160, 244, 161, 57, 69, 216, 152, 194, 150, 79, 227, 66, 226, 254, 26, 127, 155, 142, 231, 235, 74, 124, 15, 158, 22, 43, 206, 51, 87, 107, 49, 94, 206, 203, 182, 64, 104, 55, 191, 81, 245]));
		p256G = _tuple$5[0];
		p224MinusOne = new fiat.P224Element.ptr(arrayType$7.zero()).Sub(new fiat.P224Element.ptr(arrayType$7.zero()), new fiat.P224Element.ptr(arrayType$7.zero()).One());
		_tuple$6 = new fiat.P224Element.ptr(arrayType$7.zero()).SetBytes(new sliceType([180, 5, 10, 133, 12, 4, 179, 171, 245, 65, 50, 86, 80, 68, 176, 183, 215, 191, 216, 186, 39, 11, 57, 67, 35, 85, 255, 180]));
		p224B = _tuple$6[0];
		_r = NewP224Point().SetBytes(new sliceType([4, 183, 14, 12, 189, 107, 180, 191, 127, 50, 19, 144, 185, 74, 3, 193, 211, 86, 194, 17, 34, 52, 50, 128, 214, 17, 92, 29, 33, 189, 55, 99, 136, 181, 247, 35, 251, 76, 34, 223, 230, 205, 67, 117, 160, 90, 7, 71, 100, 68, 213, 129, 153, 133, 0, 126, 52])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$7 = _r;
		p224G = _tuple$7[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/elliptic"] = (function() {
	var $pkg = {}, $init, nistec, errors, io, big, sync, CurveParams, Curve, unmarshaler, nistCurve, p256Curve, sliceType, ptrType, ptrType$1, sliceType$2, ptrType$2, funcType, initonce, p224, p256, p521, p384, zForAffine, matchesSpecificCurve, initP224, initP256, initP384, initP521, bigFromDecimal, bigFromHex, Marshal, Unmarshal, panicIfNotOnCurve, initAll, P224, P256, P384, P521;
	nistec = $packages["crypto/internal/nistec"];
	errors = $packages["errors"];
	io = $packages["io"];
	big = $packages["math/big"];
	sync = $packages["sync"];
	CurveParams = $pkg.CurveParams = $newType(0, $kindStruct, "elliptic.CurveParams", true, "crypto/elliptic", true, function(P_, N_, B_, Gx_, Gy_, BitSize_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.P = ptrType$1.nil;
			this.N = ptrType$1.nil;
			this.B = ptrType$1.nil;
			this.Gx = ptrType$1.nil;
			this.Gy = ptrType$1.nil;
			this.BitSize = 0;
			this.Name = "";
			return;
		}
		this.P = P_;
		this.N = N_;
		this.B = B_;
		this.Gx = Gx_;
		this.Gy = Gy_;
		this.BitSize = BitSize_;
		this.Name = Name_;
	});
	Curve = $pkg.Curve = $newType(8, $kindInterface, "elliptic.Curve", true, "crypto/elliptic", true, null);
	unmarshaler = $pkg.unmarshaler = $newType(8, $kindInterface, "elliptic.unmarshaler", true, "crypto/elliptic", false, null);
	nistCurve = $pkg.nistCurve = $newType(0, $kindStruct, "elliptic.nistCurve", true, "crypto/elliptic", false, function(newPoint_, params_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.newPoint = $throwNilPointerError;
			this.params = ptrType.nil;
			return;
		}
		this.newPoint = newPoint_;
		this.params = params_;
	});
	p256Curve = $pkg.p256Curve = $newType(0, $kindStruct, "elliptic.p256Curve", true, "crypto/elliptic", false, function(nistCurve_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.nistCurve = new nistCurve.ptr($throwNilPointerError, ptrType.nil);
			return;
		}
		this.nistCurve = nistCurve_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(CurveParams);
	ptrType$1 = $ptrType(big.Int);
	sliceType$2 = $sliceType(Curve);
	ptrType$2 = $ptrType(nistCurve);
	funcType = $funcType([], [nistec.WrappedPoint], false);
	CurveParams.ptr.prototype.Params = function() {
		var curve;
		curve = this;
		return curve;
	};
	CurveParams.prototype.Params = function() { return this.$val.Params(); };
	CurveParams.ptr.prototype.polynomial = function(x) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, curve, threeX, x, x3, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = new big.Int.ptr(false, big.nat.nil).Mul(x, x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x3 = _r;
		_r$1 = x3.Mul(x3, x); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		threeX = new big.Int.ptr(false, big.nat.nil).Lsh(x, 1);
		_r$2 = threeX.Add(threeX, x); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = x3.Sub(x3, threeX); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = x3.Add(x3, curve.B); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = x3.Mod(x3, curve.P); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return x3;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.polynomial, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, curve, threeX, x, x3, $s};return $f;
	};
	CurveParams.prototype.polynomial = function(x) { return this.$val.polynomial(x); };
	CurveParams.ptr.prototype.IsOnCurve = function(x, y) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, curve, ok, specific, x, y, y2, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = matchesSpecificCurve(curve); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		specific = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = specific.IsOnCurve(x, y); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		if (x.Sign() < 0 || x.Cmp(curve.P) >= 0 || y.Sign() < 0 || y.Cmp(curve.P) >= 0) {
			$s = -1; return false;
		}
		_r$2 = new big.Int.ptr(false, big.nat.nil).Mul(y, y); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		y2 = _r$2;
		_r$3 = y2.Mod(y2, curve.P); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = curve.polynomial(x); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = _r$4.Cmp(y2); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = _r$5 === 0;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.IsOnCurve, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, curve, ok, specific, x, y, y2, $s};return $f;
	};
	CurveParams.prototype.IsOnCurve = function(x, y) { return this.$val.IsOnCurve(x, y); };
	zForAffine = function(x, y) {
		var x, y, z;
		z = new big.Int.ptr(false, big.nat.nil);
		if (!((x.Sign() === 0)) || !((y.Sign() === 0))) {
			z.SetInt64(new $Int64(0, 1));
		}
		return z;
	};
	CurveParams.ptr.prototype.affineFromJacobian = function(x, y, z) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, curve, x, xOut, y, yOut, z, zinv, zinvsq, $s, $r, $c} = $restore(this, {x, y, z});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		xOut = ptrType$1.nil;
		yOut = ptrType$1.nil;
		curve = this;
		if (z.Sign() === 0) {
			_tmp = new big.Int.ptr(false, big.nat.nil);
			_tmp$1 = new big.Int.ptr(false, big.nat.nil);
			xOut = _tmp;
			yOut = _tmp$1;
			$s = -1; return [xOut, yOut];
		}
		_r = new big.Int.ptr(false, big.nat.nil).ModInverse(z, curve.P); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		zinv = _r;
		_r$1 = new big.Int.ptr(false, big.nat.nil).Mul(zinv, zinv); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		zinvsq = _r$1;
		_r$2 = new big.Int.ptr(false, big.nat.nil).Mul(x, zinvsq); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		xOut = _r$2;
		_r$3 = xOut.Mod(xOut, curve.P); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = zinvsq.Mul(zinvsq, zinv); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = new big.Int.ptr(false, big.nat.nil).Mul(y, zinvsq); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		yOut = _r$5;
		_r$6 = yOut.Mod(yOut, curve.P); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return [xOut, yOut];
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.affineFromJacobian, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, curve, x, xOut, y, yOut, z, zinv, zinvsq, $s};return $f;
	};
	CurveParams.prototype.affineFromJacobian = function(x, y, z) { return this.$val.affineFromJacobian(x, y, z); };
	CurveParams.ptr.prototype.Add = function(x1, y1, x2, y2) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, ok, specific, x1, x2, y1, y2, z1, z2, $s, $r, $c} = $restore(this, {x1, y1, x2, y2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = matchesSpecificCurve(curve); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		specific = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = specific.Add(x1, y1, x2, y2); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$r = panicIfNotOnCurve(curve, x1, y1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = panicIfNotOnCurve(curve, x2, y2); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z1 = zForAffine(x1, y1);
		z2 = zForAffine(x2, y2);
		_r$2 = curve.addJacobian(x1, y1, z1, x2, y2, z2); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		_r$3 = curve.affineFromJacobian(_tuple$1[0], _tuple$1[1], _tuple$1[2]); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.Add, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, ok, specific, x1, x2, y1, y2, z1, z2, $s};return $f;
	};
	CurveParams.prototype.Add = function(x1, y1, x2, y2) { return this.$val.Add(x1, y1, x2, y2); };
	CurveParams.ptr.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) {
		var {$24r, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, curve, h, i, j, r, s1, s2, u1, u2, v, x1, x2, x3, xEqual, y1, y2, y3, yEqual, z1, z1z1, z2, z2z2, z3, $s, $r, $c} = $restore(this, {x1, y1, z1, x2, y2, z2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_tmp = new big.Int.ptr(false, big.nat.nil);
		_tmp$1 = new big.Int.ptr(false, big.nat.nil);
		_tmp$2 = new big.Int.ptr(false, big.nat.nil);
		x3 = _tmp;
		y3 = _tmp$1;
		z3 = _tmp$2;
		if (z1.Sign() === 0) {
			x3.Set(x2);
			y3.Set(y2);
			z3.Set(z2);
			$s = -1; return [x3, y3, z3];
		}
		if (z2.Sign() === 0) {
			x3.Set(x1);
			y3.Set(y1);
			z3.Set(z1);
			$s = -1; return [x3, y3, z3];
		}
		_r = new big.Int.ptr(false, big.nat.nil).Mul(z1, z1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z1z1 = _r;
		_r$1 = z1z1.Mod(z1z1, curve.P); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = new big.Int.ptr(false, big.nat.nil).Mul(z2, z2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		z2z2 = _r$2;
		_r$3 = z2z2.Mod(z2z2, curve.P); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = new big.Int.ptr(false, big.nat.nil).Mul(x1, z2z2); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		u1 = _r$4;
		_r$5 = u1.Mod(u1, curve.P); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = new big.Int.ptr(false, big.nat.nil).Mul(x2, z1z1); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		u2 = _r$6;
		_r$7 = u2.Mod(u2, curve.P); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = new big.Int.ptr(false, big.nat.nil).Sub(u2, u1); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		h = _r$8;
		xEqual = h.Sign() === 0;
		/* */ if (h.Sign() === -1) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (h.Sign() === -1) { */ case 10:
			_r$9 = h.Add(h, curve.P); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 11:
		i = new big.Int.ptr(false, big.nat.nil).Lsh(h, 1);
		_r$10 = i.Mul(i, i); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = new big.Int.ptr(false, big.nat.nil).Mul(h, i); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		j = _r$11;
		_r$12 = new big.Int.ptr(false, big.nat.nil).Mul(y1, z2); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		s1 = _r$12;
		_r$13 = s1.Mul(s1, z2z2); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		_r$14 = s1.Mod(s1, curve.P); /* */ $s = 17; case 17: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = new big.Int.ptr(false, big.nat.nil).Mul(y2, z1); /* */ $s = 18; case 18: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		s2 = _r$15;
		_r$16 = s2.Mul(s2, z1z1); /* */ $s = 19; case 19: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		_r$17 = s2.Mod(s2, curve.P); /* */ $s = 20; case 20: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		_r$18 = new big.Int.ptr(false, big.nat.nil).Sub(s2, s1); /* */ $s = 21; case 21: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		r = _r$18;
		/* */ if (r.Sign() === -1) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (r.Sign() === -1) { */ case 22:
			_r$19 = r.Add(r, curve.P); /* */ $s = 24; case 24: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_r$19;
		/* } */ case 23:
		yEqual = r.Sign() === 0;
		/* */ if (xEqual && yEqual) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (xEqual && yEqual) { */ case 25:
			_r$20 = curve.doubleJacobian(x1, y1, z1); /* */ $s = 27; case 27: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$24r = _r$20;
			$s = 28; case 28: return $24r;
		/* } */ case 26:
		r.Lsh(r, 1);
		_r$21 = new big.Int.ptr(false, big.nat.nil).Mul(u1, i); /* */ $s = 29; case 29: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		v = _r$21;
		x3.Set(r);
		_r$22 = x3.Mul(x3, x3); /* */ $s = 30; case 30: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$22;
		_r$23 = x3.Sub(x3, j); /* */ $s = 31; case 31: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$23;
		_r$24 = x3.Sub(x3, v); /* */ $s = 32; case 32: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		_r$25 = x3.Sub(x3, v); /* */ $s = 33; case 33: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_r$25;
		_r$26 = x3.Mod(x3, curve.P); /* */ $s = 34; case 34: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$26;
		y3.Set(r);
		_r$27 = v.Sub(v, x3); /* */ $s = 35; case 35: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$27;
		_r$28 = y3.Mul(y3, v); /* */ $s = 36; case 36: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_r$28;
		_r$29 = s1.Mul(s1, j); /* */ $s = 37; case 37: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		_r$29;
		s1.Lsh(s1, 1);
		_r$30 = y3.Sub(y3, s1); /* */ $s = 38; case 38: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_r$30;
		_r$31 = y3.Mod(y3, curve.P); /* */ $s = 39; case 39: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$31;
		_r$32 = z3.Add(z1, z2); /* */ $s = 40; case 40: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_r$32;
		_r$33 = z3.Mul(z3, z3); /* */ $s = 41; case 41: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$33;
		_r$34 = z3.Sub(z3, z1z1); /* */ $s = 42; case 42: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_r$34;
		_r$35 = z3.Sub(z3, z2z2); /* */ $s = 43; case 43: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$35;
		_r$36 = z3.Mul(z3, h); /* */ $s = 44; case 44: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		_r$36;
		_r$37 = z3.Mod(z3, curve.P); /* */ $s = 45; case 45: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		_r$37;
		$s = -1; return [x3, y3, z3];
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.addJacobian, $c: true, $r, $24r, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, curve, h, i, j, r, s1, s2, u1, u2, v, x1, x2, x3, xEqual, y1, y2, y3, yEqual, z1, z1z1, z2, z2z2, z3, $s};return $f;
	};
	CurveParams.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) { return this.$val.addJacobian(x1, y1, z1, x2, y2, z2); };
	CurveParams.ptr.prototype.Double = function(x1, y1) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, ok, specific, x1, y1, z1, $s, $r, $c} = $restore(this, {x1, y1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = matchesSpecificCurve(curve); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		specific = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = specific.Double(x1, y1); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$r = panicIfNotOnCurve(curve, x1, y1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z1 = zForAffine(x1, y1);
		_r$2 = curve.doubleJacobian(x1, y1, z1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		_r$3 = curve.affineFromJacobian(_tuple$1[0], _tuple$1[1], _tuple$1[2]); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 9; case 9: return $24r$1;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.Double, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, ok, specific, x1, y1, z1, $s};return $f;
	};
	CurveParams.prototype.Double = function(x1, y1) { return this.$val.Double(x1, y1); };
	CurveParams.ptr.prototype.doubleJacobian = function(x, y, z) {
		var {_r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alpha, alpha2, beta, beta8, curve, delta, gamma, x, x3, y, y3, z, z3, $s, $r, $c} = $restore(this, {x, y, z});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = new big.Int.ptr(false, big.nat.nil).Mul(z, z); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		delta = _r;
		_r$1 = delta.Mod(delta, curve.P); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = new big.Int.ptr(false, big.nat.nil).Mul(y, y); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		gamma = _r$2;
		_r$3 = gamma.Mod(gamma, curve.P); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = new big.Int.ptr(false, big.nat.nil).Sub(x, delta); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		alpha = _r$4;
		/* */ if (alpha.Sign() === -1) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (alpha.Sign() === -1) { */ case 6:
			_r$5 = alpha.Add(alpha, curve.P); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 7:
		_r$6 = new big.Int.ptr(false, big.nat.nil).Add(x, delta); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		alpha2 = _r$6;
		_r$7 = alpha.Mul(alpha, alpha2); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		alpha2.Set(alpha);
		alpha.Lsh(alpha, 1);
		_r$8 = alpha.Add(alpha, alpha2); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = alpha2.Mul(x, gamma); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		beta = _r$9;
		_r$10 = new big.Int.ptr(false, big.nat.nil).Mul(alpha, alpha); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		x3 = _r$10;
		beta8 = new big.Int.ptr(false, big.nat.nil).Lsh(beta, 3);
		_r$11 = beta8.Mod(beta8, curve.P); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		_r$12 = x3.Sub(x3, beta8); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		/* */ if (x3.Sign() === -1) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (x3.Sign() === -1) { */ case 16:
			_r$13 = x3.Add(x3, curve.P); /* */ $s = 18; case 18: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
		/* } */ case 17:
		_r$14 = x3.Mod(x3, curve.P); /* */ $s = 19; case 19: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = new big.Int.ptr(false, big.nat.nil).Add(y, z); /* */ $s = 20; case 20: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		z3 = _r$15;
		_r$16 = z3.Mul(z3, z3); /* */ $s = 21; case 21: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		_r$17 = z3.Sub(z3, gamma); /* */ $s = 22; case 22: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		/* */ if (z3.Sign() === -1) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (z3.Sign() === -1) { */ case 23:
			_r$18 = z3.Add(z3, curve.P); /* */ $s = 25; case 25: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
		/* } */ case 24:
		_r$19 = z3.Sub(z3, delta); /* */ $s = 26; case 26: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$19;
		/* */ if (z3.Sign() === -1) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (z3.Sign() === -1) { */ case 27:
			_r$20 = z3.Add(z3, curve.P); /* */ $s = 29; case 29: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$20;
		/* } */ case 28:
		_r$21 = z3.Mod(z3, curve.P); /* */ $s = 30; case 30: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$21;
		beta.Lsh(beta, 2);
		_r$22 = beta.Sub(beta, x3); /* */ $s = 31; case 31: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$22;
		/* */ if (beta.Sign() === -1) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (beta.Sign() === -1) { */ case 32:
			_r$23 = beta.Add(beta, curve.P); /* */ $s = 34; case 34: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$23;
		/* } */ case 33:
		_r$24 = alpha.Mul(alpha, beta); /* */ $s = 35; case 35: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		y3 = _r$24;
		_r$25 = gamma.Mul(gamma, gamma); /* */ $s = 36; case 36: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_r$25;
		gamma.Lsh(gamma, 3);
		_r$26 = gamma.Mod(gamma, curve.P); /* */ $s = 37; case 37: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$26;
		_r$27 = y3.Sub(y3, gamma); /* */ $s = 38; case 38: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$27;
		/* */ if (y3.Sign() === -1) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (y3.Sign() === -1) { */ case 39:
			_r$28 = y3.Add(y3, curve.P); /* */ $s = 41; case 41: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_r$28;
		/* } */ case 40:
		_r$29 = y3.Mod(y3, curve.P); /* */ $s = 42; case 42: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		_r$29;
		$s = -1; return [x3, y3, z3];
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.doubleJacobian, $c: true, $r, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alpha, alpha2, beta, beta8, curve, delta, gamma, x, x3, y, y3, z, z3, $s};return $f;
	};
	CurveParams.prototype.doubleJacobian = function(x, y, z) { return this.$val.doubleJacobian(x, y, z); };
	CurveParams.ptr.prototype.ScalarMult = function(Bx, By, k) {
		var {$24r, $24r$1, Bx, By, Bz, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, bitNum, byte$1, curve, k, ok, specific, x, y, y$1, z, $s, $r, $c} = $restore(this, {Bx, By, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = matchesSpecificCurve(curve); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		specific = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = specific.ScalarMult(Bx, By, k); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$r = panicIfNotOnCurve(curve, Bx, By); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		Bz = new big.Int.ptr(false, big.nat.nil).SetInt64(new $Int64(0, 1));
		_tmp = new big.Int.ptr(false, big.nat.nil);
		_tmp$1 = new big.Int.ptr(false, big.nat.nil);
		_tmp$2 = new big.Int.ptr(false, big.nat.nil);
		x = _tmp;
		y = _tmp$1;
		z = _tmp$2;
		_ref = k;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bitNum = 0;
			/* while (true) { */ case 9:
				/* if (!(bitNum < 8)) { break; } */ if(!(bitNum < 8)) { $s = 10; continue; }
				_r$2 = curve.doubleJacobian(x, y, z); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				x = _tuple$1[0];
				y = _tuple$1[1];
				z = _tuple$1[2];
				/* */ if (((byte$1 & 128) >>> 0) === 128) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (((byte$1 & 128) >>> 0) === 128) { */ case 12:
					_r$3 = curve.addJacobian(Bx, By, Bz, x, y, z); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$2 = _r$3;
					x = _tuple$2[0];
					y = _tuple$2[1];
					z = _tuple$2[2];
				/* } */ case 13:
				byte$1 = (y$1 = (1), y$1 < 32 ? (byte$1 << y$1) : 0) << 24 >>> 24;
				bitNum = bitNum + (1) >> 0;
			$s = 9; continue;
			case 10:
			_i++;
		$s = 7; continue;
		case 8:
		_r$4 = curve.affineFromJacobian(x, y, z); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r$1 = _r$4;
		$s = 16; case 16: return $24r$1;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.ScalarMult, $c: true, $r, $24r, $24r$1, Bx, By, Bz, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, bitNum, byte$1, curve, k, ok, specific, x, y, y$1, z, $s};return $f;
	};
	CurveParams.prototype.ScalarMult = function(Bx, By, k) { return this.$val.ScalarMult(Bx, By, k); };
	CurveParams.ptr.prototype.ScalarBaseMult = function(k) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _tuple, curve, k, ok, specific, $s, $r, $c} = $restore(this, {k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = matchesSpecificCurve(curve); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		specific = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = specific.ScalarBaseMult(k); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$2 = curve.ScalarMult(curve.Gx, curve.Gy, k); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r$1 = _r$2;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: CurveParams.ptr.prototype.ScalarBaseMult, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _tuple, curve, k, ok, specific, $s};return $f;
	};
	CurveParams.prototype.ScalarBaseMult = function(k) { return this.$val.ScalarBaseMult(k); };
	matchesSpecificCurve = function(params) {
		var {_i, _r, _ref, c, params, $s, $r, $c} = $restore(this, {params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_ref = new sliceType$2([p224, p256, p384, p521]);
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = c.Params(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (params === _r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (params === _r) { */ case 3:
				$s = -1; return [c, true];
			/* } */ case 4:
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return [$ifaceNil, false];
		/* */ } return; } var $f = {$blk: matchesSpecificCurve, $c: true, $r, _i, _r, _ref, c, params, $s};return $f;
	};
	initP224 = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = bigFromDecimal("26959946667150639794667015087019630673557916260026308143510066298881"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = bigFromDecimal("26959946667150639794667015087019625940457807714424391721682722368061"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = bigFromHex("b4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = bigFromHex("b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bigFromHex("bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		p224.params = new CurveParams.ptr(_r, _r$1, _r$2, _r$3, _r$4, 224, "P-224");
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initP224, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, $s};return $f;
	};
	initP256 = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = bigFromDecimal("115792089210356248762697446949407573530086143415290314195533631308867097853951"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = bigFromDecimal("115792089210356248762697446949407573529996955224135760342422259061068512044369"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = bigFromHex("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = bigFromHex("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bigFromHex("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		p256.nistCurve.params = new CurveParams.ptr(_r, _r$1, _r$2, _r$3, _r$4, 256, "P-256");
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initP256, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, $s};return $f;
	};
	initP384 = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = bigFromDecimal("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = bigFromDecimal("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = bigFromHex("b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = bigFromHex("aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bigFromHex("3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		p384.params = new CurveParams.ptr(_r, _r$1, _r$2, _r$3, _r$4, 384, "P-384");
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initP384, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, $s};return $f;
	};
	initP521 = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = bigFromDecimal("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = bigFromDecimal("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = bigFromHex("0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = bigFromHex("00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bigFromHex("011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		p521.params = new CurveParams.ptr(_r, _r$1, _r$2, _r$3, _r$4, 521, "P-521");
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initP521, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, $s};return $f;
	};
	nistCurve.ptr.prototype.Params = function() {
		var curve;
		curve = this;
		return curve.params;
	};
	nistCurve.prototype.Params = function() { return this.$val.Params(); };
	nistCurve.ptr.prototype.IsOnCurve = function(x, y) {
		var {_r, _tuple, curve, err, x, y, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			$s = -1; return false;
		}
		_r = curve.pointFromAffine(x, y); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		$s = -1; return $interfaceIsEqual(err, $ifaceNil);
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.IsOnCurve, $c: true, $r, _r, _tuple, curve, err, x, y, $s};return $f;
	};
	nistCurve.prototype.IsOnCurve = function(x, y) { return this.$val.IsOnCurve(x, y); };
	nistCurve.ptr.prototype.pointFromAffine = function(x, y) {
		var {$24r, _q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, byteLen, curve, err, p, x, y, $s, $r, $c} = $restore(this, {x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = $ifaceNil;
		err = $ifaceNil;
		curve = this;
		_r = curve.newPoint(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			_tmp = p;
			_tmp$1 = $ifaceNil;
			p = _tmp;
			err = _tmp$1;
			$s = -1; return [p, err];
		}
		if (x.Sign() < 0 || y.Sign() < 0) {
			_tmp$2 = p;
			_tmp$3 = errors.New("negative coordinate");
			p = _tmp$2;
			err = _tmp$3;
			$s = -1; return [p, err];
		}
		if (x.BitLen() > curve.params.BitSize || y.BitLen() > curve.params.BitSize) {
			_tmp$4 = p;
			_tmp$5 = errors.New("overflowing coordinate");
			p = _tmp$4;
			err = _tmp$5;
			$s = -1; return [p, err];
		}
		byteLen = (_q = ((curve.params.BitSize + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		buf = $makeSlice(sliceType, (1 + ($imul(2, byteLen)) >> 0));
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = 4);
		x.FillBytes($subslice(buf, 1, (1 + byteLen >> 0)));
		y.FillBytes($subslice(buf, (1 + byteLen >> 0), (1 + ($imul(2, byteLen)) >> 0)));
		_r$1 = p.SetBytes(buf); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		p = _tuple[0];
		err = _tuple[1];
		$24r = [p, err];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.pointFromAffine, $c: true, $r, $24r, _q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, byteLen, curve, err, p, x, y, $s};return $f;
	};
	nistCurve.prototype.pointFromAffine = function(x, y) { return this.$val.pointFromAffine(x, y); };
	nistCurve.ptr.prototype.pointToAffine = function(p) {
		var {_q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, byteLen, curve, out, p, x, y, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		curve = this;
		_r = p.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		out = _r;
		if ((out.$length === 1) && ((0 >= out.$length ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + 0]) === 0)) {
			_tmp = new big.Int.ptr(false, big.nat.nil);
			_tmp$1 = new big.Int.ptr(false, big.nat.nil);
			x = _tmp;
			y = _tmp$1;
			$s = -1; return [x, y];
		}
		byteLen = (_q = ((curve.params.BitSize + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		x = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(out, 1, (1 + byteLen >> 0)));
		y = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(out, (1 + byteLen >> 0)));
		_tmp$2 = x;
		_tmp$3 = y;
		x = _tmp$2;
		y = _tmp$3;
		$s = -1; return [x, y];
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.pointToAffine, $c: true, $r, _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, byteLen, curve, out, p, x, y, $s};return $f;
	};
	nistCurve.prototype.pointToAffine = function(p) { return this.$val.pointToAffine(p); };
	nistCurve.ptr.prototype.Add = function(x1, y1, x2, y2) {
		var {$24r, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, err, p1, p2, x1, x2, y1, y2, $s, $r, $c} = $restore(this, {x1, y1, x2, y2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = curve.pointFromAffine(x1, y1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: Add was called on an invalid point"));
		}
		_r$1 = curve.pointFromAffine(x2, y2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		p2 = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: Add was called on an invalid point"));
		}
		_r$2 = p1.Add(p1, p2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = curve.pointToAffine(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.Add, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, err, p1, p2, x1, x2, y1, y2, $s};return $f;
	};
	nistCurve.prototype.Add = function(x1, y1, x2, y2) { return this.$val.Add(x1, y1, x2, y2); };
	nistCurve.ptr.prototype.Double = function(x1, y1) {
		var {$24r, _r, _r$1, _r$2, _tuple, curve, err, p, x1, y1, $s, $r, $c} = $restore(this, {x1, y1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = curve.pointFromAffine(x1, y1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: Double was called on an invalid point"));
		}
		_r$1 = p.Double(p); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = curve.pointToAffine(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.Double, $c: true, $r, $24r, _r, _r$1, _r$2, _tuple, curve, err, p, x1, y1, $s};return $f;
	};
	nistCurve.prototype.Double = function(x1, y1) { return this.$val.Double(x1, y1); };
	nistCurve.ptr.prototype.normalizeScalar = function(scalar) {
		var {_q, _r, byteSize, curve, out, s, scalar, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		byteSize = (_q = ((curve.params.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (scalar.$length === byteSize) {
			$s = -1; return scalar;
		}
		s = new big.Int.ptr(false, big.nat.nil).SetBytes(scalar);
		/* */ if (scalar.$length > byteSize) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (scalar.$length > byteSize) { */ case 1:
			_r = s.Mod(s, curve.params.N); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		out = $makeSlice(sliceType, byteSize);
		$s = -1; return s.FillBytes(out);
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.normalizeScalar, $c: true, $r, _q, _r, byteSize, curve, out, s, scalar, $s};return $f;
	};
	nistCurve.prototype.normalizeScalar = function(scalar) { return this.$val.normalizeScalar(scalar); };
	nistCurve.ptr.prototype.ScalarMult = function(Bx, By, scalar) {
		var {$24r, Bx, By, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, err, p, scalar, $s, $r, $c} = $restore(this, {Bx, By, scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = curve.pointFromAffine(Bx, By); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: ScalarMult was called on an invalid point"));
		}
		_r$1 = curve.normalizeScalar(scalar); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		scalar = _r$1;
		_r$2 = p.ScalarMult(p, scalar); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		p = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: nistec rejected normalized scalar"));
		}
		_r$3 = curve.pointToAffine(p); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.ScalarMult, $c: true, $r, $24r, Bx, By, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, curve, err, p, scalar, $s};return $f;
	};
	nistCurve.prototype.ScalarMult = function(Bx, By, scalar) { return this.$val.ScalarMult(Bx, By, scalar); };
	nistCurve.ptr.prototype.ScalarBaseMult = function(scalar) {
		var {$24r, _r, _r$1, _r$2, _r$3, _tuple, curve, err, p, scalar, $s, $r, $c} = $restore(this, {scalar});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		curve = this;
		_r = curve.normalizeScalar(scalar); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		scalar = _r;
		_r$1 = curve.newPoint(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.ScalarBaseMult(scalar); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		p = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: nistec rejected normalized scalar"));
		}
		_r$3 = curve.pointToAffine(p); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.ScalarBaseMult, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _tuple, curve, err, p, scalar, $s};return $f;
	};
	nistCurve.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	nistCurve.ptr.prototype.CombinedMult = function(Px, Py, s1, s2) {
		var {$24r, Px, Py, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, curve, err, p, q, s1, s2, x, y, $s, $r, $c} = $restore(this, {Px, Py, s1, s2});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		curve = this;
		_r = curve.normalizeScalar(s1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s1 = _r;
		_r$1 = curve.newPoint(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.ScalarBaseMult(s1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		q = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: nistec rejected normalized scalar"));
		}
		_r$3 = curve.pointFromAffine(Px, Py); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		p = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: CombinedMult was called on an invalid point"));
		}
		_r$4 = curve.normalizeScalar(s2); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		s2 = _r$4;
		_r$5 = p.ScalarMult(p, s2); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		p = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("crypto/elliptic: nistec rejected normalized scalar"));
		}
		_r$6 = p.Add(p, q); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = curve.pointToAffine(_r$6); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$3 = _r$7;
		x = _tuple$3[0];
		y = _tuple$3[1];
		$24r = [x, y];
		$s = 9; case 9: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.CombinedMult, $c: true, $r, $24r, Px, Py, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, curve, err, p, q, s1, s2, x, y, $s};return $f;
	};
	nistCurve.prototype.CombinedMult = function(Px, Py, s1, s2) { return this.$val.CombinedMult(Px, Py, s1, s2); };
	nistCurve.ptr.prototype.Unmarshal = function(data) {
		var {_q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, byteLen, curve, data, err, x, y, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		curve = this;
		if ((data.$length === 0) || !(((0 >= data.$length ? ($throwRuntimeError("index out of range"), undefined) : data.$array[data.$offset + 0]) === 4))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = ptrType$1.nil;
			x = _tmp;
			y = _tmp$1;
			$s = -1; return [x, y];
		}
		_r = curve.newPoint(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.SetBytes(data); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = ptrType$1.nil;
			x = _tmp$2;
			y = _tmp$3;
			$s = -1; return [x, y];
		}
		byteLen = (_q = ((curve.params.BitSize + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		x = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(data, 1, (1 + byteLen >> 0)));
		y = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(data, (1 + byteLen >> 0)));
		_tmp$4 = x;
		_tmp$5 = y;
		x = _tmp$4;
		y = _tmp$5;
		$s = -1; return [x, y];
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.Unmarshal, $c: true, $r, _q, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, byteLen, curve, data, err, x, y, $s};return $f;
	};
	nistCurve.prototype.Unmarshal = function(data) { return this.$val.Unmarshal(data); };
	nistCurve.ptr.prototype.UnmarshalCompressed = function(data) {
		var {$24r, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, curve, data, err, p, x, y, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		curve = this;
		if ((data.$length === 0) || (!(((0 >= data.$length ? ($throwRuntimeError("index out of range"), undefined) : data.$array[data.$offset + 0]) === 2)) && !(((0 >= data.$length ? ($throwRuntimeError("index out of range"), undefined) : data.$array[data.$offset + 0]) === 3)))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = ptrType$1.nil;
			x = _tmp;
			y = _tmp$1;
			$s = -1; return [x, y];
		}
		_r = curve.newPoint(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.SetBytes(data); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		p = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = ptrType$1.nil;
			x = _tmp$2;
			y = _tmp$3;
			$s = -1; return [x, y];
		}
		_r$2 = curve.pointToAffine(p); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		x = _tuple$1[0];
		y = _tuple$1[1];
		$24r = [x, y];
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: nistCurve.ptr.prototype.UnmarshalCompressed, $c: true, $r, $24r, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, curve, data, err, p, x, y, $s};return $f;
	};
	nistCurve.prototype.UnmarshalCompressed = function(data) { return this.$val.UnmarshalCompressed(data); };
	bigFromDecimal = function(s) {
		var {_r, _tuple, b, ok, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = new big.Int.ptr(false, big.nat.nil).SetString(s, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new $String("crypto/elliptic: internal error: invalid encoding"));
		}
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: bigFromDecimal, $c: true, $r, _r, _tuple, b, ok, s, $s};return $f;
	};
	bigFromHex = function(s) {
		var {_r, _tuple, b, ok, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = new big.Int.ptr(false, big.nat.nil).SetString(s, 16); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new $String("crypto/elliptic: internal error: invalid encoding"));
		}
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: bigFromHex, $c: true, $r, _r, _tuple, b, ok, s, $s};return $f;
	};
	Marshal = function(curve, x, y) {
		var {_q, _r, byteLen, curve, ret, x, y, $s, $r, $c} = $restore(this, {curve, x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = panicIfNotOnCurve(curve, x, y); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = curve.Params(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		byteLen = (_q = ((_r.BitSize + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		ret = $makeSlice(sliceType, (1 + ($imul(2, byteLen)) >> 0));
		(0 >= ret.$length ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + 0] = 4);
		x.FillBytes($subslice(ret, 1, (1 + byteLen >> 0)));
		y.FillBytes($subslice(ret, (1 + byteLen >> 0), (1 + ($imul(2, byteLen)) >> 0)));
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: Marshal, $c: true, $r, _q, _r, byteLen, curve, ret, x, y, $s};return $f;
	};
	$pkg.Marshal = Marshal;
	Unmarshal = function(curve, data) {
		var {$24r, _q, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, byteLen, c, curve, data, ok, p, x, y, $s, $r, $c} = $restore(this, {curve, data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		_tuple = $assertType(curve, unmarshaler, true);
		c = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = c.Unmarshal(data); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			x = _tuple$1[0];
			y = _tuple$1[1];
			$24r = [x, y];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_r$1 = curve.Params(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		byteLen = (_q = ((_r$1.BitSize + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (!((data.$length === (1 + ($imul(2, byteLen)) >> 0)))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = ptrType$1.nil;
			x = _tmp;
			y = _tmp$1;
			$s = -1; return [x, y];
		}
		if (!(((0 >= data.$length ? ($throwRuntimeError("index out of range"), undefined) : data.$array[data.$offset + 0]) === 4))) {
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = ptrType$1.nil;
			x = _tmp$2;
			y = _tmp$3;
			$s = -1; return [x, y];
		}
		_r$2 = curve.Params(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2.P;
		x = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(data, 1, (1 + byteLen >> 0)));
		y = new big.Int.ptr(false, big.nat.nil).SetBytes($subslice(data, (1 + byteLen >> 0)));
		if (x.Cmp(p) >= 0 || y.Cmp(p) >= 0) {
			_tmp$4 = ptrType$1.nil;
			_tmp$5 = ptrType$1.nil;
			x = _tmp$4;
			y = _tmp$5;
			$s = -1; return [x, y];
		}
		_r$3 = curve.IsOnCurve(x, y); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!_r$3) { */ case 7:
			_tmp$6 = ptrType$1.nil;
			_tmp$7 = ptrType$1.nil;
			x = _tmp$6;
			y = _tmp$7;
			$s = -1; return [x, y];
		/* } */ case 8:
		$s = -1; return [x, y];
		/* */ } return; } var $f = {$blk: Unmarshal, $c: true, $r, $24r, _q, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, byteLen, c, curve, data, ok, p, x, y, $s};return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	panicIfNotOnCurve = function(curve, x, y) {
		var {_r, curve, x, y, $s, $r, $c} = $restore(this, {curve, x, y});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			$s = -1; return;
		}
		_r = curve.IsOnCurve(x, y); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$panic(new $String("crypto/elliptic: attempted operation on invalid point"));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: panicIfNotOnCurve, $c: true, $r, _r, curve, x, y, $s};return $f;
	};
	initAll = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = initP224(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP256(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP384(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP521(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initAll, $c: true, $r, $s};return $f;
	};
	P224 = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p224;
		/* */ } return; } var $f = {$blk: P224, $c: true, $r, $s};return $f;
	};
	$pkg.P224 = P224;
	P256 = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p256;
		/* */ } return; } var $f = {$blk: P256, $c: true, $r, $s};return $f;
	};
	$pkg.P256 = P256;
	P384 = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p384;
		/* */ } return; } var $f = {$blk: P384, $c: true, $r, $s};return $f;
	};
	$pkg.P384 = P384;
	P521 = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p521;
		/* */ } return; } var $f = {$blk: P521, $c: true, $r, $s};return $f;
	};
	$pkg.P521 = P521;
	ptrType.methods = [{prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "polynomial", name: "polynomial", pkg: "crypto/elliptic", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "affineFromJacobian", name: "affineFromJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "addJacobian", name: "addJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "doubleJacobian", name: "doubleJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}];
	ptrType$2.methods = [{prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "pointFromAffine", name: "pointFromAffine", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1], [nistec.WrappedPoint, $error], false)}, {prop: "pointToAffine", name: "pointToAffine", pkg: "crypto/elliptic", typ: $funcType([nistec.WrappedPoint], [ptrType$1, ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "normalizeScalar", name: "normalizeScalar", pkg: "crypto/elliptic", typ: $funcType([sliceType], [sliceType], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "CombinedMult", name: "CombinedMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType, sliceType], [ptrType$1, ptrType$1], false)}, {prop: "Unmarshal", name: "Unmarshal", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "UnmarshalCompressed", name: "UnmarshalCompressed", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}];
	CurveParams.init("", [{prop: "P", name: "P", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "N", name: "N", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "B", name: "B", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Gx", name: "Gx", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Gy", name: "Gy", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "BitSize", name: "BitSize", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}]);
	Curve.init([{prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}]);
	unmarshaler.init([{prop: "Unmarshal", name: "Unmarshal", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "UnmarshalCompressed", name: "UnmarshalCompressed", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}]);
	nistCurve.init("crypto/elliptic", [{prop: "newPoint", name: "newPoint", embedded: false, exported: false, typ: funcType, tag: ""}, {prop: "params", name: "params", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	p256Curve.init("crypto/elliptic", [{prop: "nistCurve", name: "nistCurve", embedded: true, exported: false, typ: nistCurve, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nistec.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initonce = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		p224 = new nistCurve.ptr(nistec.NewP224WrappedPoint, ptrType.nil);
		p256 = new p256Curve.ptr($clone(new nistCurve.ptr(nistec.NewP256WrappedPoint, ptrType.nil), nistCurve));
		p521 = new nistCurve.ptr(nistec.NewP521WrappedPoint, ptrType.nil);
		p384 = new nistCurve.ptr(nistec.NewP384WrappedPoint, ptrType.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha512"] = (function() {
	var $pkg = {}, $init, crypto, boring, binary, errors, hash, bits, digest, sliceType, arrayType, sliceType$1, arrayType$1, arrayType$2, arrayType$3, arrayType$4, ptrType$3, _K, block, blockGeneric, init, appendUint64, consumeUint64, New, New512_224, New512_256, New384;
	crypto = $packages["crypto"];
	boring = $packages["crypto/internal/boring"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	bits = $packages["math/bits"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha512.digest", true, "crypto/sha512", false, function(h_, x_, nx_, len_, function$4_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$2.zero();
			this.x = arrayType$3.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			this.function$4 = 0;
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
		this.function$4 = function$4_;
	});
	sliceType = $sliceType($Uint64);
	arrayType = $arrayType($Uint64, 80);
	sliceType$1 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 8);
	arrayType$2 = $arrayType($Uint64, 8);
	arrayType$3 = $arrayType($Uint8, 128);
	arrayType$4 = $arrayType($Uint8, 64);
	ptrType$3 = $ptrType(digest);
	block = function(dig, p) {
		var dig, p;
		blockGeneric(dig, p);
	};
	blockGeneric = function(dig, p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, g, h, h0, h1, h2, h3, h4, h5, h6, h7, i, i$1, i$2, j, p, t1, t1$1, t2, t2$1, v1, v2, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$7, x$8, x$9;
		w = arrayType.zero();
		_tmp = dig.h[0];
		_tmp$1 = dig.h[1];
		_tmp$2 = dig.h[2];
		_tmp$3 = dig.h[3];
		_tmp$4 = dig.h[4];
		_tmp$5 = dig.h[5];
		_tmp$6 = dig.h[6];
		_tmp$7 = dig.h[7];
		h0 = _tmp;
		h1 = _tmp$1;
		h2 = _tmp$2;
		h3 = _tmp$3;
		h4 = _tmp$4;
		h5 = _tmp$5;
		h6 = _tmp$6;
		h7 = _tmp$7;
		while (true) {
			if (!(p.$length >= 128)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = $imul(i, 8);
				((i < 0 || i >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i] = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64((new $Uint64(0, ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]))), 56), x$7 = $shiftLeft64((new $Uint64(0, (x$8 = j + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$8])))), 48), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (x$10 = j + 2 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$10])))), 40), new $Uint64(x$5.$high | x$9.$high, (x$5.$low | x$9.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (x$12 = j + 3 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$12])))), 32), new $Uint64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (x$14 = j + 4 >> 0, ((x$14 < 0 || x$14 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$14])))), 24), new $Uint64(x$3.$high | x$13.$high, (x$3.$low | x$13.$low) >>> 0)), x$15 = $shiftLeft64((new $Uint64(0, (x$16 = j + 5 >> 0, ((x$16 < 0 || x$16 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$16])))), 16), new $Uint64(x$2.$high | x$15.$high, (x$2.$low | x$15.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (x$18 = j + 6 >> 0, ((x$18 < 0 || x$18 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$18])))), 8), new $Uint64(x$1.$high | x$17.$high, (x$1.$low | x$17.$low) >>> 0)), x$19 = (new $Uint64(0, (x$20 = j + 7 >> 0, ((x$20 < 0 || x$20 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$20])))), new $Uint64(x.$high | x$19.$high, (x.$low | x$19.$low) >>> 0)));
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (true) {
				if (!(i$1 < 80)) { break; }
				v1 = (x$21 = i$1 - 2 >> 0, ((x$21 < 0 || x$21 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$21]));
				t1 = (x$22 = (x$23 = bits.RotateLeft64(v1, -19), x$24 = bits.RotateLeft64(v1, -61), new $Uint64(x$23.$high ^ x$24.$high, (x$23.$low ^ x$24.$low) >>> 0)), x$25 = $shiftRightUint64(v1, 6), new $Uint64(x$22.$high ^ x$25.$high, (x$22.$low ^ x$25.$low) >>> 0));
				v2 = (x$26 = i$1 - 15 >> 0, ((x$26 < 0 || x$26 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$26]));
				t2 = (x$27 = (x$28 = bits.RotateLeft64(v2, -1), x$29 = bits.RotateLeft64(v2, -8), new $Uint64(x$28.$high ^ x$29.$high, (x$28.$low ^ x$29.$low) >>> 0)), x$30 = $shiftRightUint64(v2, 7), new $Uint64(x$27.$high ^ x$30.$high, (x$27.$low ^ x$30.$low) >>> 0));
				((i$1 < 0 || i$1 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$1] = (x$31 = (x$32 = (x$33 = (x$34 = i$1 - 7 >> 0, ((x$34 < 0 || x$34 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$34])), new $Uint64(t1.$high + x$33.$high, t1.$low + x$33.$low)), new $Uint64(x$32.$high + t2.$high, x$32.$low + t2.$low)), x$35 = (x$36 = i$1 - 16 >> 0, ((x$36 < 0 || x$36 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$36])), new $Uint64(x$31.$high + x$35.$high, x$31.$low + x$35.$low)));
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0;
			_tmp$9 = h1;
			_tmp$10 = h2;
			_tmp$11 = h3;
			_tmp$12 = h4;
			_tmp$13 = h5;
			_tmp$14 = h6;
			_tmp$15 = h7;
			a = _tmp$8;
			b = _tmp$9;
			c = _tmp$10;
			d = _tmp$11;
			e = _tmp$12;
			f = _tmp$13;
			g = _tmp$14;
			h = _tmp$15;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 80)) { break; }
				t1$1 = (x$37 = (x$38 = (x$39 = (x$40 = (x$41 = (x$42 = bits.RotateLeft64(e, -14), x$43 = bits.RotateLeft64(e, -18), new $Uint64(x$42.$high ^ x$43.$high, (x$42.$low ^ x$43.$low) >>> 0)), x$44 = bits.RotateLeft64(e, -41), new $Uint64(x$41.$high ^ x$44.$high, (x$41.$low ^ x$44.$low) >>> 0)), new $Uint64(h.$high + x$40.$high, h.$low + x$40.$low)), x$45 = (x$46 = new $Uint64(e.$high & f.$high, (e.$low & f.$low) >>> 0), x$47 = (x$48 = new $Uint64(~e.$high, ~e.$low >>> 0), new $Uint64(x$48.$high & g.$high, (x$48.$low & g.$low) >>> 0)), new $Uint64(x$46.$high ^ x$47.$high, (x$46.$low ^ x$47.$low) >>> 0)), new $Uint64(x$39.$high + x$45.$high, x$39.$low + x$45.$low)), x$49 = ((i$2 < 0 || i$2 >= _K.$length) ? ($throwRuntimeError("index out of range"), undefined) : _K.$array[_K.$offset + i$2]), new $Uint64(x$38.$high + x$49.$high, x$38.$low + x$49.$low)), x$50 = ((i$2 < 0 || i$2 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$2]), new $Uint64(x$37.$high + x$50.$high, x$37.$low + x$50.$low));
				t2$1 = (x$51 = (x$52 = (x$53 = bits.RotateLeft64(a, -28), x$54 = bits.RotateLeft64(a, -34), new $Uint64(x$53.$high ^ x$54.$high, (x$53.$low ^ x$54.$low) >>> 0)), x$55 = bits.RotateLeft64(a, -39), new $Uint64(x$52.$high ^ x$55.$high, (x$52.$low ^ x$55.$low) >>> 0)), x$56 = (x$57 = (x$58 = new $Uint64(a.$high & b.$high, (a.$low & b.$low) >>> 0), x$59 = new $Uint64(a.$high & c.$high, (a.$low & c.$low) >>> 0), new $Uint64(x$58.$high ^ x$59.$high, (x$58.$low ^ x$59.$low) >>> 0)), x$60 = new $Uint64(b.$high & c.$high, (b.$low & c.$low) >>> 0), new $Uint64(x$57.$high ^ x$60.$high, (x$57.$low ^ x$60.$low) >>> 0)), new $Uint64(x$51.$high + x$56.$high, x$51.$low + x$56.$low));
				h = g;
				g = f;
				f = e;
				e = new $Uint64(d.$high + t1$1.$high, d.$low + t1$1.$low);
				d = c;
				c = b;
				b = a;
				a = new $Uint64(t1$1.$high + t2$1.$high, t1$1.$low + t2$1.$low);
				i$2 = i$2 + (1) >> 0;
			}
			h0 = (x$61 = a, new $Uint64(h0.$high + x$61.$high, h0.$low + x$61.$low));
			h1 = (x$62 = b, new $Uint64(h1.$high + x$62.$high, h1.$low + x$62.$low));
			h2 = (x$63 = c, new $Uint64(h2.$high + x$63.$high, h2.$low + x$63.$low));
			h3 = (x$64 = d, new $Uint64(h3.$high + x$64.$high, h3.$low + x$64.$low));
			h4 = (x$65 = e, new $Uint64(h4.$high + x$65.$high, h4.$low + x$65.$low));
			h5 = (x$66 = f, new $Uint64(h5.$high + x$66.$high, h5.$low + x$66.$low));
			h6 = (x$67 = g, new $Uint64(h6.$high + x$67.$high, h6.$low + x$67.$low));
			h7 = (x$68 = h, new $Uint64(h7.$high + x$68.$high, h7.$low + x$68.$low));
			p = $subslice(p, 128);
		}
		_tmp$16 = h0;
		_tmp$17 = h1;
		_tmp$18 = h2;
		_tmp$19 = h3;
		_tmp$20 = h4;
		_tmp$21 = h5;
		_tmp$22 = h6;
		_tmp$23 = h7;
		dig.h[0] = _tmp$16;
		dig.h[1] = _tmp$17;
		dig.h[2] = _tmp$18;
		dig.h[3] = _tmp$19;
		dig.h[4] = _tmp$20;
		dig.h[5] = _tmp$21;
		dig.h[6] = _tmp$22;
		dig.h[7] = _tmp$23;
	};
	init = function() {
		crypto.RegisterHash(6, New384);
		crypto.RegisterHash(7, New);
		crypto.RegisterHash(14, New512_224);
		crypto.RegisterHash(15, New512_256);
	};
	digest.ptr.prototype.Reset = function() {
		var _1, d;
		d = this;
		_1 = d.function$4;
		if (_1 === (6)) {
			d.h[0] = new $Uint64(3418070365, 3238371032);
			d.h[1] = new $Uint64(1654270250, 914150663);
			d.h[2] = new $Uint64(2438529370, 812702999);
			d.h[3] = new $Uint64(355462360, 4144912697);
			d.h[4] = new $Uint64(1731405415, 4290775857);
			d.h[5] = new $Uint64(2394180231, 1750603025);
			d.h[6] = new $Uint64(3675008525, 1694076839);
			d.h[7] = new $Uint64(1203062813, 3204075428);
		} else if (_1 === (14)) {
			d.h[0] = new $Uint64(2352822216, 424955298);
			d.h[1] = new $Uint64(1944164710, 2312950998);
			d.h[2] = new $Uint64(502970286, 855612546);
			d.h[3] = new $Uint64(1738396948, 1479516111);
			d.h[4] = new $Uint64(258812777, 2077511080);
			d.h[5] = new $Uint64(2011393907, 79989058);
			d.h[6] = new $Uint64(1067287976, 1780299464);
			d.h[7] = new $Uint64(286451373, 2446758561);
		} else if (_1 === (15)) {
			d.h[0] = new $Uint64(573645204, 4230739756);
			d.h[1] = new $Uint64(2673172387, 3360449730);
			d.h[2] = new $Uint64(596883563, 1867755857);
			d.h[3] = new $Uint64(2520282905, 1497426621);
			d.h[4] = new $Uint64(2519219938, 2827943907);
			d.h[5] = new $Uint64(3193839141, 1401305490);
			d.h[6] = new $Uint64(721525244, 746961066);
			d.h[7] = new $Uint64(246885852, 2177182882);
		} else {
			d.h[0] = new $Uint64(1779033703, 4089235720);
			d.h[1] = new $Uint64(3144134277, 2227873595);
			d.h[2] = new $Uint64(1013904242, 4271175723);
			d.h[3] = new $Uint64(2773480762, 1595750129);
			d.h[4] = new $Uint64(1359893119, 2917565137);
			d.h[5] = new $Uint64(2600822924, 725511199);
			d.h[6] = new $Uint64(528734635, 4215389547);
			d.h[7] = new $Uint64(1541459225, 327033209);
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	digest.ptr.prototype.MarshalBinary = function() {
		var _1, b, d;
		d = this;
		b = $makeSlice(sliceType$1, 0, 204);
		_1 = d.function$4;
		if (_1 === (6)) {
			b = $appendSlice(b, "sha\x04");
		} else if (_1 === (14)) {
			b = $appendSlice(b, "sha\x05");
		} else if (_1 === (15)) {
			b = $appendSlice(b, "sha\x06");
		} else if (_1 === (7)) {
			b = $appendSlice(b, "sha\x07");
		} else {
			return [sliceType$1.nil, errors.New("crypto/sha512: invalid hash function")];
		}
		b = appendUint64(b, d.h[0]);
		b = appendUint64(b, d.h[1]);
		b = appendUint64(b, d.h[2]);
		b = appendUint64(b, d.h[3]);
		b = appendUint64(b, d.h[4]);
		b = appendUint64(b, d.h[5]);
		b = appendUint64(b, d.h[6]);
		b = appendUint64(b, d.h[7]);
		b = $appendSlice(b, $subslice(new sliceType$1(d.x), 0, d.nx));
		b = $subslice(b, 0, ((b.$length + 128 >> 0) - (d.nx) >> 0));
		b = appendUint64(b, d.len);
		return [b, $ifaceNil];
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, b, d;
		d = this;
		if (b.$length < 4) {
			return errors.New("crypto/sha512: invalid hash state identifier");
		}
		if ((d.function$4 === 6) && ($bytesToString($subslice(b, 0, 4))) === "sha\x04") {
		} else if ((d.function$4 === 14) && ($bytesToString($subslice(b, 0, 4))) === "sha\x05") {
		} else if ((d.function$4 === 15) && ($bytesToString($subslice(b, 0, 4))) === "sha\x06") {
		} else if ((d.function$4 === 7) && ($bytesToString($subslice(b, 0, 4))) === "sha\x07") {
		} else {
			return errors.New("crypto/sha512: invalid hash state identifier");
		}
		if (!((b.$length === 204))) {
			return errors.New("crypto/sha512: invalid hash state size");
		}
		b = $subslice(b, 4);
		_tuple = consumeUint64(b);
		b = _tuple[0];
		d.h[0] = _tuple[1];
		_tuple$1 = consumeUint64(b);
		b = _tuple$1[0];
		d.h[1] = _tuple$1[1];
		_tuple$2 = consumeUint64(b);
		b = _tuple$2[0];
		d.h[2] = _tuple$2[1];
		_tuple$3 = consumeUint64(b);
		b = _tuple$3[0];
		d.h[3] = _tuple$3[1];
		_tuple$4 = consumeUint64(b);
		b = _tuple$4[0];
		d.h[4] = _tuple$4[1];
		_tuple$5 = consumeUint64(b);
		b = _tuple$5[0];
		d.h[5] = _tuple$5[1];
		_tuple$6 = consumeUint64(b);
		b = _tuple$6[0];
		d.h[6] = _tuple$6[1];
		_tuple$7 = consumeUint64(b);
		b = _tuple$7[0];
		d.h[7] = _tuple$7[1];
		b = $subslice(b, $copySlice(new sliceType$1(d.x), b));
		_tuple$8 = consumeUint64(b);
		b = _tuple$8[0];
		d.len = _tuple$8[1];
		d.nx = (($div64(d.len, new $Uint64(0, 128), true).$low >> 0));
		return $ifaceNil;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint64 = function(b, x) {
		var a, b, x;
		a = arrayType$1.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType$1(a), x);
		return $appendSlice(b, new sliceType$1(a));
	};
	consumeUint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		x$14 = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		return [$subslice(b, 8), x$14];
	};
	New = function() {
		var d;
		if (false) {
			return boring.NewSHA512();
		}
		d = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0), 7);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	New512_224 = function() {
		var d;
		d = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0), 14);
		d.Reset();
		return d;
	};
	$pkg.New512_224 = New512_224;
	New512_256 = function() {
		var d;
		d = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0), 15);
		d.Reset();
		return d;
	};
	$pkg.New512_256 = New512_256;
	New384 = function() {
		var d;
		if (false) {
			return boring.NewSHA384();
		}
		d = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0), 6);
		d.Reset();
		return d;
	};
	$pkg.New384 = New384;
	digest.ptr.prototype.Size = function() {
		var _1, d;
		d = this;
		_1 = d.function$4;
		if (_1 === (14)) {
			return 28;
		} else if (_1 === (15)) {
			return 32;
		} else if (_1 === (6)) {
			return 48;
		} else {
			return 64;
		}
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 128;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		if (!((d.function$4 === 14)) && !((d.function$4 === 15))) {
			boring.Unreachable();
		}
		nn = p.$length;
		d.len = (x = d.len, x$1 = (new $Uint64(0, nn)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType$1(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 128) {
				block(d, new sliceType$1(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 128) {
			n$1 = (p.$length & ~127) >> 0;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType$1(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var _1, d, d0, hash$1, in$1;
		d = this;
		if (!((d.function$4 === 14)) && !((d.function$4 === 15))) {
			boring.Unreachable();
		}
		d0 = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0), 0);
		digest.copy(d0, d);
		hash$1 = $clone(d0.checkSum(), arrayType$4);
		_1 = d0.function$4;
		if (_1 === (6)) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 48));
		} else if (_1 === (14)) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 28));
		} else if (_1 === (15)) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 32));
		} else {
			return $appendSlice(in$1, new sliceType$1(hash$1));
		}
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var d, digest$1, len, tmp, x, x$1, x$2;
		d = this;
		len = d.len;
		tmp = arrayType$3.zero();
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 128), true), (x.$high < 0 || (x.$high === 0 && x.$low < 112)))) {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$1.$high, 112 - x$1.$low)))));
		} else {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$2.$high, 240 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(tmp), 0), new $Uint64(0, 0));
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(tmp), 8), len);
		d.Write($subslice(new sliceType$1(tmp), 0, 16));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = arrayType$4.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 0), d.h[0]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 8), d.h[1]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 16), d.h[2]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 24), d.h[3]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 32), d.h[4]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 40), d.h[5]);
		if (!((d.function$4 === 6))) {
			$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 48), d.h[6]);
			$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$1(digest$1), 56), d.h[7]);
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	ptrType$3.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha512", typ: $funcType([], [arrayType$4], false)}];
	digest.init("crypto/sha512", [{prop: "h", name: "h", embedded: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "x", name: "x", embedded: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "nx", name: "nx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "function$4", name: "function", embedded: false, exported: false, typ: crypto.Hash, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = boring.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_K = new sliceType([new $Uint64(1116352408, 3609767458), new $Uint64(1899447441, 602891725), new $Uint64(3049323471, 3964484399), new $Uint64(3921009573, 2173295548), new $Uint64(961987163, 4081628472), new $Uint64(1508970993, 3053834265), new $Uint64(2453635748, 2937671579), new $Uint64(2870763221, 3664609560), new $Uint64(3624381080, 2734883394), new $Uint64(310598401, 1164996542), new $Uint64(607225278, 1323610764), new $Uint64(1426881987, 3590304994), new $Uint64(1925078388, 4068182383), new $Uint64(2162078206, 991336113), new $Uint64(2614888103, 633803317), new $Uint64(3248222580, 3479774868), new $Uint64(3835390401, 2666613458), new $Uint64(4022224774, 944711139), new $Uint64(264347078, 2341262773), new $Uint64(604807628, 2007800933), new $Uint64(770255983, 1495990901), new $Uint64(1249150122, 1856431235), new $Uint64(1555081692, 3175218132), new $Uint64(1996064986, 2198950837), new $Uint64(2554220882, 3999719339), new $Uint64(2821834349, 766784016), new $Uint64(2952996808, 2566594879), new $Uint64(3210313671, 3203337956), new $Uint64(3336571891, 1034457026), new $Uint64(3584528711, 2466948901), new $Uint64(113926993, 3758326383), new $Uint64(338241895, 168717936), new $Uint64(666307205, 1188179964), new $Uint64(773529912, 1546045734), new $Uint64(1294757372, 1522805485), new $Uint64(1396182291, 2643833823), new $Uint64(1695183700, 2343527390), new $Uint64(1986661051, 1014477480), new $Uint64(2177026350, 1206759142), new $Uint64(2456956037, 344077627), new $Uint64(2730485921, 1290863460), new $Uint64(2820302411, 3158454273), new $Uint64(3259730800, 3505952657), new $Uint64(3345764771, 106217008), new $Uint64(3516065817, 3606008344), new $Uint64(3600352804, 1432725776), new $Uint64(4094571909, 1467031594), new $Uint64(275423344, 851169720), new $Uint64(430227734, 3100823752), new $Uint64(506948616, 1363258195), new $Uint64(659060556, 3750685593), new $Uint64(883997877, 3785050280), new $Uint64(958139571, 3318307427), new $Uint64(1322822218, 3812723403), new $Uint64(1537002063, 2003034995), new $Uint64(1747873779, 3602036899), new $Uint64(1955562222, 1575990012), new $Uint64(2024104815, 1125592928), new $Uint64(2227730452, 2716904306), new $Uint64(2361852424, 442776044), new $Uint64(2428436474, 593698344), new $Uint64(2756734187, 3733110249), new $Uint64(3204031479, 2999351573), new $Uint64(3329325298, 3815920427), new $Uint64(3391569614, 3928383900), new $Uint64(3515267271, 566280711), new $Uint64(3940187606, 3454069534), new $Uint64(4118630271, 4000239992), new $Uint64(116418474, 1914138554), new $Uint64(174292421, 2731055270), new $Uint64(289380356, 3203993006), new $Uint64(460393269, 320620315), new $Uint64(685471733, 587496836), new $Uint64(852142971, 1086792851), new $Uint64(1017036298, 365543100), new $Uint64(1126000580, 2618297676), new $Uint64(1288033470, 3409855158), new $Uint64(1501505948, 4234509866), new $Uint64(1607167915, 987167468), new $Uint64(1816402316, 1246189591)]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, sliceType$1, DecodeRune, Decode;
	sliceType$1 = $sliceType($Int32);
	DecodeRune = function(r1, r2) {
		var r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	Decode = function(s) {
		var a, i, n, r, s, x, x$1, x$2;
		a = $makeSlice(sliceType$1, s.$length);
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			r = ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]);
			if ((r < 55296) || (57344 <= r)) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = ((r >> 0)));
			} else if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) < 57344) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = DecodeRune(((r >> 0)), (((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$2])) >> 0))));
				i = i + (1) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = 65533);
			}
			n = n + (1) >> 0;
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Decode = Decode;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/asn1"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, math, big, reflect, sort, strconv, strings, time, utf16, utf8, encoder, byteEncoder, bytesEncoder, stringEncoder, multiEncoder, setEncoder, taggedEncoder, int64Encoder, bitStringEncoder, oidEncoder, tagAndLength, fieldParameters, StructuralError, SyntaxError, BitString, ObjectIdentifier, Enumerated, Flag, RawValue, RawContent, invalidUnmarshalError, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, arrayType, sliceType$3, ptrType$2, ptrType$3, sliceType$4, arrayType$1, sliceType$5, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, byte00Encoder, byteFFEncoder, bigOne, bitStringType, objectIdentifierType, enumeratedType, flagType, timeType, rawValueType, rawContentsType, bigIntType, x, x$1, x$2, base128IntLength, appendBase128Int, makeBigInt, appendLength, lengthLength, appendTagAndLength, makeObjectIdentifier, makePrintableString, makeIA5String, makeNumericString, makeUTF8String, appendTwoDigits, appendFourDigits, outsideUTCRange, makeUTCTime, makeGeneralizedTime, appendUTCTime, appendGeneralizedTime, appendTimeCommon, stripTagAndLength, makeBody, makeField, Marshal, MarshalWithParams, parseFieldParameters, getUniversalType, parseBool, checkInteger, parseInt64, parseInt32, parseBigInt, parseBitString, parseObjectIdentifier, parseBase128Int, parseUTCTime, parseGeneralizedTime, parseNumericString, isNumeric, parsePrintableString, isPrintable, parseIA5String, parseT61String, parseUTF8String, parseBMPString, parseTagAndLength, parseSequenceOf, invalidLength, parseField, canHaveDefaultValue, setDefaultValue, Unmarshal, UnmarshalWithParams;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	math = $packages["math"];
	big = $packages["math/big"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	time = $packages["time"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	encoder = $pkg.encoder = $newType(8, $kindInterface, "asn1.encoder", true, "encoding/asn1", false, null);
	byteEncoder = $pkg.byteEncoder = $newType(1, $kindUint8, "asn1.byteEncoder", true, "encoding/asn1", false, null);
	bytesEncoder = $pkg.bytesEncoder = $newType(12, $kindSlice, "asn1.bytesEncoder", true, "encoding/asn1", false, null);
	stringEncoder = $pkg.stringEncoder = $newType(8, $kindString, "asn1.stringEncoder", true, "encoding/asn1", false, null);
	multiEncoder = $pkg.multiEncoder = $newType(12, $kindSlice, "asn1.multiEncoder", true, "encoding/asn1", false, null);
	setEncoder = $pkg.setEncoder = $newType(12, $kindSlice, "asn1.setEncoder", true, "encoding/asn1", false, null);
	taggedEncoder = $pkg.taggedEncoder = $newType(0, $kindStruct, "asn1.taggedEncoder", true, "encoding/asn1", false, function(scratch_, tag_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.scratch = arrayType$1.zero();
			this.tag = $ifaceNil;
			this.body = $ifaceNil;
			return;
		}
		this.scratch = scratch_;
		this.tag = tag_;
		this.body = body_;
	});
	int64Encoder = $pkg.int64Encoder = $newType(8, $kindInt64, "asn1.int64Encoder", true, "encoding/asn1", false, null);
	bitStringEncoder = $pkg.bitStringEncoder = $newType(0, $kindStruct, "asn1.bitStringEncoder", true, "encoding/asn1", false, function(Bytes_, BitLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Bytes = sliceType.nil;
			this.BitLength = 0;
			return;
		}
		this.Bytes = Bytes_;
		this.BitLength = BitLength_;
	});
	oidEncoder = $pkg.oidEncoder = $newType(12, $kindSlice, "asn1.oidEncoder", true, "encoding/asn1", false, null);
	tagAndLength = $pkg.tagAndLength = $newType(0, $kindStruct, "asn1.tagAndLength", true, "encoding/asn1", false, function(class$0_, tag_, length_, isCompound_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.class$0 = 0;
			this.tag = 0;
			this.length = 0;
			this.isCompound = false;
			return;
		}
		this.class$0 = class$0_;
		this.tag = tag_;
		this.length = length_;
		this.isCompound = isCompound_;
	});
	fieldParameters = $pkg.fieldParameters = $newType(0, $kindStruct, "asn1.fieldParameters", true, "encoding/asn1", false, function(optional_, explicit_, application_, private$3_, defaultValue_, tag_, stringType_, timeType_, set_, omitEmpty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.optional = false;
			this.explicit = false;
			this.application = false;
			this.private$3 = false;
			this.defaultValue = ptrType$2.nil;
			this.tag = ptrType$3.nil;
			this.stringType = 0;
			this.timeType = 0;
			this.set = false;
			this.omitEmpty = false;
			return;
		}
		this.optional = optional_;
		this.explicit = explicit_;
		this.application = application_;
		this.private$3 = private$3_;
		this.defaultValue = defaultValue_;
		this.tag = tag_;
		this.stringType = stringType_;
		this.timeType = timeType_;
		this.set = set_;
		this.omitEmpty = omitEmpty_;
	});
	StructuralError = $pkg.StructuralError = $newType(0, $kindStruct, "asn1.StructuralError", true, "encoding/asn1", true, function(Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			return;
		}
		this.Msg = Msg_;
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "asn1.SyntaxError", true, "encoding/asn1", true, function(Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			return;
		}
		this.Msg = Msg_;
	});
	BitString = $pkg.BitString = $newType(0, $kindStruct, "asn1.BitString", true, "encoding/asn1", true, function(Bytes_, BitLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Bytes = sliceType.nil;
			this.BitLength = 0;
			return;
		}
		this.Bytes = Bytes_;
		this.BitLength = BitLength_;
	});
	ObjectIdentifier = $pkg.ObjectIdentifier = $newType(12, $kindSlice, "asn1.ObjectIdentifier", true, "encoding/asn1", true, null);
	Enumerated = $pkg.Enumerated = $newType(4, $kindInt, "asn1.Enumerated", true, "encoding/asn1", true, null);
	Flag = $pkg.Flag = $newType(1, $kindBool, "asn1.Flag", true, "encoding/asn1", true, null);
	RawValue = $pkg.RawValue = $newType(0, $kindStruct, "asn1.RawValue", true, "encoding/asn1", true, function(Class_, Tag_, IsCompound_, Bytes_, FullBytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Class = 0;
			this.Tag = 0;
			this.IsCompound = false;
			this.Bytes = sliceType.nil;
			this.FullBytes = sliceType.nil;
			return;
		}
		this.Class = Class_;
		this.Tag = Tag_;
		this.IsCompound = IsCompound_;
		this.Bytes = Bytes_;
		this.FullBytes = FullBytes_;
	});
	RawContent = $pkg.RawContent = $newType(12, $kindSlice, "asn1.RawContent", true, "encoding/asn1", true, null);
	invalidUnmarshalError = $pkg.invalidUnmarshalError = $newType(0, $kindStruct, "asn1.invalidUnmarshalError", true, "encoding/asn1", false, function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(time.Location);
	sliceType$1 = $sliceType(sliceType);
	ptrType$1 = $ptrType(big.Int);
	sliceType$2 = $sliceType(encoder);
	arrayType = $arrayType($Uint8, 4);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType($Int);
	sliceType$4 = $sliceType($emptyInterface);
	arrayType$1 = $arrayType($Uint8, 8);
	sliceType$5 = $sliceType($Uint16);
	ptrType$4 = $ptrType(reflect.rtype);
	ptrType$5 = $ptrType(RawValue);
	ptrType$6 = $ptrType(ObjectIdentifier);
	ptrType$7 = $ptrType(BitString);
	ptrType$8 = $ptrType(time.Time);
	ptrType$9 = $ptrType(Enumerated);
	ptrType$10 = $ptrType(Flag);
	ptrType$11 = $ptrType(ptrType$1);
	ptrType$12 = $ptrType(taggedEncoder);
	ptrType$13 = $ptrType(invalidUnmarshalError);
	byteEncoder.prototype.Len = function() {
		var c;
		c = this.$val;
		return 1;
	};
	$ptrType(byteEncoder).prototype.Len = function() { return new byteEncoder(this.$get()).Len(); };
	byteEncoder.prototype.Encode = function(dst) {
		var c, dst;
		c = this.$val;
		(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = ((c << 24 >>> 24)));
	};
	$ptrType(byteEncoder).prototype.Encode = function(dst) { return new byteEncoder(this.$get()).Encode(dst); };
	bytesEncoder.prototype.Len = function() {
		var b;
		b = this;
		return b.$length;
	};
	$ptrType(bytesEncoder).prototype.Len = function() { return this.$get().Len(); };
	bytesEncoder.prototype.Encode = function(dst) {
		var b, dst;
		b = this;
		if (!(($copySlice(dst, b) === b.$length))) {
			$panic(new $String("internal error"));
		}
	};
	$ptrType(bytesEncoder).prototype.Encode = function(dst) { return this.$get().Encode(dst); };
	stringEncoder.prototype.Len = function() {
		var s;
		s = this.$val;
		return s.length;
	};
	$ptrType(stringEncoder).prototype.Len = function() { return new stringEncoder(this.$get()).Len(); };
	stringEncoder.prototype.Encode = function(dst) {
		var dst, s;
		s = this.$val;
		if (!(($copyString(dst, s) === s.length))) {
			$panic(new $String("internal error"));
		}
	};
	$ptrType(stringEncoder).prototype.Encode = function(dst) { return new stringEncoder(this.$get()).Encode(dst); };
	multiEncoder.prototype.Len = function() {
		var {_i, _r, _ref, e, m, size, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		size = 0;
		_ref = m;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = e.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			size = size + (_r) >> 0;
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return size;
		/* */ } return; } var $f = {$blk: multiEncoder.prototype.Len, $c: true, $r, _i, _r, _ref, e, m, size, $s};return $f;
	};
	$ptrType(multiEncoder).prototype.Len = function() { return this.$get().Len(); };
	multiEncoder.prototype.Encode = function(dst) {
		var {_i, _r, _ref, dst, e, m, off, $s, $r, $c} = $restore(this, {dst});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		off = 0;
		_ref = m;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = e.Encode($subslice(dst, off)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = e.Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			off = off + (_r) >> 0;
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: multiEncoder.prototype.Encode, $c: true, $r, _i, _r, _ref, dst, e, m, off, $s};return $f;
	};
	$ptrType(multiEncoder).prototype.Encode = function(dst) { return this.$get().Encode(dst); };
	setEncoder.prototype.Len = function() {
		var {_i, _r, _ref, e, s, size, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		size = 0;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = e.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			size = size + (_r) >> 0;
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return size;
		/* */ } return; } var $f = {$blk: setEncoder.prototype.Len, $c: true, $r, _i, _r, _ref, e, s, size, $s};return $f;
	};
	$ptrType(setEncoder).prototype.Len = function() { return this.$get().Len(); };
	setEncoder.prototype.Encode = function(dst) {
		var {_i, _i$1, _r, _ref, _ref$1, b, dst, e, i, l, off, s, $s, $r, $c} = $restore(this, {dst});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = [l];
		s = this;
		l[0] = $makeSlice(sliceType$1, s.$length);
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = e.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= l[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : l[0].$array[l[0].$offset + i] = $makeSlice(sliceType, _r));
			$r = e.Encode(((i < 0 || i >= l[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : l[0].$array[l[0].$offset + i])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		$s = 1; continue;
		case 2:
		$r = sort.Slice(l[0], (function(l) { return function(i$1, j) {
			var i$1, j;
			return bytes.Compare(((i$1 < 0 || i$1 >= l[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : l[0].$array[l[0].$offset + i$1]), ((j < 0 || j >= l[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : l[0].$array[l[0].$offset + j])) < 0;
		}; })(l)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		off = 0;
		_ref$1 = l[0];
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			b = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			$copySlice($subslice(dst, off), b);
			off = off + (b.$length) >> 0;
			_i$1++;
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: setEncoder.prototype.Encode, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, b, dst, e, i, l, off, s, $s};return $f;
	};
	$ptrType(setEncoder).prototype.Encode = function(dst) { return this.$get().Encode(dst); };
	taggedEncoder.ptr.prototype.Len = function() {
		var {$24r, _r, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.tag.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.body.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r + _r$1 >> 0;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: taggedEncoder.ptr.prototype.Len, $c: true, $r, $24r, _r, _r$1, t, $s};return $f;
	};
	taggedEncoder.prototype.Len = function() { return this.$val.Len(); };
	taggedEncoder.ptr.prototype.Encode = function(dst) {
		var {_r, dst, t, $s, $r, $c} = $restore(this, {dst});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		$r = t.tag.Encode(dst); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = t.tag.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = t.body.Encode($subslice(dst, _r)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: taggedEncoder.ptr.prototype.Encode, $c: true, $r, _r, dst, t, $s};return $f;
	};
	taggedEncoder.prototype.Encode = function(dst) { return this.$val.Encode(dst); };
	int64Encoder.prototype.Len = function() {
		var i, n;
		i = this;
		n = 1;
		while (true) {
			if (!((i.$high > 0 || (i.$high === 0 && i.$low > 127)))) { break; }
			n = n + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		while (true) {
			if (!((i.$high < -1 || (i.$high === -1 && i.$low < 4294967168)))) { break; }
			n = n + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		return n;
	};
	$ptrType(int64Encoder).prototype.Len = function() { return this.$get().Len(); };
	int64Encoder.prototype.Encode = function(dst) {
		var dst, i, j, n;
		i = this;
		n = i.Len();
		j = 0;
		while (true) {
			if (!(j < n)) { break; }
			((j < 0 || j >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + j] = (($shiftRightInt64(i, ((($imul((((n - 1 >> 0) - j >> 0)), 8)) >>> 0))).$low << 24 >>> 24)));
			j = j + (1) >> 0;
		}
	};
	$ptrType(int64Encoder).prototype.Encode = function(dst) { return this.$get().Encode(dst); };
	base128IntLength = function(n) {
		var i, l, n;
		if ((n.$high === 0 && n.$low === 0)) {
			return 1;
		}
		l = 0;
		i = n;
		while (true) {
			if (!((i.$high > 0 || (i.$high === 0 && i.$low > 0)))) { break; }
			l = l + (1) >> 0;
			i = $shiftRightInt64(i, (7));
		}
		return l;
	};
	appendBase128Int = function(dst, n) {
		var dst, i, l, n, o;
		l = base128IntLength(n);
		i = l - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			o = (($shiftRightInt64(n, ((($imul(i, 7)) >>> 0))).$low << 24 >>> 24));
			o = (o & (127)) >>> 0;
			if (!((i === 0))) {
				o = (o | (128)) >>> 0;
			}
			dst = $append(dst, o);
			i = i - (1) >> 0;
		}
		return dst;
	};
	makeBigInt = function(n) {
		var {_i, _r, _ref, bytes$1, bytes$2, i, n, nMinus1, x$3, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (n === ptrType$1.nil) {
			$s = -1; return [$ifaceNil, (x$3 = new StructuralError.ptr("empty integer"), new x$3.constructor.elem(x$3))];
		}
		/* */ if (n.Sign() < 0) { $s = 1; continue; }
		/* */ if (n.Sign() === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (n.Sign() < 0) { */ case 1:
			nMinus1 = new big.Int.ptr(false, big.nat.nil).Neg(n);
			_r = nMinus1.Sub(nMinus1, bigOne); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			bytes$1 = nMinus1.Bytes();
			_ref = bytes$1;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + i] = ((((i < 0 || i >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + i]) ^ (255)) << 24 >>> 24));
				_i++;
			}
			if ((bytes$1.$length === 0) || ((((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 0)) {
				$s = -1; return [($convertSliceType(new sliceType$2([byteFFEncoder, ($convertSliceType(bytes$1, bytesEncoder))]), multiEncoder)), $ifaceNil];
			}
			$s = -1; return [($convertSliceType(bytes$1, bytesEncoder)), $ifaceNil];
		/* } else if (n.Sign() === 0) { */ case 2:
			$s = -1; return [byte00Encoder, $ifaceNil];
		/* } else { */ case 3:
			bytes$2 = n.Bytes();
			if (bytes$2.$length > 0 && !(((((0 >= bytes$2.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$2.$array[bytes$2.$offset + 0]) & 128) >>> 0) === 0))) {
				$s = -1; return [($convertSliceType(new sliceType$2([byte00Encoder, ($convertSliceType(bytes$2, bytesEncoder))]), multiEncoder)), $ifaceNil];
			}
			$s = -1; return [($convertSliceType(bytes$2, bytesEncoder)), $ifaceNil];
		/* } */ case 4:
		$s = -1; return [$ifaceNil, $ifaceNil];
		/* */ } return; } var $f = {$blk: makeBigInt, $c: true, $r, _i, _r, _ref, bytes$1, bytes$2, i, n, nMinus1, x$3, $s};return $f;
	};
	appendLength = function(dst, i) {
		var dst, i, n;
		n = lengthLength(i);
		while (true) {
			if (!(n > 0)) { break; }
			dst = $append(dst, ((((i >> $min(((($imul(((n - 1 >> 0)), 8)) >>> 0)), 31)) >> 0) << 24 >>> 24)));
			n = n - (1) >> 0;
		}
		return dst;
	};
	lengthLength = function(i) {
		var i, numBytes;
		numBytes = 0;
		numBytes = 1;
		while (true) {
			if (!(i > 255)) { break; }
			numBytes = numBytes + (1) >> 0;
			i = (i >> $min((8), 31)) >> 0;
		}
		return numBytes;
	};
	appendTagAndLength = function(dst, t) {
		var b, dst, l, t;
		b = ((t.class$0 << 24 >>> 24)) << 6 << 24 >>> 24;
		if (t.isCompound) {
			b = (b | (32)) >>> 0;
		}
		if (t.tag >= 31) {
			b = (b | (31)) >>> 0;
			dst = $append(dst, b);
			dst = appendBase128Int(dst, (new $Int64(0, t.tag)));
		} else {
			b = (b | (((t.tag << 24 >>> 24)))) >>> 0;
			dst = $append(dst, b);
		}
		if (t.length >= 128) {
			l = lengthLength(t.length);
			dst = $append(dst, (128 | ((l << 24 >>> 24))) >>> 0);
			dst = appendLength(dst, t.length);
		} else {
			dst = $append(dst, ((t.length << 24 >>> 24)));
		}
		return dst;
	};
	bitStringEncoder.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.Bytes.$length + 1 >> 0;
	};
	bitStringEncoder.prototype.Len = function() { return this.$val.Len(); };
	bitStringEncoder.ptr.prototype.Encode = function(dst) {
		var _r, _r$1, b, dst;
		b = this;
		(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = (((_r = ((8 - (_r$1 = b.BitLength % 8, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)));
		if (!(($copySlice($subslice(dst, 1), b.Bytes) === b.Bytes.$length))) {
			$panic(new $String("internal error"));
		}
	};
	bitStringEncoder.prototype.Encode = function(dst) { return this.$val.Encode(dst); };
	oidEncoder.prototype.Len = function() {
		var i, l, oid;
		oid = this;
		l = base128IntLength((new $Int64(0, (($imul((0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]), 40)) + (1 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 1]) >> 0))));
		i = 2;
		while (true) {
			if (!(i < oid.$length)) { break; }
			l = l + (base128IntLength((new $Int64(0, ((i < 0 || i >= oid.$length) ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + i]))))) >> 0;
			i = i + (1) >> 0;
		}
		return l;
	};
	$ptrType(oidEncoder).prototype.Len = function() { return this.$get().Len(); };
	oidEncoder.prototype.Encode = function(dst) {
		var dst, i, oid;
		oid = this;
		dst = appendBase128Int($subslice(dst, 0, 0), (new $Int64(0, (($imul((0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]), 40)) + (1 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 1]) >> 0))));
		i = 2;
		while (true) {
			if (!(i < oid.$length)) { break; }
			dst = appendBase128Int(dst, (new $Int64(0, ((i < 0 || i >= oid.$length) ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + i]))));
			i = i + (1) >> 0;
		}
	};
	$ptrType(oidEncoder).prototype.Encode = function(dst) { return this.$get().Encode(dst); };
	makeObjectIdentifier = function(oid) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, err, oid, x$3;
		e = $ifaceNil;
		err = $ifaceNil;
		if (oid.$length < 2 || (0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]) > 2 || ((0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]) < 2 && (1 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 1]) >= 40)) {
			_tmp = $ifaceNil;
			_tmp$1 = (x$3 = new StructuralError.ptr("invalid object identifier"), new x$3.constructor.elem(x$3));
			e = _tmp;
			err = _tmp$1;
			return [e, err];
		}
		_tmp$2 = ($convertSliceType(oid, oidEncoder));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		return [e, err];
	};
	makePrintableString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, err, i, s, x$3;
		e = $ifaceNil;
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (!isPrintable(s.charCodeAt(i), true, false)) {
				_tmp = $ifaceNil;
				_tmp$1 = (x$3 = new StructuralError.ptr("PrintableString contains invalid character"), new x$3.constructor.elem(x$3));
				e = _tmp;
				err = _tmp$1;
				return [e, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$2 = new stringEncoder((s));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		return [e, err];
	};
	makeIA5String = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, err, i, s, x$3;
		e = $ifaceNil;
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) > 127) {
				_tmp = $ifaceNil;
				_tmp$1 = (x$3 = new StructuralError.ptr("IA5String contains invalid character"), new x$3.constructor.elem(x$3));
				e = _tmp;
				err = _tmp$1;
				return [e, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$2 = new stringEncoder((s));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		return [e, err];
	};
	makeNumericString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, err, i, s, x$3;
		e = $ifaceNil;
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (!isNumeric(s.charCodeAt(i))) {
				_tmp = $ifaceNil;
				_tmp$1 = (x$3 = new StructuralError.ptr("NumericString contains invalid character"), new x$3.constructor.elem(x$3));
				e = _tmp;
				err = _tmp$1;
				return [e, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$2 = new stringEncoder((s));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		return [e, err];
	};
	makeUTF8String = function(s) {
		var s;
		return new stringEncoder((s));
	};
	appendTwoDigits = function(dst, v) {
		var _q, _r, _r$1, dst, v;
		return $append(dst, (((48 + (_r = ((_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24)), (((48 + (_r$1 = v % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24)));
	};
	appendFourDigits = function(dst, v) {
		var _i, _q, _r, _ref, bytes$1, dst, i, v, x$3;
		bytes$1 = arrayType.zero();
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			(x$3 = 3 - i >> 0, ((x$3 < 0 || x$3 >= bytes$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1[x$3] = (48 + (((_r = v % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) << 24 >>> 24)));
			v = (_q = v / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			_i++;
		}
		return $appendSlice(dst, new sliceType(bytes$1));
	};
	outsideUTCRange = function(t) {
		var {_r, t, year, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(t, time.Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		$s = -1; return year < 1950 || year >= 2050;
		/* */ } return; } var $f = {$blk: outsideUTCRange, $c: true, $r, _r, t, year, $s};return $f;
	};
	makeUTCTime = function(t) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, dst, e, err, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = $ifaceNil;
		err = $ifaceNil;
		dst = $makeSlice(sliceType, 0, 18);
		_r = appendUTCTime(dst, $clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		dst = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil;
			_tmp$1 = err;
			e = _tmp;
			err = _tmp$1;
			$s = -1; return [e, err];
		}
		_tmp$2 = ($convertSliceType(dst, bytesEncoder));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		$s = -1; return [e, err];
		/* */ } return; } var $f = {$blk: makeUTCTime, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, dst, e, err, t, $s};return $f;
	};
	makeGeneralizedTime = function(t) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, dst, e, err, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = $ifaceNil;
		err = $ifaceNil;
		dst = $makeSlice(sliceType, 0, 20);
		_r = appendGeneralizedTime(dst, $clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		dst = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil;
			_tmp$1 = err;
			e = _tmp;
			err = _tmp$1;
			$s = -1; return [e, err];
		}
		_tmp$2 = ($convertSliceType(dst, bytesEncoder));
		_tmp$3 = $ifaceNil;
		e = _tmp$2;
		err = _tmp$3;
		$s = -1; return [e, err];
		/* */ } return; } var $f = {$blk: makeGeneralizedTime, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, dst, e, err, t, $s};return $f;
	};
	appendUTCTime = function(dst, t) {
		var {$24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, dst, err, ret, t, x$3, year, $s, $r, $c} = $restore(this, {dst, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = sliceType.nil;
		err = $ifaceNil;
		_r = $clone(t, time.Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		if (1950 <= year && year < 2000) {
			dst = appendTwoDigits(dst, year - 1900 >> 0);
		} else if (2000 <= year && year < 2050) {
			dst = appendTwoDigits(dst, year - 2000 >> 0);
		} else {
			_tmp = sliceType.nil;
			_tmp$1 = (x$3 = new StructuralError.ptr("cannot represent time as UTCTime"), new x$3.constructor.elem(x$3));
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r$1 = appendTimeCommon(dst, $clone(t, time.Time)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tmp$2 = _r$1;
		_tmp$3 = $ifaceNil;
		ret = _tmp$2;
		err = _tmp$3;
		$24r = [ret, err];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: appendUTCTime, $c: true, $r, $24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, dst, err, ret, t, x$3, year, $s};return $f;
	};
	appendGeneralizedTime = function(dst, t) {
		var {$24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, dst, err, ret, t, x$3, year, $s, $r, $c} = $restore(this, {dst, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = sliceType.nil;
		err = $ifaceNil;
		_r = $clone(t, time.Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		if (year < 0 || year > 9999) {
			_tmp = sliceType.nil;
			_tmp$1 = (x$3 = new StructuralError.ptr("cannot represent time as GeneralizedTime"), new x$3.constructor.elem(x$3));
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		dst = appendFourDigits(dst, year);
		_r$1 = appendTimeCommon(dst, $clone(t, time.Time)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tmp$2 = _r$1;
		_tmp$3 = $ifaceNil;
		ret = _tmp$2;
		err = _tmp$3;
		$24r = [ret, err];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: appendGeneralizedTime, $c: true, $r, $24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, dst, err, ret, t, x$3, year, $s};return $f;
	};
	appendTimeCommon = function(dst, t) {
		var {_q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, day, dst, hour, min, month, offset, offsetMinutes, sec, t, $s, $r, $c} = $restore(this, {dst, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(t, time.Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		day = _tuple[2];
		dst = appendTwoDigits(dst, ((month >> 0)));
		dst = appendTwoDigits(dst, day);
		_r$1 = $clone(t, time.Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		dst = appendTwoDigits(dst, hour);
		dst = appendTwoDigits(dst, min);
		dst = appendTwoDigits(dst, sec);
		_r$2 = $clone(t, time.Time).Zone(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		offset = _tuple$2[1];
		if (((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === 0)) {
			$s = -1; return $append(dst, 90);
		} else if (offset > 0) {
			dst = $append(dst, 43);
		} else if (offset < 0) {
			dst = $append(dst, 45);
		}
		offsetMinutes = (_q$1 = offset / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		if (offsetMinutes < 0) {
			offsetMinutes = -offsetMinutes;
		}
		dst = appendTwoDigits(dst, (_q$2 = offsetMinutes / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")));
		dst = appendTwoDigits(dst, (_r$3 = offsetMinutes % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")));
		$s = -1; return dst;
		/* */ } return; } var $f = {$blk: appendTimeCommon, $c: true, $r, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, day, dst, hour, min, month, offset, offsetMinutes, sec, t, $s};return $f;
	};
	stripTagAndLength = function(in$1) {
		var _tuple, err, in$1, offset;
		_tuple = parseTagAndLength(in$1, 0);
		offset = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return in$1;
		}
		return $subslice(in$1, offset);
	};
	makeBody = function(value, params) {
		var {$24r, $24r$1, $24r$10, $24r$11, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _2, _3, _4, _5, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, bytes$1, e, err, fp, i, i$1, i$2, l, m, m$1, n, n1, params, s, sliceType$4, startingField, t, t$1, v, value, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {value, params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = $ifaceNil;
		err = $ifaceNil;
			_1 = $clone(value, reflect.Value).Type();
			/* */ if ($interfaceIsEqual(_1, (flagType))) { $s = 2; continue; }
			/* */ if ($interfaceIsEqual(_1, (timeType))) { $s = 3; continue; }
			/* */ if ($interfaceIsEqual(_1, (bitStringType))) { $s = 4; continue; }
			/* */ if ($interfaceIsEqual(_1, (objectIdentifierType))) { $s = 5; continue; }
			/* */ if ($interfaceIsEqual(_1, (bigIntType))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(_1, (flagType))) { */ case 2:
				_tmp = (bytesEncoder.nil);
				_tmp$1 = $ifaceNil;
				e = _tmp;
				err = _tmp$1;
				$s = -1; return [e, err];
			/* } else if ($interfaceIsEqual(_1, (timeType))) { */ case 3:
				_r = $clone(value, reflect.Value).Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				t = $clone($assertType(_r, time.Time), time.Time);
				if (params.timeType === 24) { _v = true; $s = 11; continue s; }
				_r$1 = outsideUTCRange($clone(t, time.Time)); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					_r$2 = makeGeneralizedTime($clone(t, time.Time)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					e = _tuple[0];
					err = _tuple[1];
					$24r = [e, err];
					$s = 14; case 14: return $24r;
				/* } */ case 10:
				_r$3 = makeUTCTime($clone(t, time.Time)); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				e = _tuple$1[0];
				err = _tuple$1[1];
				$24r$1 = [e, err];
				$s = 16; case 16: return $24r$1;
			/* } else if ($interfaceIsEqual(_1, (bitStringType))) { */ case 4:
				_r$4 = $clone(value, reflect.Value).Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tmp$2 = (x$3 = ($clone($assertType(_r$4, BitString), bitStringEncoder)), new x$3.constructor.elem(x$3));
				_tmp$3 = $ifaceNil;
				e = _tmp$2;
				err = _tmp$3;
				$24r$2 = [e, err];
				$s = 18; case 18: return $24r$2;
			/* } else if ($interfaceIsEqual(_1, (objectIdentifierType))) { */ case 5:
				_r$5 = $clone(value, reflect.Value).Interface(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = makeObjectIdentifier($convertSliceType($assertType(_r$5, ObjectIdentifier), sliceType$3)); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$2 = _r$6;
				e = _tuple$2[0];
				err = _tuple$2[1];
				$24r$3 = [e, err];
				$s = 21; case 21: return $24r$3;
			/* } else if ($interfaceIsEqual(_1, (bigIntType))) { */ case 6:
				_r$7 = $clone(value, reflect.Value).Interface(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = makeBigInt($assertType(_r$7, ptrType$1)); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$3 = _r$8;
				e = _tuple$3[0];
				err = _tuple$3[1];
				$24r$4 = [e, err];
				$s = 24; case 24: return $24r$4;
			/* } */ case 7:
		case 1:
			v = value;
			_2 = $clone(v, reflect.Value).Kind();
			/* */ if (_2 === (1)) { $s = 26; continue; }
			/* */ if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { $s = 27; continue; }
			/* */ if (_2 === (25)) { $s = 28; continue; }
			/* */ if (_2 === (23)) { $s = 29; continue; }
			/* */ if (_2 === (24)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_2 === (1)) { */ case 26:
				if ($clone(v, reflect.Value).Bool()) {
					_tmp$4 = byteFFEncoder;
					_tmp$5 = $ifaceNil;
					e = _tmp$4;
					err = _tmp$5;
					$s = -1; return [e, err];
				}
				_tmp$6 = byte00Encoder;
				_tmp$7 = $ifaceNil;
				e = _tmp$6;
				err = _tmp$7;
				$s = -1; return [e, err];
			/* } else if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { */ case 27:
				_tmp$8 = ((x$4 = $clone(v, reflect.Value).Int(), new int64Encoder(x$4.$high, x$4.$low)));
				_tmp$9 = $ifaceNil;
				e = _tmp$8;
				err = _tmp$9;
				$s = -1; return [e, err];
			/* } else if (_2 === (25)) { */ case 28:
				t$1 = $clone(v, reflect.Value).Type();
				i = 0;
				/* while (true) { */ case 32:
					_r$9 = t$1.NumField(); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					/* if (!(i < _r$9)) { break; } */ if(!(i < _r$9)) { $s = 33; continue; }
					_r$10 = t$1.Field(i); /* */ $s = 37; case 37: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = $clone(_r$10, reflect.StructField).IsExported(); /* */ $s = 38; case 38: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!_r$11) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (!_r$11) { */ case 35:
						_tmp$10 = $ifaceNil;
						_tmp$11 = (x$5 = new StructuralError.ptr("struct contains unexported fields"), new x$5.constructor.elem(x$5));
						e = _tmp$10;
						err = _tmp$11;
						$s = -1; return [e, err];
					/* } */ case 36:
					i = i + (1) >> 0;
				$s = 32; continue;
				case 33:
				startingField = 0;
				_r$12 = t$1.NumField(); /* */ $s = 39; case 39: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				n = _r$12;
				if (n === 0) {
					_tmp$12 = (bytesEncoder.nil);
					_tmp$13 = $ifaceNil;
					e = _tmp$12;
					err = _tmp$13;
					$s = -1; return [e, err];
				}
				_r$13 = t$1.Field(0); /* */ $s = 42; case 42: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$13.Type, rawContentsType)) { $s = 40; continue; }
				/* */ $s = 41; continue;
				/* if ($interfaceIsEqual(_r$13.Type, rawContentsType)) { */ case 40:
					_r$14 = $clone(v, reflect.Value).Field(0); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					s = _r$14;
					_r$15 = $clone(s, reflect.Value).Len(); /* */ $s = 46; case 46: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					/* */ if (_r$15 > 0) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (_r$15 > 0) { */ case 44:
						_r$16 = $clone(s, reflect.Value).Bytes(); /* */ $s = 47; case 47: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						bytes$1 = _r$16;
						_tmp$14 = ($convertSliceType(stripTagAndLength(bytes$1), bytesEncoder));
						_tmp$15 = $ifaceNil;
						e = _tmp$14;
						err = _tmp$15;
						$s = -1; return [e, err];
					/* } */ case 45:
					startingField = 1;
				/* } */ case 41:
					n1 = n - startingField >> 0;
					_3 = n1;
					/* */ if (_3 === (0)) { $s = 49; continue; }
					/* */ if (_3 === (1)) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (_3 === (0)) { */ case 49:
						_tmp$16 = (bytesEncoder.nil);
						_tmp$17 = $ifaceNil;
						e = _tmp$16;
						err = _tmp$17;
						$s = -1; return [e, err];
					/* } else if (_3 === (1)) { */ case 50:
						_r$17 = $clone(v, reflect.Value).Field(startingField); /* */ $s = 53; case 53: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_arg = $clone(_r$17, reflect.Value);
						_r$18 = t$1.Field(startingField); /* */ $s = 54; case 54: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$19 = new reflect.StructTag(_r$18.Tag).Get("asn1"); /* */ $s = 55; case 55: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						_r$20 = parseFieldParameters(_r$19); /* */ $s = 56; case 56: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						_arg$1 = $clone(_r$20, fieldParameters);
						_r$21 = makeField(_arg, _arg$1); /* */ $s = 57; case 57: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						_tuple$4 = _r$21;
						e = _tuple$4[0];
						err = _tuple$4[1];
						$24r$5 = [e, err];
						$s = 58; case 58: return $24r$5;
					/* } else { */ case 51:
						m = $makeSlice(sliceType$2, n1);
						i$1 = 0;
						/* while (true) { */ case 59:
							/* if (!(i$1 < n1)) { break; } */ if(!(i$1 < n1)) { $s = 60; continue; }
							_r$22 = $clone(v, reflect.Value).Field(i$1 + startingField >> 0); /* */ $s = 61; case 61: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
							_arg$2 = $clone(_r$22, reflect.Value);
							_r$23 = t$1.Field(i$1 + startingField >> 0); /* */ $s = 62; case 62: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_r$24 = new reflect.StructTag(_r$23.Tag).Get("asn1"); /* */ $s = 63; case 63: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
							_r$25 = parseFieldParameters(_r$24); /* */ $s = 64; case 64: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
							_arg$3 = $clone(_r$25, fieldParameters);
							_r$26 = makeField(_arg$2, _arg$3); /* */ $s = 65; case 65: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							_tuple$5 = _r$26;
							((i$1 < 0 || i$1 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i$1] = _tuple$5[0]);
							err = _tuple$5[1];
							if (!($interfaceIsEqual(err, $ifaceNil))) {
								_tmp$18 = $ifaceNil;
								_tmp$19 = err;
								e = _tmp$18;
								err = _tmp$19;
								$s = -1; return [e, err];
							}
							i$1 = i$1 + (1) >> 0;
						$s = 59; continue;
						case 60:
						_tmp$20 = ($convertSliceType(m, multiEncoder));
						_tmp$21 = $ifaceNil;
						e = _tmp$20;
						err = _tmp$21;
						$s = -1; return [e, err];
					/* } */ case 52:
				case 48:
				$s = 31; continue;
			/* } else if (_2 === (23)) { */ case 29:
				sliceType$4 = $clone(v, reflect.Value).Type();
				_r$27 = sliceType$4.Elem(); /* */ $s = 68; case 68: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_r$28 = _r$27.Kind(); /* */ $s = 69; case 69: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				/* */ if (_r$28 === 8) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (_r$28 === 8) { */ case 66:
					_r$29 = $clone(v, reflect.Value).Bytes(); /* */ $s = 70; case 70: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_tmp$22 = ($convertSliceType(_r$29, bytesEncoder));
					_tmp$23 = $ifaceNil;
					e = _tmp$22;
					err = _tmp$23;
					$24r$6 = [e, err];
					$s = 71; case 71: return $24r$6;
				/* } */ case 67:
				fp = new fieldParameters.ptr(false, false, false, false, ptrType$2.nil, ptrType$3.nil, 0, 0, false, false);
					_r$30 = $clone(v, reflect.Value).Len(); /* */ $s = 73; case 73: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					l = _r$30;
					_4 = l;
					/* */ if (_4 === (0)) { $s = 74; continue; }
					/* */ if (_4 === (1)) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if (_4 === (0)) { */ case 74:
						_tmp$24 = (bytesEncoder.nil);
						_tmp$25 = $ifaceNil;
						e = _tmp$24;
						err = _tmp$25;
						$s = -1; return [e, err];
					/* } else if (_4 === (1)) { */ case 75:
						_r$31 = $clone(v, reflect.Value).Index(0); /* */ $s = 78; case 78: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
						_r$32 = makeField($clone(_r$31, reflect.Value), $clone(fp, fieldParameters)); /* */ $s = 79; case 79: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						_tuple$6 = _r$32;
						e = _tuple$6[0];
						err = _tuple$6[1];
						$24r$7 = [e, err];
						$s = 80; case 80: return $24r$7;
					/* } else { */ case 76:
						m$1 = $makeSlice(sliceType$2, l);
						i$2 = 0;
						/* while (true) { */ case 81:
							/* if (!(i$2 < l)) { break; } */ if(!(i$2 < l)) { $s = 82; continue; }
							_r$33 = $clone(v, reflect.Value).Index(i$2); /* */ $s = 83; case 83: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
							_r$34 = makeField($clone(_r$33, reflect.Value), $clone(fp, fieldParameters)); /* */ $s = 84; case 84: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							_tuple$7 = _r$34;
							((i$2 < 0 || i$2 >= m$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : m$1.$array[m$1.$offset + i$2] = _tuple$7[0]);
							err = _tuple$7[1];
							if (!($interfaceIsEqual(err, $ifaceNil))) {
								_tmp$26 = $ifaceNil;
								_tmp$27 = err;
								e = _tmp$26;
								err = _tmp$27;
								$s = -1; return [e, err];
							}
							i$2 = i$2 + (1) >> 0;
						$s = 81; continue;
						case 82:
						if (params.set) {
							_tmp$28 = ($convertSliceType(m$1, setEncoder));
							_tmp$29 = $ifaceNil;
							e = _tmp$28;
							err = _tmp$29;
							$s = -1; return [e, err];
						}
						_tmp$30 = ($convertSliceType(m$1, multiEncoder));
						_tmp$31 = $ifaceNil;
						e = _tmp$30;
						err = _tmp$31;
						$s = -1; return [e, err];
					/* } */ case 77:
				case 72:
				$s = 31; continue;
			/* } else if (_2 === (24)) { */ case 30:
					_5 = params.stringType;
					/* */ if (_5 === (22)) { $s = 86; continue; }
					/* */ if (_5 === (19)) { $s = 87; continue; }
					/* */ if (_5 === (18)) { $s = 88; continue; }
					/* */ $s = 89; continue;
					/* if (_5 === (22)) { */ case 86:
						_r$35 = $clone(v, reflect.Value).String(); /* */ $s = 91; case 91: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						_r$36 = makeIA5String(_r$35); /* */ $s = 92; case 92: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						_tuple$8 = _r$36;
						e = _tuple$8[0];
						err = _tuple$8[1];
						$24r$8 = [e, err];
						$s = 93; case 93: return $24r$8;
					/* } else if (_5 === (19)) { */ case 87:
						_r$37 = $clone(v, reflect.Value).String(); /* */ $s = 94; case 94: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$38 = makePrintableString(_r$37); /* */ $s = 95; case 95: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						_tuple$9 = _r$38;
						e = _tuple$9[0];
						err = _tuple$9[1];
						$24r$9 = [e, err];
						$s = 96; case 96: return $24r$9;
					/* } else if (_5 === (18)) { */ case 88:
						_r$39 = $clone(v, reflect.Value).String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						_r$40 = makeNumericString(_r$39); /* */ $s = 98; case 98: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						_tuple$10 = _r$40;
						e = _tuple$10[0];
						err = _tuple$10[1];
						$24r$10 = [e, err];
						$s = 99; case 99: return $24r$10;
					/* } else { */ case 89:
						_r$41 = $clone(v, reflect.Value).String(); /* */ $s = 100; case 100: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						_r$42 = makeUTF8String(_r$41); /* */ $s = 101; case 101: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
						_tmp$32 = _r$42;
						_tmp$33 = $ifaceNil;
						e = _tmp$32;
						err = _tmp$33;
						$24r$11 = [e, err];
						$s = 102; case 102: return $24r$11;
					/* } */ case 90:
				case 85:
			/* } */ case 31:
		case 25:
		_tmp$34 = $ifaceNil;
		_tmp$35 = (x$6 = new StructuralError.ptr("unknown Go type"), new x$6.constructor.elem(x$6));
		e = _tmp$34;
		err = _tmp$35;
		$s = -1; return [e, err];
		/* */ } return; } var $f = {$blk: makeBody, $c: true, $r, $24r, $24r$1, $24r$10, $24r$11, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _2, _3, _4, _5, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, bytes$1, e, err, fp, i, i$1, i$2, l, m, m$1, n, n1, params, s, sliceType$4, startingField, t, t$1, v, value, x$3, x$4, x$5, x$6, $s};return $f;
	};
	makeField = function(v, params) {
		var {$24r, $24r$1, $24r$2, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _rune, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, _v$2, bodyLen, class$1, defaultValue, e, err, isCompound, matchAny, ok, params, r, rv, t, t$1, tag, tt, v, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {v, params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = $ifaceNil;
		err = $ifaceNil;
		/* */ if (!$clone(v, reflect.Value).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!$clone(v, reflect.Value).IsValid()) { */ case 1:
			_tmp = $ifaceNil;
			_r = fmt.Errorf("asn1: cannot marshal nil value", sliceType$4.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tmp$1 = _r;
			e = _tmp;
			err = _tmp$1;
			$24r = [e, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		if (!($clone(v, reflect.Value).Kind() === 20)) { _v = false; $s = 7; continue s; }
		_r$1 = $clone(v, reflect.Value).Type().NumMethod(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 0; case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			_r$2 = $clone(v, reflect.Value).Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = makeField($clone(_r$2, reflect.Value), $clone(params, fieldParameters)); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			e = _tuple[0];
			err = _tuple[1];
			$24r$1 = [e, err];
			$s = 11; case 11: return $24r$1;
		/* } */ case 6:
		if (!($clone(v, reflect.Value).Kind() === 23)) { _v$1 = false; $s = 14; continue s; }
		_r$4 = $clone(v, reflect.Value).Len(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v$1 = _r$4 === 0; case 14:
		/* */ if (_v$1 && params.omitEmpty) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_v$1 && params.omitEmpty) { */ case 12:
			_tmp$2 = (bytesEncoder.nil);
			_tmp$3 = $ifaceNil;
			e = _tmp$2;
			err = _tmp$3;
			$s = -1; return [e, err];
		/* } */ case 13:
		/* */ if (params.optional && !(params.defaultValue === ptrType$2.nil) && canHaveDefaultValue($clone(v, reflect.Value).Kind())) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (params.optional && !(params.defaultValue === ptrType$2.nil) && canHaveDefaultValue($clone(v, reflect.Value).Kind())) { */ case 16:
			_r$5 = $clone(reflect.New($clone(v, reflect.Value).Type()), reflect.Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			defaultValue = _r$5;
			$clone(defaultValue, reflect.Value).SetInt(params.defaultValue.$get());
			_r$6 = $clone(v, reflect.Value).Interface(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg = _r$6;
			_r$7 = $clone(defaultValue, reflect.Value).Interface(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg$1 = _r$7;
			_r$8 = reflect.DeepEqual(_arg, _arg$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$8) { */ case 19:
				_tmp$4 = (bytesEncoder.nil);
				_tmp$5 = $ifaceNil;
				e = _tmp$4;
				err = _tmp$5;
				$s = -1; return [e, err];
			/* } */ case 20:
		/* } */ case 17:
		/* */ if (params.optional && params.defaultValue === ptrType$2.nil) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (params.optional && params.defaultValue === ptrType$2.nil) { */ case 24:
			_r$9 = $clone(v, reflect.Value).Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$2 = _r$9;
			_r$10 = reflect.Zero($clone(v, reflect.Value).Type()); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, reflect.Value).Interface(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = reflect.DeepEqual(_arg$2, _arg$3); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			/* */ if (_r$12) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$12) { */ case 26:
				_tmp$6 = (bytesEncoder.nil);
				_tmp$7 = $ifaceNil;
				e = _tmp$6;
				err = _tmp$7;
				$s = -1; return [e, err];
			/* } */ case 27:
		/* } */ case 25:
		/* */ if ($interfaceIsEqual($clone(v, reflect.Value).Type(), rawValueType)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ($interfaceIsEqual($clone(v, reflect.Value).Type(), rawValueType)) { */ case 32:
			_r$13 = $clone(v, reflect.Value).Interface(); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			rv = $clone($assertType(_r$13, RawValue), RawValue);
			if (!((rv.FullBytes.$length === 0))) {
				_tmp$8 = ($convertSliceType(rv.FullBytes, bytesEncoder));
				_tmp$9 = $ifaceNil;
				e = _tmp$8;
				err = _tmp$9;
				$s = -1; return [e, err];
			}
			t = new taggedEncoder.ptr(arrayType$1.zero(), $ifaceNil, $ifaceNil);
			t.tag = ($convertSliceType(appendTagAndLength($subslice(new sliceType(t.scratch), 0, 0), $clone(new tagAndLength.ptr(rv.Class, rv.Tag, rv.Bytes.$length, rv.IsCompound), tagAndLength)), bytesEncoder));
			t.body = ($convertSliceType(rv.Bytes, bytesEncoder));
			_tmp$10 = t;
			_tmp$11 = $ifaceNil;
			e = _tmp$10;
			err = _tmp$11;
			$s = -1; return [e, err];
		/* } */ case 33:
		_r$14 = getUniversalType($clone(v, reflect.Value).Type()); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$1 = _r$14;
		matchAny = _tuple$1[0];
		tag = _tuple$1[1];
		isCompound = _tuple$1[2];
		ok = _tuple$1[3];
		/* */ if (!ok || matchAny) { $s = 36; continue; }
		/* */ $s = 37; continue;
		/* if (!ok || matchAny) { */ case 36:
			_tmp$12 = $ifaceNil;
			_r$15 = fmt.Sprintf("unknown Go type: %v", new sliceType$4([$clone(v, reflect.Value).Type()])); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tmp$13 = (x$3 = new StructuralError.ptr(_r$15), new x$3.constructor.elem(x$3));
			e = _tmp$12;
			err = _tmp$13;
			$24r$2 = [e, err];
			$s = 39; case 39: return $24r$2;
		/* } */ case 37:
		if (!((params.timeType === 0)) && !((tag === 23))) {
			_tmp$14 = $ifaceNil;
			_tmp$15 = (x$4 = new StructuralError.ptr("explicit time type given to non-time member"), new x$4.constructor.elem(x$4));
			e = _tmp$14;
			err = _tmp$15;
			$s = -1; return [e, err];
		}
		if (!((params.stringType === 0)) && !((tag === 19))) {
			_tmp$16 = $ifaceNil;
			_tmp$17 = (x$5 = new StructuralError.ptr("explicit string type given to non-string member"), new x$5.constructor.elem(x$5));
			e = _tmp$16;
			err = _tmp$17;
			$s = -1; return [e, err];
		}
			_1 = tag;
			/* */ if (_1 === (19)) { $s = 41; continue; }
			/* */ if (_1 === (23)) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (_1 === (19)) { */ case 41:
				/* */ if (params.stringType === 0) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (params.stringType === 0) { */ case 44:
					_r$16 = $clone(v, reflect.Value).String(); /* */ $s = 47; case 47: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_ref = _r$16;
					_i = 0;
					/* while (true) { */ case 48:
						/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 49; continue; }
						_rune = $decodeRune(_ref, _i);
						r = _rune[0];
						/* */ if (r >= 128 || !isPrintable(((r << 24 >>> 24)), false, false)) { $s = 50; continue; }
						/* */ $s = 51; continue;
						/* if (r >= 128 || !isPrintable(((r << 24 >>> 24)), false, false)) { */ case 50:
							_r$17 = $clone(v, reflect.Value).String(); /* */ $s = 54; case 54: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							_r$18 = utf8.ValidString(_r$17); /* */ $s = 55; case 55: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							/* */ if (!_r$18) { $s = 52; continue; }
							/* */ $s = 53; continue;
							/* if (!_r$18) { */ case 52:
								_tmp$18 = $ifaceNil;
								_tmp$19 = errors.New("asn1: string not valid UTF-8");
								e = _tmp$18;
								err = _tmp$19;
								$s = -1; return [e, err];
							/* } */ case 53:
							tag = 12;
							/* break; */ $s = 49; continue;
						/* } */ case 51:
						_i += _rune[1];
					$s = 48; continue;
					case 49:
					$s = 46; continue;
				/* } else { */ case 45:
					tag = params.stringType;
				/* } */ case 46:
				$s = 43; continue;
			/* } else if (_1 === (23)) { */ case 42:
				if (params.timeType === 24) { _v$2 = true; $s = 58; continue s; }
				_r$19 = $clone(v, reflect.Value).Interface(); /* */ $s = 59; case 59: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = outsideUTCRange($clone($assertType(_r$19, time.Time), time.Time)); /* */ $s = 60; case 60: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_v$2 = _r$20; case 58:
				/* */ if (_v$2) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (_v$2) { */ case 56:
					tag = 24;
				/* } */ case 57:
			/* } */ case 43:
		case 40:
		if (params.set) {
			if (!((tag === 16))) {
				_tmp$20 = $ifaceNil;
				_tmp$21 = (x$6 = new StructuralError.ptr("non sequence tagged as set"), new x$6.constructor.elem(x$6));
				e = _tmp$20;
				err = _tmp$21;
				$s = -1; return [e, err];
			}
			tag = 17;
		}
		if ((tag === 17) && !params.set) {
			params.set = true;
		}
		t$1 = new taggedEncoder.ptr(arrayType$1.zero(), $ifaceNil, $ifaceNil);
		_r$21 = makeBody($clone(v, reflect.Value), $clone(params, fieldParameters)); /* */ $s = 61; case 61: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_tuple$2 = _r$21;
		t$1.body = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$22 = $ifaceNil;
			_tmp$23 = err;
			e = _tmp$22;
			err = _tmp$23;
			$s = -1; return [e, err];
		}
		_r$22 = t$1.body.Len(); /* */ $s = 62; case 62: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		bodyLen = _r$22;
		class$1 = 0;
		/* */ if (!(params.tag === ptrType$3.nil)) { $s = 63; continue; }
		/* */ $s = 64; continue;
		/* if (!(params.tag === ptrType$3.nil)) { */ case 63:
			if (params.application) {
				class$1 = 1;
			} else if (params.private$3) {
				class$1 = 3;
			} else {
				class$1 = 2;
			}
			/* */ if (params.explicit) { $s = 65; continue; }
			/* */ $s = 66; continue;
			/* if (params.explicit) { */ case 65:
				t$1.tag = ($convertSliceType(appendTagAndLength($subslice(new sliceType(t$1.scratch), 0, 0), $clone(new tagAndLength.ptr(0, tag, bodyLen, isCompound), tagAndLength)), bytesEncoder));
				tt = new taggedEncoder.ptr(arrayType$1.zero(), $ifaceNil, $ifaceNil);
				tt.body = t$1;
				_arg$4 = $subslice(new sliceType(tt.scratch), 0, 0);
				_r$23 = t$1.tag.Len(); /* */ $s = 67; case 67: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_arg$5 = $clone(new tagAndLength.ptr(class$1, params.tag.$get(), bodyLen + _r$23 >> 0, true), tagAndLength);
				_r$24 = appendTagAndLength(_arg$4, _arg$5); /* */ $s = 68; case 68: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				tt.tag = ($convertSliceType(_r$24, bytesEncoder));
				_tmp$24 = tt;
				_tmp$25 = $ifaceNil;
				e = _tmp$24;
				err = _tmp$25;
				$s = -1; return [e, err];
			/* } */ case 66:
			tag = params.tag.$get();
		/* } */ case 64:
		t$1.tag = ($convertSliceType(appendTagAndLength($subslice(new sliceType(t$1.scratch), 0, 0), $clone(new tagAndLength.ptr(class$1, tag, bodyLen, isCompound), tagAndLength)), bytesEncoder));
		_tmp$26 = t$1;
		_tmp$27 = $ifaceNil;
		e = _tmp$26;
		err = _tmp$27;
		$s = -1; return [e, err];
		/* */ } return; } var $f = {$blk: makeField, $c: true, $r, $24r, $24r$1, $24r$2, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _rune, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, _v$2, bodyLen, class$1, defaultValue, e, err, isCompound, matchAny, ok, params, r, rv, t, t$1, tag, tt, v, x$3, x$4, x$5, x$6, $s};return $f;
	};
	Marshal = function(val) {
		var {$24r, _r, val, $s, $r, $c} = $restore(this, {val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = MarshalWithParams(val, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Marshal, $c: true, $r, $24r, _r, val, $s};return $f;
	};
	$pkg.Marshal = Marshal;
	MarshalWithParams = function(val, params) {
		var {_r, _r$1, _r$2, _tuple, b, e, err, params, val, $s, $r, $c} = $restore(this, {val, params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = makeField($clone(_r, reflect.Value), $clone(parseFieldParameters(params), fieldParameters)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		e = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		_r$2 = e.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = $makeSlice(sliceType, _r$2);
		$r = e.Encode(b); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } var $f = {$blk: MarshalWithParams, $c: true, $r, _r, _r$1, _r$2, _tuple, b, e, err, params, val, $s};return $f;
	};
	$pkg.MarshalWithParams = MarshalWithParams;
	parseFieldParameters = function(str) {
		var _tuple, _tuple$1, _tuple$2, err, err$1, i, i$1, part, ret, str;
		ret = new fieldParameters.ptr(false, false, false, false, ptrType$2.nil, ptrType$3.nil, 0, 0, false, false);
		part = "";
		while (true) {
			if (!(str.length > 0)) { break; }
			_tuple = strings.Cut(str, ",");
			part = _tuple[0];
			str = _tuple[1];
			if (part === "optional") {
				ret.optional = true;
			} else if (part === "explicit") {
				ret.explicit = true;
				if (ret.tag === ptrType$3.nil) {
					ret.tag = $newDataPointer(0, ptrType$3);
				}
			} else if (part === "generalized") {
				ret.timeType = 24;
			} else if (part === "utc") {
				ret.timeType = 23;
			} else if (part === "ia5") {
				ret.stringType = 22;
			} else if (part === "printable") {
				ret.stringType = 19;
			} else if (part === "numeric") {
				ret.stringType = 18;
			} else if (part === "utf8") {
				ret.stringType = 12;
			} else if (strings.HasPrefix(part, "default:")) {
				_tuple$1 = strconv.ParseInt($substring(part, 8), 10, 64);
				i = _tuple$1[0];
				err = _tuple$1[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					ret.defaultValue = $newDataPointer(new $Int64(0, 0), ptrType$2);
					ret.defaultValue.$set(i);
				}
			} else if (strings.HasPrefix(part, "tag:")) {
				_tuple$2 = strconv.Atoi($substring(part, 4));
				i$1 = _tuple$2[0];
				err$1 = _tuple$2[1];
				if ($interfaceIsEqual(err$1, $ifaceNil)) {
					ret.tag = $newDataPointer(0, ptrType$3);
					ret.tag.$set(i$1);
				}
			} else if (part === "set") {
				ret.set = true;
			} else if (part === "application") {
				ret.application = true;
				if (ret.tag === ptrType$3.nil) {
					ret.tag = $newDataPointer(0, ptrType$3);
				}
			} else if (part === "private") {
				ret.private$3 = true;
				if (ret.tag === ptrType$3.nil) {
					ret.tag = $newDataPointer(0, ptrType$3);
				}
			} else if (part === "omitempty") {
				ret.omitEmpty = true;
			}
		}
		return ret;
	};
	getUniversalType = function(t) {
		var {_1, _2, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$6, _tmp$7, _tmp$8, _tmp$9, isCompound, matchAny, ok, t, tagNumber, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		matchAny = false;
		tagNumber = 0;
		isCompound = false;
		ok = false;
		_1 = t;
		if ($interfaceIsEqual(_1, (rawValueType))) {
			_tmp = true;
			_tmp$1 = -1;
			_tmp$2 = false;
			_tmp$3 = true;
			matchAny = _tmp;
			tagNumber = _tmp$1;
			isCompound = _tmp$2;
			ok = _tmp$3;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_1, (objectIdentifierType))) {
			_tmp$4 = false;
			_tmp$5 = 6;
			_tmp$6 = false;
			_tmp$7 = true;
			matchAny = _tmp$4;
			tagNumber = _tmp$5;
			isCompound = _tmp$6;
			ok = _tmp$7;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_1, (bitStringType))) {
			_tmp$8 = false;
			_tmp$9 = 3;
			_tmp$10 = false;
			_tmp$11 = true;
			matchAny = _tmp$8;
			tagNumber = _tmp$9;
			isCompound = _tmp$10;
			ok = _tmp$11;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_1, (timeType))) {
			_tmp$12 = false;
			_tmp$13 = 23;
			_tmp$14 = false;
			_tmp$15 = true;
			matchAny = _tmp$12;
			tagNumber = _tmp$13;
			isCompound = _tmp$14;
			ok = _tmp$15;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_1, (enumeratedType))) {
			_tmp$16 = false;
			_tmp$17 = 10;
			_tmp$18 = false;
			_tmp$19 = true;
			matchAny = _tmp$16;
			tagNumber = _tmp$17;
			isCompound = _tmp$18;
			ok = _tmp$19;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_1, (bigIntType))) {
			_tmp$20 = false;
			_tmp$21 = 2;
			_tmp$22 = false;
			_tmp$23 = true;
			matchAny = _tmp$20;
			tagNumber = _tmp$21;
			isCompound = _tmp$22;
			ok = _tmp$23;
			$s = -1; return [matchAny, tagNumber, isCompound, ok];
		}
			_r = t.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_2 = _r;
			/* */ if (_2 === (1)) { $s = 3; continue; }
			/* */ if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { $s = 4; continue; }
			/* */ if (_2 === (25)) { $s = 5; continue; }
			/* */ if (_2 === (23)) { $s = 6; continue; }
			/* */ if (_2 === (24)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_2 === (1)) { */ case 3:
				_tmp$24 = false;
				_tmp$25 = 1;
				_tmp$26 = false;
				_tmp$27 = true;
				matchAny = _tmp$24;
				tagNumber = _tmp$25;
				isCompound = _tmp$26;
				ok = _tmp$27;
				$s = -1; return [matchAny, tagNumber, isCompound, ok];
			/* } else if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { */ case 4:
				_tmp$28 = false;
				_tmp$29 = 2;
				_tmp$30 = false;
				_tmp$31 = true;
				matchAny = _tmp$28;
				tagNumber = _tmp$29;
				isCompound = _tmp$30;
				ok = _tmp$31;
				$s = -1; return [matchAny, tagNumber, isCompound, ok];
			/* } else if (_2 === (25)) { */ case 5:
				_tmp$32 = false;
				_tmp$33 = 16;
				_tmp$34 = true;
				_tmp$35 = true;
				matchAny = _tmp$32;
				tagNumber = _tmp$33;
				isCompound = _tmp$34;
				ok = _tmp$35;
				$s = -1; return [matchAny, tagNumber, isCompound, ok];
			/* } else if (_2 === (23)) { */ case 6:
				_r$1 = t.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2 === 8) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r$2 === 8) { */ case 9:
					_tmp$36 = false;
					_tmp$37 = 4;
					_tmp$38 = false;
					_tmp$39 = true;
					matchAny = _tmp$36;
					tagNumber = _tmp$37;
					isCompound = _tmp$38;
					ok = _tmp$39;
					$s = -1; return [matchAny, tagNumber, isCompound, ok];
				/* } */ case 10:
				_r$3 = t.Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = strings.HasSuffix(_r$3, "SET"); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (_r$4) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$4) { */ case 13:
					_tmp$40 = false;
					_tmp$41 = 17;
					_tmp$42 = true;
					_tmp$43 = true;
					matchAny = _tmp$40;
					tagNumber = _tmp$41;
					isCompound = _tmp$42;
					ok = _tmp$43;
					$s = -1; return [matchAny, tagNumber, isCompound, ok];
				/* } */ case 14:
				_tmp$44 = false;
				_tmp$45 = 16;
				_tmp$46 = true;
				_tmp$47 = true;
				matchAny = _tmp$44;
				tagNumber = _tmp$45;
				isCompound = _tmp$46;
				ok = _tmp$47;
				$s = -1; return [matchAny, tagNumber, isCompound, ok];
			/* } else if (_2 === (24)) { */ case 7:
				_tmp$48 = false;
				_tmp$49 = 19;
				_tmp$50 = false;
				_tmp$51 = true;
				matchAny = _tmp$48;
				tagNumber = _tmp$49;
				isCompound = _tmp$50;
				ok = _tmp$51;
				$s = -1; return [matchAny, tagNumber, isCompound, ok];
			/* } */ case 8:
		case 1:
		_tmp$52 = false;
		_tmp$53 = 0;
		_tmp$54 = false;
		_tmp$55 = false;
		matchAny = _tmp$52;
		tagNumber = _tmp$53;
		isCompound = _tmp$54;
		ok = _tmp$55;
		$s = -1; return [matchAny, tagNumber, isCompound, ok];
		/* */ } return; } var $f = {$blk: getUniversalType, $c: true, $r, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$6, _tmp$7, _tmp$8, _tmp$9, isCompound, matchAny, ok, t, tagNumber, $s};return $f;
	};
	StructuralError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "asn1: structure error: " + e.Msg;
	};
	StructuralError.prototype.Error = function() { return this.$val.Error(); };
	SyntaxError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "asn1: syntax error: " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	parseBool = function(bytes$1) {
		var _1, bytes$1, err, ret, x$3, x$4;
		ret = false;
		err = $ifaceNil;
		if (!((bytes$1.$length === 1))) {
			err = (x$3 = new SyntaxError.ptr("invalid boolean"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		_1 = (0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]);
		if (_1 === (0)) {
			ret = false;
		} else if (_1 === (255)) {
			ret = true;
		} else {
			err = (x$4 = new SyntaxError.ptr("invalid boolean"), new x$4.constructor.elem(x$4));
		}
		return [ret, err];
	};
	checkInteger = function(bytes$1) {
		var bytes$1, x$3, x$4;
		if (bytes$1.$length === 0) {
			return (x$3 = new StructuralError.ptr("empty integer"), new x$3.constructor.elem(x$3));
		}
		if (bytes$1.$length === 1) {
			return $ifaceNil;
		}
		if ((((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) === 0) && ((((1 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 1]) & 128) >>> 0) === 0)) || (((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) === 255) && ((((1 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 1]) & 128) >>> 0) === 128))) {
			return (x$4 = new StructuralError.ptr("integer not minimally-encoded"), new x$4.constructor.elem(x$4));
		}
		return $ifaceNil;
	};
	parseInt64 = function(bytes$1) {
		var bytes$1, bytesRead, err, ret, x$3, x$4;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		err = checkInteger(bytes$1);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ret, err];
		}
		if (bytes$1.$length > 8) {
			err = (x$3 = new StructuralError.ptr("integer too large"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		bytesRead = 0;
		while (true) {
			if (!(bytesRead < bytes$1.$length)) { break; }
			ret = $shiftLeft64(ret, (8));
			ret = (x$4 = (new $Int64(0, ((bytesRead < 0 || bytesRead >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + bytesRead]))), new $Int64(ret.$high | x$4.$high, (ret.$low | x$4.$low) >>> 0));
			bytesRead = bytesRead + (1) >> 0;
		}
		ret = $shiftLeft64(ret, ((64 - (((bytes$1.$length << 24 >>> 24)) * 8 << 24 >>> 24) << 24 >>> 24)));
		ret = $shiftRightInt64(ret, ((64 - (((bytes$1.$length << 24 >>> 24)) * 8 << 24 >>> 24) << 24 >>> 24)));
		return [ret, err];
	};
	parseInt32 = function(bytes$1) {
		var _tuple, bytes$1, err, err$1, ret64, x$3, x$4;
		err = checkInteger(bytes$1);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [0, err];
		}
		_tuple = parseInt64(bytes$1);
		ret64 = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [0, err$1];
		}
		if (!((x$3 = (new $Int64(0, (((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0)))), (ret64.$high === x$3.$high && ret64.$low === x$3.$low)))) {
			return [0, (x$4 = new StructuralError.ptr("integer too large"), new x$4.constructor.elem(x$4))];
		}
		return [(((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0)), $ifaceNil];
	};
	parseBigInt = function(bytes$1) {
		var {_i, _r, _ref, bytes$1, err, i, notBytes, ret, $s, $r, $c} = $restore(this, {bytes$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkInteger(bytes$1);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, err];
		}
		ret = new big.Int.ptr(false, big.nat.nil);
		/* */ if (bytes$1.$length > 0 && ((((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 128)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (bytes$1.$length > 0 && ((((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 128)) { */ case 1:
			notBytes = $makeSlice(sliceType, bytes$1.$length);
			_ref = notBytes;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= notBytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : notBytes.$array[notBytes.$offset + i] = (~((i < 0 || i >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + i]) << 24 >>> 24));
				_i++;
			}
			ret.SetBytes(notBytes);
			_r = ret.Add(ret, bigOne); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			ret.Neg(ret);
			$s = -1; return [ret, $ifaceNil];
		/* } */ case 2:
		ret.SetBytes(bytes$1);
		$s = -1; return [ret, $ifaceNil];
		/* */ } return; } var $f = {$blk: parseBigInt, $c: true, $r, _i, _r, _ref, bytes$1, err, i, notBytes, ret, $s};return $f;
	};
	BitString.ptr.prototype.At = function(i) {
		var _q, _r, b, i, x$3, x$4, y, y$1;
		b = this;
		if (i < 0 || i >= b.BitLength) {
			return 0;
		}
		x$3 = (_q = i / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y = 7 - (((_r = i % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		return ((((y$1 = y, y$1 < 32 ? ((x$4 = b.Bytes, ((x$3 < 0 || x$3 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$3])) >>> y$1) : 0) << 24 >>> 24) >> 0)) & 1;
	};
	BitString.prototype.At = function(i) { return this.$val.At(i); };
	BitString.ptr.prototype.RightAlign = function() {
		var _r, a, b, i, shift, x$3, x$4, x$5, x$6, y, y$1, y$2;
		b = this;
		shift = (((8 - ((_r = b.BitLength % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))) >> 0) >>> 0));
		if ((shift === 8) || (b.Bytes.$length === 0)) {
			return b.Bytes;
		}
		a = $makeSlice(sliceType, b.Bytes.$length);
		(0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0] = ((y = shift, y < 32 ? ((x$3 = b.Bytes, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) >>> y) : 0) << 24 >>> 24));
		i = 1;
		while (true) {
			if (!(i < b.Bytes.$length)) { break; }
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = ((y$1 = ((8 - shift >>> 0)), y$1 < 32 ? ((x$4 = b.Bytes, x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) << y$1) : 0) << 24 >>> 24));
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = ((((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) | (((y$2 = shift, y$2 < 32 ? ((x$6 = b.Bytes, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])) >>> y$2) : 0) << 24 >>> 24))) >>> 0));
			i = i + (1) >> 0;
		}
		return a;
	};
	BitString.prototype.RightAlign = function() { return this.$val.RightAlign(); };
	parseBitString = function(bytes$1) {
		var bytes$1, err, paddingBits, ret, x$3, x$4, x$5, y;
		ret = new BitString.ptr(sliceType.nil, 0);
		err = $ifaceNil;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.ptr("zero length BIT STRING"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		paddingBits = (((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) >> 0));
		if (paddingBits > 7 || (bytes$1.$length === 1) && paddingBits > 0 || !(((((x$4 = bytes$1.$length - 1 >> 0, ((x$4 < 0 || x$4 >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + x$4])) & (((((y = (0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]), y < 32 ? (1 << y) : 0) << 24 >>> 24)) - 1 << 24 >>> 24))) >>> 0) === 0))) {
			err = (x$5 = new SyntaxError.ptr("invalid padding bits in BIT STRING"), new x$5.constructor.elem(x$5));
			return [ret, err];
		}
		ret.BitLength = ($imul(((bytes$1.$length - 1 >> 0)), 8)) - paddingBits >> 0;
		ret.Bytes = $subslice(bytes$1, 1);
		return [ret, err];
	};
	ObjectIdentifier.prototype.Equal = function(other) {
		var i, oi, other;
		oi = this;
		if (!((oi.$length === other.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < oi.$length)) { break; }
			if (!((((i < 0 || i >= oi.$length) ? ($throwRuntimeError("index out of range"), undefined) : oi.$array[oi.$offset + i]) === ((i < 0 || i >= other.$length) ? ($throwRuntimeError("index out of range"), undefined) : other.$array[other.$offset + i])))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	$ptrType(ObjectIdentifier).prototype.Equal = function(other) { return this.$get().Equal(other); };
	ObjectIdentifier.prototype.String = function() {
		var _i, _ref, i, oi, s, v;
		oi = this;
		s = "";
		_ref = oi;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (strconv.Itoa(v));
			_i++;
		}
		return s;
	};
	$ptrType(ObjectIdentifier).prototype.String = function() { return this.$get().String(); };
	parseObjectIdentifier = function(bytes$1) {
		var _q, _r, _tuple, _tuple$1, bytes$1, err, i, offset, s, v, x$3;
		s = ObjectIdentifier.nil;
		err = $ifaceNil;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.ptr("zero length OBJECT IDENTIFIER"), new x$3.constructor.elem(x$3));
			return [s, err];
		}
		s = $convertSliceType($makeSlice(sliceType$3, (bytes$1.$length + 1 >> 0)), ObjectIdentifier);
		_tuple = parseBase128Int(bytes$1, 0);
		v = _tuple[0];
		offset = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		if (v < 80) {
			(0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0] = (_q = v / 40, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			(1 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 1] = (_r = v % 40, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else {
			(0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0] = 2);
			(1 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 1] = (v - 80 >> 0));
		}
		i = 2;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			_tuple$1 = parseBase128Int(bytes$1, offset);
			v = _tuple$1[0];
			offset = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [s, err];
			}
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = v);
			i = i + (1) >> 0;
		}
		s = $subslice(s, 0, i);
		return [s, err];
	};
	parseBase128Int = function(bytes$1, initOffset) {
		var b, bytes$1, err, initOffset, offset, ret, ret64, shifted, x$3, x$4, x$5, x$6, x$7;
		ret = 0;
		offset = 0;
		err = $ifaceNil;
		offset = initOffset;
		ret64 = new $Int64(0, 0);
		shifted = 0;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			if (shifted === 5) {
				err = (x$3 = new StructuralError.ptr("base 128 integer too large"), new x$3.constructor.elem(x$3));
				return [ret, offset, err];
			}
			ret64 = $shiftLeft64(ret64, (7));
			b = ((offset < 0 || offset >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + offset]);
			if ((shifted === 0) && (b === 128)) {
				err = (x$4 = new SyntaxError.ptr("integer is not minimally encoded"), new x$4.constructor.elem(x$4));
				return [ret, offset, err];
			}
			ret64 = (x$5 = (new $Int64(0, ((b & 127) >>> 0))), new $Int64(ret64.$high | x$5.$high, (ret64.$low | x$5.$low) >>> 0));
			offset = offset + (1) >> 0;
			if (((b & 128) >>> 0) === 0) {
				ret = (((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0));
				if ((ret64.$high > 0 || (ret64.$high === 0 && ret64.$low > 2147483647))) {
					err = (x$6 = new StructuralError.ptr("base 128 integer too large"), new x$6.constructor.elem(x$6));
				}
				return [ret, offset, err];
			}
			shifted = shifted + (1) >> 0;
		}
		err = (x$7 = new SyntaxError.ptr("truncated base 128 integer"), new x$7.constructor.elem(x$7));
		return [ret, offset, err];
	};
	parseUTCTime = function(bytes$1) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, bytes$1, err, formatStr, ret, s, serialized, $s, $r, $c} = $restore(this, {bytes$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
		err = $ifaceNil;
		s = ($bytesToString(bytes$1));
		formatStr = "0601021504Z0700";
		_r = time.Parse(formatStr, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		time.Time.copy(ret, _tuple[0]);
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			formatStr = "060102150405Z0700";
			_r$1 = time.Parse(formatStr, s); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			time.Time.copy(ret, _tuple$1[0]);
			err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ret, err];
		}
		_r$2 = $clone(ret, time.Time).Format(formatStr); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		serialized = _r$2;
		/* */ if (!(serialized === s)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!(serialized === s)) { */ case 6:
			_r$3 = fmt.Errorf("asn1: time did not serialize back to the original value and may be invalid: given %q, but serialized as %q", new sliceType$4([new $String(s), new $String(serialized)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			$s = -1; return [ret, err];
		/* } */ case 7:
		_r$4 = $clone(ret, time.Time).Year(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 >= 2050) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_r$4 >= 2050) { */ case 9:
			_r$5 = $clone(ret, time.Time).AddDate(-100, 0, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			time.Time.copy(ret, _r$5);
		/* } */ case 10:
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: parseUTCTime, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, bytes$1, err, formatStr, ret, s, serialized, $s};return $f;
	};
	parseGeneralizedTime = function(bytes$1) {
		var {_r, _r$1, _r$2, _tuple, bytes$1, err, ret, s, serialized, $s, $r, $c} = $restore(this, {bytes$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
		err = $ifaceNil;
		s = ($bytesToString(bytes$1));
		_r = time.Parse("20060102150405Z0700", s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		time.Time.copy(ret, _tuple[0]);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ret, err];
		}
		_r$1 = $clone(ret, time.Time).Format("20060102150405Z0700"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		serialized = _r$1;
		/* */ if (!(serialized === s)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(serialized === s)) { */ case 3:
			_r$2 = fmt.Errorf("asn1: time did not serialize back to the original value and may be invalid: given %q, but serialized as %q", new sliceType$4([new $String(s), new $String(serialized)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
		/* } */ case 4:
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: parseGeneralizedTime, $c: true, $r, _r, _r$1, _r$2, _tuple, bytes$1, err, ret, s, serialized, $s};return $f;
	};
	parseNumericString = function(bytes$1) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, b, bytes$1, err, ret, x$3;
		ret = "";
		err = $ifaceNil;
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!isNumeric(b)) {
				_tmp = "";
				_tmp$1 = (x$3 = new SyntaxError.ptr("NumericString contains invalid character"), new x$3.constructor.elem(x$3));
				ret = _tmp;
				err = _tmp$1;
				return [ret, err];
			}
			_i++;
		}
		_tmp$2 = ($bytesToString(bytes$1));
		_tmp$3 = $ifaceNil;
		ret = _tmp$2;
		err = _tmp$3;
		return [ret, err];
	};
	isNumeric = function(b) {
		var b;
		return 48 <= b && b <= 57 || (b === 32);
	};
	parsePrintableString = function(bytes$1) {
		var _i, _ref, b, bytes$1, err, ret, x$3;
		ret = "";
		err = $ifaceNil;
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!isPrintable(b, true, true)) {
				err = (x$3 = new SyntaxError.ptr("PrintableString contains invalid character"), new x$3.constructor.elem(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = ($bytesToString(bytes$1));
		return [ret, err];
	};
	isPrintable = function(b, asterisk, ampersand) {
		var ampersand, asterisk, b;
		return 97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || 39 <= b && b <= 41 || 43 <= b && b <= 47 || (b === 32) || (b === 58) || (b === 61) || (b === 63) || ((asterisk) && (b === 42)) || ((ampersand) && (b === 38));
	};
	parseIA5String = function(bytes$1) {
		var _i, _ref, b, bytes$1, err, ret, x$3;
		ret = "";
		err = $ifaceNil;
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				err = (x$3 = new SyntaxError.ptr("IA5String contains invalid character"), new x$3.constructor.elem(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = ($bytesToString(bytes$1));
		return [ret, err];
	};
	parseT61String = function(bytes$1) {
		var _tmp, _tmp$1, bytes$1, err, ret;
		ret = "";
		err = $ifaceNil;
		_tmp = ($bytesToString(bytes$1));
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	parseUTF8String = function(bytes$1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, bytes$1, err, ret;
		ret = "";
		err = $ifaceNil;
		if (!utf8.Valid(bytes$1)) {
			_tmp = "";
			_tmp$1 = errors.New("asn1: invalid UTF-8 string");
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tmp$2 = ($bytesToString(bytes$1));
		_tmp$3 = $ifaceNil;
		ret = _tmp$2;
		err = _tmp$3;
		return [ret, err];
	};
	parseBMPString = function(bmpString) {
		var _q, _r, bmpString, l, s, x$3, x$4;
		if (!(((_r = bmpString.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			return ["", errors.New("pkcs12: odd-length BMP string")];
		}
		l = bmpString.$length;
		if (l >= 2 && ((x$3 = l - 1 >> 0, ((x$3 < 0 || x$3 >= bmpString.$length) ? ($throwRuntimeError("index out of range"), undefined) : bmpString.$array[bmpString.$offset + x$3])) === 0) && ((x$4 = l - 2 >> 0, ((x$4 < 0 || x$4 >= bmpString.$length) ? ($throwRuntimeError("index out of range"), undefined) : bmpString.$array[bmpString.$offset + x$4])) === 0)) {
			bmpString = $subslice(bmpString, 0, (l - 2 >> 0));
		}
		s = $makeSlice(sliceType$5, 0, (_q = bmpString.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(bmpString.$length > 0)) { break; }
			s = $append(s, ((((0 >= bmpString.$length ? ($throwRuntimeError("index out of range"), undefined) : bmpString.$array[bmpString.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16) + (((1 >= bmpString.$length ? ($throwRuntimeError("index out of range"), undefined) : bmpString.$array[bmpString.$offset + 1]) << 16 >>> 16)) << 16 >>> 16);
			bmpString = $subslice(bmpString, 2);
		}
		return [($runesToString(utf16.Decode(s))), $ifaceNil];
	};
	parseTagAndLength = function(bytes$1, initOffset) {
		var _tuple, b, bytes$1, err, i, initOffset, numBytes, offset, ret, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ret = new tagAndLength.ptr(0, 0, 0, false);
		offset = 0;
		err = $ifaceNil;
		offset = initOffset;
		if (offset >= bytes$1.$length) {
			err = errors.New("asn1: internal error in parseTagAndLength");
			return [ret, offset, err];
		}
		b = ((offset < 0 || offset >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		ret.class$0 = (((b >>> 6 << 24 >>> 24) >> 0));
		ret.isCompound = ((b & 32) >>> 0) === 32;
		ret.tag = ((((b & 31) >>> 0) >> 0));
		if (ret.tag === 31) {
			_tuple = parseBase128Int(bytes$1, offset);
			ret.tag = _tuple[0];
			offset = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, offset, err];
			}
			if (ret.tag < 31) {
				err = (x$3 = new SyntaxError.ptr("non-minimal tag"), new x$3.constructor.elem(x$3));
				return [ret, offset, err];
			}
		}
		if (offset >= bytes$1.$length) {
			err = (x$4 = new SyntaxError.ptr("truncated tag or length"), new x$4.constructor.elem(x$4));
			return [ret, offset, err];
		}
		b = ((offset < 0 || offset >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		if (((b & 128) >>> 0) === 0) {
			ret.length = ((((b & 127) >>> 0) >> 0));
		} else {
			numBytes = ((((b & 127) >>> 0) >> 0));
			if (numBytes === 0) {
				err = (x$5 = new SyntaxError.ptr("indefinite length found (not DER)"), new x$5.constructor.elem(x$5));
				return [ret, offset, err];
			}
			ret.length = 0;
			i = 0;
			while (true) {
				if (!(i < numBytes)) { break; }
				if (offset >= bytes$1.$length) {
					err = (x$6 = new SyntaxError.ptr("truncated tag or length"), new x$6.constructor.elem(x$6));
					return [ret, offset, err];
				}
				b = ((offset < 0 || offset >= bytes$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + offset]);
				offset = offset + (1) >> 0;
				if (ret.length >= 8388608) {
					err = (x$7 = new StructuralError.ptr("length too large"), new x$7.constructor.elem(x$7));
					return [ret, offset, err];
				}
				ret.length = (y = (8), y < 32 ? (ret.length << y) : 0) >> 0;
				ret.length = ret.length | (((b >> 0)));
				if (ret.length === 0) {
					err = (x$8 = new StructuralError.ptr("superfluous leading zeros in length"), new x$8.constructor.elem(x$8));
					return [ret, offset, err];
				}
				i = i + (1) >> 0;
			}
			if (ret.length < 128) {
				err = (x$9 = new StructuralError.ptr("non-minimal length"), new x$9.constructor.elem(x$9));
				return [ret, offset, err];
			}
		}
		return [ret, offset, err];
	};
	parseSequenceOf = function(bytes$1, sliceType$6, elemType) {
		var {_1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, bytes$1, compoundType, elemType, err, expectedTag, i, matchAny, numElements, offset, offset$1, ok, params, ret, sliceType$6, t, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {bytes$1, sliceType$6, elemType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new reflect.Value.ptr(ptrType$4.nil, 0, 0);
		err = $ifaceNil;
		_r = getUniversalType(elemType); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		matchAny = _tuple[0];
		expectedTag = _tuple[1];
		compoundType = _tuple[2];
		ok = _tuple[3];
		if (!ok) {
			err = (x$3 = new StructuralError.ptr("unknown Go type for slice"), new x$3.constructor.elem(x$3));
			$s = -1; return [ret, err];
		}
		numElements = 0;
		offset = 0;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			t = new tagAndLength.ptr(0, 0, 0, false);
			_tuple$1 = parseTagAndLength(bytes$1, offset);
			tagAndLength.copy(t, _tuple$1[0]);
			offset = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			_1 = t.tag;
			if ((_1 === (22)) || (_1 === (27)) || (_1 === (20)) || (_1 === (12)) || (_1 === (18)) || (_1 === (30))) {
				t.tag = 19;
			} else if ((_1 === (24)) || (_1 === (23))) {
				t.tag = 23;
			}
			if (!matchAny && (!((t.class$0 === 0)) || !(t.isCompound === compoundType) || !((t.tag === expectedTag)))) {
				err = (x$4 = new StructuralError.ptr("sequence tag mismatch"), new x$4.constructor.elem(x$4));
				$s = -1; return [ret, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$5 = new SyntaxError.ptr("truncated sequence"), new x$5.constructor.elem(x$5));
				$s = -1; return [ret, err];
			}
			offset = offset + (t.length) >> 0;
			numElements = numElements + (1) >> 0;
		}
		_r$1 = reflect.MakeSlice(sliceType$6, numElements, numElements); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		params = new fieldParameters.ptr(false, false, false, false, ptrType$2.nil, ptrType$3.nil, 0, 0, false, false);
		offset$1 = 0;
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < numElements)) { break; } */ if(!(i < numElements)) { $s = 4; continue; }
			_r$2 = $clone(ret, reflect.Value).Index(i); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = parseField($clone(_r$2, reflect.Value), bytes$1, offset$1, $clone(params, fieldParameters)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			offset$1 = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			i = i + (1) >> 0;
		$s = 3; continue;
		case 4:
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: parseSequenceOf, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, bytes$1, compoundType, elemType, err, expectedTag, i, matchAny, numElements, offset, offset$1, ok, params, ret, sliceType$6, t, x$3, x$4, x$5, $s};return $f;
	};
	invalidLength = function(offset, length, sliceLength) {
		var length, offset, sliceLength;
		return (offset + length >> 0) < offset || (offset + length >> 0) > sliceLength;
	};
	parseField = function(v, bytes$1, initOffset, params) {
		var {_1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, bytes$1, bytes$2, compoundType, err, err1, err1$1, err1$2, err1$3, err1$4, err1$5, expectedClass, expectedClass$1, expectedTag, field, fieldType, i, i$1, ifaceType, initOffset, innerBytes, innerBytes$1, innerOffset, matchAny, matchAnyClassAndTag, newSlice, offset, ok, ok$1, ok1, params, parsedBool, parsedInt, parsedInt$1, parsedInt$2, parsedInt$3, result, sliceType$6, structType, t, t$1, universalTag, v, v$1, v$2, v$3, v$4, v$5, v$6, v$7, v$8, val, x$10, x$11, x$12, x$13, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {v, bytes$1, initOffset, params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		offset = 0;
		err = $ifaceNil;
		offset = initOffset;
		fieldType = $clone(v, reflect.Value).Type();
		if (offset === bytes$1.$length) {
			if (!setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters))) {
				err = (x$3 = new SyntaxError.ptr("sequence truncated"), new x$3.constructor.elem(x$3));
			}
			$s = -1; return [offset, err];
		}
		ifaceType = fieldType;
		_r = ifaceType.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r === 20)) { _v = false; $s = 3; continue s; }
		_r$1 = ifaceType.NumMethod(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 0; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			t = new tagAndLength.ptr(0, 0, 0, false);
			_tuple = parseTagAndLength(bytes$1, offset);
			tagAndLength.copy(t, _tuple[0]);
			offset = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [offset, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$4 = new SyntaxError.ptr("data truncated"), new x$4.constructor.elem(x$4));
				$s = -1; return [offset, err];
			}
			result = $ifaceNil;
			/* */ if (!t.isCompound && (t.class$0 === 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!t.isCompound && (t.class$0 === 0)) { */ case 6:
				innerBytes = $subslice(bytes$1, offset, (offset + t.length >> 0));
					_1 = t.tag;
					/* */ if (_1 === (19)) { $s = 9; continue; }
					/* */ if (_1 === (18)) { $s = 10; continue; }
					/* */ if (_1 === (22)) { $s = 11; continue; }
					/* */ if (_1 === (20)) { $s = 12; continue; }
					/* */ if (_1 === (12)) { $s = 13; continue; }
					/* */ if (_1 === (2)) { $s = 14; continue; }
					/* */ if (_1 === (3)) { $s = 15; continue; }
					/* */ if (_1 === (6)) { $s = 16; continue; }
					/* */ if (_1 === (23)) { $s = 17; continue; }
					/* */ if (_1 === (24)) { $s = 18; continue; }
					/* */ if (_1 === (4)) { $s = 19; continue; }
					/* */ if (_1 === (30)) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (_1 === (19)) { */ case 9:
						_tuple$1 = parsePrintableString(innerBytes);
						result = new $String(_tuple$1[0]);
						err = _tuple$1[1];
						$s = 21; continue;
					/* } else if (_1 === (18)) { */ case 10:
						_tuple$2 = parseNumericString(innerBytes);
						result = new $String(_tuple$2[0]);
						err = _tuple$2[1];
						$s = 21; continue;
					/* } else if (_1 === (22)) { */ case 11:
						_tuple$3 = parseIA5String(innerBytes);
						result = new $String(_tuple$3[0]);
						err = _tuple$3[1];
						$s = 21; continue;
					/* } else if (_1 === (20)) { */ case 12:
						_tuple$4 = parseT61String(innerBytes);
						result = new $String(_tuple$4[0]);
						err = _tuple$4[1];
						$s = 21; continue;
					/* } else if (_1 === (12)) { */ case 13:
						_tuple$5 = parseUTF8String(innerBytes);
						result = new $String(_tuple$5[0]);
						err = _tuple$5[1];
						$s = 21; continue;
					/* } else if (_1 === (2)) { */ case 14:
						_tuple$6 = parseInt64(innerBytes);
						result = _tuple$6[0];
						err = _tuple$6[1];
						$s = 21; continue;
					/* } else if (_1 === (3)) { */ case 15:
						_tuple$7 = parseBitString(innerBytes);
						result = new _tuple$7[0].constructor.elem(_tuple$7[0]);
						err = _tuple$7[1];
						$s = 21; continue;
					/* } else if (_1 === (6)) { */ case 16:
						_tuple$8 = parseObjectIdentifier(innerBytes);
						result = _tuple$8[0];
						err = _tuple$8[1];
						$s = 21; continue;
					/* } else if (_1 === (23)) { */ case 17:
						_r$2 = parseUTCTime(innerBytes); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$9 = _r$2;
						result = new _tuple$9[0].constructor.elem(_tuple$9[0]);
						err = _tuple$9[1];
						$s = 21; continue;
					/* } else if (_1 === (24)) { */ case 18:
						_r$3 = parseGeneralizedTime(innerBytes); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_tuple$10 = _r$3;
						result = new _tuple$10[0].constructor.elem(_tuple$10[0]);
						err = _tuple$10[1];
						$s = 21; continue;
					/* } else if (_1 === (4)) { */ case 19:
						result = innerBytes;
						$s = 21; continue;
					/* } else if (_1 === (30)) { */ case 20:
						_tuple$11 = parseBMPString(innerBytes);
						result = new $String(_tuple$11[0]);
						err = _tuple$11[1];
					/* } */ case 21:
				case 8:
			/* } */ case 7:
			offset = offset + (t.length) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [offset, err];
			}
			/* */ if (!($interfaceIsEqual(result, $ifaceNil))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!($interfaceIsEqual(result, $ifaceNil))) { */ case 24:
				_r$4 = reflect.ValueOf(result); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = $clone(v, reflect.Value).Set($clone(_r$4, reflect.Value)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 25:
			$s = -1; return [offset, err];
		/* } */ case 2:
		_tuple$12 = parseTagAndLength(bytes$1, offset);
		t$1 = $clone(_tuple$12[0], tagAndLength);
		offset = _tuple$12[1];
		err = _tuple$12[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [offset, err];
		}
		if (params.explicit) {
			expectedClass = 2;
			if (params.application) {
				expectedClass = 1;
			}
			if (offset === bytes$1.$length) {
				err = (x$5 = new StructuralError.ptr("explicit tag has no child"), new x$5.constructor.elem(x$5));
				$s = -1; return [offset, err];
			}
			if ((t$1.class$0 === expectedClass) && (t$1.tag === params.tag.$get()) && ((t$1.length === 0) || t$1.isCompound)) {
				if ($interfaceIsEqual(fieldType, rawValueType)) {
				} else if (t$1.length > 0) {
					_tuple$13 = parseTagAndLength(bytes$1, offset);
					tagAndLength.copy(t$1, _tuple$13[0]);
					offset = _tuple$13[1];
					err = _tuple$13[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [offset, err];
					}
				} else {
					if (!($interfaceIsEqual(fieldType, flagType))) {
						err = (x$6 = new StructuralError.ptr("zero length explicit tag was not an asn1.Flag"), new x$6.constructor.elem(x$6));
						$s = -1; return [offset, err];
					}
					$clone(v, reflect.Value).SetBool(true);
					$s = -1; return [offset, err];
				}
			} else {
				ok = setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters));
				if (ok) {
					offset = initOffset;
				} else {
					err = (x$7 = new StructuralError.ptr("explicitly tagged member didn't match"), new x$7.constructor.elem(x$7));
				}
				$s = -1; return [offset, err];
			}
		}
		_r$5 = getUniversalType(fieldType); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$14 = _r$5;
		matchAny = _tuple$14[0];
		universalTag = _tuple$14[1];
		compoundType = _tuple$14[2];
		ok1 = _tuple$14[3];
		/* */ if (!ok1) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (!ok1) { */ case 29:
			_r$6 = fmt.Sprintf("unknown Go type: %v", new sliceType$4([fieldType])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = (x$8 = new StructuralError.ptr(_r$6), new x$8.constructor.elem(x$8));
			$s = -1; return [offset, err];
		/* } */ case 30:
		if (universalTag === 19) {
			if (t$1.class$0 === 0) {
				_2 = t$1.tag;
				if ((_2 === (22)) || (_2 === (27)) || (_2 === (20)) || (_2 === (12)) || (_2 === (18)) || (_2 === (30))) {
					universalTag = t$1.tag;
				}
			} else if (!((params.stringType === 0))) {
				universalTag = params.stringType;
			}
		}
		if ((universalTag === 23) && (t$1.tag === 24) && (t$1.class$0 === 0)) {
			universalTag = 24;
		}
		if (params.set) {
			universalTag = 17;
		}
		matchAnyClassAndTag = matchAny;
		expectedClass$1 = 0;
		expectedTag = universalTag;
		if (!params.explicit && !(params.tag === ptrType$3.nil)) {
			expectedClass$1 = 2;
			expectedTag = params.tag.$get();
			matchAnyClassAndTag = false;
		}
		if (!params.explicit && params.application && !(params.tag === ptrType$3.nil)) {
			expectedClass$1 = 1;
			expectedTag = params.tag.$get();
			matchAnyClassAndTag = false;
		}
		if (!params.explicit && params.private$3 && !(params.tag === ptrType$3.nil)) {
			expectedClass$1 = 3;
			expectedTag = params.tag.$get();
			matchAnyClassAndTag = false;
		}
		/* */ if (!matchAnyClassAndTag && (!((t$1.class$0 === expectedClass$1)) || !((t$1.tag === expectedTag))) || (!matchAny && !(t$1.isCompound === compoundType))) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (!matchAnyClassAndTag && (!((t$1.class$0 === expectedClass$1)) || !((t$1.tag === expectedTag))) || (!matchAny && !(t$1.isCompound === compoundType))) { */ case 32:
			ok$1 = setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters));
			/* */ if (ok$1) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (ok$1) { */ case 34:
				offset = initOffset;
				$s = 36; continue;
			/* } else { */ case 35:
				_arg = new $Int(expectedTag);
				_arg$1 = new t$1.constructor.elem(t$1);
				_arg$2 = new params.constructor.elem(params);
				_r$7 = fieldType.Name(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$3 = new $String(_r$7);
				_arg$4 = new $Int(offset);
				_r$8 = fmt.Sprintf("tags don't match (%d vs %+v) %+v %s @%d", new sliceType$4([_arg, _arg$1, _arg$2, _arg$3, _arg$4])); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = (x$9 = new StructuralError.ptr(_r$8), new x$9.constructor.elem(x$9));
			/* } */ case 36:
			$s = -1; return [offset, err];
		/* } */ case 33:
		if (invalidLength(offset, t$1.length, bytes$1.$length)) {
			err = (x$10 = new SyntaxError.ptr("data truncated"), new x$10.constructor.elem(x$10));
			$s = -1; return [offset, err];
		}
		innerBytes$1 = $subslice(bytes$1, offset, (offset + t$1.length >> 0));
		offset = offset + (t$1.length) >> 0;
		_r$9 = $clone($clone(v, reflect.Value).Addr(), reflect.Value).Interface(); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_ref = _r$9;
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 40; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 41; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 42; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 43; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 44; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 45; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 46; continue; }
		/* */ $s = 47; continue;
		/* if ($assertType(_ref, ptrType$5, true)[1]) { */ case 40:
			v$1 = _ref.$val;
			RawValue.copy(v$1, new RawValue.ptr(t$1.class$0, t$1.tag, t$1.isCompound, innerBytes$1, $subslice(bytes$1, initOffset, offset)));
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 41:
			v$2 = _ref.$val;
			_tuple$15 = parseObjectIdentifier(innerBytes$1);
			v$2.$set(_tuple$15[0]);
			err = _tuple$15[1];
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 42:
			v$3 = _ref.$val;
			_tuple$16 = parseBitString(innerBytes$1);
			BitString.copy(v$3, _tuple$16[0]);
			err = _tuple$16[1];
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 43:
			v$4 = _ref.$val;
			/* */ if (universalTag === 23) { $s = 48; continue; }
			/* */ $s = 49; continue;
			/* if (universalTag === 23) { */ case 48:
				_r$10 = parseUTCTime(innerBytes$1); /* */ $s = 50; case 50: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$17 = _r$10;
				time.Time.copy(v$4, _tuple$17[0]);
				err = _tuple$17[1];
				$s = -1; return [offset, err];
			/* } */ case 49:
			_r$11 = parseGeneralizedTime(innerBytes$1); /* */ $s = 51; case 51: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$18 = _r$11;
			time.Time.copy(v$4, _tuple$18[0]);
			err = _tuple$18[1];
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 44:
			v$5 = _ref.$val;
			_tuple$19 = parseInt32(innerBytes$1);
			parsedInt = _tuple$19[0];
			err1 = _tuple$19[1];
			if ($interfaceIsEqual(err1, $ifaceNil)) {
				v$5.$set(((parsedInt >> 0)));
			}
			err = err1;
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 45:
			v$6 = _ref.$val;
			v$6.$set(true);
			$s = -1; return [offset, err];
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 46:
			v$7 = _ref.$val;
			_r$12 = parseBigInt(innerBytes$1); /* */ $s = 52; case 52: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_tuple$20 = _r$12;
			parsedInt$1 = _tuple$20[0];
			err1$1 = _tuple$20[1];
			if ($interfaceIsEqual(err1$1, $ifaceNil)) {
				v$7.$set(parsedInt$1);
			}
			err = err1$1;
			$s = -1; return [offset, err];
		/* } */ case 47:
			val = v;
			_3 = $clone(val, reflect.Value).Kind();
			/* */ if (_3 === (1)) { $s = 54; continue; }
			/* */ if ((_3 === (2)) || (_3 === (5)) || (_3 === (6))) { $s = 55; continue; }
			/* */ if (_3 === (25)) { $s = 56; continue; }
			/* */ if (_3 === (23)) { $s = 57; continue; }
			/* */ if (_3 === (24)) { $s = 58; continue; }
			/* */ $s = 59; continue;
			/* if (_3 === (1)) { */ case 54:
				_tuple$21 = parseBool(innerBytes$1);
				parsedBool = _tuple$21[0];
				err1$2 = _tuple$21[1];
				if ($interfaceIsEqual(err1$2, $ifaceNil)) {
					$clone(val, reflect.Value).SetBool(parsedBool);
				}
				err = err1$2;
				$s = -1; return [offset, err];
			/* } else if ((_3 === (2)) || (_3 === (5)) || (_3 === (6))) { */ case 55:
				_r$13 = $clone(val, reflect.Value).Type().Size(); /* */ $s = 63; case 63: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (_r$13 === 4) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (_r$13 === 4) { */ case 60:
					_tuple$22 = parseInt32(innerBytes$1);
					parsedInt$2 = _tuple$22[0];
					err1$3 = _tuple$22[1];
					if ($interfaceIsEqual(err1$3, $ifaceNil)) {
						$clone(val, reflect.Value).SetInt((new $Int64(0, parsedInt$2)));
					}
					err = err1$3;
					$s = 62; continue;
				/* } else { */ case 61:
					_tuple$23 = parseInt64(innerBytes$1);
					parsedInt$3 = _tuple$23[0];
					err1$4 = _tuple$23[1];
					if ($interfaceIsEqual(err1$4, $ifaceNil)) {
						$clone(val, reflect.Value).SetInt(parsedInt$3);
					}
					err = err1$4;
				/* } */ case 62:
				$s = -1; return [offset, err];
			/* } else if (_3 === (25)) { */ case 56:
				structType = fieldType;
				i = 0;
				/* while (true) { */ case 64:
					_r$14 = structType.NumField(); /* */ $s = 66; case 66: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* if (!(i < _r$14)) { break; } */ if(!(i < _r$14)) { $s = 65; continue; }
					_r$15 = structType.Field(i); /* */ $s = 69; case 69: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$16 = $clone(_r$15, reflect.StructField).IsExported(); /* */ $s = 70; case 70: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					/* */ if (!_r$16) { $s = 67; continue; }
					/* */ $s = 68; continue;
					/* if (!_r$16) { */ case 67:
						err = (x$11 = new StructuralError.ptr("struct contains unexported fields"), new x$11.constructor.elem(x$11));
						$s = -1; return [offset, err];
					/* } */ case 68:
					i = i + (1) >> 0;
				$s = 64; continue;
				case 65:
				_r$17 = structType.NumField(); /* */ $s = 74; case 74: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				if (!(_r$17 > 0)) { _v$1 = false; $s = 73; continue s; }
				_r$18 = structType.Field(0); /* */ $s = 75; case 75: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_v$1 = $interfaceIsEqual(_r$18.Type, rawContentsType); case 73:
				/* */ if (_v$1) { $s = 71; continue; }
				/* */ $s = 72; continue;
				/* if (_v$1) { */ case 71:
					bytes$2 = $subslice(bytes$1, initOffset, offset);
					_r$19 = $clone(val, reflect.Value).Field(0); /* */ $s = 76; case 76: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_r$20 = reflect.ValueOf(($convertSliceType(bytes$2, RawContent))); /* */ $s = 77; case 77: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					$r = $clone(_r$19, reflect.Value).Set($clone(_r$20, reflect.Value)); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 72:
				innerOffset = 0;
				i$1 = 0;
				/* while (true) { */ case 79:
					_r$21 = structType.NumField(); /* */ $s = 81; case 81: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					/* if (!(i$1 < _r$21)) { break; } */ if(!(i$1 < _r$21)) { $s = 80; continue; }
					_r$22 = structType.Field(i$1); /* */ $s = 82; case 82: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					field = $clone(_r$22, reflect.StructField);
					if ((i$1 === 0) && $interfaceIsEqual(field.Type, rawContentsType)) {
						i$1 = i$1 + (1) >> 0;
						/* continue; */ $s = 79; continue;
					}
					_r$23 = $clone(val, reflect.Value).Field(i$1); /* */ $s = 83; case 83: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$24 = parseField($clone(_r$23, reflect.Value), innerBytes$1, innerOffset, $clone(parseFieldParameters(new reflect.StructTag(field.Tag).Get("asn1")), fieldParameters)); /* */ $s = 84; case 84: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_tuple$24 = _r$24;
					innerOffset = _tuple$24[0];
					err = _tuple$24[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [offset, err];
					}
					i$1 = i$1 + (1) >> 0;
				$s = 79; continue;
				case 80:
				$s = -1; return [offset, err];
			/* } else if (_3 === (23)) { */ case 57:
				sliceType$6 = fieldType;
				_r$25 = sliceType$6.Elem(); /* */ $s = 87; case 87: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_r$26 = _r$25.Kind(); /* */ $s = 88; case 88: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				/* */ if (_r$26 === 8) { $s = 85; continue; }
				/* */ $s = 86; continue;
				/* if (_r$26 === 8) { */ case 85:
					_r$27 = reflect.MakeSlice(sliceType$6, innerBytes$1.$length, innerBytes$1.$length); /* */ $s = 89; case 89: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					$r = $clone(val, reflect.Value).Set($clone(_r$27, reflect.Value)); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_arg$5 = $clone(val, reflect.Value);
					_r$28 = reflect.ValueOf(innerBytes$1); /* */ $s = 91; case 91: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_arg$6 = $clone(_r$28, reflect.Value);
					_r$29 = reflect.Copy(_arg$5, _arg$6); /* */ $s = 92; case 92: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
					$s = -1; return [offset, err];
				/* } */ case 86:
				_arg$7 = innerBytes$1;
				_arg$8 = sliceType$6;
				_r$30 = sliceType$6.Elem(); /* */ $s = 93; case 93: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_arg$9 = _r$30;
				_r$31 = parseSequenceOf(_arg$7, _arg$8, _arg$9); /* */ $s = 94; case 94: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_tuple$25 = _r$31;
				newSlice = _tuple$25[0];
				err1$5 = _tuple$25[1];
				/* */ if ($interfaceIsEqual(err1$5, $ifaceNil)) { $s = 95; continue; }
				/* */ $s = 96; continue;
				/* if ($interfaceIsEqual(err1$5, $ifaceNil)) { */ case 95:
					$r = $clone(val, reflect.Value).Set($clone(newSlice, reflect.Value)); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 96:
				err = err1$5;
				$s = -1; return [offset, err];
			/* } else if (_3 === (24)) { */ case 58:
				v$8 = "";
					_4 = universalTag;
					/* */ if (_4 === (19)) { $s = 99; continue; }
					/* */ if (_4 === (18)) { $s = 100; continue; }
					/* */ if (_4 === (22)) { $s = 101; continue; }
					/* */ if (_4 === (20)) { $s = 102; continue; }
					/* */ if (_4 === (12)) { $s = 103; continue; }
					/* */ if (_4 === (27)) { $s = 104; continue; }
					/* */ if (_4 === (30)) { $s = 105; continue; }
					/* */ $s = 106; continue;
					/* if (_4 === (19)) { */ case 99:
						_tuple$26 = parsePrintableString(innerBytes$1);
						v$8 = _tuple$26[0];
						err = _tuple$26[1];
						$s = 107; continue;
					/* } else if (_4 === (18)) { */ case 100:
						_tuple$27 = parseNumericString(innerBytes$1);
						v$8 = _tuple$27[0];
						err = _tuple$27[1];
						$s = 107; continue;
					/* } else if (_4 === (22)) { */ case 101:
						_tuple$28 = parseIA5String(innerBytes$1);
						v$8 = _tuple$28[0];
						err = _tuple$28[1];
						$s = 107; continue;
					/* } else if (_4 === (20)) { */ case 102:
						_tuple$29 = parseT61String(innerBytes$1);
						v$8 = _tuple$29[0];
						err = _tuple$29[1];
						$s = 107; continue;
					/* } else if (_4 === (12)) { */ case 103:
						_tuple$30 = parseUTF8String(innerBytes$1);
						v$8 = _tuple$30[0];
						err = _tuple$30[1];
						$s = 107; continue;
					/* } else if (_4 === (27)) { */ case 104:
						_tuple$31 = parseT61String(innerBytes$1);
						v$8 = _tuple$31[0];
						err = _tuple$31[1];
						$s = 107; continue;
					/* } else if (_4 === (30)) { */ case 105:
						_tuple$32 = parseBMPString(innerBytes$1);
						v$8 = _tuple$32[0];
						err = _tuple$32[1];
						$s = 107; continue;
					/* } else { */ case 106:
						_r$32 = fmt.Sprintf("internal error: unknown string type %d", new sliceType$4([new $Int(universalTag)])); /* */ $s = 108; case 108: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						err = (x$12 = new SyntaxError.ptr(_r$32), new x$12.constructor.elem(x$12));
					/* } */ case 107:
				case 98:
				if ($interfaceIsEqual(err, $ifaceNil)) {
					$clone(val, reflect.Value).SetString(v$8);
				}
				$s = -1; return [offset, err];
			/* } */ case 59:
		case 53:
		_r$33 = $clone(v, reflect.Value).Type().String(); /* */ $s = 109; case 109: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		err = (x$13 = new StructuralError.ptr("unsupported: " + _r$33), new x$13.constructor.elem(x$13));
		$s = -1; return [offset, err];
		/* */ } return; } var $f = {$blk: parseField, $c: true, $r, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$28, _tuple$29, _tuple$3, _tuple$30, _tuple$31, _tuple$32, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, bytes$1, bytes$2, compoundType, err, err1, err1$1, err1$2, err1$3, err1$4, err1$5, expectedClass, expectedClass$1, expectedTag, field, fieldType, i, i$1, ifaceType, initOffset, innerBytes, innerBytes$1, innerOffset, matchAny, matchAnyClassAndTag, newSlice, offset, ok, ok$1, ok1, params, parsedBool, parsedInt, parsedInt$1, parsedInt$2, parsedInt$3, result, sliceType$6, structType, t, t$1, universalTag, v, v$1, v$2, v$3, v$4, v$5, v$6, v$7, v$8, val, x$10, x$11, x$12, x$13, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	canHaveDefaultValue = function(k) {
		var _1, k;
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return true;
		}
		return false;
	};
	setDefaultValue = function(v, params) {
		var ok, params, v;
		ok = false;
		if (!params.optional) {
			return ok;
		}
		ok = true;
		if (params.defaultValue === ptrType$2.nil) {
			return ok;
		}
		if (canHaveDefaultValue($clone(v, reflect.Value).Kind())) {
			$clone(v, reflect.Value).SetInt(params.defaultValue.$get());
		}
		return ok;
	};
	Unmarshal = function(b, val) {
		var {$24r, _r, _tuple, b, err, rest, val, $s, $r, $c} = $restore(this, {b, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rest = sliceType.nil;
		err = $ifaceNil;
		_r = UnmarshalWithParams(b, val, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		rest = _tuple[0];
		err = _tuple[1];
		$24r = [rest, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Unmarshal, $c: true, $r, $24r, _r, _tuple, b, err, rest, val, $s};return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	invalidUnmarshalError.ptr.prototype.Error = function() {
		var {$24r, $24r$1, _r, _r$1, _r$2, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			$s = -1; return "asn1: Unmarshal recipient value is nil";
		}
		_r = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 22))) { */ case 1:
			_r$1 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = "asn1: Unmarshal recipient value is non-pointer " + _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 2:
		_r$2 = e.Type.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r$1 = "asn1: Unmarshal recipient value is nil " + _r$2;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: invalidUnmarshalError.ptr.prototype.Error, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, e, $s};return $f;
	};
	invalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	UnmarshalWithParams = function(b, val, params) {
		var {_r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, err, offset, params, rest, v, val, $s, $r, $c} = $restore(this, {b, val, params});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rest = sliceType.nil;
		err = $ifaceNil;
		_r = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		if (!(($clone(v, reflect.Value).Kind() === 22)) || $clone(v, reflect.Value).IsNil()) {
			_tmp = sliceType.nil;
			_tmp$1 = new invalidUnmarshalError.ptr(reflect.TypeOf(val));
			rest = _tmp;
			err = _tmp$1;
			$s = -1; return [rest, err];
		}
		_r$1 = $clone(v, reflect.Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = parseField($clone(_r$1, reflect.Value), b, 0, $clone(parseFieldParameters(params), fieldParameters)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		offset = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = err;
			rest = _tmp$2;
			err = _tmp$3;
			$s = -1; return [rest, err];
		}
		_tmp$4 = $subslice(b, offset);
		_tmp$5 = $ifaceNil;
		rest = _tmp$4;
		err = _tmp$5;
		$s = -1; return [rest, err];
		/* */ } return; } var $f = {$blk: UnmarshalWithParams, $c: true, $r, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, err, offset, params, rest, v, val, $s};return $f;
	};
	$pkg.UnmarshalWithParams = UnmarshalWithParams;
	byteEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	bytesEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	stringEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	multiEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	setEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	ptrType$12.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	int64Encoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	bitStringEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	oidEncoder.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}];
	StructuralError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	SyntaxError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	BitString.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "RightAlign", name: "RightAlign", pkg: "", typ: $funcType([], [sliceType], false)}];
	ObjectIdentifier.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ObjectIdentifier], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	encoder.init([{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}]);
	bytesEncoder.init($Uint8);
	multiEncoder.init(encoder);
	setEncoder.init(encoder);
	taggedEncoder.init("encoding/asn1", [{prop: "scratch", name: "scratch", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: encoder, tag: ""}, {prop: "body", name: "body", embedded: false, exported: false, typ: encoder, tag: ""}]);
	bitStringEncoder.init("", [{prop: "Bytes", name: "Bytes", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "BitLength", name: "BitLength", embedded: false, exported: true, typ: $Int, tag: ""}]);
	oidEncoder.init($Int);
	tagAndLength.init("encoding/asn1", [{prop: "class$0", name: "class", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "length", name: "length", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "isCompound", name: "isCompound", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fieldParameters.init("encoding/asn1", [{prop: "optional", name: "optional", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "explicit", name: "explicit", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "application", name: "application", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "private$3", name: "private", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "defaultValue", name: "defaultValue", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "stringType", name: "stringType", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "timeType", name: "timeType", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "set", name: "set", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	StructuralError.init("", [{prop: "Msg", name: "Msg", embedded: false, exported: true, typ: $String, tag: ""}]);
	SyntaxError.init("", [{prop: "Msg", name: "Msg", embedded: false, exported: true, typ: $String, tag: ""}]);
	BitString.init("", [{prop: "Bytes", name: "Bytes", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "BitLength", name: "BitLength", embedded: false, exported: true, typ: $Int, tag: ""}]);
	ObjectIdentifier.init($Int);
	RawValue.init("", [{prop: "Class", name: "Class", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Tag", name: "Tag", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "IsCompound", name: "IsCompound", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "Bytes", name: "Bytes", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "FullBytes", name: "FullBytes", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	RawContent.init($Uint8);
	invalidUnmarshalError.init("", [{prop: "Type", name: "Type", embedded: false, exported: true, typ: reflect.Type, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		byte00Encoder = new byteEncoder(0);
		byteFFEncoder = new byteEncoder(255);
		bigOne = big.NewInt(new $Int64(0, 1));
		$pkg.NullRawValue = new RawValue.ptr(0, 5, false, sliceType.nil, sliceType.nil);
		$pkg.NullBytes = new sliceType([5, 0]);
		bitStringType = reflect.TypeOf((x = new BitString.ptr(sliceType.nil, 0), new x.constructor.elem(x)));
		objectIdentifierType = reflect.TypeOf(new ObjectIdentifier([]));
		enumeratedType = reflect.TypeOf(new Enumerated(0));
		flagType = reflect.TypeOf(new Flag(false));
		timeType = reflect.TypeOf((x$1 = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), new x$1.constructor.elem(x$1)));
		rawValueType = reflect.TypeOf((x$2 = new RawValue.ptr(0, 0, false, sliceType.nil, sliceType.nil), new x$2.constructor.elem(x$2)));
		rawContentsType = reflect.TypeOf((RawContent.nil));
		bigIntType = reflect.TypeOf(new big.Int.ptr(false, big.nat.nil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["vendor/golang.org/x/crypto/cryptobyte/asn1"] = (function() {
	var $pkg = {}, $init, Tag;
	Tag = $pkg.Tag = $newType(1, $kindUint8, "asn1.Tag", true, "vendor/golang.org/x/crypto/cryptobyte/asn1", true, null);
	Tag.prototype.Constructed = function() {
		var t;
		t = this.$val;
		return (t | 32) >>> 0;
	};
	$ptrType(Tag).prototype.Constructed = function() { return new Tag(this.$get()).Constructed(); };
	Tag.prototype.ContextSpecific = function() {
		var t;
		t = this.$val;
		return (t | 128) >>> 0;
	};
	$ptrType(Tag).prototype.ContextSpecific = function() { return new Tag(this.$get()).ContextSpecific(); };
	Tag.methods = [{prop: "Constructed", name: "Constructed", pkg: "", typ: $funcType([], [Tag], false)}, {prop: "ContextSpecific", name: "ContextSpecific", pkg: "", typ: $funcType([], [Tag], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["vendor/golang.org/x/crypto/cryptobyte"] = (function() {
	var $pkg = {}, $init, asn1, errors, fmt, big, reflect, time, asn1$1, String, Builder, BuilderContinuation, BuildError, MarshalingValue, ptrType, sliceType, ptrType$1, ptrType$2, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, sliceType$2, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, bigIntType, bigOne, _r, isValidOID, checkASN1Integer, asn1Signed, asn1Unsigned;
	asn1 = $packages["encoding/asn1"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	big = $packages["math/big"];
	reflect = $packages["reflect"];
	time = $packages["time"];
	asn1$1 = $packages["vendor/golang.org/x/crypto/cryptobyte/asn1"];
	String = $pkg.String = $newType(12, $kindSlice, "cryptobyte.String", true, "vendor/golang.org/x/crypto/cryptobyte", true, null);
	Builder = $pkg.Builder = $newType(0, $kindStruct, "cryptobyte.Builder", true, "vendor/golang.org/x/crypto/cryptobyte", true, function(err_, result_, fixedSize_, child_, offset_, pendingLenLen_, pendingIsASN1_, inContinuation_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.result = sliceType.nil;
			this.fixedSize = false;
			this.child = ptrType$1.nil;
			this.offset = 0;
			this.pendingLenLen = 0;
			this.pendingIsASN1 = false;
			this.inContinuation = ptrType$2.nil;
			return;
		}
		this.err = err_;
		this.result = result_;
		this.fixedSize = fixedSize_;
		this.child = child_;
		this.offset = offset_;
		this.pendingLenLen = pendingLenLen_;
		this.pendingIsASN1 = pendingIsASN1_;
		this.inContinuation = inContinuation_;
	});
	BuilderContinuation = $pkg.BuilderContinuation = $newType(4, $kindFunc, "cryptobyte.BuilderContinuation", true, "vendor/golang.org/x/crypto/cryptobyte", true, null);
	BuildError = $pkg.BuildError = $newType(0, $kindStruct, "cryptobyte.BuildError", true, "vendor/golang.org/x/crypto/cryptobyte", true, function(Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			return;
		}
		this.Err = Err_;
	});
	MarshalingValue = $pkg.MarshalingValue = $newType(8, $kindInterface, "cryptobyte.MarshalingValue", true, "vendor/golang.org/x/crypto/cryptobyte", true, null);
	ptrType = $ptrType(big.Int);
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(Builder);
	ptrType$2 = $ptrType($Bool);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType($Uint8);
	ptrType$4 = $ptrType(String);
	ptrType$5 = $ptrType($Int64);
	ptrType$6 = $ptrType($Uint64);
	sliceType$2 = $sliceType($Int);
	ptrType$7 = $ptrType($Int);
	ptrType$8 = $ptrType(asn1$1.Tag);
	ptrType$9 = $ptrType($Uint32);
	ptrType$10 = $ptrType(sliceType);
	ptrType$11 = $ptrType($Uint16);
	ptrType$12 = $ptrType(asn1.ObjectIdentifier);
	ptrType$13 = $ptrType(time.Time);
	ptrType$14 = $ptrType(asn1.BitString);
	$ptrType(String).prototype.read = function(n) {
		var n, s, v;
		s = this;
		if (s.$get().$length < n || n < 0) {
			return sliceType.nil;
		}
		v = $subslice((s.$get()), 0, n);
		s.$set($subslice((s.$get()), n));
		return $convertSliceType(v, sliceType);
	};
	$ptrType(String).prototype.Skip = function(n) {
		var n, s;
		s = this;
		return !(s.read(n) === sliceType.nil);
	};
	$ptrType(String).prototype.ReadUint8 = function(out) {
		var out, s, v;
		s = this;
		v = s.read(1);
		if (v === sliceType.nil) {
			return false;
		}
		out.$set(((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0])));
		return true;
	};
	$ptrType(String).prototype.ReadUint16 = function(out) {
		var out, s, v;
		s = this;
		v = s.read(2);
		if (v === sliceType.nil) {
			return false;
		}
		out.$set((((((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16) | (((1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1]) << 16 >>> 16))) >>> 0);
		return true;
	};
	$ptrType(String).prototype.ReadUint24 = function(out) {
		var out, s, v;
		s = this;
		v = s.read(3);
		if (v === sliceType.nil) {
			return false;
		}
		out.$set((((((((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]) >>> 0)) << 16 >>> 0) | ((((1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | (((2 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 2]) >>> 0))) >>> 0);
		return true;
	};
	$ptrType(String).prototype.ReadUint32 = function(out) {
		var out, s, v;
		s = this;
		v = s.read(4);
		if (v === sliceType.nil) {
			return false;
		}
		out.$set((((((((((0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]) >>> 0)) << 24 >>> 0) | ((((1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((2 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | (((3 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 3]) >>> 0))) >>> 0);
		return true;
	};
	$ptrType(String).prototype.readUnsigned = function(out, length) {
		var i, length, out, result, s, v, y;
		s = this;
		v = s.read(length);
		if (v === sliceType.nil) {
			return false;
		}
		result = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			result = (y = (8), y < 32 ? (result << y) : 0) >>> 0;
			result = (result | (((((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]) >>> 0)))) >>> 0;
			i = i + (1) >> 0;
		}
		out.$set(result);
		return true;
	};
	$ptrType(String).prototype.readLengthPrefixed = function(lenLen, outChild) {
		var _i, _ref, b, lenBytes, lenLen, length, outChild, s, v;
		s = this;
		lenBytes = s.read(lenLen);
		if (lenBytes === sliceType.nil) {
			return false;
		}
		length = 0;
		_ref = lenBytes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			length = length << 8 >>> 0;
			length = (length | ((b >>> 0))) >>> 0;
			_i++;
		}
		v = s.read(((length >> 0)));
		if (v === sliceType.nil) {
			return false;
		}
		outChild.$set($convertSliceType(v, String));
		return true;
	};
	$ptrType(String).prototype.ReadUint8LengthPrefixed = function(out) {
		var out, s;
		s = this;
		return s.readLengthPrefixed(1, out);
	};
	$ptrType(String).prototype.ReadUint16LengthPrefixed = function(out) {
		var out, s;
		s = this;
		return s.readLengthPrefixed(2, out);
	};
	$ptrType(String).prototype.ReadUint24LengthPrefixed = function(out) {
		var out, s;
		s = this;
		return s.readLengthPrefixed(3, out);
	};
	$ptrType(String).prototype.ReadBytes = function(out, n) {
		var n, out, s, v;
		s = this;
		v = s.read(n);
		if (v === sliceType.nil) {
			return false;
		}
		out.$set(v);
		return true;
	};
	$ptrType(String).prototype.CopyBytes = function(out) {
		var n, out, s, v;
		s = this;
		n = out.$length;
		v = s.read(n);
		if (v === sliceType.nil) {
			return false;
		}
		return $copySlice(out, v) === n;
	};
	String.prototype.Empty = function() {
		var s;
		s = this;
		return s.$length === 0;
	};
	$ptrType(String).prototype.Empty = function() { return this.$get().Empty(); };
	Builder.ptr.prototype.SetError = function(err) {
		var b, err;
		b = this;
		b.err = err;
	};
	Builder.prototype.SetError = function(err) { return this.$val.SetError(err); };
	Builder.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return [sliceType.nil, b.err];
		}
		return [$subslice(b.result, b.offset), $ifaceNil];
	};
	Builder.prototype.Bytes = function() { return this.$val.Bytes(); };
	Builder.ptr.prototype.BytesOrPanic = function() {
		var b;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$panic(b.err);
		}
		return $subslice(b.result, b.offset);
	};
	Builder.prototype.BytesOrPanic = function() { return this.$val.BytesOrPanic(); };
	Builder.ptr.prototype.AddUint8 = function(v) {
		var b, v;
		b = this;
		b.add(new sliceType([(v)]));
	};
	Builder.prototype.AddUint8 = function(v) { return this.$val.AddUint8(v); };
	Builder.ptr.prototype.AddUint16 = function(v) {
		var b, v;
		b = this;
		b.add(new sliceType([(((v >>> 8 << 16 >>> 16) << 24 >>> 24)), ((v << 24 >>> 24))]));
	};
	Builder.prototype.AddUint16 = function(v) { return this.$val.AddUint16(v); };
	Builder.ptr.prototype.AddUint24 = function(v) {
		var b, v;
		b = this;
		b.add(new sliceType([(((v >>> 16 >>> 0) << 24 >>> 24)), (((v >>> 8 >>> 0) << 24 >>> 24)), ((v << 24 >>> 24))]));
	};
	Builder.prototype.AddUint24 = function(v) { return this.$val.AddUint24(v); };
	Builder.ptr.prototype.AddUint32 = function(v) {
		var b, v;
		b = this;
		b.add(new sliceType([(((v >>> 24 >>> 0) << 24 >>> 24)), (((v >>> 16 >>> 0) << 24 >>> 24)), (((v >>> 8 >>> 0) << 24 >>> 24)), ((v << 24 >>> 24))]));
	};
	Builder.prototype.AddUint32 = function(v) { return this.$val.AddUint32(v); };
	Builder.ptr.prototype.AddBytes = function(v) {
		var b, v;
		b = this;
		b.add(v);
	};
	Builder.prototype.AddBytes = function(v) { return this.$val.AddBytes(v); };
	Builder.ptr.prototype.AddUint8LengthPrefixed = function(f) {
		var {b, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addLengthPrefixed(1, false, f); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddUint8LengthPrefixed, $c: true, $r, b, f, $s};return $f;
	};
	Builder.prototype.AddUint8LengthPrefixed = function(f) { return this.$val.AddUint8LengthPrefixed(f); };
	Builder.ptr.prototype.AddUint16LengthPrefixed = function(f) {
		var {b, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addLengthPrefixed(2, false, f); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddUint16LengthPrefixed, $c: true, $r, b, f, $s};return $f;
	};
	Builder.prototype.AddUint16LengthPrefixed = function(f) { return this.$val.AddUint16LengthPrefixed(f); };
	Builder.ptr.prototype.AddUint24LengthPrefixed = function(f) {
		var {b, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addLengthPrefixed(3, false, f); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddUint24LengthPrefixed, $c: true, $r, b, f, $s};return $f;
	};
	Builder.prototype.AddUint24LengthPrefixed = function(f) { return this.$val.AddUint24LengthPrefixed(f); };
	Builder.ptr.prototype.AddUint32LengthPrefixed = function(f) {
		var {b, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addLengthPrefixed(4, false, f); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddUint32LengthPrefixed, $c: true, $r, b, f, $s};return $f;
	};
	Builder.prototype.AddUint32LengthPrefixed = function(f) { return this.$val.AddUint32LengthPrefixed(f); };
	Builder.ptr.prototype.callContinuation = function(f, arg) {
		var {arg, b, f, $s, $deferred, $r, $c} = $restore(this, {f, arg});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		b = [b];
		b[0] = this;
		/* */ if (!b[0].inContinuation.$get()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!b[0].inContinuation.$get()) { */ case 1:
			b[0].inContinuation.$set(true);
			$deferred.push([(function(b) { return function() {
				var _tuple, buildError, ok, r;
				b[0].inContinuation.$set(false);
				r = $recover();
				if ($interfaceIsEqual(r, $ifaceNil)) {
					return;
				}
				_tuple = $assertType(r, BuildError, true);
				buildError = $clone(_tuple[0], BuildError);
				ok = _tuple[1];
				if (ok) {
					b[0].err = buildError.Err;
				} else {
					$panic(r);
				}
			}; })(b), []]);
		/* } */ case 2:
		$r = f(arg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Builder.ptr.prototype.callContinuation, $c: true, $r, arg, b, f, $s, $deferred};return $f; } }
	};
	Builder.prototype.callContinuation = function(f, arg) { return this.$val.callContinuation(f, arg); };
	Builder.ptr.prototype.addLengthPrefixed = function(lenLen, isASN1, f) {
		var {b, f, isASN1, lenLen, offset, $s, $r, $c} = $restore(this, {lenLen, isASN1, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return;
		}
		offset = b.result.$length;
		b.add($makeSlice(sliceType, lenLen));
		if (b.inContinuation === ptrType$2.nil) {
			b.inContinuation = $newDataPointer(false, ptrType$2);
		}
		b.child = new Builder.ptr($ifaceNil, b.result, b.fixedSize, ptrType$1.nil, offset, lenLen, isASN1, b.inContinuation);
		$r = b.callContinuation(f, b.child); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = b.flushChild(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!(b.child === ptrType$1.nil)) {
			$panic(new $String("cryptobyte: internal error"));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.addLengthPrefixed, $c: true, $r, b, f, isASN1, lenLen, offset, $s};return $f;
	};
	Builder.prototype.addLengthPrefixed = function(lenLen, isASN1, f) { return this.$val.addLengthPrefixed(lenLen, isASN1, f); };
	Builder.ptr.prototype.flushChild = function() {
		var {_r$1, _tmp, _tmp$1, b, child, childStart, extraBytes, i, l, lenByte, lenLen, length, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.child === ptrType$1.nil) {
			$s = -1; return;
		}
		$r = b.child.flushChild(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		child = b.child;
		b.child = ptrType$1.nil;
		if (!($interfaceIsEqual(child.err, $ifaceNil))) {
			b.err = child.err;
			$s = -1; return;
		}
		length = (child.result.$length - child.pendingLenLen >> 0) - child.offset >> 0;
		if (length < 0) {
			$panic(new $String("cryptobyte: internal error"));
		}
		if (child.pendingIsASN1) {
			if (!((child.pendingLenLen === 1))) {
				$panic(new $String("cryptobyte: internal error"));
			}
			_tmp = 0;
			_tmp$1 = 0;
			lenLen = _tmp;
			lenByte = _tmp$1;
			if ((x = (new $Int64(0, length)), (x.$high > 0 || (x.$high === 0 && x.$low > 4294967294)))) {
				b.err = errors.New("pending ASN.1 child too long");
				$s = -1; return;
			} else if (length > 16777215) {
				lenLen = 5;
				lenByte = 132;
			} else if (length > 65535) {
				lenLen = 4;
				lenByte = 131;
			} else if (length > 255) {
				lenLen = 3;
				lenByte = 130;
			} else if (length > 127) {
				lenLen = 2;
				lenByte = 129;
			} else {
				lenLen = 1;
				lenByte = ((length << 24 >>> 24));
				length = 0;
			}
			(x$1 = child.result, x$2 = child.offset, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = lenByte));
			extraBytes = (((lenLen - 1 << 24 >>> 24) >> 0));
			if (!((extraBytes === 0))) {
				child.add($makeSlice(sliceType, extraBytes));
				childStart = child.offset + child.pendingLenLen >> 0;
				$copySlice($subslice(child.result, (childStart + extraBytes >> 0)), $subslice(child.result, childStart));
			}
			child.offset = child.offset + (1) >> 0;
			child.pendingLenLen = extraBytes;
		}
		l = length;
		i = child.pendingLenLen - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			(x$3 = child.result, x$4 = child.offset + i >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = ((l << 24 >>> 24))));
			l = (l >> $min((8), 31)) >> 0;
			i = i - (1) >> 0;
		}
		/* */ if (!((l === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((l === 0))) { */ case 2:
			_r$1 = fmt.Errorf("cryptobyte: pending child length %d exceeds %d-byte length prefix", new sliceType$1([new $Int(length), new $Int(child.pendingLenLen)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b.err = _r$1;
			$s = -1; return;
		/* } */ case 3:
		if (b.fixedSize && !((x$5 = b.result, $indexPtr(x$5.$array, x$5.$offset + 0, ptrType$3)) === (x$6 = child.result, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$3)))) {
			$panic(new $String("cryptobyte: BuilderContinuation reallocated a fixed-size buffer"));
		}
		b.result = child.result;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.flushChild, $c: true, $r, _r$1, _tmp, _tmp$1, b, child, childStart, extraBytes, i, l, lenByte, lenLen, length, x, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	Builder.prototype.flushChild = function() { return this.$val.flushChild(); };
	Builder.ptr.prototype.add = function(bytes) {
		var b, bytes;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return;
		}
		if (!(b.child === ptrType$1.nil)) {
			$panic(new $String("cryptobyte: attempted write while child is pending"));
		}
		if ((b.result.$length + bytes.$length >> 0) < bytes.$length) {
			b.err = errors.New("cryptobyte: length overflow");
		}
		if (b.fixedSize && (b.result.$length + bytes.$length >> 0) > b.result.$capacity) {
			b.err = errors.New("cryptobyte: Builder is exceeding its fixed-size buffer");
			return;
		}
		b.result = $appendSlice(b.result, bytes);
	};
	Builder.prototype.add = function(bytes) { return this.$val.add(bytes); };
	Builder.ptr.prototype.Unwrite = function(n) {
		var b, length, n;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return;
		}
		if (!(b.child === ptrType$1.nil)) {
			$panic(new $String("cryptobyte: attempted unwrite while child is pending"));
		}
		length = (b.result.$length - b.pendingLenLen >> 0) - b.offset >> 0;
		if (length < 0) {
			$panic(new $String("cryptobyte: internal error"));
		}
		if (n > length) {
			$panic(new $String("cryptobyte: attempted to unwrite more than was written"));
		}
		b.result = $subslice(b.result, 0, (b.result.$length - n >> 0));
	};
	Builder.prototype.Unwrite = function(n) { return this.$val.Unwrite(n); };
	Builder.ptr.prototype.AddValue = function(v) {
		var {_r$1, b, err, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		_r$1 = v.Marshal(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			b.err = err;
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddValue, $c: true, $r, _r$1, b, err, v, $s};return $f;
	};
	Builder.prototype.AddValue = function(v) { return this.$val.AddValue(v); };
	Builder.ptr.prototype.AddASN1Int64 = function(v) {
		var {b, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addASN1Signed(2, v); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1Int64, $c: true, $r, b, v, $s};return $f;
	};
	Builder.prototype.AddASN1Int64 = function(v) { return this.$val.AddASN1Int64(v); };
	Builder.ptr.prototype.AddASN1Int64WithTag = function(v, tag) {
		var {b, tag, v, $s, $r, $c} = $restore(this, {v, tag});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addASN1Signed(tag, v); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1Int64WithTag, $c: true, $r, b, tag, v, $s};return $f;
	};
	Builder.prototype.AddASN1Int64WithTag = function(v, tag) { return this.$val.AddASN1Int64WithTag(v, tag); };
	Builder.ptr.prototype.AddASN1Enum = function(v) {
		var {b, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		$r = b.addASN1Signed(10, v); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1Enum, $c: true, $r, b, v, $s};return $f;
	};
	Builder.prototype.AddASN1Enum = function(v) { return this.$val.AddASN1Enum(v); };
	Builder.ptr.prototype.addASN1Signed = function(tag, v) {
		var {b, tag, v, $s, $r, $c} = $restore(this, {tag, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = [v];
		b = this;
		$r = b.AddASN1(tag, (function(v) { return function(c) {
			var c, i, i$1, length, x;
			length = 1;
			i = v[0];
			while (true) {
				if (!((i.$high > 0 || (i.$high === 0 && i.$low >= 128)) || (i.$high < -1 || (i.$high === -1 && i.$low < 4294967168)))) { break; }
				length = length + (1) >> 0;
				i = $shiftRightInt64(i, (8));
			}
			while (true) {
				if (!(length > 0)) { break; }
				i$1 = (x = $shiftRightInt64(v[0], ((($imul(((length - 1 >> 0)), 8)) >>> 0))), new $Int64(x.$high & 0, (x.$low & 255) >>> 0));
				c.AddUint8(((i$1.$low << 24 >>> 24)));
				length = length - (1) >> 0;
			}
		}; })(v)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.addASN1Signed, $c: true, $r, b, tag, v, $s};return $f;
	};
	Builder.prototype.addASN1Signed = function(tag, v) { return this.$val.addASN1Signed(tag, v); };
	Builder.ptr.prototype.AddASN1Uint64 = function(v) {
		var {b, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = [v];
		b = this;
		$r = b.AddASN1(2, (function(v) { return function(c) {
			var c, i, i$1, length, x;
			length = 1;
			i = v[0];
			while (true) {
				if (!((i.$high > 0 || (i.$high === 0 && i.$low >= 128)))) { break; }
				length = length + (1) >> 0;
				i = $shiftRightUint64(i, (8));
			}
			while (true) {
				if (!(length > 0)) { break; }
				i$1 = (x = $shiftRightUint64(v[0], ((($imul(((length - 1 >> 0)), 8)) >>> 0))), new $Uint64(x.$high & 0, (x.$low & 255) >>> 0));
				c.AddUint8(((i$1.$low << 24 >>> 24)));
				length = length - (1) >> 0;
			}
		}; })(v)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1Uint64, $c: true, $r, b, v, $s};return $f;
	};
	Builder.prototype.AddASN1Uint64 = function(v) { return this.$val.AddASN1Uint64(v); };
	Builder.ptr.prototype.AddASN1BigInt = function(n) {
		var {b, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = [n];
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return;
		}
		$r = b.AddASN1(2, (function(n) { return function $b(c) {
			var {_i, _r$1, _ref, bytes, bytes$1, c, i, nMinus1, $s, $r, $c} = $restore(this, {c});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			/* */ if (n[0].Sign() < 0) { $s = 1; continue; }
			/* */ if (n[0].Sign() === 0) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (n[0].Sign() < 0) { */ case 1:
				nMinus1 = new big.Int.ptr(false, big.nat.nil).Neg(n[0]);
				_r$1 = nMinus1.Sub(nMinus1, bigOne); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				bytes = nMinus1.Bytes();
				_ref = bytes;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					((i < 0 || i >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i] = ((((i < 0 || i >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i]) ^ (255)) << 24 >>> 24));
					_i++;
				}
				if ((bytes.$length === 0) || ((((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) & 128) >>> 0) === 0)) {
					c.add(new sliceType([255]));
				}
				c.add(bytes);
				$s = 4; continue;
			/* } else if (n[0].Sign() === 0) { */ case 2:
				c.add(new sliceType([0]));
				$s = 4; continue;
			/* } else { */ case 3:
				bytes$1 = n[0].Bytes();
				if (!(((((0 >= bytes$1.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 0))) {
					c.add(new sliceType([0]));
				}
				c.add(bytes$1);
			/* } */ case 4:
			$s = -1; return;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _i, _r$1, _ref, bytes, bytes$1, c, i, nMinus1, $s};return $f;
		}; })(n)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1BigInt, $c: true, $r, b, n, $s};return $f;
	};
	Builder.prototype.AddASN1BigInt = function(n) { return this.$val.AddASN1BigInt(n); };
	Builder.ptr.prototype.AddASN1OctetString = function(bytes) {
		var {b, bytes, $s, $r, $c} = $restore(this, {bytes});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		bytes = [bytes];
		b = this;
		$r = b.AddASN1(4, (function(bytes) { return function(c) {
			var c;
			c.AddBytes(bytes[0]);
		}; })(bytes)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1OctetString, $c: true, $r, b, bytes, $s};return $f;
	};
	Builder.prototype.AddASN1OctetString = function(bytes) { return this.$val.AddASN1OctetString(bytes); };
	Builder.ptr.prototype.AddASN1GeneralizedTime = function(t) {
		var {_r$1, _r$2, _r$3, _v, b, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = [t];
		b = this;
		_r$1 = $clone(t[0], time.Time).Year(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 < 0) { _v = true; $s = 3; continue s; }
		_r$2 = $clone(t[0], time.Time).Year(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2 > 9999; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$3 = fmt.Errorf("cryptobyte: cannot represent %v as a GeneralizedTime", new sliceType$1([new t[0].constructor.elem(t[0])])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			b.err = _r$3;
			$s = -1; return;
		/* } */ case 2:
		$r = b.AddASN1(24, (function(t) { return function $b(c) {
			var {_r$4, c, $s, $r, $c} = $restore(this, {c});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$4 = $clone(t[0], time.Time).Format("20060102150405Z0700"); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = c.AddBytes((new sliceType($stringToBytes(_r$4)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _r$4, c, $s};return $f;
		}; })(t)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1GeneralizedTime, $c: true, $r, _r$1, _r$2, _r$3, _v, b, t, $s};return $f;
	};
	Builder.prototype.AddASN1GeneralizedTime = function(t) { return this.$val.AddASN1GeneralizedTime(t); };
	Builder.ptr.prototype.AddASN1UTCTime = function(t) {
		var {b, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = [b];
		t = [t];
		b[0] = this;
		$r = b[0].AddASN1(23, (function(b, t) { return function $b(c) {
			var {_r$1, _r$2, _r$3, _r$4, _v, c, $s, $r, $c} = $restore(this, {c});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$1 = $clone(t[0], time.Time).Year(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (_r$1 < 1950) { _v = true; $s = 3; continue s; }
			_r$2 = $clone(t[0], time.Time).Year(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = _r$2 >= 2050; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				_r$3 = fmt.Errorf("cryptobyte: cannot represent %v as a UTCTime", new sliceType$1([new t[0].constructor.elem(t[0])])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				b[0].err = _r$3;
				$s = -1; return;
			/* } */ case 2:
			_r$4 = $clone(t[0], time.Time).Format("060102150405Z0700"); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = c.AddBytes((new sliceType($stringToBytes(_r$4)))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _v, c, $s};return $f;
		}; })(b, t)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1UTCTime, $c: true, $r, b, t, $s};return $f;
	};
	Builder.prototype.AddASN1UTCTime = function(t) { return this.$val.AddASN1UTCTime(t); };
	Builder.ptr.prototype.AddASN1BitString = function(data) {
		var {b, data, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		data = [data];
		b = this;
		$r = b.AddASN1(3, (function(data) { return function(b$1) {
			var b$1;
			b$1.AddUint8(0);
			b$1.AddBytes(data[0]);
		}; })(data)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1BitString, $c: true, $r, b, data, $s};return $f;
	};
	Builder.prototype.AddASN1BitString = function(data) { return this.$val.AddASN1BitString(data); };
	Builder.ptr.prototype.addBase128Int = function(n) {
		var b, i, i$1, length, n, o;
		b = this;
		length = 0;
		if ((n.$high === 0 && n.$low === 0)) {
			length = 1;
		} else {
			i = n;
			while (true) {
				if (!((i.$high > 0 || (i.$high === 0 && i.$low > 0)))) { break; }
				length = length + (1) >> 0;
				i = $shiftRightInt64(i, (7));
			}
		}
		i$1 = length - 1 >> 0;
		while (true) {
			if (!(i$1 >= 0)) { break; }
			o = (($shiftRightInt64(n, ((($imul(i$1, 7)) >>> 0))).$low << 24 >>> 24));
			o = (o & (127)) >>> 0;
			if (!((i$1 === 0))) {
				o = (o | (128)) >>> 0;
			}
			b.add(new sliceType([o]));
			i$1 = i$1 - (1) >> 0;
		}
	};
	Builder.prototype.addBase128Int = function(n) { return this.$val.addBase128Int(n); };
	isValidOID = function(oid) {
		var _i, _ref, oid, v;
		if (oid.$length < 2) {
			return false;
		}
		if ((0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]) > 2 || ((0 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 0]) <= 1 && (1 >= oid.$length ? ($throwRuntimeError("index out of range"), undefined) : oid.$array[oid.$offset + 1]) >= 40)) {
			return false;
		}
		_ref = oid;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (v < 0) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Builder.ptr.prototype.AddASN1ObjectIdentifier = function(oid) {
		var {b, oid, $s, $r, $c} = $restore(this, {oid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		oid = [oid];
		b = this;
		$r = b.AddASN1(6, (function(oid) { return function $b(b$1) {
			var {_i, _r$1, _ref, b$1, v, x, x$1, $s, $r, $c} = $restore(this, {b$1});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			/* */ if (!isValidOID(oid[0])) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!isValidOID(oid[0])) { */ case 1:
				_r$1 = fmt.Errorf("cryptobyte: invalid OID: %v", new sliceType$1([oid[0]])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				b$1.err = _r$1;
				$s = -1; return;
			/* } */ case 2:
			b$1.addBase128Int((x = $mul64((new $Int64(0, (0 >= oid[0].$length ? ($throwRuntimeError("index out of range"), undefined) : oid[0].$array[oid[0].$offset + 0]))), new $Int64(0, 40)), x$1 = (new $Int64(0, (1 >= oid[0].$length ? ($throwRuntimeError("index out of range"), undefined) : oid[0].$array[oid[0].$offset + 1]))), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)));
			_ref = $subslice(oid[0], 2);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				b$1.addBase128Int((new $Int64(0, v)));
				_i++;
			}
			$s = -1; return;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _i, _r$1, _ref, b$1, v, x, x$1, $s};return $f;
		}; })(oid)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1ObjectIdentifier, $c: true, $r, b, oid, $s};return $f;
	};
	Builder.prototype.AddASN1ObjectIdentifier = function(oid) { return this.$val.AddASN1ObjectIdentifier(oid); };
	Builder.ptr.prototype.AddASN1Boolean = function(v) {
		var {b, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = [v];
		b = this;
		$r = b.AddASN1(1, (function(v) { return function(b$1) {
			var b$1;
			if (v[0]) {
				b$1.AddUint8(255);
			} else {
				b$1.AddUint8(0);
			}
		}; })(v)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1Boolean, $c: true, $r, b, v, $s};return $f;
	};
	Builder.prototype.AddASN1Boolean = function(v) { return this.$val.AddASN1Boolean(v); };
	Builder.ptr.prototype.AddASN1NULL = function() {
		var b;
		b = this;
		b.add(new sliceType([5, 0]));
	};
	Builder.prototype.AddASN1NULL = function() { return this.$val.AddASN1NULL(); };
	Builder.ptr.prototype.MarshalASN1 = function(v) {
		var {_r$1, _tuple, b, bytes, err, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r$1 = asn1.Marshal(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		bytes = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			b.err = err;
			$s = -1; return;
		}
		b.AddBytes(bytes);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.MarshalASN1, $c: true, $r, _r$1, _tuple, b, bytes, err, v, $s};return $f;
	};
	Builder.prototype.MarshalASN1 = function(v) { return this.$val.MarshalASN1(v); };
	Builder.ptr.prototype.AddASN1 = function(tag, f) {
		var {_r$1, b, f, tag, $s, $r, $c} = $restore(this, {tag, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return;
		}
		/* */ if (((tag & 31) >>> 0) === 31) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((tag & 31) >>> 0) === 31) { */ case 1:
			_r$1 = fmt.Errorf("cryptobyte: high-tag number identifier octects not supported: 0x%x", new sliceType$1([new asn1$1.Tag(tag)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b.err = _r$1;
			$s = -1; return;
		/* } */ case 2:
		b.AddUint8(((tag << 24 >>> 24)));
		$r = b.addLengthPrefixed(1, true, f); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Builder.ptr.prototype.AddASN1, $c: true, $r, _r$1, b, f, tag, $s};return $f;
	};
	Builder.prototype.AddASN1 = function(tag, f) { return this.$val.AddASN1(tag, f); };
	$ptrType(String).prototype.ReadASN1Boolean = function(out) {
		var _1, bytes, bytes$24ptr, out, s;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 1) || !((bytes.$length === 1))) {
			return false;
		}
		_1 = (0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]);
		if (_1 === (0)) {
			out.$set(false);
		} else if (_1 === (255)) {
			out.$set(true);
		} else {
			return false;
		}
		return true;
	};
	$ptrType(String).prototype.ReadASN1Integer = function(out) {
		var {$24r, _1, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, i, out, s, u, $s, $r, $c} = $restore(this, {out});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = [i];
		u = [u];
		s = this;
		_r$1 = reflect.TypeOf(out).Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!((_r$1 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$1 === 22))) { */ case 1:
			$panic(new $String("out is not a pointer"));
		/* } */ case 2:
			_r$2 = reflect.ValueOf(out); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = $clone(_r$2, reflect.Value).Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = $clone(_r$3, reflect.Value).Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_1 = _r$4;
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 8; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 8:
				i[0] = new $Int64(0, 0);
				if (!s.readASN1Int64((i.$ptr || (i.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, i))))) { _v = true; $s = 14; continue s; }
				_r$5 = reflect.ValueOf(out); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = $clone(_r$5, reflect.Value).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = $clone(_r$6, reflect.Value).OverflowInt(i[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_v = _r$7; case 14:
				/* */ if (_v) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v) { */ case 12:
					$s = -1; return false;
				/* } */ case 13:
				_r$8 = reflect.ValueOf(out); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = $clone(_r$8, reflect.Value).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = $clone(_r$9, reflect.Value).SetInt(i[0]); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) { */ case 9:
				u[0] = new $Uint64(0, 0);
				if (!s.readASN1Uint64((u.$ptr || (u.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, u))))) { _v$1 = true; $s = 23; continue s; }
				_r$10 = reflect.ValueOf(out); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = $clone(_r$10, reflect.Value).Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = $clone(_r$11, reflect.Value).OverflowUint(u[0]); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_v$1 = _r$12; case 23:
				/* */ if (_v$1) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_v$1) { */ case 21:
					$s = -1; return false;
				/* } */ case 22:
				_r$13 = reflect.ValueOf(out); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = $clone(_r$13, reflect.Value).Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$r = $clone(_r$14, reflect.Value).SetUint(u[0]); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } else if (_1 === (25)) { */ case 10:
				_r$15 = reflect.TypeOf(out).Elem(); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$15, bigIntType)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ($interfaceIsEqual(_r$15, bigIntType)) { */ case 30:
					_r$16 = s.readASN1BigInt($assertType(out, ptrType)); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$24r = _r$16;
					$s = 34; case 34: return $24r;
				/* } */ case 31:
			/* } */ case 11:
		case 4:
		$panic(new $String("out does not point to an integer type"));
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: $ptrType(String).prototype.ReadASN1Integer, $c: true, $r, $24r, _1, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, i, out, s, u, $s};return $f;
	};
	checkASN1Integer = function(bytes) {
		var bytes;
		if (bytes.$length === 0) {
			return false;
		}
		if (bytes.$length === 1) {
			return true;
		}
		if (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) === 0) && ((((1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1]) & 128) >>> 0) === 0) || ((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) === 255) && ((((1 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 1]) & 128) >>> 0) === 128)) {
			return false;
		}
		return true;
	};
	$ptrType(String).prototype.readASN1BigInt = function(out) {
		var {_i, _r$1, _ref, b, bytes, i, neg, out, s, $s, $r, $c} = $restore(this, {out});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		bytes = [bytes];
		s = this;
		bytes[0] = String.nil;
		if (!s.ReadASN1((bytes.$ptr || (bytes.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, bytes))), 2) || !checkASN1Integer($convertSliceType(bytes[0], sliceType))) {
			$s = -1; return false;
		}
		/* */ if ((((0 >= bytes[0].$length ? ($throwRuntimeError("index out of range"), undefined) : bytes[0].$array[bytes[0].$offset + 0]) & 128) >>> 0) === 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((0 >= bytes[0].$length ? ($throwRuntimeError("index out of range"), undefined) : bytes[0].$array[bytes[0].$offset + 0]) & 128) >>> 0) === 128) { */ case 1:
			neg = $makeSlice(sliceType, bytes[0].$length);
			_ref = bytes[0];
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= neg.$length) ? ($throwRuntimeError("index out of range"), undefined) : neg.$array[neg.$offset + i] = (~b << 24 >>> 24));
				_i++;
			}
			out.SetBytes(neg);
			_r$1 = out.Add(out, bigOne); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			out.Neg(out);
			$s = 3; continue;
		/* } else { */ case 2:
			out.SetBytes($convertSliceType(bytes[0], sliceType));
		/* } */ case 3:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: $ptrType(String).prototype.readASN1BigInt, $c: true, $r, _i, _r$1, _ref, b, bytes, i, neg, out, s, $s};return $f;
	};
	$ptrType(String).prototype.readASN1Int64 = function(out) {
		var bytes, bytes$24ptr, out, s;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 2) || !checkASN1Integer($convertSliceType(bytes, sliceType)) || !asn1Signed(out, $convertSliceType(bytes, sliceType))) {
			return false;
		}
		return true;
	};
	asn1Signed = function(out, n) {
		var i, length, n, out, x, x$1;
		length = n.$length;
		if (length > 8) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			out.$set($shiftLeft64(out.$get(), (8)));
			out.$set((x = out.$get(), x$1 = (new $Int64(0, ((i < 0 || i >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + i]))), new $Int64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0)));
			i = i + (1) >> 0;
		}
		out.$set($shiftLeft64(out.$get(), ((64 - (((length << 24 >>> 24)) * 8 << 24 >>> 24) << 24 >>> 24))));
		out.$set($shiftRightInt64(out.$get(), ((64 - (((length << 24 >>> 24)) * 8 << 24 >>> 24) << 24 >>> 24))));
		return true;
	};
	$ptrType(String).prototype.readASN1Uint64 = function(out) {
		var bytes, bytes$24ptr, out, s;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 2) || !checkASN1Integer($convertSliceType(bytes, sliceType)) || !asn1Unsigned(out, $convertSliceType(bytes, sliceType))) {
			return false;
		}
		return true;
	};
	asn1Unsigned = function(out, n) {
		var i, length, n, out, x, x$1;
		length = n.$length;
		if (length > 9 || (length === 9) && !(((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) === 0))) {
			return false;
		}
		if (!(((((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) & 128) >>> 0) === 0))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			out.$set($shiftLeft64(out.$get(), (8)));
			out.$set((x = out.$get(), x$1 = (new $Uint64(0, ((i < 0 || i >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + i]))), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0)));
			i = i + (1) >> 0;
		}
		return true;
	};
	$ptrType(String).prototype.ReadASN1Int64WithTag = function(out, tag) {
		var bytes, bytes$24ptr, out, s, tag;
		s = this;
		bytes = String.nil;
		return s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), tag) && checkASN1Integer($convertSliceType(bytes, sliceType)) && asn1Signed(out, $convertSliceType(bytes, sliceType));
	};
	$ptrType(String).prototype.ReadASN1Enum = function(out) {
		var bytes, bytes$24ptr, i, i$24ptr, out, s, x;
		s = this;
		bytes = String.nil;
		i = new $Int64(0, 0);
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 10) || !checkASN1Integer($convertSliceType(bytes, sliceType)) || !asn1Signed((i$24ptr || (i$24ptr = new ptrType$5(function() { return i; }, function($v) { i = $v; }))), $convertSliceType(bytes, sliceType))) {
			return false;
		}
		if (!((x = (new $Int64(0, (((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)))), (x.$high === i.$high && x.$low === i.$low)))) {
			return false;
		}
		out.$set((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		return true;
	};
	$ptrType(String).prototype.readBase128Int = function(out) {
		var b, i, out, ret, s, x, y;
		s = this;
		ret = 0;
		i = 0;
		while (true) {
			if (!(s.$get().$length > 0)) { break; }
			if (i === 5) {
				return false;
			}
			if (ret >= 16777216) {
				return false;
			}
			ret = (y = (7), y < 32 ? (ret << y) : 0) >> 0;
			b = (x = s.read(1), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			ret = ret | (((((b & 127) >>> 0) >> 0)));
			if (((b & 128) >>> 0) === 0) {
				out.$set(ret);
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	$ptrType(String).prototype.ReadASN1ObjectIdentifier = function(out) {
		var _q, _r$1, bytes, bytes$24ptr, components, i, out, s, v, v$24ptr;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 6) || (bytes.$length === 0)) {
			return false;
		}
		components = $makeSlice(sliceType$2, (bytes.$length + 1 >> 0));
		v = 0;
		if (!(bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))).readBase128Int((v$24ptr || (v$24ptr = new ptrType$7(function() { return v; }, function($v) { v = $v; }))))) {
			return false;
		}
		if (v < 80) {
			(0 >= components.$length ? ($throwRuntimeError("index out of range"), undefined) : components.$array[components.$offset + 0] = (_q = v / 40, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			(1 >= components.$length ? ($throwRuntimeError("index out of range"), undefined) : components.$array[components.$offset + 1] = (_r$1 = v % 40, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else {
			(0 >= components.$length ? ($throwRuntimeError("index out of range"), undefined) : components.$array[components.$offset + 0] = 2);
			(1 >= components.$length ? ($throwRuntimeError("index out of range"), undefined) : components.$array[components.$offset + 1] = (v - 80 >> 0));
		}
		i = 2;
		while (true) {
			if (!(bytes.$length > 0)) { break; }
			if (!(bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))).readBase128Int((v$24ptr || (v$24ptr = new ptrType$7(function() { return v; }, function($v) { v = $v; }))))) {
				return false;
			}
			((i < 0 || i >= components.$length) ? ($throwRuntimeError("index out of range"), undefined) : components.$array[components.$offset + i] = v);
			i = i + (1) >> 0;
		}
		out.$set($convertSliceType($subslice(components, 0, i), asn1.ObjectIdentifier));
		return true;
	};
	$ptrType(String).prototype.ReadASN1GeneralizedTime = function(out) {
		var {_r$1, _r$2, _tuple, bytes, err, out, res, s, serialized, t, $s, $r, $c} = $restore(this, {out});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		bytes = [bytes];
		s = this;
		bytes[0] = String.nil;
		if (!s.ReadASN1((bytes.$ptr || (bytes.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, bytes))), 24)) {
			$s = -1; return false;
		}
		t = ($bytesToString(bytes[0]));
		_r$1 = time.Parse("20060102150405Z0700", t); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		res = $clone(_tuple[0], time.Time);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return false;
		}
		_r$2 = $clone(res, time.Time).Format("20060102150405Z0700"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		serialized = _r$2;
		if (!(serialized === t)) {
			$s = -1; return false;
		}
		time.Time.copy(out, res);
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: $ptrType(String).prototype.ReadASN1GeneralizedTime, $c: true, $r, _r$1, _r$2, _tuple, bytes, err, out, res, s, serialized, t, $s};return $f;
	};
	$ptrType(String).prototype.ReadASN1UTCTime = function(out) {
		var {_r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, bytes, err, formatStr, out, res, s, serialized, t, $s, $r, $c} = $restore(this, {out});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		bytes = [bytes];
		s = this;
		bytes[0] = String.nil;
		if (!s.ReadASN1((bytes.$ptr || (bytes.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, bytes))), 23)) {
			$s = -1; return false;
		}
		t = ($bytesToString(bytes[0]));
		formatStr = "060102150405Z0700";
		err = $ifaceNil;
		_r$1 = time.Parse(formatStr, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		res = $clone(_tuple[0], time.Time);
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			formatStr = "0601021504Z0700";
			_r$2 = time.Parse(formatStr, t); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			time.Time.copy(res, _tuple$1[0]);
			err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return false;
		}
		_r$3 = $clone(res, time.Time).Format(formatStr); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		serialized = _r$3;
		if (!(serialized === t)) {
			$s = -1; return false;
		}
		_r$4 = $clone(res, time.Time).Year(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 >= 2050) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$4 >= 2050) { */ case 6:
			_r$5 = $clone(res, time.Time).AddDate(-100, 0, 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			time.Time.copy(res, _r$5);
		/* } */ case 7:
		time.Time.copy(out, res);
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: $ptrType(String).prototype.ReadASN1UTCTime, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, bytes, err, formatStr, out, res, s, serialized, t, $s};return $f;
	};
	$ptrType(String).prototype.ReadASN1BitString = function(out) {
		var _q, bytes, bytes$24ptr, out, paddingBits, s, x, y;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 3) || (bytes.$length === 0) || !(((_q = ($imul(bytes.$length, 8)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === bytes.$length))) {
			return false;
		}
		paddingBits = ((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]));
		bytes = $subslice(bytes, 1);
		if (paddingBits > 7 || (bytes.$length === 0) && !((paddingBits === 0)) || bytes.$length > 0 && !(((((x = bytes.$length - 1 >> 0, ((x < 0 || x >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + x])) & ((((y = paddingBits, y < 32 ? (1 << y) : 0) << 24 >>> 24) - 1 << 24 >>> 24))) >>> 0) === 0))) {
			return false;
		}
		out.BitLength = ($imul(bytes.$length, 8)) - ((paddingBits >> 0)) >> 0;
		out.Bytes = $convertSliceType(bytes, sliceType);
		return true;
	};
	$ptrType(String).prototype.ReadASN1BitStringAsBytes = function(out) {
		var bytes, bytes$24ptr, out, paddingBits, s;
		s = this;
		bytes = String.nil;
		if (!s.ReadASN1((bytes$24ptr || (bytes$24ptr = new ptrType$4(function() { return bytes; }, function($v) { bytes = $v; }))), 3) || (bytes.$length === 0)) {
			return false;
		}
		paddingBits = ((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]));
		if (!((paddingBits === 0))) {
			return false;
		}
		out.$set($convertSliceType($subslice(bytes, 1), sliceType));
		return true;
	};
	$ptrType(String).prototype.ReadASN1Bytes = function(out, tag) {
		var _ptr, out, s, tag;
		s = this;
		return s.ReadASN1(((_ptr = out, new ptrType$4(function() { return $convertSliceType(_ptr.$get(), String); }, function($v) { _ptr.$set($convertSliceType($v, sliceType)); }, _ptr.$target))), tag);
	};
	$ptrType(String).prototype.ReadASN1 = function(out, tag) {
		var out, s, t, t$24ptr, tag;
		s = this;
		t = 0;
		if (!s.ReadAnyASN1(out, (t$24ptr || (t$24ptr = new ptrType$8(function() { return t; }, function($v) { t = $v; })))) || !((t === tag))) {
			return false;
		}
		return true;
	};
	$ptrType(String).prototype.ReadASN1Element = function(out, tag) {
		var out, s, t, t$24ptr, tag;
		s = this;
		t = 0;
		if (!s.ReadAnyASN1Element(out, (t$24ptr || (t$24ptr = new ptrType$8(function() { return t; }, function($v) { t = $v; })))) || !((t === tag))) {
			return false;
		}
		return true;
	};
	$ptrType(String).prototype.ReadAnyASN1 = function(out, outTag) {
		var out, outTag, s;
		s = this;
		return s.readASN1(out, outTag, true);
	};
	$ptrType(String).prototype.ReadAnyASN1Element = function(out, outTag) {
		var out, outTag, s;
		s = this;
		return s.readASN1(out, outTag, false);
	};
	String.prototype.PeekASN1Tag = function(tag) {
		var s, tag;
		s = this;
		if (s.$length === 0) {
			return false;
		}
		return (((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) << 24 >>> 24)) === tag;
	};
	$ptrType(String).prototype.PeekASN1Tag = function(tag) { return this.$get().PeekASN1Tag(tag); };
	$ptrType(String).prototype.SkipASN1 = function(tag) {
		var s, tag, unused, unused$24ptr;
		s = this;
		unused = String.nil;
		return s.ReadASN1((unused$24ptr || (unused$24ptr = new ptrType$4(function() { return unused; }, function($v) { unused = $v; }))), tag);
	};
	$ptrType(String).prototype.ReadOptionalASN1 = function(out, outPresent, tag) {
		var out, outPresent, present, s, tag;
		s = this;
		present = s.PeekASN1Tag(tag);
		if (!(outPresent === ptrType$2.nil)) {
			outPresent.$set(present);
		}
		if (present && !s.ReadASN1(out, tag)) {
			return false;
		}
		return true;
	};
	$ptrType(String).prototype.SkipOptionalASN1 = function(tag) {
		var s, tag, unused, unused$24ptr;
		s = this;
		if (!s.PeekASN1Tag(tag)) {
			return true;
		}
		unused = String.nil;
		return s.ReadASN1((unused$24ptr || (unused$24ptr = new ptrType$4(function() { return unused; }, function($v) { unused = $v; }))), tag);
	};
	$ptrType(String).prototype.ReadOptionalASN1Integer = function(out, tag, defaultValue) {
		var {_1, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, defaultValue, i, out, present, s, tag, $s, $r, $c} = $restore(this, {out, tag, defaultValue});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = [i];
		present = [present];
		s = this;
		_r$1 = reflect.TypeOf(out).Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!((_r$1 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$1 === 22))) { */ case 1:
			$panic(new $String("out is not a pointer"));
		/* } */ case 2:
		present[0] = false;
		i[0] = String.nil;
		if (!s.ReadOptionalASN1((i.$ptr || (i.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, i))), (present.$ptr || (present.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, present))), tag)) {
			$s = -1; return false;
		}
		/* */ if (!present[0]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!present[0]) { */ case 4:
				_r$2 = reflect.ValueOf(out); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = $clone(_r$2, reflect.Value).Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = $clone(_r$3, reflect.Value).Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_1 = _r$4;
				/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) { $s = 10; continue; }
				/* */ if (_1 === (25)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) { */ case 10:
					_r$5 = reflect.ValueOf(out); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = $clone(_r$5, reflect.Value).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = reflect.ValueOf(defaultValue); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = $clone(_r$6, reflect.Value).Set($clone(_r$7, reflect.Value)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else if (_1 === (25)) { */ case 11:
					_r$8 = reflect.TypeOf(out).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!($interfaceIsEqual(_r$8, bigIntType))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!($interfaceIsEqual(_r$8, bigIntType))) { */ case 18:
						$panic(new $String("invalid integer type"));
					/* } */ case 19:
					_r$9 = reflect.TypeOf(defaultValue).Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					if (!((_r$9 === 22))) { _v = true; $s = 23; continue s; }
					_r$10 = reflect.TypeOf(defaultValue).Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_v = !($interfaceIsEqual(_r$10, bigIntType)); case 23:
					/* */ if (_v) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (_v) { */ case 21:
						$panic(new $String("out points to big.Int, but defaultValue does not"));
					/* } */ case 22:
					$assertType(out, ptrType).Set($assertType(defaultValue, ptrType));
					$s = 13; continue;
				/* } else { */ case 12:
					$panic(new $String("invalid integer type"));
				/* } */ case 13:
			case 6:
			$s = -1; return true;
		/* } */ case 5:
		_r$11 = (i.$ptr || (i.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, i))).ReadASN1Integer(out); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		/* */ if (!_r$11 || !i[0].Empty()) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (!_r$11 || !i[0].Empty()) { */ case 26:
			$s = -1; return false;
		/* } */ case 27:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: $ptrType(String).prototype.ReadOptionalASN1Integer, $c: true, $r, _1, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, defaultValue, i, out, present, s, tag, $s};return $f;
	};
	$ptrType(String).prototype.ReadOptionalASN1OctetString = function(out, outPresent, tag) {
		var child, child$24ptr, oct, oct$24ptr, out, outPresent, present, present$24ptr, s, tag;
		s = this;
		present = false;
		child = String.nil;
		if (!s.ReadOptionalASN1((child$24ptr || (child$24ptr = new ptrType$4(function() { return child; }, function($v) { child = $v; }))), (present$24ptr || (present$24ptr = new ptrType$2(function() { return present; }, function($v) { present = $v; }))), tag)) {
			return false;
		}
		if (!(outPresent === ptrType$2.nil)) {
			outPresent.$set(present);
		}
		if (present) {
			oct = String.nil;
			if (!(child$24ptr || (child$24ptr = new ptrType$4(function() { return child; }, function($v) { child = $v; }))).ReadASN1((oct$24ptr || (oct$24ptr = new ptrType$4(function() { return oct; }, function($v) { oct = $v; }))), 4) || !child.Empty()) {
				return false;
			}
			out.$set($convertSliceType(oct, sliceType));
		} else {
			out.$set(sliceType.nil);
		}
		return true;
	};
	$ptrType(String).prototype.ReadOptionalASN1Boolean = function(out, defaultValue) {
		var child, child$24ptr, defaultValue, out, present, present$24ptr, s;
		s = this;
		present = false;
		child = String.nil;
		if (!s.ReadOptionalASN1((child$24ptr || (child$24ptr = new ptrType$4(function() { return child; }, function($v) { child = $v; }))), (present$24ptr || (present$24ptr = new ptrType$2(function() { return present; }, function($v) { present = $v; }))), 1)) {
			return false;
		}
		if (!present) {
			out.$set(defaultValue);
			return true;
		}
		return s.ReadASN1Boolean(out);
	};
	$ptrType(String).prototype.readASN1 = function(out, outTag, skipHeader) {
		var _ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, headerLen, len32, len32$24ptr, lenByte, lenBytes, lenBytes$24ptr, lenLen, length, out, outTag, s, skipHeader, tag, x, x$1, y;
		s = this;
		if (s.$get().$length < 2) {
			return false;
		}
		_tmp = (x = s.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		_tmp$1 = (x$1 = s.$get(), (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1]));
		tag = _tmp;
		lenByte = _tmp$1;
		if (((tag & 31) >>> 0) === 31) {
			return false;
		}
		if (!(outTag === ptrType$8.nil)) {
			outTag.$set(((tag << 24 >>> 24)));
		}
		_tmp$2 = 0;
		_tmp$3 = 0;
		length = _tmp$2;
		headerLen = _tmp$3;
		if (((lenByte & 128) >>> 0) === 0) {
			length = ((lenByte >>> 0)) + 2 >>> 0;
			headerLen = 2;
		} else {
			lenLen = (lenByte & 127) >>> 0;
			len32 = 0;
			if ((lenLen === 0) || lenLen > 4 || s.$get().$length < (((2 + lenLen << 24 >>> 24) >> 0))) {
				return false;
			}
			lenBytes = ($subslice((s.$get()), 2, (2 + lenLen << 24 >>> 24)));
			if (!(lenBytes$24ptr || (lenBytes$24ptr = new ptrType$4(function() { return lenBytes; }, function($v) { lenBytes = $v; }))).readUnsigned((len32$24ptr || (len32$24ptr = new ptrType$9(function() { return len32; }, function($v) { len32 = $v; }))), ((lenLen >> 0)))) {
				return false;
			}
			if (len32 < 128) {
				return false;
			}
			if (((y = ((((lenLen - 1 << 24 >>> 24)) * 8 << 24 >>> 24)), y < 32 ? (len32 >>> y) : 0) >>> 0) === 0) {
				return false;
			}
			headerLen = 2 + ((lenLen >>> 0)) >>> 0;
			if ((headerLen + len32 >>> 0) < len32) {
				return false;
			}
			length = headerLen + len32 >>> 0;
		}
		if (((length >> 0)) < 0 || !s.ReadBytes(((_ptr = out, new ptrType$10(function() { return $convertSliceType(_ptr.$get(), sliceType); }, function($v) { _ptr.$set($convertSliceType($v, String)); }, _ptr.$target))), ((length >> 0)))) {
			return false;
		}
		if (skipHeader && !out.Skip(((headerLen >> 0)))) {
			$panic(new $String("cryptobyte: internal error"));
		}
		return true;
	};
	String.methods = [{prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "PeekASN1Tag", name: "PeekASN1Tag", pkg: "", typ: $funcType([asn1$1.Tag], [$Bool], false)}];
	ptrType$4.methods = [{prop: "read", name: "read", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([$Int], [sliceType], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "ReadUint8", name: "ReadUint8", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "ReadUint16", name: "ReadUint16", pkg: "", typ: $funcType([ptrType$11], [$Bool], false)}, {prop: "ReadUint24", name: "ReadUint24", pkg: "", typ: $funcType([ptrType$9], [$Bool], false)}, {prop: "ReadUint32", name: "ReadUint32", pkg: "", typ: $funcType([ptrType$9], [$Bool], false)}, {prop: "readUnsigned", name: "readUnsigned", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType$9, $Int], [$Bool], false)}, {prop: "readLengthPrefixed", name: "readLengthPrefixed", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([$Int, ptrType$4], [$Bool], false)}, {prop: "ReadUint8LengthPrefixed", name: "ReadUint8LengthPrefixed", pkg: "", typ: $funcType([ptrType$4], [$Bool], false)}, {prop: "ReadUint16LengthPrefixed", name: "ReadUint16LengthPrefixed", pkg: "", typ: $funcType([ptrType$4], [$Bool], false)}, {prop: "ReadUint24LengthPrefixed", name: "ReadUint24LengthPrefixed", pkg: "", typ: $funcType([ptrType$4], [$Bool], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([ptrType$10, $Int], [$Bool], false)}, {prop: "CopyBytes", name: "CopyBytes", pkg: "", typ: $funcType([sliceType], [$Bool], false)}, {prop: "ReadASN1Boolean", name: "ReadASN1Boolean", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "ReadASN1Integer", name: "ReadASN1Integer", pkg: "", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "readASN1BigInt", name: "readASN1BigInt", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType], [$Bool], false)}, {prop: "readASN1Int64", name: "readASN1Int64", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType$5], [$Bool], false)}, {prop: "readASN1Uint64", name: "readASN1Uint64", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType$6], [$Bool], false)}, {prop: "ReadASN1Int64WithTag", name: "ReadASN1Int64WithTag", pkg: "", typ: $funcType([ptrType$5, asn1$1.Tag], [$Bool], false)}, {prop: "ReadASN1Enum", name: "ReadASN1Enum", pkg: "", typ: $funcType([ptrType$7], [$Bool], false)}, {prop: "readBase128Int", name: "readBase128Int", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType$7], [$Bool], false)}, {prop: "ReadASN1ObjectIdentifier", name: "ReadASN1ObjectIdentifier", pkg: "", typ: $funcType([ptrType$12], [$Bool], false)}, {prop: "ReadASN1GeneralizedTime", name: "ReadASN1GeneralizedTime", pkg: "", typ: $funcType([ptrType$13], [$Bool], false)}, {prop: "ReadASN1UTCTime", name: "ReadASN1UTCTime", pkg: "", typ: $funcType([ptrType$13], [$Bool], false)}, {prop: "ReadASN1BitString", name: "ReadASN1BitString", pkg: "", typ: $funcType([ptrType$14], [$Bool], false)}, {prop: "ReadASN1BitStringAsBytes", name: "ReadASN1BitStringAsBytes", pkg: "", typ: $funcType([ptrType$10], [$Bool], false)}, {prop: "ReadASN1Bytes", name: "ReadASN1Bytes", pkg: "", typ: $funcType([ptrType$10, asn1$1.Tag], [$Bool], false)}, {prop: "ReadASN1", name: "ReadASN1", pkg: "", typ: $funcType([ptrType$4, asn1$1.Tag], [$Bool], false)}, {prop: "ReadASN1Element", name: "ReadASN1Element", pkg: "", typ: $funcType([ptrType$4, asn1$1.Tag], [$Bool], false)}, {prop: "ReadAnyASN1", name: "ReadAnyASN1", pkg: "", typ: $funcType([ptrType$4, ptrType$8], [$Bool], false)}, {prop: "ReadAnyASN1Element", name: "ReadAnyASN1Element", pkg: "", typ: $funcType([ptrType$4, ptrType$8], [$Bool], false)}, {prop: "SkipASN1", name: "SkipASN1", pkg: "", typ: $funcType([asn1$1.Tag], [$Bool], false)}, {prop: "ReadOptionalASN1", name: "ReadOptionalASN1", pkg: "", typ: $funcType([ptrType$4, ptrType$2, asn1$1.Tag], [$Bool], false)}, {prop: "SkipOptionalASN1", name: "SkipOptionalASN1", pkg: "", typ: $funcType([asn1$1.Tag], [$Bool], false)}, {prop: "ReadOptionalASN1Integer", name: "ReadOptionalASN1Integer", pkg: "", typ: $funcType([$emptyInterface, asn1$1.Tag, $emptyInterface], [$Bool], false)}, {prop: "ReadOptionalASN1OctetString", name: "ReadOptionalASN1OctetString", pkg: "", typ: $funcType([ptrType$10, ptrType$2, asn1$1.Tag], [$Bool], false)}, {prop: "ReadOptionalASN1Boolean", name: "ReadOptionalASN1Boolean", pkg: "", typ: $funcType([ptrType$2, $Bool], [$Bool], false)}, {prop: "readASN1", name: "readASN1", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([ptrType$4, ptrType$8, $Bool], [$Bool], false)}];
	ptrType$1.methods = [{prop: "SetError", name: "SetError", pkg: "", typ: $funcType([$error], [], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "BytesOrPanic", name: "BytesOrPanic", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "AddUint8", name: "AddUint8", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "AddUint16", name: "AddUint16", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "AddUint24", name: "AddUint24", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AddUint32", name: "AddUint32", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AddBytes", name: "AddBytes", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "AddUint8LengthPrefixed", name: "AddUint8LengthPrefixed", pkg: "", typ: $funcType([BuilderContinuation], [], false)}, {prop: "AddUint16LengthPrefixed", name: "AddUint16LengthPrefixed", pkg: "", typ: $funcType([BuilderContinuation], [], false)}, {prop: "AddUint24LengthPrefixed", name: "AddUint24LengthPrefixed", pkg: "", typ: $funcType([BuilderContinuation], [], false)}, {prop: "AddUint32LengthPrefixed", name: "AddUint32LengthPrefixed", pkg: "", typ: $funcType([BuilderContinuation], [], false)}, {prop: "callContinuation", name: "callContinuation", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([BuilderContinuation, ptrType$1], [], false)}, {prop: "addLengthPrefixed", name: "addLengthPrefixed", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([$Int, $Bool, BuilderContinuation], [], false)}, {prop: "flushChild", name: "flushChild", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([], [], false)}, {prop: "add", name: "add", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([sliceType], [], true)}, {prop: "Unwrite", name: "Unwrite", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AddValue", name: "AddValue", pkg: "", typ: $funcType([MarshalingValue], [], false)}, {prop: "AddASN1Int64", name: "AddASN1Int64", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "AddASN1Int64WithTag", name: "AddASN1Int64WithTag", pkg: "", typ: $funcType([$Int64, asn1$1.Tag], [], false)}, {prop: "AddASN1Enum", name: "AddASN1Enum", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "addASN1Signed", name: "addASN1Signed", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([asn1$1.Tag, $Int64], [], false)}, {prop: "AddASN1Uint64", name: "AddASN1Uint64", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "AddASN1BigInt", name: "AddASN1BigInt", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "AddASN1OctetString", name: "AddASN1OctetString", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "AddASN1GeneralizedTime", name: "AddASN1GeneralizedTime", pkg: "", typ: $funcType([time.Time], [], false)}, {prop: "AddASN1UTCTime", name: "AddASN1UTCTime", pkg: "", typ: $funcType([time.Time], [], false)}, {prop: "AddASN1BitString", name: "AddASN1BitString", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "addBase128Int", name: "addBase128Int", pkg: "vendor/golang.org/x/crypto/cryptobyte", typ: $funcType([$Int64], [], false)}, {prop: "AddASN1ObjectIdentifier", name: "AddASN1ObjectIdentifier", pkg: "", typ: $funcType([asn1.ObjectIdentifier], [], false)}, {prop: "AddASN1Boolean", name: "AddASN1Boolean", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "AddASN1NULL", name: "AddASN1NULL", pkg: "", typ: $funcType([], [], false)}, {prop: "MarshalASN1", name: "MarshalASN1", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "AddASN1", name: "AddASN1", pkg: "", typ: $funcType([asn1$1.Tag, BuilderContinuation], [], false)}];
	String.init($Uint8);
	Builder.init("vendor/golang.org/x/crypto/cryptobyte", [{prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}, {prop: "result", name: "result", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "fixedSize", name: "fixedSize", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "child", name: "child", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "pendingLenLen", name: "pendingLenLen", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "pendingIsASN1", name: "pendingIsASN1", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "inContinuation", name: "inContinuation", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	BuilderContinuation.init([ptrType$1], [], false);
	BuildError.init("", [{prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	MarshalingValue.init([{prop: "Marshal", name: "Marshal", pkg: "", typ: $funcType([ptrType$1], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = asn1.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1$1.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = reflect.TypeOf((ptrType.nil)).Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		bigIntType = _r;
		bigOne = big.NewInt(new $Int64(0, 1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/ecdsa"] = (function() {
	var $pkg = {}, $init, crypto, aes, cipher, elliptic, boring, bbig, randutil, sha512, errors, io, big, cryptobyte, asn1, invertible, combinedMult, PublicKey, ptrType, ptrType$1, sliceType, ptrType$3, ptrType$4, ptrType$5, one, errZeroParam, boringPublicKey, verify, hashToInt, Verify, verifyGeneric, VerifyASN1;
	crypto = $packages["crypto"];
	aes = $packages["crypto/aes"];
	cipher = $packages["crypto/cipher"];
	elliptic = $packages["crypto/elliptic"];
	boring = $packages["crypto/internal/boring"];
	bbig = $packages["crypto/internal/boring/bbig"];
	randutil = $packages["crypto/internal/randutil"];
	sha512 = $packages["crypto/sha512"];
	errors = $packages["errors"];
	io = $packages["io"];
	big = $packages["math/big"];
	cryptobyte = $packages["vendor/golang.org/x/crypto/cryptobyte"];
	asn1 = $packages["vendor/golang.org/x/crypto/cryptobyte/asn1"];
	invertible = $pkg.invertible = $newType(8, $kindInterface, "ecdsa.invertible", true, "crypto/ecdsa", false, null);
	combinedMult = $pkg.combinedMult = $newType(8, $kindInterface, "ecdsa.combinedMult", true, "crypto/ecdsa", false, null);
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "ecdsa.PublicKey", true, "crypto/ecdsa", true, function(Curve_, X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = $ifaceNil;
			this.X = ptrType.nil;
			this.Y = ptrType.nil;
			return;
		}
		this.Curve = Curve_;
		this.X = X_;
		this.Y = Y_;
	});
	ptrType = $ptrType(big.Int);
	ptrType$1 = $ptrType(PublicKey);
	sliceType = $sliceType($Uint8);
	ptrType$3 = $ptrType(cryptobyte.Builder);
	ptrType$4 = $ptrType($Bool);
	ptrType$5 = $ptrType(cryptobyte.String);
	boringPublicKey = function(param) {
		var param;
		$panic(new $String("boringcrypto: not available"));
	};
	verify = function(pub, c, hash, r, s) {
		var {$24r, _r, c, hash, pub, r, s, $s, $r, $c} = $restore(this, {pub, c, hash, r, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = verifyGeneric(pub, c, hash, r, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: verify, $c: true, $r, $24r, _r, c, hash, pub, r, s, $s};return $f;
	};
	PublicKey.ptr.prototype.Equal = function(x) {
		var _tuple, ok, pub, x, xx;
		pub = this;
		_tuple = $assertType(x, ptrType$1, true);
		xx = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		return (pub.X.Cmp(xx.X) === 0) && (pub.Y.Cmp(xx.Y) === 0) && $interfaceIsEqual(pub.Curve, xx.Curve);
	};
	PublicKey.prototype.Equal = function(x) { return this.$val.Equal(x); };
	hashToInt = function(hash, c) {
		var {_q, _r, _r$1, _r$2, c, excess, hash, orderBits, orderBytes, ret, $s, $r, $c} = $restore(this, {hash, c});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = c.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.N.BitLen(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		orderBits = _r$1;
		orderBytes = (_q = ((orderBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (hash.$length > orderBytes) {
			hash = $subslice(hash, 0, orderBytes);
		}
		ret = new big.Int.ptr(false, big.nat.nil).SetBytes(hash);
		excess = ($imul(hash.$length, 8)) - orderBits >> 0;
		/* */ if (excess > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (excess > 0) { */ case 3:
			_r$2 = ret.Rsh(ret, ((excess >>> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 4:
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: hashToInt, $c: true, $r, _q, _r, _r$1, _r$2, c, excess, hash, orderBits, orderBytes, ret, $s};return $f;
	};
	Verify = function(pub, hash, r, s) {
		var {$24r, N, _r, _r$1, _tuple, _tuple$1, b, c, err, hash, key, pub, r, s, sig, $s, $r, $c} = $restore(this, {pub, hash, r, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = [r];
		s = [s];
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			_tuple = boringPublicKey(pub);
			key = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return false;
			}
			b = new cryptobyte.Builder.ptr($ifaceNil, sliceType.nil, false, ptrType$3.nil, 0, 0, false, ptrType$4.nil);
			$r = b.AddASN1(48, (function(r, s) { return function $b(b$1) {
				var {b$1, $s, $r, $c} = $restore(this, {b$1});
				/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				$r = b$1.AddASN1BigInt(r[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = b$1.AddASN1BigInt(s[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
			}; })(r, s)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = b.Bytes();
			sig = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return false;
			}
			$s = -1; return boring.VerifyECDSA(key, hash, sig);
		/* } */ case 2:
		boring.UnreachableExceptTests();
		c = pub.Curve;
		_r = c.Params(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		N = _r.N;
		if (r[0].Sign() <= 0 || s[0].Sign() <= 0) {
			$s = -1; return false;
		}
		if (r[0].Cmp(N) >= 0 || s[0].Cmp(N) >= 0) {
			$s = -1; return false;
		}
		_r$1 = verify(pub, c, hash, r[0], s[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: Verify, $c: true, $r, $24r, N, _r, _r$1, _tuple, _tuple$1, b, c, err, hash, key, pub, r, s, sig, $s};return $f;
	};
	$pkg.Verify = Verify;
	verifyGeneric = function(pub, c, hash, r, s) {
		var {N, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, e, hash, in$1, ok, ok$1, opt, pub, r, s, u1, u2, w, x, x1, x2, y, y1, y2, $s, $r, $c} = $restore(this, {pub, c, hash, r, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = hashToInt(hash, c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		w = ptrType.nil;
		_r$1 = c.Params(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		N = _r$1.N;
		_tuple = $assertType(c, invertible, true);
		in$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 3:
			_r$2 = in$1.Inverse(s); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			w = _r$2;
			$s = 5; continue;
		/* } else { */ case 4:
			_r$3 = new big.Int.ptr(false, big.nat.nil).ModInverse(s, N); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			w = _r$3;
		/* } */ case 5:
		_r$4 = e.Mul(e, w); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		u1 = _r$4;
		_r$5 = u1.Mod(u1, N); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = w.Mul(r, w); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		u2 = _r$6;
		_r$7 = u2.Mod(u2, N); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_tmp = ptrType.nil;
		_tmp$1 = ptrType.nil;
		x = _tmp;
		y = _tmp$1;
		_tuple$1 = $assertType(c, combinedMult, true);
		opt = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (ok$1) { */ case 12:
			_r$8 = opt.CombinedMult(pub.X, pub.Y, u1.Bytes(), u2.Bytes()); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$2 = _r$8;
			x = _tuple$2[0];
			y = _tuple$2[1];
			$s = 14; continue;
		/* } else { */ case 13:
			_r$9 = c.ScalarBaseMult(u1.Bytes()); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$3 = _r$9;
			x1 = _tuple$3[0];
			y1 = _tuple$3[1];
			_r$10 = c.ScalarMult(pub.X, pub.Y, u2.Bytes()); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$4 = _r$10;
			x2 = _tuple$4[0];
			y2 = _tuple$4[1];
			_r$11 = c.Add(x1, y1, x2, y2); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$5 = _r$11;
			x = _tuple$5[0];
			y = _tuple$5[1];
		/* } */ case 14:
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			$s = -1; return false;
		}
		_r$12 = x.Mod(x, N); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		$s = -1; return x.Cmp(r) === 0;
		/* */ } return; } var $f = {$blk: verifyGeneric, $c: true, $r, N, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, e, hash, in$1, ok, ok$1, opt, pub, r, s, u1, u2, w, x, x1, x2, y, y1, y2, $s};return $f;
	};
	VerifyASN1 = function(pub, hash, sig) {
		var {$24r, _r, _r$1, _r$2, _tmp, _tmp$1, _v, _v$1, hash, inner, input, input$24ptr, pub, r, s, sig, $s, $r, $c} = $restore(this, {pub, hash, sig});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		inner = [inner];
		_tmp = new big.Int.ptr(false, big.nat.nil);
		_tmp$1 = new big.Int.ptr(false, big.nat.nil);
		r = _tmp;
		s = _tmp$1;
		inner[0] = cryptobyte.String.nil;
		input = ($convertSliceType(sig, cryptobyte.String));
		if (!(input$24ptr || (input$24ptr = new ptrType$5(function() { return input; }, function($v) { input = $v; }))).ReadASN1((inner.$ptr || (inner.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, inner))), 48) || !input.Empty()) { _v$1 = true; $s = 4; continue s; }
		_r = (inner.$ptr || (inner.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, inner))).ReadASN1Integer(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !_r; case 4:
		if (_v$1) { _v = true; $s = 3; continue s; }
		_r$1 = (inner.$ptr || (inner.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, inner))).ReadASN1Integer(s); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !_r$1; case 3:
		/* */ if (_v || !inner[0].Empty()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v || !inner[0].Empty()) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$2 = Verify(pub, hash, r, s); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 8; case 8: return $24r;
		/* */ } return; } var $f = {$blk: VerifyASN1, $c: true, $r, $24r, _r, _r$1, _r$2, _tmp, _tmp$1, _v, _v$1, hash, inner, input, input$24ptr, pub, r, s, sig, $s};return $f;
	};
	$pkg.VerifyASN1 = VerifyASN1;
	ptrType$1.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PublicKey], [$Bool], false)}];
	invertible.init([{prop: "Inverse", name: "Inverse", pkg: "", typ: $funcType([ptrType], [ptrType], false)}]);
	combinedMult.init([{prop: "CombinedMult", name: "CombinedMult", pkg: "", typ: $funcType([ptrType, ptrType, sliceType, sliceType], [ptrType, ptrType], false)}]);
	PublicKey.init("", [{prop: "Curve", name: "Curve", embedded: true, exported: true, typ: elliptic.Curve, tag: ""}, {prop: "X", name: "X", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "Y", name: "Y", embedded: false, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = aes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cipher.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elliptic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = boring.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bbig.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = randutil.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha512.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cryptobyte.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		one = new big.Int.ptr(false, big.nat.nil).SetInt64(new $Int64(0, 1));
		errZeroParam = errors.New("zero parameter");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/edwards25519/field"] = (function() {
	var $pkg = {}, $init, subtle, binary, errors, bits, uint128, Element, ptrType, arrayType, arrayType$1, sliceType, ptrType$1, feZero, feOne, sqrtM1, mul64, addMul64, shiftRightBy51, feMulGeneric, feSquareGeneric, feMul, feSquare, mask64Bits, mul51;
	subtle = $packages["crypto/subtle"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	bits = $packages["math/bits"];
	uint128 = $pkg.uint128 = $newType(0, $kindStruct, "field.uint128", true, "crypto/internal/edwards25519/field", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = new $Uint64(0, 0);
			this.hi = new $Uint64(0, 0);
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	Element = $pkg.Element = $newType(0, $kindStruct, "field.Element", true, "crypto/internal/edwards25519/field", true, function(l0_, l1_, l2_, l3_, l4_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.l0 = new $Uint64(0, 0);
			this.l1 = new $Uint64(0, 0);
			this.l2 = new $Uint64(0, 0);
			this.l3 = new $Uint64(0, 0);
			this.l4 = new $Uint64(0, 0);
			return;
		}
		this.l0 = l0_;
		this.l1 = l1_;
		this.l2 = l2_;
		this.l3 = l3_;
		this.l4 = l4_;
	});
	ptrType = $ptrType(Element);
	arrayType = $arrayType($Uint8, 32);
	arrayType$1 = $arrayType($Uint8, 8);
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(arrayType);
	mul64 = function(a, b) {
		var _tuple, a, b, hi, lo;
		_tuple = bits.Mul64(a, b);
		hi = _tuple[0];
		lo = _tuple[1];
		return new uint128.ptr(lo, hi);
	};
	addMul64 = function(v, a, b) {
		var _tuple, _tuple$1, _tuple$2, a, b, c, hi, lo, v;
		_tuple = bits.Mul64(a, b);
		hi = _tuple[0];
		lo = _tuple[1];
		_tuple$1 = bits.Add64(lo, v.lo, new $Uint64(0, 0));
		lo = _tuple$1[0];
		c = _tuple$1[1];
		_tuple$2 = bits.Add64(hi, v.hi, c);
		hi = _tuple$2[0];
		return new uint128.ptr(lo, hi);
	};
	shiftRightBy51 = function(a) {
		var a, x, x$1;
		return (x = $shiftLeft64(a.hi, 13), x$1 = $shiftRightUint64(a.lo, 51), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
	};
	feMulGeneric = function(v, a, b) {
		var a, a0, a1, a1_19, a2, a2_19, a3, a3_19, a4, a4_19, b, b0, b1, b2, b3, b4, c0, c1, c2, c3, c4, r0, r1, r2, r3, r4, rr0, rr1, rr2, rr3, rr4, v, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		a0 = a.l0;
		a1 = a.l1;
		a2 = a.l2;
		a3 = a.l3;
		a4 = a.l4;
		b0 = b.l0;
		b1 = b.l1;
		b2 = b.l2;
		b3 = b.l3;
		b4 = b.l4;
		a1_19 = $mul64(a1, new $Uint64(0, 19));
		a2_19 = $mul64(a2, new $Uint64(0, 19));
		a3_19 = $mul64(a3, new $Uint64(0, 19));
		a4_19 = $mul64(a4, new $Uint64(0, 19));
		r0 = $clone(mul64(a0, b0), uint128);
		uint128.copy(r0, addMul64($clone(r0, uint128), a1_19, b4));
		uint128.copy(r0, addMul64($clone(r0, uint128), a2_19, b3));
		uint128.copy(r0, addMul64($clone(r0, uint128), a3_19, b2));
		uint128.copy(r0, addMul64($clone(r0, uint128), a4_19, b1));
		r1 = $clone(mul64(a0, b1), uint128);
		uint128.copy(r1, addMul64($clone(r1, uint128), a1, b0));
		uint128.copy(r1, addMul64($clone(r1, uint128), a2_19, b4));
		uint128.copy(r1, addMul64($clone(r1, uint128), a3_19, b3));
		uint128.copy(r1, addMul64($clone(r1, uint128), a4_19, b2));
		r2 = $clone(mul64(a0, b2), uint128);
		uint128.copy(r2, addMul64($clone(r2, uint128), a1, b1));
		uint128.copy(r2, addMul64($clone(r2, uint128), a2, b0));
		uint128.copy(r2, addMul64($clone(r2, uint128), a3_19, b4));
		uint128.copy(r2, addMul64($clone(r2, uint128), a4_19, b3));
		r3 = $clone(mul64(a0, b3), uint128);
		uint128.copy(r3, addMul64($clone(r3, uint128), a1, b2));
		uint128.copy(r3, addMul64($clone(r3, uint128), a2, b1));
		uint128.copy(r3, addMul64($clone(r3, uint128), a3, b0));
		uint128.copy(r3, addMul64($clone(r3, uint128), a4_19, b4));
		r4 = $clone(mul64(a0, b4), uint128);
		uint128.copy(r4, addMul64($clone(r4, uint128), a1, b3));
		uint128.copy(r4, addMul64($clone(r4, uint128), a2, b2));
		uint128.copy(r4, addMul64($clone(r4, uint128), a3, b1));
		uint128.copy(r4, addMul64($clone(r4, uint128), a4, b0));
		c0 = shiftRightBy51($clone(r0, uint128));
		c1 = shiftRightBy51($clone(r1, uint128));
		c2 = shiftRightBy51($clone(r2, uint128));
		c3 = shiftRightBy51($clone(r3, uint128));
		c4 = shiftRightBy51($clone(r4, uint128));
		rr0 = (x = (x$1 = r0.lo, new $Uint64(x$1.$high & 524287, (x$1.$low & 4294967295) >>> 0)), x$2 = $mul64(c4, new $Uint64(0, 19)), new $Uint64(x.$high + x$2.$high, x.$low + x$2.$low));
		rr1 = (x$3 = (x$4 = r1.lo, new $Uint64(x$4.$high & 524287, (x$4.$low & 4294967295) >>> 0)), new $Uint64(x$3.$high + c0.$high, x$3.$low + c0.$low));
		rr2 = (x$5 = (x$6 = r2.lo, new $Uint64(x$6.$high & 524287, (x$6.$low & 4294967295) >>> 0)), new $Uint64(x$5.$high + c1.$high, x$5.$low + c1.$low));
		rr3 = (x$7 = (x$8 = r3.lo, new $Uint64(x$8.$high & 524287, (x$8.$low & 4294967295) >>> 0)), new $Uint64(x$7.$high + c2.$high, x$7.$low + c2.$low));
		rr4 = (x$9 = (x$10 = r4.lo, new $Uint64(x$10.$high & 524287, (x$10.$low & 4294967295) >>> 0)), new $Uint64(x$9.$high + c3.$high, x$9.$low + c3.$low));
		Element.copy(v, new Element.ptr(rr0, rr1, rr2, rr3, rr4));
		v.carryPropagate();
	};
	feSquareGeneric = function(v, a) {
		var a, c0, c1, c2, c3, c4, l0, l0_2, l1, l1_2, l1_38, l2, l2_38, l3, l3_19, l3_38, l4, l4_19, r0, r1, r2, r3, r4, rr0, rr1, rr2, rr3, rr4, v, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		l0 = a.l0;
		l1 = a.l1;
		l2 = a.l2;
		l3 = a.l3;
		l4 = a.l4;
		l0_2 = $mul64(l0, new $Uint64(0, 2));
		l1_2 = $mul64(l1, new $Uint64(0, 2));
		l1_38 = $mul64(l1, new $Uint64(0, 38));
		l2_38 = $mul64(l2, new $Uint64(0, 38));
		l3_38 = $mul64(l3, new $Uint64(0, 38));
		l3_19 = $mul64(l3, new $Uint64(0, 19));
		l4_19 = $mul64(l4, new $Uint64(0, 19));
		r0 = $clone(mul64(l0, l0), uint128);
		uint128.copy(r0, addMul64($clone(r0, uint128), l1_38, l4));
		uint128.copy(r0, addMul64($clone(r0, uint128), l2_38, l3));
		r1 = $clone(mul64(l0_2, l1), uint128);
		uint128.copy(r1, addMul64($clone(r1, uint128), l2_38, l4));
		uint128.copy(r1, addMul64($clone(r1, uint128), l3_19, l3));
		r2 = $clone(mul64(l0_2, l2), uint128);
		uint128.copy(r2, addMul64($clone(r2, uint128), l1, l1));
		uint128.copy(r2, addMul64($clone(r2, uint128), l3_38, l4));
		r3 = $clone(mul64(l0_2, l3), uint128);
		uint128.copy(r3, addMul64($clone(r3, uint128), l1_2, l2));
		uint128.copy(r3, addMul64($clone(r3, uint128), l4_19, l4));
		r4 = $clone(mul64(l0_2, l4), uint128);
		uint128.copy(r4, addMul64($clone(r4, uint128), l1_2, l3));
		uint128.copy(r4, addMul64($clone(r4, uint128), l2, l2));
		c0 = shiftRightBy51($clone(r0, uint128));
		c1 = shiftRightBy51($clone(r1, uint128));
		c2 = shiftRightBy51($clone(r2, uint128));
		c3 = shiftRightBy51($clone(r3, uint128));
		c4 = shiftRightBy51($clone(r4, uint128));
		rr0 = (x = (x$1 = r0.lo, new $Uint64(x$1.$high & 524287, (x$1.$low & 4294967295) >>> 0)), x$2 = $mul64(c4, new $Uint64(0, 19)), new $Uint64(x.$high + x$2.$high, x.$low + x$2.$low));
		rr1 = (x$3 = (x$4 = r1.lo, new $Uint64(x$4.$high & 524287, (x$4.$low & 4294967295) >>> 0)), new $Uint64(x$3.$high + c0.$high, x$3.$low + c0.$low));
		rr2 = (x$5 = (x$6 = r2.lo, new $Uint64(x$6.$high & 524287, (x$6.$low & 4294967295) >>> 0)), new $Uint64(x$5.$high + c1.$high, x$5.$low + c1.$low));
		rr3 = (x$7 = (x$8 = r3.lo, new $Uint64(x$8.$high & 524287, (x$8.$low & 4294967295) >>> 0)), new $Uint64(x$7.$high + c2.$high, x$7.$low + c2.$low));
		rr4 = (x$9 = (x$10 = r4.lo, new $Uint64(x$10.$high & 524287, (x$10.$low & 4294967295) >>> 0)), new $Uint64(x$9.$high + c3.$high, x$9.$low + c3.$low));
		Element.copy(v, new Element.ptr(rr0, rr1, rr2, rr3, rr4));
		v.carryPropagate();
	};
	Element.ptr.prototype.carryPropagateGeneric = function() {
		var c0, c1, c2, c3, c4, v, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		c0 = $shiftRightUint64(v.l0, 51);
		c1 = $shiftRightUint64(v.l1, 51);
		c2 = $shiftRightUint64(v.l2, 51);
		c3 = $shiftRightUint64(v.l3, 51);
		c4 = $shiftRightUint64(v.l4, 51);
		v.l0 = (x = (x$1 = v.l0, new $Uint64(x$1.$high & 524287, (x$1.$low & 4294967295) >>> 0)), x$2 = $mul64(c4, new $Uint64(0, 19)), new $Uint64(x.$high + x$2.$high, x.$low + x$2.$low));
		v.l1 = (x$3 = (x$4 = v.l1, new $Uint64(x$4.$high & 524287, (x$4.$low & 4294967295) >>> 0)), new $Uint64(x$3.$high + c0.$high, x$3.$low + c0.$low));
		v.l2 = (x$5 = (x$6 = v.l2, new $Uint64(x$6.$high & 524287, (x$6.$low & 4294967295) >>> 0)), new $Uint64(x$5.$high + c1.$high, x$5.$low + c1.$low));
		v.l3 = (x$7 = (x$8 = v.l3, new $Uint64(x$8.$high & 524287, (x$8.$low & 4294967295) >>> 0)), new $Uint64(x$7.$high + c2.$high, x$7.$low + c2.$low));
		v.l4 = (x$9 = (x$10 = v.l4, new $Uint64(x$10.$high & 524287, (x$10.$low & 4294967295) >>> 0)), new $Uint64(x$9.$high + c3.$high, x$9.$low + c3.$low));
		return v;
	};
	Element.prototype.carryPropagateGeneric = function() { return this.$val.carryPropagateGeneric(); };
	Element.ptr.prototype.carryPropagate = function() {
		var v;
		v = this;
		return v.carryPropagateGeneric();
	};
	Element.prototype.carryPropagate = function() { return this.$val.carryPropagate(); };
	feMul = function(v, x, y) {
		var v, x, y;
		feMulGeneric(v, x, y);
	};
	feSquare = function(v, x) {
		var v, x;
		feSquareGeneric(v, x);
	};
	Element.ptr.prototype.Zero = function() {
		var v;
		v = this;
		Element.copy(v, feZero);
		return v;
	};
	Element.prototype.Zero = function() { return this.$val.Zero(); };
	Element.ptr.prototype.One = function() {
		var v;
		v = this;
		Element.copy(v, feOne);
		return v;
	};
	Element.prototype.One = function() { return this.$val.One(); };
	Element.ptr.prototype.reduce = function() {
		var c, v, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		v.carryPropagate();
		c = $shiftRightUint64(((x = v.l0, new $Uint64(x.$high + 0, x.$low + 19))), 51);
		c = $shiftRightUint64(((x$1 = v.l1, new $Uint64(x$1.$high + c.$high, x$1.$low + c.$low))), 51);
		c = $shiftRightUint64(((x$2 = v.l2, new $Uint64(x$2.$high + c.$high, x$2.$low + c.$low))), 51);
		c = $shiftRightUint64(((x$3 = v.l3, new $Uint64(x$3.$high + c.$high, x$3.$low + c.$low))), 51);
		c = $shiftRightUint64(((x$4 = v.l4, new $Uint64(x$4.$high + c.$high, x$4.$low + c.$low))), 51);
		v.l0 = (x$5 = v.l0, x$6 = $mul64(new $Uint64(0, 19), c), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		v.l1 = (x$7 = v.l1, x$8 = $shiftRightUint64(v.l0, 51), new $Uint64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		v.l0 = (x$9 = v.l0, new $Uint64(x$9.$high & 524287, (x$9.$low & 4294967295) >>> 0));
		v.l2 = (x$10 = v.l2, x$11 = $shiftRightUint64(v.l1, 51), new $Uint64(x$10.$high + x$11.$high, x$10.$low + x$11.$low));
		v.l1 = (x$12 = v.l1, new $Uint64(x$12.$high & 524287, (x$12.$low & 4294967295) >>> 0));
		v.l3 = (x$13 = v.l3, x$14 = $shiftRightUint64(v.l2, 51), new $Uint64(x$13.$high + x$14.$high, x$13.$low + x$14.$low));
		v.l2 = (x$15 = v.l2, new $Uint64(x$15.$high & 524287, (x$15.$low & 4294967295) >>> 0));
		v.l4 = (x$16 = v.l4, x$17 = $shiftRightUint64(v.l3, 51), new $Uint64(x$16.$high + x$17.$high, x$16.$low + x$17.$low));
		v.l3 = (x$18 = v.l3, new $Uint64(x$18.$high & 524287, (x$18.$low & 4294967295) >>> 0));
		v.l4 = (x$19 = v.l4, new $Uint64(x$19.$high & 524287, (x$19.$low & 4294967295) >>> 0));
		return v;
	};
	Element.prototype.reduce = function() { return this.$val.reduce(); };
	Element.ptr.prototype.Add = function(a, b) {
		var a, b, v, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		v.l0 = (x = a.l0, x$1 = b.l0, new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		v.l1 = (x$2 = a.l1, x$3 = b.l1, new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		v.l2 = (x$4 = a.l2, x$5 = b.l2, new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		v.l3 = (x$6 = a.l3, x$7 = b.l3, new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		v.l4 = (x$8 = a.l4, x$9 = b.l4, new $Uint64(x$8.$high + x$9.$high, x$8.$low + x$9.$low));
		return v.carryPropagateGeneric();
	};
	Element.prototype.Add = function(a, b) { return this.$val.Add(a, b); };
	Element.ptr.prototype.Subtract = function(a, b) {
		var a, b, v, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		v.l0 = (x = (x$1 = a.l0, new $Uint64(x$1.$high + 1048575, x$1.$low + 4294967258)), x$2 = b.l0, new $Uint64(x.$high - x$2.$high, x.$low - x$2.$low));
		v.l1 = (x$3 = (x$4 = a.l1, new $Uint64(x$4.$high + 1048575, x$4.$low + 4294967294)), x$5 = b.l1, new $Uint64(x$3.$high - x$5.$high, x$3.$low - x$5.$low));
		v.l2 = (x$6 = (x$7 = a.l2, new $Uint64(x$7.$high + 1048575, x$7.$low + 4294967294)), x$8 = b.l2, new $Uint64(x$6.$high - x$8.$high, x$6.$low - x$8.$low));
		v.l3 = (x$9 = (x$10 = a.l3, new $Uint64(x$10.$high + 1048575, x$10.$low + 4294967294)), x$11 = b.l3, new $Uint64(x$9.$high - x$11.$high, x$9.$low - x$11.$low));
		v.l4 = (x$12 = (x$13 = a.l4, new $Uint64(x$13.$high + 1048575, x$13.$low + 4294967294)), x$14 = b.l4, new $Uint64(x$12.$high - x$14.$high, x$12.$low - x$14.$low));
		return v.carryPropagate();
	};
	Element.prototype.Subtract = function(a, b) { return this.$val.Subtract(a, b); };
	Element.ptr.prototype.Negate = function(a) {
		var a, v;
		v = this;
		return v.Subtract(feZero, a);
	};
	Element.prototype.Negate = function(a) { return this.$val.Negate(a); };
	Element.ptr.prototype.Invert = function(z) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, i$1, i$2, i$3, i$4, i$5, i$6, t, v, z, z11, z2, z2_100_0, z2_10_0, z2_20_0, z2_50_0, z2_5_0, z9;
		v = this;
		_tmp = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$4 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$5 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$6 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$7 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$8 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		z2 = $clone(_tmp, Element);
		z9 = $clone(_tmp$1, Element);
		z11 = $clone(_tmp$2, Element);
		z2_5_0 = $clone(_tmp$3, Element);
		z2_10_0 = $clone(_tmp$4, Element);
		z2_20_0 = $clone(_tmp$5, Element);
		z2_50_0 = $clone(_tmp$6, Element);
		z2_100_0 = $clone(_tmp$7, Element);
		t = $clone(_tmp$8, Element);
		z2.Square(z);
		t.Square(z2);
		t.Square(t);
		z9.Multiply(t, z);
		z11.Multiply(z9, z2);
		t.Square(z11);
		z2_5_0.Multiply(t, z9);
		t.Square(z2_5_0);
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			t.Square(t);
			i = i + (1) >> 0;
		}
		z2_10_0.Multiply(t, z2_5_0);
		t.Square(z2_10_0);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 9)) { break; }
			t.Square(t);
			i$1 = i$1 + (1) >> 0;
		}
		z2_20_0.Multiply(t, z2_10_0);
		t.Square(z2_20_0);
		i$2 = 0;
		while (true) {
			if (!(i$2 < 19)) { break; }
			t.Square(t);
			i$2 = i$2 + (1) >> 0;
		}
		t.Multiply(t, z2_20_0);
		t.Square(t);
		i$3 = 0;
		while (true) {
			if (!(i$3 < 9)) { break; }
			t.Square(t);
			i$3 = i$3 + (1) >> 0;
		}
		z2_50_0.Multiply(t, z2_10_0);
		t.Square(z2_50_0);
		i$4 = 0;
		while (true) {
			if (!(i$4 < 49)) { break; }
			t.Square(t);
			i$4 = i$4 + (1) >> 0;
		}
		z2_100_0.Multiply(t, z2_50_0);
		t.Square(z2_100_0);
		i$5 = 0;
		while (true) {
			if (!(i$5 < 99)) { break; }
			t.Square(t);
			i$5 = i$5 + (1) >> 0;
		}
		t.Multiply(t, z2_100_0);
		t.Square(t);
		i$6 = 0;
		while (true) {
			if (!(i$6 < 49)) { break; }
			t.Square(t);
			i$6 = i$6 + (1) >> 0;
		}
		t.Multiply(t, z2_50_0);
		t.Square(t);
		t.Square(t);
		t.Square(t);
		t.Square(t);
		t.Square(t);
		return v.Multiply(t, z11);
	};
	Element.prototype.Invert = function(z) { return this.$val.Invert(z); };
	Element.ptr.prototype.Set = function(a) {
		var a, v;
		v = this;
		Element.copy(v, a);
		return v;
	};
	Element.prototype.Set = function(a) { return this.$val.Set(a); };
	Element.ptr.prototype.SetBytes = function(x) {
		var v, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		if (!((x.$length === 32))) {
			return [ptrType.nil, errors.New("edwards25519: invalid field element input size")];
		}
		v.l0 = $clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(x, 0, 8));
		v.l0 = (x$1 = v.l0, x$2 = new $Uint64(524287, 4294967295), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0));
		v.l1 = $shiftRightUint64($clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(x, 6, 14)), 3);
		v.l1 = (x$3 = v.l1, x$4 = new $Uint64(524287, 4294967295), new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0));
		v.l2 = $shiftRightUint64($clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(x, 12, 20)), 6);
		v.l2 = (x$5 = v.l2, x$6 = new $Uint64(524287, 4294967295), new $Uint64(x$5.$high & x$6.$high, (x$5.$low & x$6.$low) >>> 0));
		v.l3 = $shiftRightUint64($clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(x, 19, 27)), 1);
		v.l3 = (x$7 = v.l3, x$8 = new $Uint64(524287, 4294967295), new $Uint64(x$7.$high & x$8.$high, (x$7.$low & x$8.$low) >>> 0));
		v.l4 = $shiftRightUint64($clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(x, 24, 32)), 12);
		v.l4 = (x$9 = v.l4, x$10 = new $Uint64(524287, 4294967295), new $Uint64(x$9.$high & x$10.$high, (x$9.$low & x$10.$low) >>> 0));
		return [v, $ifaceNil];
	};
	Element.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Element.ptr.prototype.Bytes = function() {
		var out, v;
		v = this;
		out = arrayType.zero();
		return v.bytes(out);
	};
	Element.prototype.Bytes = function() { return this.$val.Bytes(); };
	Element.ptr.prototype.bytes = function(out) {
		var _i, _i$1, _q, _r, _ref, _ref$1, bb, bitsOffset, buf, i, i$1, l, off, out, t, v, x, x$1;
		v = this;
		t = $clone(v, Element);
		t.reduce();
		buf = arrayType$1.zero();
		_ref = $toNativeArray($kindUint64, [t.l0, t.l1, t.l2, t.l3, t.l4]);
		_i = 0;
		while (true) {
			if (!(_i < 5)) { break; }
			i = _i;
			l = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			bitsOffset = $imul(i, 51);
			$clone(binary.LittleEndian, binary.littleEndian).PutUint64(new sliceType(buf), $shiftLeft64(l, (((_r = bitsOffset % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0))));
			_ref$1 = buf;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < 8)) { break; }
				i$1 = _i$1;
				bb = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
				off = (_q = bitsOffset / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + i$1 >> 0;
				if (off >= 32) {
					break;
				}
				(x$1 = out, ((off < 0 || off >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[off] = (((x = out, ((off < 0 || off >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[off])) | (bb)) >>> 0)));
				_i$1++;
			}
			_i++;
		}
		return new sliceType(out);
	};
	Element.prototype.bytes = function(out) { return this.$val.bytes(out); };
	Element.ptr.prototype.Equal = function(u) {
		var _tmp, _tmp$1, sa, sv, u, v;
		v = this;
		_tmp = u.Bytes();
		_tmp$1 = v.Bytes();
		sa = _tmp;
		sv = _tmp$1;
		return subtle.ConstantTimeCompare(sa, sv);
	};
	Element.prototype.Equal = function(u) { return this.$val.Equal(u); };
	mask64Bits = function(cond) {
		var cond, x, x$1;
		return (x = (x$1 = (new $Uint64(0, cond)), new $Uint64(x$1.$high - 0, x$1.$low - 1)), new $Uint64(~x.$high, ~x.$low >>> 0));
	};
	Element.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, m, v, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		m = mask64Bits(cond);
		v.l0 = (x = (x$1 = a.l0, new $Uint64(m.$high & x$1.$high, (m.$low & x$1.$low) >>> 0)), x$2 = (x$3 = new $Uint64(~m.$high, ~m.$low >>> 0), x$4 = b.l0, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		v.l1 = (x$5 = (x$6 = a.l1, new $Uint64(m.$high & x$6.$high, (m.$low & x$6.$low) >>> 0)), x$7 = (x$8 = new $Uint64(~m.$high, ~m.$low >>> 0), x$9 = b.l1, new $Uint64(x$8.$high & x$9.$high, (x$8.$low & x$9.$low) >>> 0)), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0));
		v.l2 = (x$10 = (x$11 = a.l2, new $Uint64(m.$high & x$11.$high, (m.$low & x$11.$low) >>> 0)), x$12 = (x$13 = new $Uint64(~m.$high, ~m.$low >>> 0), x$14 = b.l2, new $Uint64(x$13.$high & x$14.$high, (x$13.$low & x$14.$low) >>> 0)), new $Uint64(x$10.$high | x$12.$high, (x$10.$low | x$12.$low) >>> 0));
		v.l3 = (x$15 = (x$16 = a.l3, new $Uint64(m.$high & x$16.$high, (m.$low & x$16.$low) >>> 0)), x$17 = (x$18 = new $Uint64(~m.$high, ~m.$low >>> 0), x$19 = b.l3, new $Uint64(x$18.$high & x$19.$high, (x$18.$low & x$19.$low) >>> 0)), new $Uint64(x$15.$high | x$17.$high, (x$15.$low | x$17.$low) >>> 0));
		v.l4 = (x$20 = (x$21 = a.l4, new $Uint64(m.$high & x$21.$high, (m.$low & x$21.$low) >>> 0)), x$22 = (x$23 = new $Uint64(~m.$high, ~m.$low >>> 0), x$24 = b.l4, new $Uint64(x$23.$high & x$24.$high, (x$23.$low & x$24.$low) >>> 0)), new $Uint64(x$20.$high | x$22.$high, (x$20.$low | x$22.$low) >>> 0));
		return v;
	};
	Element.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	Element.ptr.prototype.Swap = function(u, cond) {
		var cond, m, t, u, v, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$4, x$5, x$6, x$7, x$8, x$9;
		v = this;
		m = mask64Bits(cond);
		t = (x = (x$1 = v.l0, x$2 = u.l0, new $Uint64(x$1.$high ^ x$2.$high, (x$1.$low ^ x$2.$low) >>> 0)), new $Uint64(m.$high & x.$high, (m.$low & x.$low) >>> 0));
		v.l0 = (x$3 = v.l0, x$4 = t, new $Uint64(x$3.$high ^ x$4.$high, (x$3.$low ^ x$4.$low) >>> 0));
		u.l0 = (x$5 = u.l0, x$6 = t, new $Uint64(x$5.$high ^ x$6.$high, (x$5.$low ^ x$6.$low) >>> 0));
		t = (x$7 = (x$8 = v.l1, x$9 = u.l1, new $Uint64(x$8.$high ^ x$9.$high, (x$8.$low ^ x$9.$low) >>> 0)), new $Uint64(m.$high & x$7.$high, (m.$low & x$7.$low) >>> 0));
		v.l1 = (x$10 = v.l1, x$11 = t, new $Uint64(x$10.$high ^ x$11.$high, (x$10.$low ^ x$11.$low) >>> 0));
		u.l1 = (x$12 = u.l1, x$13 = t, new $Uint64(x$12.$high ^ x$13.$high, (x$12.$low ^ x$13.$low) >>> 0));
		t = (x$14 = (x$15 = v.l2, x$16 = u.l2, new $Uint64(x$15.$high ^ x$16.$high, (x$15.$low ^ x$16.$low) >>> 0)), new $Uint64(m.$high & x$14.$high, (m.$low & x$14.$low) >>> 0));
		v.l2 = (x$17 = v.l2, x$18 = t, new $Uint64(x$17.$high ^ x$18.$high, (x$17.$low ^ x$18.$low) >>> 0));
		u.l2 = (x$19 = u.l2, x$20 = t, new $Uint64(x$19.$high ^ x$20.$high, (x$19.$low ^ x$20.$low) >>> 0));
		t = (x$21 = (x$22 = v.l3, x$23 = u.l3, new $Uint64(x$22.$high ^ x$23.$high, (x$22.$low ^ x$23.$low) >>> 0)), new $Uint64(m.$high & x$21.$high, (m.$low & x$21.$low) >>> 0));
		v.l3 = (x$24 = v.l3, x$25 = t, new $Uint64(x$24.$high ^ x$25.$high, (x$24.$low ^ x$25.$low) >>> 0));
		u.l3 = (x$26 = u.l3, x$27 = t, new $Uint64(x$26.$high ^ x$27.$high, (x$26.$low ^ x$27.$low) >>> 0));
		t = (x$28 = (x$29 = v.l4, x$30 = u.l4, new $Uint64(x$29.$high ^ x$30.$high, (x$29.$low ^ x$30.$low) >>> 0)), new $Uint64(m.$high & x$28.$high, (m.$low & x$28.$low) >>> 0));
		v.l4 = (x$31 = v.l4, x$32 = t, new $Uint64(x$31.$high ^ x$32.$high, (x$31.$low ^ x$32.$low) >>> 0));
		u.l4 = (x$33 = u.l4, x$34 = t, new $Uint64(x$33.$high ^ x$34.$high, (x$33.$low ^ x$34.$low) >>> 0));
	};
	Element.prototype.Swap = function(u, cond) { return this.$val.Swap(u, cond); };
	Element.ptr.prototype.IsNegative = function() {
		var v, x;
		v = this;
		return (((((x = v.Bytes(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) & 1) >>> 0) >> 0));
	};
	Element.prototype.IsNegative = function() { return this.$val.IsNegative(); };
	Element.ptr.prototype.Absolute = function(u) {
		var u, v;
		v = this;
		return v.Select(new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Negate(u), u, u.IsNegative());
	};
	Element.prototype.Absolute = function(u) { return this.$val.Absolute(u); };
	Element.ptr.prototype.Multiply = function(x, y) {
		var v, x, y;
		v = this;
		feMul(v, x, y);
		return v;
	};
	Element.prototype.Multiply = function(x, y) { return this.$val.Multiply(x, y); };
	Element.ptr.prototype.Square = function(x) {
		var v, x;
		v = this;
		feSquare(v, x);
		return v;
	};
	Element.prototype.Square = function(x) { return this.$val.Square(x); };
	Element.ptr.prototype.Mult32 = function(x, y) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, v, x, x$1, x0hi, x0lo, x1hi, x1lo, x2hi, x2lo, x3hi, x3lo, x4hi, x4lo, y;
		v = this;
		_tuple = mul51(x.l0, y);
		x0lo = _tuple[0];
		x0hi = _tuple[1];
		_tuple$1 = mul51(x.l1, y);
		x1lo = _tuple$1[0];
		x1hi = _tuple$1[1];
		_tuple$2 = mul51(x.l2, y);
		x2lo = _tuple$2[0];
		x2hi = _tuple$2[1];
		_tuple$3 = mul51(x.l3, y);
		x3lo = _tuple$3[0];
		x3hi = _tuple$3[1];
		_tuple$4 = mul51(x.l4, y);
		x4lo = _tuple$4[0];
		x4hi = _tuple$4[1];
		v.l0 = (x$1 = $mul64(new $Uint64(0, 19), x4hi), new $Uint64(x0lo.$high + x$1.$high, x0lo.$low + x$1.$low));
		v.l1 = new $Uint64(x1lo.$high + x0hi.$high, x1lo.$low + x0hi.$low);
		v.l2 = new $Uint64(x2lo.$high + x1hi.$high, x2lo.$low + x1hi.$low);
		v.l3 = new $Uint64(x3lo.$high + x2hi.$high, x3lo.$low + x2hi.$low);
		v.l4 = new $Uint64(x4lo.$high + x3hi.$high, x4lo.$low + x3hi.$low);
		return v;
	};
	Element.prototype.Mult32 = function(x, y) { return this.$val.Mult32(x, y); };
	mul51 = function(a, b) {
		var _tuple, a, b, hi, lo, mh, ml, x, x$1;
		lo = new $Uint64(0, 0);
		hi = new $Uint64(0, 0);
		_tuple = bits.Mul64(a, (new $Uint64(0, b)));
		mh = _tuple[0];
		ml = _tuple[1];
		lo = new $Uint64(ml.$high & 524287, (ml.$low & 4294967295) >>> 0);
		hi = (x = $shiftLeft64(mh, 13), x$1 = $shiftRightUint64(ml, 51), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		return [lo, hi];
	};
	Element.ptr.prototype.Pow22523 = function(x) {
		var _tmp, _tmp$1, _tmp$2, i, i$1, i$2, i$3, i$4, i$5, i$6, t0, t1, t2, v, x;
		v = this;
		_tmp = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		t0 = $clone(_tmp, Element);
		t1 = $clone(_tmp$1, Element);
		t2 = $clone(_tmp$2, Element);
		t0.Square(x);
		t1.Square(t0);
		t1.Square(t1);
		t1.Multiply(x, t1);
		t0.Multiply(t0, t1);
		t0.Square(t0);
		t0.Multiply(t1, t0);
		t1.Square(t0);
		i = 1;
		while (true) {
			if (!(i < 5)) { break; }
			t1.Square(t1);
			i = i + (1) >> 0;
		}
		t0.Multiply(t1, t0);
		t1.Square(t0);
		i$1 = 1;
		while (true) {
			if (!(i$1 < 10)) { break; }
			t1.Square(t1);
			i$1 = i$1 + (1) >> 0;
		}
		t1.Multiply(t1, t0);
		t2.Square(t1);
		i$2 = 1;
		while (true) {
			if (!(i$2 < 20)) { break; }
			t2.Square(t2);
			i$2 = i$2 + (1) >> 0;
		}
		t1.Multiply(t2, t1);
		t1.Square(t1);
		i$3 = 1;
		while (true) {
			if (!(i$3 < 10)) { break; }
			t1.Square(t1);
			i$3 = i$3 + (1) >> 0;
		}
		t0.Multiply(t1, t0);
		t1.Square(t0);
		i$4 = 1;
		while (true) {
			if (!(i$4 < 50)) { break; }
			t1.Square(t1);
			i$4 = i$4 + (1) >> 0;
		}
		t1.Multiply(t1, t0);
		t2.Square(t1);
		i$5 = 1;
		while (true) {
			if (!(i$5 < 100)) { break; }
			t2.Square(t2);
			i$5 = i$5 + (1) >> 0;
		}
		t1.Multiply(t2, t1);
		t1.Square(t1);
		i$6 = 1;
		while (true) {
			if (!(i$6 < 50)) { break; }
			t1.Square(t1);
			i$6 = i$6 + (1) >> 0;
		}
		t0.Multiply(t1, t0);
		t0.Square(t0);
		t0.Square(t0);
		return v.Multiply(t0, x);
	};
	Element.prototype.Pow22523 = function(x) { return this.$val.Pow22523(x); };
	Element.ptr.prototype.SqrtRatio = function(u, v) {
		var R, _tmp, _tmp$1, check, correctSignSqrt, flippedSignSqrt, flippedSignSqrtI, r, rPrime, rr, t0, u, uNeg, uv3, uv7, v, v2, wasSquare;
		R = ptrType.nil;
		wasSquare = 0;
		r = this;
		t0 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		v2 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Square(v);
		uv3 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(u, t0.Multiply(v2, v));
		uv7 = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(uv3, t0.Square(v2));
		rr = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(uv3, t0.Pow22523(uv7));
		check = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(v, t0.Square(rr));
		uNeg = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Negate(u);
		correctSignSqrt = check.Equal(u);
		flippedSignSqrt = check.Equal(uNeg);
		flippedSignSqrtI = check.Equal(t0.Multiply(uNeg, sqrtM1));
		rPrime = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(rr, sqrtM1);
		rr.Select(rPrime, rr, flippedSignSqrt | flippedSignSqrtI);
		r.Absolute(rr);
		_tmp = r;
		_tmp$1 = correctSignSqrt | flippedSignSqrt;
		R = _tmp;
		wasSquare = _tmp$1;
		return [R, wasSquare];
	};
	Element.prototype.SqrtRatio = function(u, v) { return this.$val.SqrtRatio(u, v); };
	ptrType.methods = [{prop: "carryPropagateGeneric", name: "carryPropagateGeneric", pkg: "crypto/internal/edwards25519/field", typ: $funcType([], [ptrType], false)}, {prop: "carryPropagate", name: "carryPropagate", pkg: "crypto/internal/edwards25519/field", typ: $funcType([], [ptrType], false)}, {prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "One", name: "One", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "reduce", name: "reduce", pkg: "crypto/internal/edwards25519/field", typ: $funcType([], [ptrType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Subtract", name: "Subtract", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Invert", name: "Invert", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/edwards25519/field", typ: $funcType([ptrType$1], [sliceType], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType, ptrType, $Int], [ptrType], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([ptrType, $Int], [], false)}, {prop: "IsNegative", name: "IsNegative", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Absolute", name: "Absolute", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Square", name: "Square", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Mult32", name: "Mult32", pkg: "", typ: $funcType([ptrType, $Uint32], [ptrType], false)}, {prop: "Pow22523", name: "Pow22523", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "SqrtRatio", name: "SqrtRatio", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType, $Int], false)}];
	uint128.init("crypto/internal/edwards25519/field", [{prop: "lo", name: "lo", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "hi", name: "hi", embedded: false, exported: false, typ: $Uint64, tag: ""}]);
	Element.init("crypto/internal/edwards25519/field", [{prop: "l0", name: "l0", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "l1", name: "l1", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "l2", name: "l2", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "l3", name: "l3", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "l4", name: "l4", embedded: false, exported: false, typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = subtle.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		feZero = new Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		feOne = new Element.ptr(new $Uint64(0, 1), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		sqrtM1 = new Element.ptr(new $Uint64(400167, 1242472624), new $Uint64(54693, 4237236381), new $Uint64(520030, 2629635168), new $Uint64(492949, 2793426078), new $Uint64(178226, 1208286237));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/internal/edwards25519"] = (function() {
	var $pkg = {}, $init, field, subtle, binary, errors, sync, projLookupTable, affineLookupTable, nafLookupTable5, nafLookupTable8, Scalar, projP1xP1, projP2, Point, incomparable, projCached, affineCached, arrayType, arrayType$1, structType, arrayType$2, structType$1, arrayType$3, sliceType, funcType, arrayType$4, arrayType$5, ptrType, sliceType$1, arrayType$6, arrayType$7, ptrType$1, arrayType$8, arrayType$9, arrayType$10, arrayType$11, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, basepointTablePrecomp, basepointNafTablePrecomp, scZero, scOne, scMinusOne, identity, generator, feOne, d, d2, _tuple, _tuple$1, _tuple$2, basepointTable, basepointNafTable, NewScalar, isReduced, load3, load4, scMulAdd, scReduce, checkInitialized, NewIdentityPoint, NewGeneratorPoint, copyFieldElement;
	field = $packages["crypto/internal/edwards25519/field"];
	subtle = $packages["crypto/subtle"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	sync = $packages["sync"];
	projLookupTable = $pkg.projLookupTable = $newType(0, $kindStruct, "edwards25519.projLookupTable", true, "crypto/internal/edwards25519", false, function(points_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.points = arrayType$6.zero();
			return;
		}
		this.points = points_;
	});
	affineLookupTable = $pkg.affineLookupTable = $newType(0, $kindStruct, "edwards25519.affineLookupTable", true, "crypto/internal/edwards25519", false, function(points_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.points = arrayType.zero();
			return;
		}
		this.points = points_;
	});
	nafLookupTable5 = $pkg.nafLookupTable5 = $newType(0, $kindStruct, "edwards25519.nafLookupTable5", true, "crypto/internal/edwards25519", false, function(points_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.points = arrayType$6.zero();
			return;
		}
		this.points = points_;
	});
	nafLookupTable8 = $pkg.nafLookupTable8 = $newType(0, $kindStruct, "edwards25519.nafLookupTable8", true, "crypto/internal/edwards25519", false, function(points_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.points = arrayType$2.zero();
			return;
		}
		this.points = points_;
	});
	Scalar = $pkg.Scalar = $newType(0, $kindStruct, "edwards25519.Scalar", true, "crypto/internal/edwards25519", true, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = arrayType$3.zero();
			return;
		}
		this.s = s_;
	});
	projP1xP1 = $pkg.projP1xP1 = $newType(0, $kindStruct, "edwards25519.projP1xP1", true, "crypto/internal/edwards25519", false, function(X_, Y_, Z_, T_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.Y = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.Z = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.T = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Z = Z_;
		this.T = T_;
	});
	projP2 = $pkg.projP2 = $newType(0, $kindStruct, "edwards25519.projP2", true, "crypto/internal/edwards25519", false, function(X_, Y_, Z_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.Y = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.Z = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Z = Z_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "edwards25519.Point", true, "crypto/internal/edwards25519", true, function(x_, y_, z_, t_, _$4_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.y = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.z = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.t = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this._$4 = arrayType$4.zero();
			return;
		}
		this.x = x_;
		this.y = y_;
		this.z = z_;
		this.t = t_;
		this._$4 = _$4_;
	});
	incomparable = $pkg.incomparable = $newType(0, $kindArray, "edwards25519.incomparable", true, "crypto/internal/edwards25519", false, null);
	projCached = $pkg.projCached = $newType(0, $kindStruct, "edwards25519.projCached", true, "crypto/internal/edwards25519", false, function(YplusX_, YminusX_, Z_, T2d_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.YplusX = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.YminusX = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.Z = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.T2d = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			return;
		}
		this.YplusX = YplusX_;
		this.YminusX = YminusX_;
		this.Z = Z_;
		this.T2d = T2d_;
	});
	affineCached = $pkg.affineCached = $newType(0, $kindStruct, "edwards25519.affineCached", true, "crypto/internal/edwards25519", false, function(YplusX_, YminusX_, T2d_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.YplusX = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.YminusX = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			this.T2d = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
			return;
		}
		this.YplusX = YplusX_;
		this.YminusX = YminusX_;
		this.T2d = T2d_;
	});
	arrayType = $arrayType(affineCached, 8);
	arrayType$1 = $arrayType(affineLookupTable, 32);
	structType = $structType("crypto/internal/edwards25519", [{prop: "table", name: "table", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "initOnce", name: "initOnce", embedded: false, exported: false, typ: sync.Once, tag: ""}]);
	arrayType$2 = $arrayType(affineCached, 64);
	structType$1 = $structType("crypto/internal/edwards25519", [{prop: "table", name: "table", embedded: false, exported: false, typ: nafLookupTable8, tag: ""}, {prop: "initOnce", name: "initOnce", embedded: false, exported: false, typ: sync.Once, tag: ""}]);
	arrayType$3 = $arrayType($Uint8, 32);
	sliceType = $sliceType($Uint8);
	funcType = $funcType([], [], false);
	arrayType$4 = $arrayType(funcType, 0);
	arrayType$5 = $arrayType($Int8, 64);
	ptrType = $ptrType(Point);
	sliceType$1 = $sliceType(ptrType);
	arrayType$6 = $arrayType(projCached, 8);
	arrayType$7 = $arrayType($Int8, 256);
	ptrType$1 = $ptrType(Scalar);
	arrayType$8 = $arrayType($Uint8, 64);
	arrayType$9 = $arrayType($Int64, 23);
	arrayType$10 = $arrayType($Int64, 17);
	arrayType$11 = $arrayType($Uint64, 5);
	ptrType$2 = $ptrType(projCached);
	ptrType$3 = $ptrType(projLookupTable);
	ptrType$4 = $ptrType(affineCached);
	ptrType$5 = $ptrType(affineLookupTable);
	ptrType$6 = $ptrType(nafLookupTable5);
	ptrType$7 = $ptrType(nafLookupTable8);
	ptrType$8 = $ptrType(projP1xP1);
	ptrType$9 = $ptrType(projP2);
	ptrType$10 = $ptrType(arrayType$3);
	projLookupTable.ptr.prototype.FromP3 = function(q) {
		var i, q, tmpP1xP1, tmpP3, v, x, x$1, x$2;
		v = this;
		v.points[0].FromP3(q);
		tmpP3 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		tmpP1xP1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		i = 0;
		while (true) {
			if (!(i < 7)) { break; }
			(x = v.points, x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])).FromP3(tmpP3.fromP1xP1(tmpP1xP1.Add(q, (x$2 = v.points, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])))));
			i = i + (1) >> 0;
		}
	};
	projLookupTable.prototype.FromP3 = function(q) { return this.$val.FromP3(q); };
	affineLookupTable.ptr.prototype.FromP3 = function(q) {
		var i, q, tmpP1xP1, tmpP3, v, x, x$1, x$2;
		v = this;
		v.points[0].FromP3(q);
		tmpP3 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		tmpP1xP1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		i = 0;
		while (true) {
			if (!(i < 7)) { break; }
			(x = v.points, x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])).FromP3(tmpP3.fromP1xP1(tmpP1xP1.AddAffine(q, (x$2 = v.points, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])))));
			i = i + (1) >> 0;
		}
	};
	affineLookupTable.prototype.FromP3 = function(q) { return this.$val.FromP3(q); };
	nafLookupTable5.ptr.prototype.FromP3 = function(q) {
		var i, q, q2, tmpP1xP1, tmpP3, v, x, x$1, x$2;
		v = this;
		v.points[0].FromP3(q);
		q2 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		q2.Add(q, q);
		tmpP3 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		tmpP1xP1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		i = 0;
		while (true) {
			if (!(i < 7)) { break; }
			(x = v.points, x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])).FromP3(tmpP3.fromP1xP1(tmpP1xP1.Add(q2, (x$2 = v.points, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])))));
			i = i + (1) >> 0;
		}
	};
	nafLookupTable5.prototype.FromP3 = function(q) { return this.$val.FromP3(q); };
	nafLookupTable8.ptr.prototype.FromP3 = function(q) {
		var i, q, q2, tmpP1xP1, tmpP3, v, x, x$1, x$2;
		v = this;
		v.points[0].FromP3(q);
		q2 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		q2.Add(q, q);
		tmpP3 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero());
		tmpP1xP1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		i = 0;
		while (true) {
			if (!(i < 63)) { break; }
			(x = v.points, x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])).FromP3(tmpP3.fromP1xP1(tmpP1xP1.AddAffine(q2, (x$2 = v.points, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])))));
			i = i + (1) >> 0;
		}
	};
	nafLookupTable8.prototype.FromP3 = function(q) { return this.$val.FromP3(q); };
	projLookupTable.ptr.prototype.SelectInto = function(dest, x) {
		var cond, dest, j, v, x, x$1, x$2, xabs, xmask;
		v = this;
		xmask = x >> 7 << 24 >> 24;
		xabs = ((((((x + xmask << 24 >> 24)) ^ xmask) << 24 >> 24) << 24 >>> 24));
		dest.Zero();
		j = 1;
		while (true) {
			if (!(j <= 8)) { break; }
			cond = subtle.ConstantTimeByteEq(xabs, ((j << 24 >>> 24)));
			dest.Select((x$1 = v.points, x$2 = j - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), dest, cond);
			j = j + (1) >> 0;
		}
		dest.CondNeg((((xmask & 1) >> 0)));
	};
	projLookupTable.prototype.SelectInto = function(dest, x) { return this.$val.SelectInto(dest, x); };
	affineLookupTable.ptr.prototype.SelectInto = function(dest, x) {
		var cond, dest, j, v, x, x$1, x$2, xabs, xmask;
		v = this;
		xmask = x >> 7 << 24 >> 24;
		xabs = ((((((x + xmask << 24 >> 24)) ^ xmask) << 24 >> 24) << 24 >>> 24));
		dest.Zero();
		j = 1;
		while (true) {
			if (!(j <= 8)) { break; }
			cond = subtle.ConstantTimeByteEq(xabs, ((j << 24 >>> 24)));
			dest.Select((x$1 = v.points, x$2 = j - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), dest, cond);
			j = j + (1) >> 0;
		}
		dest.CondNeg((((xmask & 1) >> 0)));
	};
	affineLookupTable.prototype.SelectInto = function(dest, x) { return this.$val.SelectInto(dest, x); };
	nafLookupTable5.ptr.prototype.SelectInto = function(dest, x) {
		var _q, dest, v, x, x$1, x$2;
		v = this;
		projCached.copy(dest, (x$1 = v.points, x$2 = (_q = x / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])));
	};
	nafLookupTable5.prototype.SelectInto = function(dest, x) { return this.$val.SelectInto(dest, x); };
	nafLookupTable8.ptr.prototype.SelectInto = function(dest, x) {
		var _q, dest, v, x, x$1, x$2;
		v = this;
		affineCached.copy(dest, (x$1 = v.points, x$2 = (_q = x / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])));
	};
	nafLookupTable8.prototype.SelectInto = function(dest, x) { return this.$val.SelectInto(dest, x); };
	basepointTable = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = basepointTablePrecomp.initOnce.Do((function() {
			var i, j, p, x;
			p = NewGeneratorPoint();
			i = 0;
			while (true) {
				if (!(i < 32)) { break; }
				(x = basepointTablePrecomp.table, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])).FromP3(p);
				j = 0;
				while (true) {
					if (!(j < 8)) { break; }
					p.Add(p, p);
					j = j + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return basepointTablePrecomp.table;
		/* */ } return; } var $f = {$blk: basepointTable, $c: true, $r, $s};return $f;
	};
	Point.ptr.prototype.ScalarBaseMult = function(x) {
		var {_q, _q$1, _r, basepointTable$1, digits, i, i$1, multiple, tmp1, tmp2, v, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		_r = basepointTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		basepointTable$1 = _r;
		digits = $clone(x.signedRadix16(), arrayType$5);
		multiple = new affineCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp2 = new projP2.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		v.Set(NewIdentityPoint());
		i = 1;
		while (true) {
			if (!(i < 64)) { break; }
			(x$1 = basepointTable$1, x$2 = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])).SelectInto(multiple, ((i < 0 || i >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i]));
			tmp1.AddAffine(v, multiple);
			v.fromP1xP1(tmp1);
			i = i + (2) >> 0;
		}
		tmp2.FromP3(v);
		tmp1.Double(tmp2);
		tmp2.FromP1xP1(tmp1);
		tmp1.Double(tmp2);
		tmp2.FromP1xP1(tmp1);
		tmp1.Double(tmp2);
		tmp2.FromP1xP1(tmp1);
		tmp1.Double(tmp2);
		v.fromP1xP1(tmp1);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 64)) { break; }
			(x$3 = basepointTable$1, x$4 = (_q$1 = i$1 / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])).SelectInto(multiple, ((i$1 < 0 || i$1 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i$1]));
			tmp1.AddAffine(v, multiple);
			v.fromP1xP1(tmp1);
			i$1 = i$1 + (2) >> 0;
		}
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: Point.ptr.prototype.ScalarBaseMult, $c: true, $r, _q, _q$1, _r, basepointTable$1, digits, i, i$1, multiple, tmp1, tmp2, v, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Point.prototype.ScalarBaseMult = function(x) { return this.$val.ScalarBaseMult(x); };
	Point.ptr.prototype.ScalarMult = function(x, q) {
		var digits, i, multiple, q, table, tmp1, tmp2, v, x;
		v = this;
		checkInitialized(new sliceType$1([q]));
		table = new projLookupTable.ptr(arrayType$6.zero());
		table.FromP3(q);
		digits = $clone(x.signedRadix16(), arrayType$5);
		multiple = new projCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp2 = new projP2.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		table.SelectInto(multiple, digits[63]);
		v.Set(NewIdentityPoint());
		tmp1.Add(v, multiple);
		i = 62;
		while (true) {
			if (!(i >= 0)) { break; }
			tmp2.FromP1xP1(tmp1);
			tmp1.Double(tmp2);
			tmp2.FromP1xP1(tmp1);
			tmp1.Double(tmp2);
			tmp2.FromP1xP1(tmp1);
			tmp1.Double(tmp2);
			tmp2.FromP1xP1(tmp1);
			tmp1.Double(tmp2);
			v.fromP1xP1(tmp1);
			table.SelectInto(multiple, ((i < 0 || i >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i]));
			tmp1.Add(v, multiple);
			i = i - (1) >> 0;
		}
		v.fromP1xP1(tmp1);
		return v;
	};
	Point.prototype.ScalarMult = function(x, q) { return this.$val.ScalarMult(x, q); };
	basepointNafTable = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = basepointNafTablePrecomp.initOnce.Do((function() {
			basepointNafTablePrecomp.table.FromP3(NewGeneratorPoint());
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return basepointNafTablePrecomp.table;
		/* */ } return; } var $f = {$blk: basepointNafTable, $c: true, $r, $s};return $f;
	};
	Point.ptr.prototype.VarTimeDoubleScalarBaseMult = function(a, A, b) {
		var {A, _r, a, aNaf, aTable, b, bNaf, basepointNafTable$1, i, j, multA, multB, tmp1, tmp2, v, $s, $r, $c} = $restore(this, {a, A, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		checkInitialized(new sliceType$1([A]));
		_r = basepointNafTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		basepointNafTable$1 = _r;
		aTable = new nafLookupTable5.ptr(arrayType$6.zero());
		aTable.FromP3(A);
		aNaf = $clone(a.nonAdjacentForm(5), arrayType$7);
		bNaf = $clone(b.nonAdjacentForm(8), arrayType$7);
		i = 255;
		j = i;
		while (true) {
			if (!(j >= 0)) { break; }
			if (!((((j < 0 || j >= aNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : aNaf[j]) === 0)) || !((((j < 0 || j >= bNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : bNaf[j]) === 0))) {
				break;
			}
			j = j - (1) >> 0;
		}
		multA = new projCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		multB = new affineCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp1 = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp2 = new projP2.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)));
		tmp2.Zero();
		while (true) {
			if (!(i >= 0)) { break; }
			tmp1.Double(tmp2);
			if (((i < 0 || i >= aNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : aNaf[i]) > 0) {
				v.fromP1xP1(tmp1);
				aTable.SelectInto(multA, ((i < 0 || i >= aNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : aNaf[i]));
				tmp1.Add(v, multA);
			} else if (((i < 0 || i >= aNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : aNaf[i]) < 0) {
				v.fromP1xP1(tmp1);
				aTable.SelectInto(multA, -((i < 0 || i >= aNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : aNaf[i]));
				tmp1.Sub(v, multA);
			}
			if (((i < 0 || i >= bNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : bNaf[i]) > 0) {
				v.fromP1xP1(tmp1);
				basepointNafTable$1.SelectInto(multB, ((i < 0 || i >= bNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : bNaf[i]));
				tmp1.AddAffine(v, multB);
			} else if (((i < 0 || i >= bNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : bNaf[i]) < 0) {
				v.fromP1xP1(tmp1);
				basepointNafTable$1.SelectInto(multB, -((i < 0 || i >= bNaf.length) ? ($throwRuntimeError("index out of range"), undefined) : bNaf[i]));
				tmp1.SubAffine(v, multB);
			}
			tmp2.FromP1xP1(tmp1);
			i = i - (1) >> 0;
		}
		v.fromP2(tmp2);
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: Point.ptr.prototype.VarTimeDoubleScalarBaseMult, $c: true, $r, A, _r, a, aNaf, aTable, b, bNaf, basepointNafTable$1, i, j, multA, multB, tmp1, tmp2, v, $s};return $f;
	};
	Point.prototype.VarTimeDoubleScalarBaseMult = function(a, A, b) { return this.$val.VarTimeDoubleScalarBaseMult(a, A, b); };
	NewScalar = function() {
		return new Scalar.ptr(arrayType$3.zero());
	};
	$pkg.NewScalar = NewScalar;
	Scalar.ptr.prototype.MultiplyAdd = function(x, y, z) {
		var s, x, y, z;
		s = this;
		scMulAdd(s.s, x.s, y.s, z.s);
		return s;
	};
	Scalar.prototype.MultiplyAdd = function(x, y, z) { return this.$val.MultiplyAdd(x, y, z); };
	Scalar.ptr.prototype.Add = function(x, y) {
		var s, x, y;
		s = this;
		scMulAdd(s.s, scOne.s, x.s, y.s);
		return s;
	};
	Scalar.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Scalar.ptr.prototype.Subtract = function(x, y) {
		var s, x, y;
		s = this;
		scMulAdd(s.s, scMinusOne.s, y.s, x.s);
		return s;
	};
	Scalar.prototype.Subtract = function(x, y) { return this.$val.Subtract(x, y); };
	Scalar.ptr.prototype.Negate = function(x) {
		var s, x;
		s = this;
		scMulAdd(s.s, scMinusOne.s, x.s, scZero.s);
		return s;
	};
	Scalar.prototype.Negate = function(x) { return this.$val.Negate(x); };
	Scalar.ptr.prototype.Multiply = function(x, y) {
		var s, x, y;
		s = this;
		scMulAdd(s.s, x.s, y.s, scZero.s);
		return s;
	};
	Scalar.prototype.Multiply = function(x, y) { return this.$val.Multiply(x, y); };
	Scalar.ptr.prototype.Set = function(x) {
		var s, x;
		s = this;
		Scalar.copy(s, x);
		return s;
	};
	Scalar.prototype.Set = function(x) { return this.$val.Set(x); };
	Scalar.ptr.prototype.SetUniformBytes = function(x) {
		var s, wideBytes, x;
		s = this;
		if (!((x.$length === 64))) {
			return [ptrType$1.nil, errors.New("edwards25519: invalid SetUniformBytes input length")];
		}
		wideBytes = arrayType$8.zero();
		$copySlice(new sliceType(wideBytes), x);
		scReduce(s.s, wideBytes);
		return [s, $ifaceNil];
	};
	Scalar.prototype.SetUniformBytes = function(x) { return this.$val.SetUniformBytes(x); };
	Scalar.ptr.prototype.SetCanonicalBytes = function(x) {
		var s, ss, x;
		s = this;
		if (!((x.$length === 32))) {
			return [ptrType$1.nil, errors.New("invalid scalar length")];
		}
		ss = new Scalar.ptr(arrayType$3.zero());
		$copySlice(new sliceType(ss.s), x);
		if (!isReduced(ss)) {
			return [ptrType$1.nil, errors.New("invalid scalar encoding")];
		}
		arrayType$3.copy(s.s, ss.s);
		return [s, $ifaceNil];
	};
	Scalar.prototype.SetCanonicalBytes = function(x) { return this.$val.SetCanonicalBytes(x); };
	isReduced = function(s) {
		var i, s, x, x$1, x$2, x$3;
		i = 31;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = s.s, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) > (x$1 = scMinusOne.s, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))) {
				return false;
			} else if ((x$2 = s.s, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) < (x$3 = scMinusOne.s, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i]))) {
				return true;
			}
			i = i - (1) >> 0;
		}
		return true;
	};
	Scalar.ptr.prototype.SetBytesWithClamping = function(x) {
		var s, wideBytes, x;
		s = this;
		if (!((x.$length === 32))) {
			return [ptrType$1.nil, errors.New("edwards25519: invalid SetBytesWithClamping input length")];
		}
		wideBytes = arrayType$8.zero();
		$copySlice(new sliceType(wideBytes), x);
		wideBytes[0] = ((wideBytes[0] & (248)) >>> 0);
		wideBytes[31] = ((wideBytes[31] & (63)) >>> 0);
		wideBytes[31] = ((wideBytes[31] | (64)) >>> 0);
		scReduce(s.s, wideBytes);
		return [s, $ifaceNil];
	};
	Scalar.prototype.SetBytesWithClamping = function(x) { return this.$val.SetBytesWithClamping(x); };
	Scalar.ptr.prototype.Bytes = function() {
		var buf, s;
		s = this;
		buf = $makeSlice(sliceType, 32);
		$copySlice(buf, new sliceType(s.s));
		return buf;
	};
	Scalar.prototype.Bytes = function() { return this.$val.Bytes(); };
	Scalar.ptr.prototype.Equal = function(t) {
		var s, t;
		s = this;
		return subtle.ConstantTimeCompare(new sliceType(s.s), new sliceType(t.s));
	};
	Scalar.prototype.Equal = function(t) { return this.$val.Equal(t); };
	load3 = function(in$1) {
		var in$1, r, x, x$1;
		r = (new $Int64(0, (0 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 0])));
		r = (x = $shiftLeft64((new $Int64(0, (1 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 1]))), 8), new $Int64(r.$high | x.$high, (r.$low | x.$low) >>> 0));
		r = (x$1 = $shiftLeft64((new $Int64(0, (2 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 2]))), 16), new $Int64(r.$high | x$1.$high, (r.$low | x$1.$low) >>> 0));
		return r;
	};
	load4 = function(in$1) {
		var in$1, r, x, x$1, x$2;
		r = (new $Int64(0, (0 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 0])));
		r = (x = $shiftLeft64((new $Int64(0, (1 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 1]))), 8), new $Int64(r.$high | x.$high, (r.$low | x.$low) >>> 0));
		r = (x$1 = $shiftLeft64((new $Int64(0, (2 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 2]))), 16), new $Int64(r.$high | x$1.$high, (r.$low | x$1.$low) >>> 0));
		r = (x$2 = $shiftLeft64((new $Int64(0, (3 >= in$1.$length ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + 3]))), 24), new $Int64(r.$high | x$2.$high, (r.$low | x$2.$low) >>> 0));
		return r;
	};
	scMulAdd = function(s, a, b, c) {
		var a, a0, a1, a10, a11, a2, a3, a4, a5, a6, a7, a8, a9, b, b0, b1, b10, b11, b2, b3, b4, b5, b6, b7, b8, b9, c, c0, c1, c10, c11, c2, c3, c4, c5, c6, c7, c8, c9, carry, s, s0, s1, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s2, s20, s21, s22, s23, s3, s4, s5, s6, s7, s8, s9, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$289, x$29, x$290, x$291, x$292, x$293, x$294, x$295, x$296, x$297, x$298, x$299, x$3, x$30, x$300, x$301, x$302, x$303, x$304, x$305, x$306, x$307, x$308, x$309, x$31, x$310, x$311, x$312, x$313, x$314, x$315, x$316, x$317, x$318, x$319, x$32, x$320, x$321, x$322, x$323, x$324, x$325, x$326, x$327, x$328, x$329, x$33, x$330, x$331, x$332, x$333, x$334, x$335, x$336, x$337, x$338, x$339, x$34, x$340, x$341, x$342, x$343, x$344, x$345, x$346, x$347, x$348, x$349, x$35, x$350, x$351, x$352, x$353, x$354, x$355, x$356, x$357, x$358, x$359, x$36, x$360, x$361, x$362, x$363, x$364, x$365, x$366, x$367, x$368, x$369, x$37, x$370, x$371, x$372, x$373, x$374, x$375, x$376, x$377, x$378, x$379, x$38, x$380, x$381, x$382, x$383, x$384, x$385, x$386, x$387, x$388, x$389, x$39, x$390, x$391, x$392, x$393, x$394, x$395, x$396, x$397, x$398, x$399, x$4, x$40, x$400, x$401, x$402, x$403, x$404, x$405, x$406, x$407, x$408, x$409, x$41, x$410, x$411, x$412, x$413, x$414, x$415, x$416, x$417, x$418, x$419, x$42, x$420, x$421, x$422, x$423, x$424, x$425, x$426, x$427, x$428, x$429, x$43, x$430, x$431, x$432, x$433, x$434, x$435, x$436, x$437, x$438, x$439, x$44, x$440, x$441, x$442, x$443, x$444, x$445, x$446, x$447, x$448, x$449, x$45, x$450, x$451, x$452, x$453, x$454, x$455, x$456, x$457, x$458, x$459, x$46, x$460, x$461, x$462, x$463, x$464, x$465, x$466, x$467, x$468, x$469, x$47, x$470, x$471, x$472, x$473, x$474, x$475, x$476, x$477, x$478, x$479, x$48, x$480, x$481, x$482, x$483, x$484, x$485, x$486, x$487, x$488, x$489, x$49, x$490, x$491, x$492, x$493, x$494, x$495, x$496, x$497, x$498, x$499, x$5, x$50, x$500, x$501, x$502, x$503, x$504, x$505, x$506, x$507, x$508, x$509, x$51, x$510, x$511, x$512, x$513, x$514, x$515, x$516, x$517, x$518, x$519, x$52, x$520, x$521, x$522, x$523, x$524, x$525, x$526, x$527, x$528, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99;
		a0 = (x = load3(new sliceType(a)), new $Int64(0 & x.$high, (2097151 & x.$low) >>> 0));
		a1 = (x$1 = $shiftRightInt64(load4($subslice(new sliceType(a), 2)), 5), new $Int64(0 & x$1.$high, (2097151 & x$1.$low) >>> 0));
		a2 = (x$2 = $shiftRightInt64(load3($subslice(new sliceType(a), 5)), 2), new $Int64(0 & x$2.$high, (2097151 & x$2.$low) >>> 0));
		a3 = (x$3 = $shiftRightInt64(load4($subslice(new sliceType(a), 7)), 7), new $Int64(0 & x$3.$high, (2097151 & x$3.$low) >>> 0));
		a4 = (x$4 = $shiftRightInt64(load4($subslice(new sliceType(a), 10)), 4), new $Int64(0 & x$4.$high, (2097151 & x$4.$low) >>> 0));
		a5 = (x$5 = $shiftRightInt64(load3($subslice(new sliceType(a), 13)), 1), new $Int64(0 & x$5.$high, (2097151 & x$5.$low) >>> 0));
		a6 = (x$6 = $shiftRightInt64(load4($subslice(new sliceType(a), 15)), 6), new $Int64(0 & x$6.$high, (2097151 & x$6.$low) >>> 0));
		a7 = (x$7 = $shiftRightInt64(load3($subslice(new sliceType(a), 18)), 3), new $Int64(0 & x$7.$high, (2097151 & x$7.$low) >>> 0));
		a8 = (x$8 = load3($subslice(new sliceType(a), 21)), new $Int64(0 & x$8.$high, (2097151 & x$8.$low) >>> 0));
		a9 = (x$9 = $shiftRightInt64(load4($subslice(new sliceType(a), 23)), 5), new $Int64(0 & x$9.$high, (2097151 & x$9.$low) >>> 0));
		a10 = (x$10 = $shiftRightInt64(load3($subslice(new sliceType(a), 26)), 2), new $Int64(0 & x$10.$high, (2097151 & x$10.$low) >>> 0));
		a11 = $shiftRightInt64(load4($subslice(new sliceType(a), 28)), 7);
		b0 = (x$11 = load3(new sliceType(b)), new $Int64(0 & x$11.$high, (2097151 & x$11.$low) >>> 0));
		b1 = (x$12 = $shiftRightInt64(load4($subslice(new sliceType(b), 2)), 5), new $Int64(0 & x$12.$high, (2097151 & x$12.$low) >>> 0));
		b2 = (x$13 = $shiftRightInt64(load3($subslice(new sliceType(b), 5)), 2), new $Int64(0 & x$13.$high, (2097151 & x$13.$low) >>> 0));
		b3 = (x$14 = $shiftRightInt64(load4($subslice(new sliceType(b), 7)), 7), new $Int64(0 & x$14.$high, (2097151 & x$14.$low) >>> 0));
		b4 = (x$15 = $shiftRightInt64(load4($subslice(new sliceType(b), 10)), 4), new $Int64(0 & x$15.$high, (2097151 & x$15.$low) >>> 0));
		b5 = (x$16 = $shiftRightInt64(load3($subslice(new sliceType(b), 13)), 1), new $Int64(0 & x$16.$high, (2097151 & x$16.$low) >>> 0));
		b6 = (x$17 = $shiftRightInt64(load4($subslice(new sliceType(b), 15)), 6), new $Int64(0 & x$17.$high, (2097151 & x$17.$low) >>> 0));
		b7 = (x$18 = $shiftRightInt64(load3($subslice(new sliceType(b), 18)), 3), new $Int64(0 & x$18.$high, (2097151 & x$18.$low) >>> 0));
		b8 = (x$19 = load3($subslice(new sliceType(b), 21)), new $Int64(0 & x$19.$high, (2097151 & x$19.$low) >>> 0));
		b9 = (x$20 = $shiftRightInt64(load4($subslice(new sliceType(b), 23)), 5), new $Int64(0 & x$20.$high, (2097151 & x$20.$low) >>> 0));
		b10 = (x$21 = $shiftRightInt64(load3($subslice(new sliceType(b), 26)), 2), new $Int64(0 & x$21.$high, (2097151 & x$21.$low) >>> 0));
		b11 = $shiftRightInt64(load4($subslice(new sliceType(b), 28)), 7);
		c0 = (x$22 = load3(new sliceType(c)), new $Int64(0 & x$22.$high, (2097151 & x$22.$low) >>> 0));
		c1 = (x$23 = $shiftRightInt64(load4($subslice(new sliceType(c), 2)), 5), new $Int64(0 & x$23.$high, (2097151 & x$23.$low) >>> 0));
		c2 = (x$24 = $shiftRightInt64(load3($subslice(new sliceType(c), 5)), 2), new $Int64(0 & x$24.$high, (2097151 & x$24.$low) >>> 0));
		c3 = (x$25 = $shiftRightInt64(load4($subslice(new sliceType(c), 7)), 7), new $Int64(0 & x$25.$high, (2097151 & x$25.$low) >>> 0));
		c4 = (x$26 = $shiftRightInt64(load4($subslice(new sliceType(c), 10)), 4), new $Int64(0 & x$26.$high, (2097151 & x$26.$low) >>> 0));
		c5 = (x$27 = $shiftRightInt64(load3($subslice(new sliceType(c), 13)), 1), new $Int64(0 & x$27.$high, (2097151 & x$27.$low) >>> 0));
		c6 = (x$28 = $shiftRightInt64(load4($subslice(new sliceType(c), 15)), 6), new $Int64(0 & x$28.$high, (2097151 & x$28.$low) >>> 0));
		c7 = (x$29 = $shiftRightInt64(load3($subslice(new sliceType(c), 18)), 3), new $Int64(0 & x$29.$high, (2097151 & x$29.$low) >>> 0));
		c8 = (x$30 = load3($subslice(new sliceType(c), 21)), new $Int64(0 & x$30.$high, (2097151 & x$30.$low) >>> 0));
		c9 = (x$31 = $shiftRightInt64(load4($subslice(new sliceType(c), 23)), 5), new $Int64(0 & x$31.$high, (2097151 & x$31.$low) >>> 0));
		c10 = (x$32 = $shiftRightInt64(load3($subslice(new sliceType(c), 26)), 2), new $Int64(0 & x$32.$high, (2097151 & x$32.$low) >>> 0));
		c11 = $shiftRightInt64(load4($subslice(new sliceType(c), 28)), 7);
		carry = arrayType$9.zero();
		s0 = (x$33 = $mul64(a0, b0), new $Int64(c0.$high + x$33.$high, c0.$low + x$33.$low));
		s1 = (x$34 = (x$35 = $mul64(a0, b1), new $Int64(c1.$high + x$35.$high, c1.$low + x$35.$low)), x$36 = $mul64(a1, b0), new $Int64(x$34.$high + x$36.$high, x$34.$low + x$36.$low));
		s2 = (x$37 = (x$38 = (x$39 = $mul64(a0, b2), new $Int64(c2.$high + x$39.$high, c2.$low + x$39.$low)), x$40 = $mul64(a1, b1), new $Int64(x$38.$high + x$40.$high, x$38.$low + x$40.$low)), x$41 = $mul64(a2, b0), new $Int64(x$37.$high + x$41.$high, x$37.$low + x$41.$low));
		s3 = (x$42 = (x$43 = (x$44 = (x$45 = $mul64(a0, b3), new $Int64(c3.$high + x$45.$high, c3.$low + x$45.$low)), x$46 = $mul64(a1, b2), new $Int64(x$44.$high + x$46.$high, x$44.$low + x$46.$low)), x$47 = $mul64(a2, b1), new $Int64(x$43.$high + x$47.$high, x$43.$low + x$47.$low)), x$48 = $mul64(a3, b0), new $Int64(x$42.$high + x$48.$high, x$42.$low + x$48.$low));
		s4 = (x$49 = (x$50 = (x$51 = (x$52 = (x$53 = $mul64(a0, b4), new $Int64(c4.$high + x$53.$high, c4.$low + x$53.$low)), x$54 = $mul64(a1, b3), new $Int64(x$52.$high + x$54.$high, x$52.$low + x$54.$low)), x$55 = $mul64(a2, b2), new $Int64(x$51.$high + x$55.$high, x$51.$low + x$55.$low)), x$56 = $mul64(a3, b1), new $Int64(x$50.$high + x$56.$high, x$50.$low + x$56.$low)), x$57 = $mul64(a4, b0), new $Int64(x$49.$high + x$57.$high, x$49.$low + x$57.$low));
		s5 = (x$58 = (x$59 = (x$60 = (x$61 = (x$62 = (x$63 = $mul64(a0, b5), new $Int64(c5.$high + x$63.$high, c5.$low + x$63.$low)), x$64 = $mul64(a1, b4), new $Int64(x$62.$high + x$64.$high, x$62.$low + x$64.$low)), x$65 = $mul64(a2, b3), new $Int64(x$61.$high + x$65.$high, x$61.$low + x$65.$low)), x$66 = $mul64(a3, b2), new $Int64(x$60.$high + x$66.$high, x$60.$low + x$66.$low)), x$67 = $mul64(a4, b1), new $Int64(x$59.$high + x$67.$high, x$59.$low + x$67.$low)), x$68 = $mul64(a5, b0), new $Int64(x$58.$high + x$68.$high, x$58.$low + x$68.$low));
		s6 = (x$69 = (x$70 = (x$71 = (x$72 = (x$73 = (x$74 = (x$75 = $mul64(a0, b6), new $Int64(c6.$high + x$75.$high, c6.$low + x$75.$low)), x$76 = $mul64(a1, b5), new $Int64(x$74.$high + x$76.$high, x$74.$low + x$76.$low)), x$77 = $mul64(a2, b4), new $Int64(x$73.$high + x$77.$high, x$73.$low + x$77.$low)), x$78 = $mul64(a3, b3), new $Int64(x$72.$high + x$78.$high, x$72.$low + x$78.$low)), x$79 = $mul64(a4, b2), new $Int64(x$71.$high + x$79.$high, x$71.$low + x$79.$low)), x$80 = $mul64(a5, b1), new $Int64(x$70.$high + x$80.$high, x$70.$low + x$80.$low)), x$81 = $mul64(a6, b0), new $Int64(x$69.$high + x$81.$high, x$69.$low + x$81.$low));
		s7 = (x$82 = (x$83 = (x$84 = (x$85 = (x$86 = (x$87 = (x$88 = (x$89 = $mul64(a0, b7), new $Int64(c7.$high + x$89.$high, c7.$low + x$89.$low)), x$90 = $mul64(a1, b6), new $Int64(x$88.$high + x$90.$high, x$88.$low + x$90.$low)), x$91 = $mul64(a2, b5), new $Int64(x$87.$high + x$91.$high, x$87.$low + x$91.$low)), x$92 = $mul64(a3, b4), new $Int64(x$86.$high + x$92.$high, x$86.$low + x$92.$low)), x$93 = $mul64(a4, b3), new $Int64(x$85.$high + x$93.$high, x$85.$low + x$93.$low)), x$94 = $mul64(a5, b2), new $Int64(x$84.$high + x$94.$high, x$84.$low + x$94.$low)), x$95 = $mul64(a6, b1), new $Int64(x$83.$high + x$95.$high, x$83.$low + x$95.$low)), x$96 = $mul64(a7, b0), new $Int64(x$82.$high + x$96.$high, x$82.$low + x$96.$low));
		s8 = (x$97 = (x$98 = (x$99 = (x$100 = (x$101 = (x$102 = (x$103 = (x$104 = (x$105 = $mul64(a0, b8), new $Int64(c8.$high + x$105.$high, c8.$low + x$105.$low)), x$106 = $mul64(a1, b7), new $Int64(x$104.$high + x$106.$high, x$104.$low + x$106.$low)), x$107 = $mul64(a2, b6), new $Int64(x$103.$high + x$107.$high, x$103.$low + x$107.$low)), x$108 = $mul64(a3, b5), new $Int64(x$102.$high + x$108.$high, x$102.$low + x$108.$low)), x$109 = $mul64(a4, b4), new $Int64(x$101.$high + x$109.$high, x$101.$low + x$109.$low)), x$110 = $mul64(a5, b3), new $Int64(x$100.$high + x$110.$high, x$100.$low + x$110.$low)), x$111 = $mul64(a6, b2), new $Int64(x$99.$high + x$111.$high, x$99.$low + x$111.$low)), x$112 = $mul64(a7, b1), new $Int64(x$98.$high + x$112.$high, x$98.$low + x$112.$low)), x$113 = $mul64(a8, b0), new $Int64(x$97.$high + x$113.$high, x$97.$low + x$113.$low));
		s9 = (x$114 = (x$115 = (x$116 = (x$117 = (x$118 = (x$119 = (x$120 = (x$121 = (x$122 = (x$123 = $mul64(a0, b9), new $Int64(c9.$high + x$123.$high, c9.$low + x$123.$low)), x$124 = $mul64(a1, b8), new $Int64(x$122.$high + x$124.$high, x$122.$low + x$124.$low)), x$125 = $mul64(a2, b7), new $Int64(x$121.$high + x$125.$high, x$121.$low + x$125.$low)), x$126 = $mul64(a3, b6), new $Int64(x$120.$high + x$126.$high, x$120.$low + x$126.$low)), x$127 = $mul64(a4, b5), new $Int64(x$119.$high + x$127.$high, x$119.$low + x$127.$low)), x$128 = $mul64(a5, b4), new $Int64(x$118.$high + x$128.$high, x$118.$low + x$128.$low)), x$129 = $mul64(a6, b3), new $Int64(x$117.$high + x$129.$high, x$117.$low + x$129.$low)), x$130 = $mul64(a7, b2), new $Int64(x$116.$high + x$130.$high, x$116.$low + x$130.$low)), x$131 = $mul64(a8, b1), new $Int64(x$115.$high + x$131.$high, x$115.$low + x$131.$low)), x$132 = $mul64(a9, b0), new $Int64(x$114.$high + x$132.$high, x$114.$low + x$132.$low));
		s10 = (x$133 = (x$134 = (x$135 = (x$136 = (x$137 = (x$138 = (x$139 = (x$140 = (x$141 = (x$142 = (x$143 = $mul64(a0, b10), new $Int64(c10.$high + x$143.$high, c10.$low + x$143.$low)), x$144 = $mul64(a1, b9), new $Int64(x$142.$high + x$144.$high, x$142.$low + x$144.$low)), x$145 = $mul64(a2, b8), new $Int64(x$141.$high + x$145.$high, x$141.$low + x$145.$low)), x$146 = $mul64(a3, b7), new $Int64(x$140.$high + x$146.$high, x$140.$low + x$146.$low)), x$147 = $mul64(a4, b6), new $Int64(x$139.$high + x$147.$high, x$139.$low + x$147.$low)), x$148 = $mul64(a5, b5), new $Int64(x$138.$high + x$148.$high, x$138.$low + x$148.$low)), x$149 = $mul64(a6, b4), new $Int64(x$137.$high + x$149.$high, x$137.$low + x$149.$low)), x$150 = $mul64(a7, b3), new $Int64(x$136.$high + x$150.$high, x$136.$low + x$150.$low)), x$151 = $mul64(a8, b2), new $Int64(x$135.$high + x$151.$high, x$135.$low + x$151.$low)), x$152 = $mul64(a9, b1), new $Int64(x$134.$high + x$152.$high, x$134.$low + x$152.$low)), x$153 = $mul64(a10, b0), new $Int64(x$133.$high + x$153.$high, x$133.$low + x$153.$low));
		s11 = (x$154 = (x$155 = (x$156 = (x$157 = (x$158 = (x$159 = (x$160 = (x$161 = (x$162 = (x$163 = (x$164 = (x$165 = $mul64(a0, b11), new $Int64(c11.$high + x$165.$high, c11.$low + x$165.$low)), x$166 = $mul64(a1, b10), new $Int64(x$164.$high + x$166.$high, x$164.$low + x$166.$low)), x$167 = $mul64(a2, b9), new $Int64(x$163.$high + x$167.$high, x$163.$low + x$167.$low)), x$168 = $mul64(a3, b8), new $Int64(x$162.$high + x$168.$high, x$162.$low + x$168.$low)), x$169 = $mul64(a4, b7), new $Int64(x$161.$high + x$169.$high, x$161.$low + x$169.$low)), x$170 = $mul64(a5, b6), new $Int64(x$160.$high + x$170.$high, x$160.$low + x$170.$low)), x$171 = $mul64(a6, b5), new $Int64(x$159.$high + x$171.$high, x$159.$low + x$171.$low)), x$172 = $mul64(a7, b4), new $Int64(x$158.$high + x$172.$high, x$158.$low + x$172.$low)), x$173 = $mul64(a8, b3), new $Int64(x$157.$high + x$173.$high, x$157.$low + x$173.$low)), x$174 = $mul64(a9, b2), new $Int64(x$156.$high + x$174.$high, x$156.$low + x$174.$low)), x$175 = $mul64(a10, b1), new $Int64(x$155.$high + x$175.$high, x$155.$low + x$175.$low)), x$176 = $mul64(a11, b0), new $Int64(x$154.$high + x$176.$high, x$154.$low + x$176.$low));
		s12 = (x$177 = (x$178 = (x$179 = (x$180 = (x$181 = (x$182 = (x$183 = (x$184 = (x$185 = (x$186 = $mul64(a1, b11), x$187 = $mul64(a2, b10), new $Int64(x$186.$high + x$187.$high, x$186.$low + x$187.$low)), x$188 = $mul64(a3, b9), new $Int64(x$185.$high + x$188.$high, x$185.$low + x$188.$low)), x$189 = $mul64(a4, b8), new $Int64(x$184.$high + x$189.$high, x$184.$low + x$189.$low)), x$190 = $mul64(a5, b7), new $Int64(x$183.$high + x$190.$high, x$183.$low + x$190.$low)), x$191 = $mul64(a6, b6), new $Int64(x$182.$high + x$191.$high, x$182.$low + x$191.$low)), x$192 = $mul64(a7, b5), new $Int64(x$181.$high + x$192.$high, x$181.$low + x$192.$low)), x$193 = $mul64(a8, b4), new $Int64(x$180.$high + x$193.$high, x$180.$low + x$193.$low)), x$194 = $mul64(a9, b3), new $Int64(x$179.$high + x$194.$high, x$179.$low + x$194.$low)), x$195 = $mul64(a10, b2), new $Int64(x$178.$high + x$195.$high, x$178.$low + x$195.$low)), x$196 = $mul64(a11, b1), new $Int64(x$177.$high + x$196.$high, x$177.$low + x$196.$low));
		s13 = (x$197 = (x$198 = (x$199 = (x$200 = (x$201 = (x$202 = (x$203 = (x$204 = (x$205 = $mul64(a2, b11), x$206 = $mul64(a3, b10), new $Int64(x$205.$high + x$206.$high, x$205.$low + x$206.$low)), x$207 = $mul64(a4, b9), new $Int64(x$204.$high + x$207.$high, x$204.$low + x$207.$low)), x$208 = $mul64(a5, b8), new $Int64(x$203.$high + x$208.$high, x$203.$low + x$208.$low)), x$209 = $mul64(a6, b7), new $Int64(x$202.$high + x$209.$high, x$202.$low + x$209.$low)), x$210 = $mul64(a7, b6), new $Int64(x$201.$high + x$210.$high, x$201.$low + x$210.$low)), x$211 = $mul64(a8, b5), new $Int64(x$200.$high + x$211.$high, x$200.$low + x$211.$low)), x$212 = $mul64(a9, b4), new $Int64(x$199.$high + x$212.$high, x$199.$low + x$212.$low)), x$213 = $mul64(a10, b3), new $Int64(x$198.$high + x$213.$high, x$198.$low + x$213.$low)), x$214 = $mul64(a11, b2), new $Int64(x$197.$high + x$214.$high, x$197.$low + x$214.$low));
		s14 = (x$215 = (x$216 = (x$217 = (x$218 = (x$219 = (x$220 = (x$221 = (x$222 = $mul64(a3, b11), x$223 = $mul64(a4, b10), new $Int64(x$222.$high + x$223.$high, x$222.$low + x$223.$low)), x$224 = $mul64(a5, b9), new $Int64(x$221.$high + x$224.$high, x$221.$low + x$224.$low)), x$225 = $mul64(a6, b8), new $Int64(x$220.$high + x$225.$high, x$220.$low + x$225.$low)), x$226 = $mul64(a7, b7), new $Int64(x$219.$high + x$226.$high, x$219.$low + x$226.$low)), x$227 = $mul64(a8, b6), new $Int64(x$218.$high + x$227.$high, x$218.$low + x$227.$low)), x$228 = $mul64(a9, b5), new $Int64(x$217.$high + x$228.$high, x$217.$low + x$228.$low)), x$229 = $mul64(a10, b4), new $Int64(x$216.$high + x$229.$high, x$216.$low + x$229.$low)), x$230 = $mul64(a11, b3), new $Int64(x$215.$high + x$230.$high, x$215.$low + x$230.$low));
		s15 = (x$231 = (x$232 = (x$233 = (x$234 = (x$235 = (x$236 = (x$237 = $mul64(a4, b11), x$238 = $mul64(a5, b10), new $Int64(x$237.$high + x$238.$high, x$237.$low + x$238.$low)), x$239 = $mul64(a6, b9), new $Int64(x$236.$high + x$239.$high, x$236.$low + x$239.$low)), x$240 = $mul64(a7, b8), new $Int64(x$235.$high + x$240.$high, x$235.$low + x$240.$low)), x$241 = $mul64(a8, b7), new $Int64(x$234.$high + x$241.$high, x$234.$low + x$241.$low)), x$242 = $mul64(a9, b6), new $Int64(x$233.$high + x$242.$high, x$233.$low + x$242.$low)), x$243 = $mul64(a10, b5), new $Int64(x$232.$high + x$243.$high, x$232.$low + x$243.$low)), x$244 = $mul64(a11, b4), new $Int64(x$231.$high + x$244.$high, x$231.$low + x$244.$low));
		s16 = (x$245 = (x$246 = (x$247 = (x$248 = (x$249 = (x$250 = $mul64(a5, b11), x$251 = $mul64(a6, b10), new $Int64(x$250.$high + x$251.$high, x$250.$low + x$251.$low)), x$252 = $mul64(a7, b9), new $Int64(x$249.$high + x$252.$high, x$249.$low + x$252.$low)), x$253 = $mul64(a8, b8), new $Int64(x$248.$high + x$253.$high, x$248.$low + x$253.$low)), x$254 = $mul64(a9, b7), new $Int64(x$247.$high + x$254.$high, x$247.$low + x$254.$low)), x$255 = $mul64(a10, b6), new $Int64(x$246.$high + x$255.$high, x$246.$low + x$255.$low)), x$256 = $mul64(a11, b5), new $Int64(x$245.$high + x$256.$high, x$245.$low + x$256.$low));
		s17 = (x$257 = (x$258 = (x$259 = (x$260 = (x$261 = $mul64(a6, b11), x$262 = $mul64(a7, b10), new $Int64(x$261.$high + x$262.$high, x$261.$low + x$262.$low)), x$263 = $mul64(a8, b9), new $Int64(x$260.$high + x$263.$high, x$260.$low + x$263.$low)), x$264 = $mul64(a9, b8), new $Int64(x$259.$high + x$264.$high, x$259.$low + x$264.$low)), x$265 = $mul64(a10, b7), new $Int64(x$258.$high + x$265.$high, x$258.$low + x$265.$low)), x$266 = $mul64(a11, b6), new $Int64(x$257.$high + x$266.$high, x$257.$low + x$266.$low));
		s18 = (x$267 = (x$268 = (x$269 = (x$270 = $mul64(a7, b11), x$271 = $mul64(a8, b10), new $Int64(x$270.$high + x$271.$high, x$270.$low + x$271.$low)), x$272 = $mul64(a9, b9), new $Int64(x$269.$high + x$272.$high, x$269.$low + x$272.$low)), x$273 = $mul64(a10, b8), new $Int64(x$268.$high + x$273.$high, x$268.$low + x$273.$low)), x$274 = $mul64(a11, b7), new $Int64(x$267.$high + x$274.$high, x$267.$low + x$274.$low));
		s19 = (x$275 = (x$276 = (x$277 = $mul64(a8, b11), x$278 = $mul64(a9, b10), new $Int64(x$277.$high + x$278.$high, x$277.$low + x$278.$low)), x$279 = $mul64(a10, b9), new $Int64(x$276.$high + x$279.$high, x$276.$low + x$279.$low)), x$280 = $mul64(a11, b8), new $Int64(x$275.$high + x$280.$high, x$275.$low + x$280.$low));
		s20 = (x$281 = (x$282 = $mul64(a9, b11), x$283 = $mul64(a10, b10), new $Int64(x$282.$high + x$283.$high, x$282.$low + x$283.$low)), x$284 = $mul64(a11, b9), new $Int64(x$281.$high + x$284.$high, x$281.$low + x$284.$low));
		s21 = (x$285 = $mul64(a10, b11), x$286 = $mul64(a11, b10), new $Int64(x$285.$high + x$286.$high, x$285.$low + x$286.$low));
		s22 = $mul64(a11, b11);
		s23 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64((new $Int64(s0.$high + 0, s0.$low + 1048576)), 21);
		s1 = (x$287 = carry[0], new $Int64(s1.$high + x$287.$high, s1.$low + x$287.$low));
		s0 = (x$288 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$288.$high, s0.$low - x$288.$low));
		carry[2] = $shiftRightInt64((new $Int64(s2.$high + 0, s2.$low + 1048576)), 21);
		s3 = (x$289 = carry[2], new $Int64(s3.$high + x$289.$high, s3.$low + x$289.$low));
		s2 = (x$290 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$290.$high, s2.$low - x$290.$low));
		carry[4] = $shiftRightInt64((new $Int64(s4.$high + 0, s4.$low + 1048576)), 21);
		s5 = (x$291 = carry[4], new $Int64(s5.$high + x$291.$high, s5.$low + x$291.$low));
		s4 = (x$292 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$292.$high, s4.$low - x$292.$low));
		carry[6] = $shiftRightInt64((new $Int64(s6.$high + 0, s6.$low + 1048576)), 21);
		s7 = (x$293 = carry[6], new $Int64(s7.$high + x$293.$high, s7.$low + x$293.$low));
		s6 = (x$294 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$294.$high, s6.$low - x$294.$low));
		carry[8] = $shiftRightInt64((new $Int64(s8.$high + 0, s8.$low + 1048576)), 21);
		s9 = (x$295 = carry[8], new $Int64(s9.$high + x$295.$high, s9.$low + x$295.$low));
		s8 = (x$296 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$296.$high, s8.$low - x$296.$low));
		carry[10] = $shiftRightInt64((new $Int64(s10.$high + 0, s10.$low + 1048576)), 21);
		s11 = (x$297 = carry[10], new $Int64(s11.$high + x$297.$high, s11.$low + x$297.$low));
		s10 = (x$298 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$298.$high, s10.$low - x$298.$low));
		carry[12] = $shiftRightInt64((new $Int64(s12.$high + 0, s12.$low + 1048576)), 21);
		s13 = (x$299 = carry[12], new $Int64(s13.$high + x$299.$high, s13.$low + x$299.$low));
		s12 = (x$300 = $shiftLeft64(carry[12], 21), new $Int64(s12.$high - x$300.$high, s12.$low - x$300.$low));
		carry[14] = $shiftRightInt64((new $Int64(s14.$high + 0, s14.$low + 1048576)), 21);
		s15 = (x$301 = carry[14], new $Int64(s15.$high + x$301.$high, s15.$low + x$301.$low));
		s14 = (x$302 = $shiftLeft64(carry[14], 21), new $Int64(s14.$high - x$302.$high, s14.$low - x$302.$low));
		carry[16] = $shiftRightInt64((new $Int64(s16.$high + 0, s16.$low + 1048576)), 21);
		s17 = (x$303 = carry[16], new $Int64(s17.$high + x$303.$high, s17.$low + x$303.$low));
		s16 = (x$304 = $shiftLeft64(carry[16], 21), new $Int64(s16.$high - x$304.$high, s16.$low - x$304.$low));
		carry[18] = $shiftRightInt64((new $Int64(s18.$high + 0, s18.$low + 1048576)), 21);
		s19 = (x$305 = carry[18], new $Int64(s19.$high + x$305.$high, s19.$low + x$305.$low));
		s18 = (x$306 = $shiftLeft64(carry[18], 21), new $Int64(s18.$high - x$306.$high, s18.$low - x$306.$low));
		carry[20] = $shiftRightInt64((new $Int64(s20.$high + 0, s20.$low + 1048576)), 21);
		s21 = (x$307 = carry[20], new $Int64(s21.$high + x$307.$high, s21.$low + x$307.$low));
		s20 = (x$308 = $shiftLeft64(carry[20], 21), new $Int64(s20.$high - x$308.$high, s20.$low - x$308.$low));
		carry[22] = $shiftRightInt64((new $Int64(s22.$high + 0, s22.$low + 1048576)), 21);
		s23 = (x$309 = carry[22], new $Int64(s23.$high + x$309.$high, s23.$low + x$309.$low));
		s22 = (x$310 = $shiftLeft64(carry[22], 21), new $Int64(s22.$high - x$310.$high, s22.$low - x$310.$low));
		carry[1] = $shiftRightInt64((new $Int64(s1.$high + 0, s1.$low + 1048576)), 21);
		s2 = (x$311 = carry[1], new $Int64(s2.$high + x$311.$high, s2.$low + x$311.$low));
		s1 = (x$312 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$312.$high, s1.$low - x$312.$low));
		carry[3] = $shiftRightInt64((new $Int64(s3.$high + 0, s3.$low + 1048576)), 21);
		s4 = (x$313 = carry[3], new $Int64(s4.$high + x$313.$high, s4.$low + x$313.$low));
		s3 = (x$314 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$314.$high, s3.$low - x$314.$low));
		carry[5] = $shiftRightInt64((new $Int64(s5.$high + 0, s5.$low + 1048576)), 21);
		s6 = (x$315 = carry[5], new $Int64(s6.$high + x$315.$high, s6.$low + x$315.$low));
		s5 = (x$316 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$316.$high, s5.$low - x$316.$low));
		carry[7] = $shiftRightInt64((new $Int64(s7.$high + 0, s7.$low + 1048576)), 21);
		s8 = (x$317 = carry[7], new $Int64(s8.$high + x$317.$high, s8.$low + x$317.$low));
		s7 = (x$318 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$318.$high, s7.$low - x$318.$low));
		carry[9] = $shiftRightInt64((new $Int64(s9.$high + 0, s9.$low + 1048576)), 21);
		s10 = (x$319 = carry[9], new $Int64(s10.$high + x$319.$high, s10.$low + x$319.$low));
		s9 = (x$320 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$320.$high, s9.$low - x$320.$low));
		carry[11] = $shiftRightInt64((new $Int64(s11.$high + 0, s11.$low + 1048576)), 21);
		s12 = (x$321 = carry[11], new $Int64(s12.$high + x$321.$high, s12.$low + x$321.$low));
		s11 = (x$322 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$322.$high, s11.$low - x$322.$low));
		carry[13] = $shiftRightInt64((new $Int64(s13.$high + 0, s13.$low + 1048576)), 21);
		s14 = (x$323 = carry[13], new $Int64(s14.$high + x$323.$high, s14.$low + x$323.$low));
		s13 = (x$324 = $shiftLeft64(carry[13], 21), new $Int64(s13.$high - x$324.$high, s13.$low - x$324.$low));
		carry[15] = $shiftRightInt64((new $Int64(s15.$high + 0, s15.$low + 1048576)), 21);
		s16 = (x$325 = carry[15], new $Int64(s16.$high + x$325.$high, s16.$low + x$325.$low));
		s15 = (x$326 = $shiftLeft64(carry[15], 21), new $Int64(s15.$high - x$326.$high, s15.$low - x$326.$low));
		carry[17] = $shiftRightInt64((new $Int64(s17.$high + 0, s17.$low + 1048576)), 21);
		s18 = (x$327 = carry[17], new $Int64(s18.$high + x$327.$high, s18.$low + x$327.$low));
		s17 = (x$328 = $shiftLeft64(carry[17], 21), new $Int64(s17.$high - x$328.$high, s17.$low - x$328.$low));
		carry[19] = $shiftRightInt64((new $Int64(s19.$high + 0, s19.$low + 1048576)), 21);
		s20 = (x$329 = carry[19], new $Int64(s20.$high + x$329.$high, s20.$low + x$329.$low));
		s19 = (x$330 = $shiftLeft64(carry[19], 21), new $Int64(s19.$high - x$330.$high, s19.$low - x$330.$low));
		carry[21] = $shiftRightInt64((new $Int64(s21.$high + 0, s21.$low + 1048576)), 21);
		s22 = (x$331 = carry[21], new $Int64(s22.$high + x$331.$high, s22.$low + x$331.$low));
		s21 = (x$332 = $shiftLeft64(carry[21], 21), new $Int64(s21.$high - x$332.$high, s21.$low - x$332.$low));
		s11 = (x$333 = $mul64(s23, new $Int64(0, 666643)), new $Int64(s11.$high + x$333.$high, s11.$low + x$333.$low));
		s12 = (x$334 = $mul64(s23, new $Int64(0, 470296)), new $Int64(s12.$high + x$334.$high, s12.$low + x$334.$low));
		s13 = (x$335 = $mul64(s23, new $Int64(0, 654183)), new $Int64(s13.$high + x$335.$high, s13.$low + x$335.$low));
		s14 = (x$336 = $mul64(s23, new $Int64(0, 997805)), new $Int64(s14.$high - x$336.$high, s14.$low - x$336.$low));
		s15 = (x$337 = $mul64(s23, new $Int64(0, 136657)), new $Int64(s15.$high + x$337.$high, s15.$low + x$337.$low));
		s16 = (x$338 = $mul64(s23, new $Int64(0, 683901)), new $Int64(s16.$high - x$338.$high, s16.$low - x$338.$low));
		s23 = new $Int64(0, 0);
		s10 = (x$339 = $mul64(s22, new $Int64(0, 666643)), new $Int64(s10.$high + x$339.$high, s10.$low + x$339.$low));
		s11 = (x$340 = $mul64(s22, new $Int64(0, 470296)), new $Int64(s11.$high + x$340.$high, s11.$low + x$340.$low));
		s12 = (x$341 = $mul64(s22, new $Int64(0, 654183)), new $Int64(s12.$high + x$341.$high, s12.$low + x$341.$low));
		s13 = (x$342 = $mul64(s22, new $Int64(0, 997805)), new $Int64(s13.$high - x$342.$high, s13.$low - x$342.$low));
		s14 = (x$343 = $mul64(s22, new $Int64(0, 136657)), new $Int64(s14.$high + x$343.$high, s14.$low + x$343.$low));
		s15 = (x$344 = $mul64(s22, new $Int64(0, 683901)), new $Int64(s15.$high - x$344.$high, s15.$low - x$344.$low));
		s22 = new $Int64(0, 0);
		s9 = (x$345 = $mul64(s21, new $Int64(0, 666643)), new $Int64(s9.$high + x$345.$high, s9.$low + x$345.$low));
		s10 = (x$346 = $mul64(s21, new $Int64(0, 470296)), new $Int64(s10.$high + x$346.$high, s10.$low + x$346.$low));
		s11 = (x$347 = $mul64(s21, new $Int64(0, 654183)), new $Int64(s11.$high + x$347.$high, s11.$low + x$347.$low));
		s12 = (x$348 = $mul64(s21, new $Int64(0, 997805)), new $Int64(s12.$high - x$348.$high, s12.$low - x$348.$low));
		s13 = (x$349 = $mul64(s21, new $Int64(0, 136657)), new $Int64(s13.$high + x$349.$high, s13.$low + x$349.$low));
		s14 = (x$350 = $mul64(s21, new $Int64(0, 683901)), new $Int64(s14.$high - x$350.$high, s14.$low - x$350.$low));
		s21 = new $Int64(0, 0);
		s8 = (x$351 = $mul64(s20, new $Int64(0, 666643)), new $Int64(s8.$high + x$351.$high, s8.$low + x$351.$low));
		s9 = (x$352 = $mul64(s20, new $Int64(0, 470296)), new $Int64(s9.$high + x$352.$high, s9.$low + x$352.$low));
		s10 = (x$353 = $mul64(s20, new $Int64(0, 654183)), new $Int64(s10.$high + x$353.$high, s10.$low + x$353.$low));
		s11 = (x$354 = $mul64(s20, new $Int64(0, 997805)), new $Int64(s11.$high - x$354.$high, s11.$low - x$354.$low));
		s12 = (x$355 = $mul64(s20, new $Int64(0, 136657)), new $Int64(s12.$high + x$355.$high, s12.$low + x$355.$low));
		s13 = (x$356 = $mul64(s20, new $Int64(0, 683901)), new $Int64(s13.$high - x$356.$high, s13.$low - x$356.$low));
		s20 = new $Int64(0, 0);
		s7 = (x$357 = $mul64(s19, new $Int64(0, 666643)), new $Int64(s7.$high + x$357.$high, s7.$low + x$357.$low));
		s8 = (x$358 = $mul64(s19, new $Int64(0, 470296)), new $Int64(s8.$high + x$358.$high, s8.$low + x$358.$low));
		s9 = (x$359 = $mul64(s19, new $Int64(0, 654183)), new $Int64(s9.$high + x$359.$high, s9.$low + x$359.$low));
		s10 = (x$360 = $mul64(s19, new $Int64(0, 997805)), new $Int64(s10.$high - x$360.$high, s10.$low - x$360.$low));
		s11 = (x$361 = $mul64(s19, new $Int64(0, 136657)), new $Int64(s11.$high + x$361.$high, s11.$low + x$361.$low));
		s12 = (x$362 = $mul64(s19, new $Int64(0, 683901)), new $Int64(s12.$high - x$362.$high, s12.$low - x$362.$low));
		s19 = new $Int64(0, 0);
		s6 = (x$363 = $mul64(s18, new $Int64(0, 666643)), new $Int64(s6.$high + x$363.$high, s6.$low + x$363.$low));
		s7 = (x$364 = $mul64(s18, new $Int64(0, 470296)), new $Int64(s7.$high + x$364.$high, s7.$low + x$364.$low));
		s8 = (x$365 = $mul64(s18, new $Int64(0, 654183)), new $Int64(s8.$high + x$365.$high, s8.$low + x$365.$low));
		s9 = (x$366 = $mul64(s18, new $Int64(0, 997805)), new $Int64(s9.$high - x$366.$high, s9.$low - x$366.$low));
		s10 = (x$367 = $mul64(s18, new $Int64(0, 136657)), new $Int64(s10.$high + x$367.$high, s10.$low + x$367.$low));
		s11 = (x$368 = $mul64(s18, new $Int64(0, 683901)), new $Int64(s11.$high - x$368.$high, s11.$low - x$368.$low));
		s18 = new $Int64(0, 0);
		carry[6] = $shiftRightInt64((new $Int64(s6.$high + 0, s6.$low + 1048576)), 21);
		s7 = (x$369 = carry[6], new $Int64(s7.$high + x$369.$high, s7.$low + x$369.$low));
		s6 = (x$370 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$370.$high, s6.$low - x$370.$low));
		carry[8] = $shiftRightInt64((new $Int64(s8.$high + 0, s8.$low + 1048576)), 21);
		s9 = (x$371 = carry[8], new $Int64(s9.$high + x$371.$high, s9.$low + x$371.$low));
		s8 = (x$372 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$372.$high, s8.$low - x$372.$low));
		carry[10] = $shiftRightInt64((new $Int64(s10.$high + 0, s10.$low + 1048576)), 21);
		s11 = (x$373 = carry[10], new $Int64(s11.$high + x$373.$high, s11.$low + x$373.$low));
		s10 = (x$374 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$374.$high, s10.$low - x$374.$low));
		carry[12] = $shiftRightInt64((new $Int64(s12.$high + 0, s12.$low + 1048576)), 21);
		s13 = (x$375 = carry[12], new $Int64(s13.$high + x$375.$high, s13.$low + x$375.$low));
		s12 = (x$376 = $shiftLeft64(carry[12], 21), new $Int64(s12.$high - x$376.$high, s12.$low - x$376.$low));
		carry[14] = $shiftRightInt64((new $Int64(s14.$high + 0, s14.$low + 1048576)), 21);
		s15 = (x$377 = carry[14], new $Int64(s15.$high + x$377.$high, s15.$low + x$377.$low));
		s14 = (x$378 = $shiftLeft64(carry[14], 21), new $Int64(s14.$high - x$378.$high, s14.$low - x$378.$low));
		carry[16] = $shiftRightInt64((new $Int64(s16.$high + 0, s16.$low + 1048576)), 21);
		s17 = (x$379 = carry[16], new $Int64(s17.$high + x$379.$high, s17.$low + x$379.$low));
		s16 = (x$380 = $shiftLeft64(carry[16], 21), new $Int64(s16.$high - x$380.$high, s16.$low - x$380.$low));
		carry[7] = $shiftRightInt64((new $Int64(s7.$high + 0, s7.$low + 1048576)), 21);
		s8 = (x$381 = carry[7], new $Int64(s8.$high + x$381.$high, s8.$low + x$381.$low));
		s7 = (x$382 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$382.$high, s7.$low - x$382.$low));
		carry[9] = $shiftRightInt64((new $Int64(s9.$high + 0, s9.$low + 1048576)), 21);
		s10 = (x$383 = carry[9], new $Int64(s10.$high + x$383.$high, s10.$low + x$383.$low));
		s9 = (x$384 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$384.$high, s9.$low - x$384.$low));
		carry[11] = $shiftRightInt64((new $Int64(s11.$high + 0, s11.$low + 1048576)), 21);
		s12 = (x$385 = carry[11], new $Int64(s12.$high + x$385.$high, s12.$low + x$385.$low));
		s11 = (x$386 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$386.$high, s11.$low - x$386.$low));
		carry[13] = $shiftRightInt64((new $Int64(s13.$high + 0, s13.$low + 1048576)), 21);
		s14 = (x$387 = carry[13], new $Int64(s14.$high + x$387.$high, s14.$low + x$387.$low));
		s13 = (x$388 = $shiftLeft64(carry[13], 21), new $Int64(s13.$high - x$388.$high, s13.$low - x$388.$low));
		carry[15] = $shiftRightInt64((new $Int64(s15.$high + 0, s15.$low + 1048576)), 21);
		s16 = (x$389 = carry[15], new $Int64(s16.$high + x$389.$high, s16.$low + x$389.$low));
		s15 = (x$390 = $shiftLeft64(carry[15], 21), new $Int64(s15.$high - x$390.$high, s15.$low - x$390.$low));
		s5 = (x$391 = $mul64(s17, new $Int64(0, 666643)), new $Int64(s5.$high + x$391.$high, s5.$low + x$391.$low));
		s6 = (x$392 = $mul64(s17, new $Int64(0, 470296)), new $Int64(s6.$high + x$392.$high, s6.$low + x$392.$low));
		s7 = (x$393 = $mul64(s17, new $Int64(0, 654183)), new $Int64(s7.$high + x$393.$high, s7.$low + x$393.$low));
		s8 = (x$394 = $mul64(s17, new $Int64(0, 997805)), new $Int64(s8.$high - x$394.$high, s8.$low - x$394.$low));
		s9 = (x$395 = $mul64(s17, new $Int64(0, 136657)), new $Int64(s9.$high + x$395.$high, s9.$low + x$395.$low));
		s10 = (x$396 = $mul64(s17, new $Int64(0, 683901)), new $Int64(s10.$high - x$396.$high, s10.$low - x$396.$low));
		s17 = new $Int64(0, 0);
		s4 = (x$397 = $mul64(s16, new $Int64(0, 666643)), new $Int64(s4.$high + x$397.$high, s4.$low + x$397.$low));
		s5 = (x$398 = $mul64(s16, new $Int64(0, 470296)), new $Int64(s5.$high + x$398.$high, s5.$low + x$398.$low));
		s6 = (x$399 = $mul64(s16, new $Int64(0, 654183)), new $Int64(s6.$high + x$399.$high, s6.$low + x$399.$low));
		s7 = (x$400 = $mul64(s16, new $Int64(0, 997805)), new $Int64(s7.$high - x$400.$high, s7.$low - x$400.$low));
		s8 = (x$401 = $mul64(s16, new $Int64(0, 136657)), new $Int64(s8.$high + x$401.$high, s8.$low + x$401.$low));
		s9 = (x$402 = $mul64(s16, new $Int64(0, 683901)), new $Int64(s9.$high - x$402.$high, s9.$low - x$402.$low));
		s16 = new $Int64(0, 0);
		s3 = (x$403 = $mul64(s15, new $Int64(0, 666643)), new $Int64(s3.$high + x$403.$high, s3.$low + x$403.$low));
		s4 = (x$404 = $mul64(s15, new $Int64(0, 470296)), new $Int64(s4.$high + x$404.$high, s4.$low + x$404.$low));
		s5 = (x$405 = $mul64(s15, new $Int64(0, 654183)), new $Int64(s5.$high + x$405.$high, s5.$low + x$405.$low));
		s6 = (x$406 = $mul64(s15, new $Int64(0, 997805)), new $Int64(s6.$high - x$406.$high, s6.$low - x$406.$low));
		s7 = (x$407 = $mul64(s15, new $Int64(0, 136657)), new $Int64(s7.$high + x$407.$high, s7.$low + x$407.$low));
		s8 = (x$408 = $mul64(s15, new $Int64(0, 683901)), new $Int64(s8.$high - x$408.$high, s8.$low - x$408.$low));
		s15 = new $Int64(0, 0);
		s2 = (x$409 = $mul64(s14, new $Int64(0, 666643)), new $Int64(s2.$high + x$409.$high, s2.$low + x$409.$low));
		s3 = (x$410 = $mul64(s14, new $Int64(0, 470296)), new $Int64(s3.$high + x$410.$high, s3.$low + x$410.$low));
		s4 = (x$411 = $mul64(s14, new $Int64(0, 654183)), new $Int64(s4.$high + x$411.$high, s4.$low + x$411.$low));
		s5 = (x$412 = $mul64(s14, new $Int64(0, 997805)), new $Int64(s5.$high - x$412.$high, s5.$low - x$412.$low));
		s6 = (x$413 = $mul64(s14, new $Int64(0, 136657)), new $Int64(s6.$high + x$413.$high, s6.$low + x$413.$low));
		s7 = (x$414 = $mul64(s14, new $Int64(0, 683901)), new $Int64(s7.$high - x$414.$high, s7.$low - x$414.$low));
		s14 = new $Int64(0, 0);
		s1 = (x$415 = $mul64(s13, new $Int64(0, 666643)), new $Int64(s1.$high + x$415.$high, s1.$low + x$415.$low));
		s2 = (x$416 = $mul64(s13, new $Int64(0, 470296)), new $Int64(s2.$high + x$416.$high, s2.$low + x$416.$low));
		s3 = (x$417 = $mul64(s13, new $Int64(0, 654183)), new $Int64(s3.$high + x$417.$high, s3.$low + x$417.$low));
		s4 = (x$418 = $mul64(s13, new $Int64(0, 997805)), new $Int64(s4.$high - x$418.$high, s4.$low - x$418.$low));
		s5 = (x$419 = $mul64(s13, new $Int64(0, 136657)), new $Int64(s5.$high + x$419.$high, s5.$low + x$419.$low));
		s6 = (x$420 = $mul64(s13, new $Int64(0, 683901)), new $Int64(s6.$high - x$420.$high, s6.$low - x$420.$low));
		s13 = new $Int64(0, 0);
		s0 = (x$421 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$421.$high, s0.$low + x$421.$low));
		s1 = (x$422 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$422.$high, s1.$low + x$422.$low));
		s2 = (x$423 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$423.$high, s2.$low + x$423.$low));
		s3 = (x$424 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$424.$high, s3.$low - x$424.$low));
		s4 = (x$425 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$425.$high, s4.$low + x$425.$low));
		s5 = (x$426 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$426.$high, s5.$low - x$426.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64((new $Int64(s0.$high + 0, s0.$low + 1048576)), 21);
		s1 = (x$427 = carry[0], new $Int64(s1.$high + x$427.$high, s1.$low + x$427.$low));
		s0 = (x$428 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$428.$high, s0.$low - x$428.$low));
		carry[2] = $shiftRightInt64((new $Int64(s2.$high + 0, s2.$low + 1048576)), 21);
		s3 = (x$429 = carry[2], new $Int64(s3.$high + x$429.$high, s3.$low + x$429.$low));
		s2 = (x$430 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$430.$high, s2.$low - x$430.$low));
		carry[4] = $shiftRightInt64((new $Int64(s4.$high + 0, s4.$low + 1048576)), 21);
		s5 = (x$431 = carry[4], new $Int64(s5.$high + x$431.$high, s5.$low + x$431.$low));
		s4 = (x$432 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$432.$high, s4.$low - x$432.$low));
		carry[6] = $shiftRightInt64((new $Int64(s6.$high + 0, s6.$low + 1048576)), 21);
		s7 = (x$433 = carry[6], new $Int64(s7.$high + x$433.$high, s7.$low + x$433.$low));
		s6 = (x$434 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$434.$high, s6.$low - x$434.$low));
		carry[8] = $shiftRightInt64((new $Int64(s8.$high + 0, s8.$low + 1048576)), 21);
		s9 = (x$435 = carry[8], new $Int64(s9.$high + x$435.$high, s9.$low + x$435.$low));
		s8 = (x$436 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$436.$high, s8.$low - x$436.$low));
		carry[10] = $shiftRightInt64((new $Int64(s10.$high + 0, s10.$low + 1048576)), 21);
		s11 = (x$437 = carry[10], new $Int64(s11.$high + x$437.$high, s11.$low + x$437.$low));
		s10 = (x$438 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$438.$high, s10.$low - x$438.$low));
		carry[1] = $shiftRightInt64((new $Int64(s1.$high + 0, s1.$low + 1048576)), 21);
		s2 = (x$439 = carry[1], new $Int64(s2.$high + x$439.$high, s2.$low + x$439.$low));
		s1 = (x$440 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$440.$high, s1.$low - x$440.$low));
		carry[3] = $shiftRightInt64((new $Int64(s3.$high + 0, s3.$low + 1048576)), 21);
		s4 = (x$441 = carry[3], new $Int64(s4.$high + x$441.$high, s4.$low + x$441.$low));
		s3 = (x$442 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$442.$high, s3.$low - x$442.$low));
		carry[5] = $shiftRightInt64((new $Int64(s5.$high + 0, s5.$low + 1048576)), 21);
		s6 = (x$443 = carry[5], new $Int64(s6.$high + x$443.$high, s6.$low + x$443.$low));
		s5 = (x$444 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$444.$high, s5.$low - x$444.$low));
		carry[7] = $shiftRightInt64((new $Int64(s7.$high + 0, s7.$low + 1048576)), 21);
		s8 = (x$445 = carry[7], new $Int64(s8.$high + x$445.$high, s8.$low + x$445.$low));
		s7 = (x$446 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$446.$high, s7.$low - x$446.$low));
		carry[9] = $shiftRightInt64((new $Int64(s9.$high + 0, s9.$low + 1048576)), 21);
		s10 = (x$447 = carry[9], new $Int64(s10.$high + x$447.$high, s10.$low + x$447.$low));
		s9 = (x$448 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$448.$high, s9.$low - x$448.$low));
		carry[11] = $shiftRightInt64((new $Int64(s11.$high + 0, s11.$low + 1048576)), 21);
		s12 = (x$449 = carry[11], new $Int64(s12.$high + x$449.$high, s12.$low + x$449.$low));
		s11 = (x$450 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$450.$high, s11.$low - x$450.$low));
		s0 = (x$451 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$451.$high, s0.$low + x$451.$low));
		s1 = (x$452 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$452.$high, s1.$low + x$452.$low));
		s2 = (x$453 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$453.$high, s2.$low + x$453.$low));
		s3 = (x$454 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$454.$high, s3.$low - x$454.$low));
		s4 = (x$455 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$455.$high, s4.$low + x$455.$low));
		s5 = (x$456 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$456.$high, s5.$low - x$456.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64(s0, 21);
		s1 = (x$457 = carry[0], new $Int64(s1.$high + x$457.$high, s1.$low + x$457.$low));
		s0 = (x$458 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$458.$high, s0.$low - x$458.$low));
		carry[1] = $shiftRightInt64(s1, 21);
		s2 = (x$459 = carry[1], new $Int64(s2.$high + x$459.$high, s2.$low + x$459.$low));
		s1 = (x$460 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$460.$high, s1.$low - x$460.$low));
		carry[2] = $shiftRightInt64(s2, 21);
		s3 = (x$461 = carry[2], new $Int64(s3.$high + x$461.$high, s3.$low + x$461.$low));
		s2 = (x$462 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$462.$high, s2.$low - x$462.$low));
		carry[3] = $shiftRightInt64(s3, 21);
		s4 = (x$463 = carry[3], new $Int64(s4.$high + x$463.$high, s4.$low + x$463.$low));
		s3 = (x$464 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$464.$high, s3.$low - x$464.$low));
		carry[4] = $shiftRightInt64(s4, 21);
		s5 = (x$465 = carry[4], new $Int64(s5.$high + x$465.$high, s5.$low + x$465.$low));
		s4 = (x$466 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$466.$high, s4.$low - x$466.$low));
		carry[5] = $shiftRightInt64(s5, 21);
		s6 = (x$467 = carry[5], new $Int64(s6.$high + x$467.$high, s6.$low + x$467.$low));
		s5 = (x$468 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$468.$high, s5.$low - x$468.$low));
		carry[6] = $shiftRightInt64(s6, 21);
		s7 = (x$469 = carry[6], new $Int64(s7.$high + x$469.$high, s7.$low + x$469.$low));
		s6 = (x$470 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$470.$high, s6.$low - x$470.$low));
		carry[7] = $shiftRightInt64(s7, 21);
		s8 = (x$471 = carry[7], new $Int64(s8.$high + x$471.$high, s8.$low + x$471.$low));
		s7 = (x$472 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$472.$high, s7.$low - x$472.$low));
		carry[8] = $shiftRightInt64(s8, 21);
		s9 = (x$473 = carry[8], new $Int64(s9.$high + x$473.$high, s9.$low + x$473.$low));
		s8 = (x$474 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$474.$high, s8.$low - x$474.$low));
		carry[9] = $shiftRightInt64(s9, 21);
		s10 = (x$475 = carry[9], new $Int64(s10.$high + x$475.$high, s10.$low + x$475.$low));
		s9 = (x$476 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$476.$high, s9.$low - x$476.$low));
		carry[10] = $shiftRightInt64(s10, 21);
		s11 = (x$477 = carry[10], new $Int64(s11.$high + x$477.$high, s11.$low + x$477.$low));
		s10 = (x$478 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$478.$high, s10.$low - x$478.$low));
		carry[11] = $shiftRightInt64(s11, 21);
		s12 = (x$479 = carry[11], new $Int64(s12.$high + x$479.$high, s12.$low + x$479.$low));
		s11 = (x$480 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$480.$high, s11.$low - x$480.$low));
		s0 = (x$481 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$481.$high, s0.$low + x$481.$low));
		s1 = (x$482 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$482.$high, s1.$low + x$482.$low));
		s2 = (x$483 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$483.$high, s2.$low + x$483.$low));
		s3 = (x$484 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$484.$high, s3.$low - x$484.$low));
		s4 = (x$485 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$485.$high, s4.$low + x$485.$low));
		s5 = (x$486 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$486.$high, s5.$low - x$486.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64(s0, 21);
		s1 = (x$487 = carry[0], new $Int64(s1.$high + x$487.$high, s1.$low + x$487.$low));
		s0 = (x$488 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$488.$high, s0.$low - x$488.$low));
		carry[1] = $shiftRightInt64(s1, 21);
		s2 = (x$489 = carry[1], new $Int64(s2.$high + x$489.$high, s2.$low + x$489.$low));
		s1 = (x$490 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$490.$high, s1.$low - x$490.$low));
		carry[2] = $shiftRightInt64(s2, 21);
		s3 = (x$491 = carry[2], new $Int64(s3.$high + x$491.$high, s3.$low + x$491.$low));
		s2 = (x$492 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$492.$high, s2.$low - x$492.$low));
		carry[3] = $shiftRightInt64(s3, 21);
		s4 = (x$493 = carry[3], new $Int64(s4.$high + x$493.$high, s4.$low + x$493.$low));
		s3 = (x$494 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$494.$high, s3.$low - x$494.$low));
		carry[4] = $shiftRightInt64(s4, 21);
		s5 = (x$495 = carry[4], new $Int64(s5.$high + x$495.$high, s5.$low + x$495.$low));
		s4 = (x$496 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$496.$high, s4.$low - x$496.$low));
		carry[5] = $shiftRightInt64(s5, 21);
		s6 = (x$497 = carry[5], new $Int64(s6.$high + x$497.$high, s6.$low + x$497.$low));
		s5 = (x$498 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$498.$high, s5.$low - x$498.$low));
		carry[6] = $shiftRightInt64(s6, 21);
		s7 = (x$499 = carry[6], new $Int64(s7.$high + x$499.$high, s7.$low + x$499.$low));
		s6 = (x$500 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$500.$high, s6.$low - x$500.$low));
		carry[7] = $shiftRightInt64(s7, 21);
		s8 = (x$501 = carry[7], new $Int64(s8.$high + x$501.$high, s8.$low + x$501.$low));
		s7 = (x$502 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$502.$high, s7.$low - x$502.$low));
		carry[8] = $shiftRightInt64(s8, 21);
		s9 = (x$503 = carry[8], new $Int64(s9.$high + x$503.$high, s9.$low + x$503.$low));
		s8 = (x$504 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$504.$high, s8.$low - x$504.$low));
		carry[9] = $shiftRightInt64(s9, 21);
		s10 = (x$505 = carry[9], new $Int64(s10.$high + x$505.$high, s10.$low + x$505.$low));
		s9 = (x$506 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$506.$high, s9.$low - x$506.$low));
		carry[10] = $shiftRightInt64(s10, 21);
		s11 = (x$507 = carry[10], new $Int64(s11.$high + x$507.$high, s11.$low + x$507.$low));
		s10 = (x$508 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$508.$high, s10.$low - x$508.$low));
		s.nilCheck, s[0] = (($shiftRightInt64(s0, 0).$low << 24 >>> 24));
		s.nilCheck, s[1] = (($shiftRightInt64(s0, 8).$low << 24 >>> 24));
		s.nilCheck, s[2] = (((x$509 = $shiftRightInt64(s0, 16), x$510 = $shiftLeft64(s1, 5), new $Int64(x$509.$high | x$510.$high, (x$509.$low | x$510.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[3] = (($shiftRightInt64(s1, 3).$low << 24 >>> 24));
		s.nilCheck, s[4] = (($shiftRightInt64(s1, 11).$low << 24 >>> 24));
		s.nilCheck, s[5] = (((x$511 = $shiftRightInt64(s1, 19), x$512 = $shiftLeft64(s2, 2), new $Int64(x$511.$high | x$512.$high, (x$511.$low | x$512.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[6] = (($shiftRightInt64(s2, 6).$low << 24 >>> 24));
		s.nilCheck, s[7] = (((x$513 = $shiftRightInt64(s2, 14), x$514 = $shiftLeft64(s3, 7), new $Int64(x$513.$high | x$514.$high, (x$513.$low | x$514.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[8] = (($shiftRightInt64(s3, 1).$low << 24 >>> 24));
		s.nilCheck, s[9] = (($shiftRightInt64(s3, 9).$low << 24 >>> 24));
		s.nilCheck, s[10] = (((x$515 = $shiftRightInt64(s3, 17), x$516 = $shiftLeft64(s4, 4), new $Int64(x$515.$high | x$516.$high, (x$515.$low | x$516.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[11] = (($shiftRightInt64(s4, 4).$low << 24 >>> 24));
		s.nilCheck, s[12] = (($shiftRightInt64(s4, 12).$low << 24 >>> 24));
		s.nilCheck, s[13] = (((x$517 = $shiftRightInt64(s4, 20), x$518 = $shiftLeft64(s5, 1), new $Int64(x$517.$high | x$518.$high, (x$517.$low | x$518.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[14] = (($shiftRightInt64(s5, 7).$low << 24 >>> 24));
		s.nilCheck, s[15] = (((x$519 = $shiftRightInt64(s5, 15), x$520 = $shiftLeft64(s6, 6), new $Int64(x$519.$high | x$520.$high, (x$519.$low | x$520.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[16] = (($shiftRightInt64(s6, 2).$low << 24 >>> 24));
		s.nilCheck, s[17] = (($shiftRightInt64(s6, 10).$low << 24 >>> 24));
		s.nilCheck, s[18] = (((x$521 = $shiftRightInt64(s6, 18), x$522 = $shiftLeft64(s7, 3), new $Int64(x$521.$high | x$522.$high, (x$521.$low | x$522.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[19] = (($shiftRightInt64(s7, 5).$low << 24 >>> 24));
		s.nilCheck, s[20] = (($shiftRightInt64(s7, 13).$low << 24 >>> 24));
		s.nilCheck, s[21] = (($shiftRightInt64(s8, 0).$low << 24 >>> 24));
		s.nilCheck, s[22] = (($shiftRightInt64(s8, 8).$low << 24 >>> 24));
		s.nilCheck, s[23] = (((x$523 = $shiftRightInt64(s8, 16), x$524 = $shiftLeft64(s9, 5), new $Int64(x$523.$high | x$524.$high, (x$523.$low | x$524.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[24] = (($shiftRightInt64(s9, 3).$low << 24 >>> 24));
		s.nilCheck, s[25] = (($shiftRightInt64(s9, 11).$low << 24 >>> 24));
		s.nilCheck, s[26] = (((x$525 = $shiftRightInt64(s9, 19), x$526 = $shiftLeft64(s10, 2), new $Int64(x$525.$high | x$526.$high, (x$525.$low | x$526.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[27] = (($shiftRightInt64(s10, 6).$low << 24 >>> 24));
		s.nilCheck, s[28] = (((x$527 = $shiftRightInt64(s10, 14), x$528 = $shiftLeft64(s11, 7), new $Int64(x$527.$high | x$528.$high, (x$527.$low | x$528.$low) >>> 0)).$low << 24 >>> 24));
		s.nilCheck, s[29] = (($shiftRightInt64(s11, 1).$low << 24 >>> 24));
		s.nilCheck, s[30] = (($shiftRightInt64(s11, 9).$low << 24 >>> 24));
		s.nilCheck, s[31] = (($shiftRightInt64(s11, 17).$low << 24 >>> 24));
	};
	scReduce = function(out, s) {
		var carry, out, s, s0, s1, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s2, s20, s21, s22, s23, s3, s4, s5, s6, s7, s8, s9, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99;
		s0 = (x = load3(new sliceType(s)), new $Int64(0 & x.$high, (2097151 & x.$low) >>> 0));
		s1 = (x$1 = $shiftRightInt64(load4($subslice(new sliceType(s), 2)), 5), new $Int64(0 & x$1.$high, (2097151 & x$1.$low) >>> 0));
		s2 = (x$2 = $shiftRightInt64(load3($subslice(new sliceType(s), 5)), 2), new $Int64(0 & x$2.$high, (2097151 & x$2.$low) >>> 0));
		s3 = (x$3 = $shiftRightInt64(load4($subslice(new sliceType(s), 7)), 7), new $Int64(0 & x$3.$high, (2097151 & x$3.$low) >>> 0));
		s4 = (x$4 = $shiftRightInt64(load4($subslice(new sliceType(s), 10)), 4), new $Int64(0 & x$4.$high, (2097151 & x$4.$low) >>> 0));
		s5 = (x$5 = $shiftRightInt64(load3($subslice(new sliceType(s), 13)), 1), new $Int64(0 & x$5.$high, (2097151 & x$5.$low) >>> 0));
		s6 = (x$6 = $shiftRightInt64(load4($subslice(new sliceType(s), 15)), 6), new $Int64(0 & x$6.$high, (2097151 & x$6.$low) >>> 0));
		s7 = (x$7 = $shiftRightInt64(load3($subslice(new sliceType(s), 18)), 3), new $Int64(0 & x$7.$high, (2097151 & x$7.$low) >>> 0));
		s8 = (x$8 = load3($subslice(new sliceType(s), 21)), new $Int64(0 & x$8.$high, (2097151 & x$8.$low) >>> 0));
		s9 = (x$9 = $shiftRightInt64(load4($subslice(new sliceType(s), 23)), 5), new $Int64(0 & x$9.$high, (2097151 & x$9.$low) >>> 0));
		s10 = (x$10 = $shiftRightInt64(load3($subslice(new sliceType(s), 26)), 2), new $Int64(0 & x$10.$high, (2097151 & x$10.$low) >>> 0));
		s11 = (x$11 = $shiftRightInt64(load4($subslice(new sliceType(s), 28)), 7), new $Int64(0 & x$11.$high, (2097151 & x$11.$low) >>> 0));
		s12 = (x$12 = $shiftRightInt64(load4($subslice(new sliceType(s), 31)), 4), new $Int64(0 & x$12.$high, (2097151 & x$12.$low) >>> 0));
		s13 = (x$13 = $shiftRightInt64(load3($subslice(new sliceType(s), 34)), 1), new $Int64(0 & x$13.$high, (2097151 & x$13.$low) >>> 0));
		s14 = (x$14 = $shiftRightInt64(load4($subslice(new sliceType(s), 36)), 6), new $Int64(0 & x$14.$high, (2097151 & x$14.$low) >>> 0));
		s15 = (x$15 = $shiftRightInt64(load3($subslice(new sliceType(s), 39)), 3), new $Int64(0 & x$15.$high, (2097151 & x$15.$low) >>> 0));
		s16 = (x$16 = load3($subslice(new sliceType(s), 42)), new $Int64(0 & x$16.$high, (2097151 & x$16.$low) >>> 0));
		s17 = (x$17 = $shiftRightInt64(load4($subslice(new sliceType(s), 44)), 5), new $Int64(0 & x$17.$high, (2097151 & x$17.$low) >>> 0));
		s18 = (x$18 = $shiftRightInt64(load3($subslice(new sliceType(s), 47)), 2), new $Int64(0 & x$18.$high, (2097151 & x$18.$low) >>> 0));
		s19 = (x$19 = $shiftRightInt64(load4($subslice(new sliceType(s), 49)), 7), new $Int64(0 & x$19.$high, (2097151 & x$19.$low) >>> 0));
		s20 = (x$20 = $shiftRightInt64(load4($subslice(new sliceType(s), 52)), 4), new $Int64(0 & x$20.$high, (2097151 & x$20.$low) >>> 0));
		s21 = (x$21 = $shiftRightInt64(load3($subslice(new sliceType(s), 55)), 1), new $Int64(0 & x$21.$high, (2097151 & x$21.$low) >>> 0));
		s22 = (x$22 = $shiftRightInt64(load4($subslice(new sliceType(s), 57)), 6), new $Int64(0 & x$22.$high, (2097151 & x$22.$low) >>> 0));
		s23 = $shiftRightInt64(load4($subslice(new sliceType(s), 60)), 3);
		s11 = (x$23 = $mul64(s23, new $Int64(0, 666643)), new $Int64(s11.$high + x$23.$high, s11.$low + x$23.$low));
		s12 = (x$24 = $mul64(s23, new $Int64(0, 470296)), new $Int64(s12.$high + x$24.$high, s12.$low + x$24.$low));
		s13 = (x$25 = $mul64(s23, new $Int64(0, 654183)), new $Int64(s13.$high + x$25.$high, s13.$low + x$25.$low));
		s14 = (x$26 = $mul64(s23, new $Int64(0, 997805)), new $Int64(s14.$high - x$26.$high, s14.$low - x$26.$low));
		s15 = (x$27 = $mul64(s23, new $Int64(0, 136657)), new $Int64(s15.$high + x$27.$high, s15.$low + x$27.$low));
		s16 = (x$28 = $mul64(s23, new $Int64(0, 683901)), new $Int64(s16.$high - x$28.$high, s16.$low - x$28.$low));
		s23 = new $Int64(0, 0);
		s10 = (x$29 = $mul64(s22, new $Int64(0, 666643)), new $Int64(s10.$high + x$29.$high, s10.$low + x$29.$low));
		s11 = (x$30 = $mul64(s22, new $Int64(0, 470296)), new $Int64(s11.$high + x$30.$high, s11.$low + x$30.$low));
		s12 = (x$31 = $mul64(s22, new $Int64(0, 654183)), new $Int64(s12.$high + x$31.$high, s12.$low + x$31.$low));
		s13 = (x$32 = $mul64(s22, new $Int64(0, 997805)), new $Int64(s13.$high - x$32.$high, s13.$low - x$32.$low));
		s14 = (x$33 = $mul64(s22, new $Int64(0, 136657)), new $Int64(s14.$high + x$33.$high, s14.$low + x$33.$low));
		s15 = (x$34 = $mul64(s22, new $Int64(0, 683901)), new $Int64(s15.$high - x$34.$high, s15.$low - x$34.$low));
		s22 = new $Int64(0, 0);
		s9 = (x$35 = $mul64(s21, new $Int64(0, 666643)), new $Int64(s9.$high + x$35.$high, s9.$low + x$35.$low));
		s10 = (x$36 = $mul64(s21, new $Int64(0, 470296)), new $Int64(s10.$high + x$36.$high, s10.$low + x$36.$low));
		s11 = (x$37 = $mul64(s21, new $Int64(0, 654183)), new $Int64(s11.$high + x$37.$high, s11.$low + x$37.$low));
		s12 = (x$38 = $mul64(s21, new $Int64(0, 997805)), new $Int64(s12.$high - x$38.$high, s12.$low - x$38.$low));
		s13 = (x$39 = $mul64(s21, new $Int64(0, 136657)), new $Int64(s13.$high + x$39.$high, s13.$low + x$39.$low));
		s14 = (x$40 = $mul64(s21, new $Int64(0, 683901)), new $Int64(s14.$high - x$40.$high, s14.$low - x$40.$low));
		s21 = new $Int64(0, 0);
		s8 = (x$41 = $mul64(s20, new $Int64(0, 666643)), new $Int64(s8.$high + x$41.$high, s8.$low + x$41.$low));
		s9 = (x$42 = $mul64(s20, new $Int64(0, 470296)), new $Int64(s9.$high + x$42.$high, s9.$low + x$42.$low));
		s10 = (x$43 = $mul64(s20, new $Int64(0, 654183)), new $Int64(s10.$high + x$43.$high, s10.$low + x$43.$low));
		s11 = (x$44 = $mul64(s20, new $Int64(0, 997805)), new $Int64(s11.$high - x$44.$high, s11.$low - x$44.$low));
		s12 = (x$45 = $mul64(s20, new $Int64(0, 136657)), new $Int64(s12.$high + x$45.$high, s12.$low + x$45.$low));
		s13 = (x$46 = $mul64(s20, new $Int64(0, 683901)), new $Int64(s13.$high - x$46.$high, s13.$low - x$46.$low));
		s20 = new $Int64(0, 0);
		s7 = (x$47 = $mul64(s19, new $Int64(0, 666643)), new $Int64(s7.$high + x$47.$high, s7.$low + x$47.$low));
		s8 = (x$48 = $mul64(s19, new $Int64(0, 470296)), new $Int64(s8.$high + x$48.$high, s8.$low + x$48.$low));
		s9 = (x$49 = $mul64(s19, new $Int64(0, 654183)), new $Int64(s9.$high + x$49.$high, s9.$low + x$49.$low));
		s10 = (x$50 = $mul64(s19, new $Int64(0, 997805)), new $Int64(s10.$high - x$50.$high, s10.$low - x$50.$low));
		s11 = (x$51 = $mul64(s19, new $Int64(0, 136657)), new $Int64(s11.$high + x$51.$high, s11.$low + x$51.$low));
		s12 = (x$52 = $mul64(s19, new $Int64(0, 683901)), new $Int64(s12.$high - x$52.$high, s12.$low - x$52.$low));
		s19 = new $Int64(0, 0);
		s6 = (x$53 = $mul64(s18, new $Int64(0, 666643)), new $Int64(s6.$high + x$53.$high, s6.$low + x$53.$low));
		s7 = (x$54 = $mul64(s18, new $Int64(0, 470296)), new $Int64(s7.$high + x$54.$high, s7.$low + x$54.$low));
		s8 = (x$55 = $mul64(s18, new $Int64(0, 654183)), new $Int64(s8.$high + x$55.$high, s8.$low + x$55.$low));
		s9 = (x$56 = $mul64(s18, new $Int64(0, 997805)), new $Int64(s9.$high - x$56.$high, s9.$low - x$56.$low));
		s10 = (x$57 = $mul64(s18, new $Int64(0, 136657)), new $Int64(s10.$high + x$57.$high, s10.$low + x$57.$low));
		s11 = (x$58 = $mul64(s18, new $Int64(0, 683901)), new $Int64(s11.$high - x$58.$high, s11.$low - x$58.$low));
		s18 = new $Int64(0, 0);
		carry = arrayType$10.zero();
		carry[6] = $shiftRightInt64((new $Int64(s6.$high + 0, s6.$low + 1048576)), 21);
		s7 = (x$59 = carry[6], new $Int64(s7.$high + x$59.$high, s7.$low + x$59.$low));
		s6 = (x$60 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$60.$high, s6.$low - x$60.$low));
		carry[8] = $shiftRightInt64((new $Int64(s8.$high + 0, s8.$low + 1048576)), 21);
		s9 = (x$61 = carry[8], new $Int64(s9.$high + x$61.$high, s9.$low + x$61.$low));
		s8 = (x$62 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$62.$high, s8.$low - x$62.$low));
		carry[10] = $shiftRightInt64((new $Int64(s10.$high + 0, s10.$low + 1048576)), 21);
		s11 = (x$63 = carry[10], new $Int64(s11.$high + x$63.$high, s11.$low + x$63.$low));
		s10 = (x$64 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$64.$high, s10.$low - x$64.$low));
		carry[12] = $shiftRightInt64((new $Int64(s12.$high + 0, s12.$low + 1048576)), 21);
		s13 = (x$65 = carry[12], new $Int64(s13.$high + x$65.$high, s13.$low + x$65.$low));
		s12 = (x$66 = $shiftLeft64(carry[12], 21), new $Int64(s12.$high - x$66.$high, s12.$low - x$66.$low));
		carry[14] = $shiftRightInt64((new $Int64(s14.$high + 0, s14.$low + 1048576)), 21);
		s15 = (x$67 = carry[14], new $Int64(s15.$high + x$67.$high, s15.$low + x$67.$low));
		s14 = (x$68 = $shiftLeft64(carry[14], 21), new $Int64(s14.$high - x$68.$high, s14.$low - x$68.$low));
		carry[16] = $shiftRightInt64((new $Int64(s16.$high + 0, s16.$low + 1048576)), 21);
		s17 = (x$69 = carry[16], new $Int64(s17.$high + x$69.$high, s17.$low + x$69.$low));
		s16 = (x$70 = $shiftLeft64(carry[16], 21), new $Int64(s16.$high - x$70.$high, s16.$low - x$70.$low));
		carry[7] = $shiftRightInt64((new $Int64(s7.$high + 0, s7.$low + 1048576)), 21);
		s8 = (x$71 = carry[7], new $Int64(s8.$high + x$71.$high, s8.$low + x$71.$low));
		s7 = (x$72 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$72.$high, s7.$low - x$72.$low));
		carry[9] = $shiftRightInt64((new $Int64(s9.$high + 0, s9.$low + 1048576)), 21);
		s10 = (x$73 = carry[9], new $Int64(s10.$high + x$73.$high, s10.$low + x$73.$low));
		s9 = (x$74 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$74.$high, s9.$low - x$74.$low));
		carry[11] = $shiftRightInt64((new $Int64(s11.$high + 0, s11.$low + 1048576)), 21);
		s12 = (x$75 = carry[11], new $Int64(s12.$high + x$75.$high, s12.$low + x$75.$low));
		s11 = (x$76 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$76.$high, s11.$low - x$76.$low));
		carry[13] = $shiftRightInt64((new $Int64(s13.$high + 0, s13.$low + 1048576)), 21);
		s14 = (x$77 = carry[13], new $Int64(s14.$high + x$77.$high, s14.$low + x$77.$low));
		s13 = (x$78 = $shiftLeft64(carry[13], 21), new $Int64(s13.$high - x$78.$high, s13.$low - x$78.$low));
		carry[15] = $shiftRightInt64((new $Int64(s15.$high + 0, s15.$low + 1048576)), 21);
		s16 = (x$79 = carry[15], new $Int64(s16.$high + x$79.$high, s16.$low + x$79.$low));
		s15 = (x$80 = $shiftLeft64(carry[15], 21), new $Int64(s15.$high - x$80.$high, s15.$low - x$80.$low));
		s5 = (x$81 = $mul64(s17, new $Int64(0, 666643)), new $Int64(s5.$high + x$81.$high, s5.$low + x$81.$low));
		s6 = (x$82 = $mul64(s17, new $Int64(0, 470296)), new $Int64(s6.$high + x$82.$high, s6.$low + x$82.$low));
		s7 = (x$83 = $mul64(s17, new $Int64(0, 654183)), new $Int64(s7.$high + x$83.$high, s7.$low + x$83.$low));
		s8 = (x$84 = $mul64(s17, new $Int64(0, 997805)), new $Int64(s8.$high - x$84.$high, s8.$low - x$84.$low));
		s9 = (x$85 = $mul64(s17, new $Int64(0, 136657)), new $Int64(s9.$high + x$85.$high, s9.$low + x$85.$low));
		s10 = (x$86 = $mul64(s17, new $Int64(0, 683901)), new $Int64(s10.$high - x$86.$high, s10.$low - x$86.$low));
		s17 = new $Int64(0, 0);
		s4 = (x$87 = $mul64(s16, new $Int64(0, 666643)), new $Int64(s4.$high + x$87.$high, s4.$low + x$87.$low));
		s5 = (x$88 = $mul64(s16, new $Int64(0, 470296)), new $Int64(s5.$high + x$88.$high, s5.$low + x$88.$low));
		s6 = (x$89 = $mul64(s16, new $Int64(0, 654183)), new $Int64(s6.$high + x$89.$high, s6.$low + x$89.$low));
		s7 = (x$90 = $mul64(s16, new $Int64(0, 997805)), new $Int64(s7.$high - x$90.$high, s7.$low - x$90.$low));
		s8 = (x$91 = $mul64(s16, new $Int64(0, 136657)), new $Int64(s8.$high + x$91.$high, s8.$low + x$91.$low));
		s9 = (x$92 = $mul64(s16, new $Int64(0, 683901)), new $Int64(s9.$high - x$92.$high, s9.$low - x$92.$low));
		s16 = new $Int64(0, 0);
		s3 = (x$93 = $mul64(s15, new $Int64(0, 666643)), new $Int64(s3.$high + x$93.$high, s3.$low + x$93.$low));
		s4 = (x$94 = $mul64(s15, new $Int64(0, 470296)), new $Int64(s4.$high + x$94.$high, s4.$low + x$94.$low));
		s5 = (x$95 = $mul64(s15, new $Int64(0, 654183)), new $Int64(s5.$high + x$95.$high, s5.$low + x$95.$low));
		s6 = (x$96 = $mul64(s15, new $Int64(0, 997805)), new $Int64(s6.$high - x$96.$high, s6.$low - x$96.$low));
		s7 = (x$97 = $mul64(s15, new $Int64(0, 136657)), new $Int64(s7.$high + x$97.$high, s7.$low + x$97.$low));
		s8 = (x$98 = $mul64(s15, new $Int64(0, 683901)), new $Int64(s8.$high - x$98.$high, s8.$low - x$98.$low));
		s15 = new $Int64(0, 0);
		s2 = (x$99 = $mul64(s14, new $Int64(0, 666643)), new $Int64(s2.$high + x$99.$high, s2.$low + x$99.$low));
		s3 = (x$100 = $mul64(s14, new $Int64(0, 470296)), new $Int64(s3.$high + x$100.$high, s3.$low + x$100.$low));
		s4 = (x$101 = $mul64(s14, new $Int64(0, 654183)), new $Int64(s4.$high + x$101.$high, s4.$low + x$101.$low));
		s5 = (x$102 = $mul64(s14, new $Int64(0, 997805)), new $Int64(s5.$high - x$102.$high, s5.$low - x$102.$low));
		s6 = (x$103 = $mul64(s14, new $Int64(0, 136657)), new $Int64(s6.$high + x$103.$high, s6.$low + x$103.$low));
		s7 = (x$104 = $mul64(s14, new $Int64(0, 683901)), new $Int64(s7.$high - x$104.$high, s7.$low - x$104.$low));
		s14 = new $Int64(0, 0);
		s1 = (x$105 = $mul64(s13, new $Int64(0, 666643)), new $Int64(s1.$high + x$105.$high, s1.$low + x$105.$low));
		s2 = (x$106 = $mul64(s13, new $Int64(0, 470296)), new $Int64(s2.$high + x$106.$high, s2.$low + x$106.$low));
		s3 = (x$107 = $mul64(s13, new $Int64(0, 654183)), new $Int64(s3.$high + x$107.$high, s3.$low + x$107.$low));
		s4 = (x$108 = $mul64(s13, new $Int64(0, 997805)), new $Int64(s4.$high - x$108.$high, s4.$low - x$108.$low));
		s5 = (x$109 = $mul64(s13, new $Int64(0, 136657)), new $Int64(s5.$high + x$109.$high, s5.$low + x$109.$low));
		s6 = (x$110 = $mul64(s13, new $Int64(0, 683901)), new $Int64(s6.$high - x$110.$high, s6.$low - x$110.$low));
		s13 = new $Int64(0, 0);
		s0 = (x$111 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$111.$high, s0.$low + x$111.$low));
		s1 = (x$112 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$112.$high, s1.$low + x$112.$low));
		s2 = (x$113 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$113.$high, s2.$low + x$113.$low));
		s3 = (x$114 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$114.$high, s3.$low - x$114.$low));
		s4 = (x$115 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$115.$high, s4.$low + x$115.$low));
		s5 = (x$116 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$116.$high, s5.$low - x$116.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64((new $Int64(s0.$high + 0, s0.$low + 1048576)), 21);
		s1 = (x$117 = carry[0], new $Int64(s1.$high + x$117.$high, s1.$low + x$117.$low));
		s0 = (x$118 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$118.$high, s0.$low - x$118.$low));
		carry[2] = $shiftRightInt64((new $Int64(s2.$high + 0, s2.$low + 1048576)), 21);
		s3 = (x$119 = carry[2], new $Int64(s3.$high + x$119.$high, s3.$low + x$119.$low));
		s2 = (x$120 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$120.$high, s2.$low - x$120.$low));
		carry[4] = $shiftRightInt64((new $Int64(s4.$high + 0, s4.$low + 1048576)), 21);
		s5 = (x$121 = carry[4], new $Int64(s5.$high + x$121.$high, s5.$low + x$121.$low));
		s4 = (x$122 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$122.$high, s4.$low - x$122.$low));
		carry[6] = $shiftRightInt64((new $Int64(s6.$high + 0, s6.$low + 1048576)), 21);
		s7 = (x$123 = carry[6], new $Int64(s7.$high + x$123.$high, s7.$low + x$123.$low));
		s6 = (x$124 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$124.$high, s6.$low - x$124.$low));
		carry[8] = $shiftRightInt64((new $Int64(s8.$high + 0, s8.$low + 1048576)), 21);
		s9 = (x$125 = carry[8], new $Int64(s9.$high + x$125.$high, s9.$low + x$125.$low));
		s8 = (x$126 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$126.$high, s8.$low - x$126.$low));
		carry[10] = $shiftRightInt64((new $Int64(s10.$high + 0, s10.$low + 1048576)), 21);
		s11 = (x$127 = carry[10], new $Int64(s11.$high + x$127.$high, s11.$low + x$127.$low));
		s10 = (x$128 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$128.$high, s10.$low - x$128.$low));
		carry[1] = $shiftRightInt64((new $Int64(s1.$high + 0, s1.$low + 1048576)), 21);
		s2 = (x$129 = carry[1], new $Int64(s2.$high + x$129.$high, s2.$low + x$129.$low));
		s1 = (x$130 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$130.$high, s1.$low - x$130.$low));
		carry[3] = $shiftRightInt64((new $Int64(s3.$high + 0, s3.$low + 1048576)), 21);
		s4 = (x$131 = carry[3], new $Int64(s4.$high + x$131.$high, s4.$low + x$131.$low));
		s3 = (x$132 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$132.$high, s3.$low - x$132.$low));
		carry[5] = $shiftRightInt64((new $Int64(s5.$high + 0, s5.$low + 1048576)), 21);
		s6 = (x$133 = carry[5], new $Int64(s6.$high + x$133.$high, s6.$low + x$133.$low));
		s5 = (x$134 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$134.$high, s5.$low - x$134.$low));
		carry[7] = $shiftRightInt64((new $Int64(s7.$high + 0, s7.$low + 1048576)), 21);
		s8 = (x$135 = carry[7], new $Int64(s8.$high + x$135.$high, s8.$low + x$135.$low));
		s7 = (x$136 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$136.$high, s7.$low - x$136.$low));
		carry[9] = $shiftRightInt64((new $Int64(s9.$high + 0, s9.$low + 1048576)), 21);
		s10 = (x$137 = carry[9], new $Int64(s10.$high + x$137.$high, s10.$low + x$137.$low));
		s9 = (x$138 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$138.$high, s9.$low - x$138.$low));
		carry[11] = $shiftRightInt64((new $Int64(s11.$high + 0, s11.$low + 1048576)), 21);
		s12 = (x$139 = carry[11], new $Int64(s12.$high + x$139.$high, s12.$low + x$139.$low));
		s11 = (x$140 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$140.$high, s11.$low - x$140.$low));
		s0 = (x$141 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$141.$high, s0.$low + x$141.$low));
		s1 = (x$142 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$142.$high, s1.$low + x$142.$low));
		s2 = (x$143 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$143.$high, s2.$low + x$143.$low));
		s3 = (x$144 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$144.$high, s3.$low - x$144.$low));
		s4 = (x$145 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$145.$high, s4.$low + x$145.$low));
		s5 = (x$146 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$146.$high, s5.$low - x$146.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64(s0, 21);
		s1 = (x$147 = carry[0], new $Int64(s1.$high + x$147.$high, s1.$low + x$147.$low));
		s0 = (x$148 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$148.$high, s0.$low - x$148.$low));
		carry[1] = $shiftRightInt64(s1, 21);
		s2 = (x$149 = carry[1], new $Int64(s2.$high + x$149.$high, s2.$low + x$149.$low));
		s1 = (x$150 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$150.$high, s1.$low - x$150.$low));
		carry[2] = $shiftRightInt64(s2, 21);
		s3 = (x$151 = carry[2], new $Int64(s3.$high + x$151.$high, s3.$low + x$151.$low));
		s2 = (x$152 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$152.$high, s2.$low - x$152.$low));
		carry[3] = $shiftRightInt64(s3, 21);
		s4 = (x$153 = carry[3], new $Int64(s4.$high + x$153.$high, s4.$low + x$153.$low));
		s3 = (x$154 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$154.$high, s3.$low - x$154.$low));
		carry[4] = $shiftRightInt64(s4, 21);
		s5 = (x$155 = carry[4], new $Int64(s5.$high + x$155.$high, s5.$low + x$155.$low));
		s4 = (x$156 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$156.$high, s4.$low - x$156.$low));
		carry[5] = $shiftRightInt64(s5, 21);
		s6 = (x$157 = carry[5], new $Int64(s6.$high + x$157.$high, s6.$low + x$157.$low));
		s5 = (x$158 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$158.$high, s5.$low - x$158.$low));
		carry[6] = $shiftRightInt64(s6, 21);
		s7 = (x$159 = carry[6], new $Int64(s7.$high + x$159.$high, s7.$low + x$159.$low));
		s6 = (x$160 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$160.$high, s6.$low - x$160.$low));
		carry[7] = $shiftRightInt64(s7, 21);
		s8 = (x$161 = carry[7], new $Int64(s8.$high + x$161.$high, s8.$low + x$161.$low));
		s7 = (x$162 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$162.$high, s7.$low - x$162.$low));
		carry[8] = $shiftRightInt64(s8, 21);
		s9 = (x$163 = carry[8], new $Int64(s9.$high + x$163.$high, s9.$low + x$163.$low));
		s8 = (x$164 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$164.$high, s8.$low - x$164.$low));
		carry[9] = $shiftRightInt64(s9, 21);
		s10 = (x$165 = carry[9], new $Int64(s10.$high + x$165.$high, s10.$low + x$165.$low));
		s9 = (x$166 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$166.$high, s9.$low - x$166.$low));
		carry[10] = $shiftRightInt64(s10, 21);
		s11 = (x$167 = carry[10], new $Int64(s11.$high + x$167.$high, s11.$low + x$167.$low));
		s10 = (x$168 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$168.$high, s10.$low - x$168.$low));
		carry[11] = $shiftRightInt64(s11, 21);
		s12 = (x$169 = carry[11], new $Int64(s12.$high + x$169.$high, s12.$low + x$169.$low));
		s11 = (x$170 = $shiftLeft64(carry[11], 21), new $Int64(s11.$high - x$170.$high, s11.$low - x$170.$low));
		s0 = (x$171 = $mul64(s12, new $Int64(0, 666643)), new $Int64(s0.$high + x$171.$high, s0.$low + x$171.$low));
		s1 = (x$172 = $mul64(s12, new $Int64(0, 470296)), new $Int64(s1.$high + x$172.$high, s1.$low + x$172.$low));
		s2 = (x$173 = $mul64(s12, new $Int64(0, 654183)), new $Int64(s2.$high + x$173.$high, s2.$low + x$173.$low));
		s3 = (x$174 = $mul64(s12, new $Int64(0, 997805)), new $Int64(s3.$high - x$174.$high, s3.$low - x$174.$low));
		s4 = (x$175 = $mul64(s12, new $Int64(0, 136657)), new $Int64(s4.$high + x$175.$high, s4.$low + x$175.$low));
		s5 = (x$176 = $mul64(s12, new $Int64(0, 683901)), new $Int64(s5.$high - x$176.$high, s5.$low - x$176.$low));
		s12 = new $Int64(0, 0);
		carry[0] = $shiftRightInt64(s0, 21);
		s1 = (x$177 = carry[0], new $Int64(s1.$high + x$177.$high, s1.$low + x$177.$low));
		s0 = (x$178 = $shiftLeft64(carry[0], 21), new $Int64(s0.$high - x$178.$high, s0.$low - x$178.$low));
		carry[1] = $shiftRightInt64(s1, 21);
		s2 = (x$179 = carry[1], new $Int64(s2.$high + x$179.$high, s2.$low + x$179.$low));
		s1 = (x$180 = $shiftLeft64(carry[1], 21), new $Int64(s1.$high - x$180.$high, s1.$low - x$180.$low));
		carry[2] = $shiftRightInt64(s2, 21);
		s3 = (x$181 = carry[2], new $Int64(s3.$high + x$181.$high, s3.$low + x$181.$low));
		s2 = (x$182 = $shiftLeft64(carry[2], 21), new $Int64(s2.$high - x$182.$high, s2.$low - x$182.$low));
		carry[3] = $shiftRightInt64(s3, 21);
		s4 = (x$183 = carry[3], new $Int64(s4.$high + x$183.$high, s4.$low + x$183.$low));
		s3 = (x$184 = $shiftLeft64(carry[3], 21), new $Int64(s3.$high - x$184.$high, s3.$low - x$184.$low));
		carry[4] = $shiftRightInt64(s4, 21);
		s5 = (x$185 = carry[4], new $Int64(s5.$high + x$185.$high, s5.$low + x$185.$low));
		s4 = (x$186 = $shiftLeft64(carry[4], 21), new $Int64(s4.$high - x$186.$high, s4.$low - x$186.$low));
		carry[5] = $shiftRightInt64(s5, 21);
		s6 = (x$187 = carry[5], new $Int64(s6.$high + x$187.$high, s6.$low + x$187.$low));
		s5 = (x$188 = $shiftLeft64(carry[5], 21), new $Int64(s5.$high - x$188.$high, s5.$low - x$188.$low));
		carry[6] = $shiftRightInt64(s6, 21);
		s7 = (x$189 = carry[6], new $Int64(s7.$high + x$189.$high, s7.$low + x$189.$low));
		s6 = (x$190 = $shiftLeft64(carry[6], 21), new $Int64(s6.$high - x$190.$high, s6.$low - x$190.$low));
		carry[7] = $shiftRightInt64(s7, 21);
		s8 = (x$191 = carry[7], new $Int64(s8.$high + x$191.$high, s8.$low + x$191.$low));
		s7 = (x$192 = $shiftLeft64(carry[7], 21), new $Int64(s7.$high - x$192.$high, s7.$low - x$192.$low));
		carry[8] = $shiftRightInt64(s8, 21);
		s9 = (x$193 = carry[8], new $Int64(s9.$high + x$193.$high, s9.$low + x$193.$low));
		s8 = (x$194 = $shiftLeft64(carry[8], 21), new $Int64(s8.$high - x$194.$high, s8.$low - x$194.$low));
		carry[9] = $shiftRightInt64(s9, 21);
		s10 = (x$195 = carry[9], new $Int64(s10.$high + x$195.$high, s10.$low + x$195.$low));
		s9 = (x$196 = $shiftLeft64(carry[9], 21), new $Int64(s9.$high - x$196.$high, s9.$low - x$196.$low));
		carry[10] = $shiftRightInt64(s10, 21);
		s11 = (x$197 = carry[10], new $Int64(s11.$high + x$197.$high, s11.$low + x$197.$low));
		s10 = (x$198 = $shiftLeft64(carry[10], 21), new $Int64(s10.$high - x$198.$high, s10.$low - x$198.$low));
		out.nilCheck, out[0] = (($shiftRightInt64(s0, 0).$low << 24 >>> 24));
		out.nilCheck, out[1] = (($shiftRightInt64(s0, 8).$low << 24 >>> 24));
		out.nilCheck, out[2] = (((x$199 = $shiftRightInt64(s0, 16), x$200 = $shiftLeft64(s1, 5), new $Int64(x$199.$high | x$200.$high, (x$199.$low | x$200.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[3] = (($shiftRightInt64(s1, 3).$low << 24 >>> 24));
		out.nilCheck, out[4] = (($shiftRightInt64(s1, 11).$low << 24 >>> 24));
		out.nilCheck, out[5] = (((x$201 = $shiftRightInt64(s1, 19), x$202 = $shiftLeft64(s2, 2), new $Int64(x$201.$high | x$202.$high, (x$201.$low | x$202.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[6] = (($shiftRightInt64(s2, 6).$low << 24 >>> 24));
		out.nilCheck, out[7] = (((x$203 = $shiftRightInt64(s2, 14), x$204 = $shiftLeft64(s3, 7), new $Int64(x$203.$high | x$204.$high, (x$203.$low | x$204.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[8] = (($shiftRightInt64(s3, 1).$low << 24 >>> 24));
		out.nilCheck, out[9] = (($shiftRightInt64(s3, 9).$low << 24 >>> 24));
		out.nilCheck, out[10] = (((x$205 = $shiftRightInt64(s3, 17), x$206 = $shiftLeft64(s4, 4), new $Int64(x$205.$high | x$206.$high, (x$205.$low | x$206.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[11] = (($shiftRightInt64(s4, 4).$low << 24 >>> 24));
		out.nilCheck, out[12] = (($shiftRightInt64(s4, 12).$low << 24 >>> 24));
		out.nilCheck, out[13] = (((x$207 = $shiftRightInt64(s4, 20), x$208 = $shiftLeft64(s5, 1), new $Int64(x$207.$high | x$208.$high, (x$207.$low | x$208.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[14] = (($shiftRightInt64(s5, 7).$low << 24 >>> 24));
		out.nilCheck, out[15] = (((x$209 = $shiftRightInt64(s5, 15), x$210 = $shiftLeft64(s6, 6), new $Int64(x$209.$high | x$210.$high, (x$209.$low | x$210.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[16] = (($shiftRightInt64(s6, 2).$low << 24 >>> 24));
		out.nilCheck, out[17] = (($shiftRightInt64(s6, 10).$low << 24 >>> 24));
		out.nilCheck, out[18] = (((x$211 = $shiftRightInt64(s6, 18), x$212 = $shiftLeft64(s7, 3), new $Int64(x$211.$high | x$212.$high, (x$211.$low | x$212.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[19] = (($shiftRightInt64(s7, 5).$low << 24 >>> 24));
		out.nilCheck, out[20] = (($shiftRightInt64(s7, 13).$low << 24 >>> 24));
		out.nilCheck, out[21] = (($shiftRightInt64(s8, 0).$low << 24 >>> 24));
		out.nilCheck, out[22] = (($shiftRightInt64(s8, 8).$low << 24 >>> 24));
		out.nilCheck, out[23] = (((x$213 = $shiftRightInt64(s8, 16), x$214 = $shiftLeft64(s9, 5), new $Int64(x$213.$high | x$214.$high, (x$213.$low | x$214.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[24] = (($shiftRightInt64(s9, 3).$low << 24 >>> 24));
		out.nilCheck, out[25] = (($shiftRightInt64(s9, 11).$low << 24 >>> 24));
		out.nilCheck, out[26] = (((x$215 = $shiftRightInt64(s9, 19), x$216 = $shiftLeft64(s10, 2), new $Int64(x$215.$high | x$216.$high, (x$215.$low | x$216.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[27] = (($shiftRightInt64(s10, 6).$low << 24 >>> 24));
		out.nilCheck, out[28] = (((x$217 = $shiftRightInt64(s10, 14), x$218 = $shiftLeft64(s11, 7), new $Int64(x$217.$high | x$218.$high, (x$217.$low | x$218.$low) >>> 0)).$low << 24 >>> 24));
		out.nilCheck, out[29] = (($shiftRightInt64(s11, 1).$low << 24 >>> 24));
		out.nilCheck, out[30] = (($shiftRightInt64(s11, 9).$low << 24 >>> 24));
		out.nilCheck, out[31] = (($shiftRightInt64(s11, 17).$low << 24 >>> 24));
	};
	Scalar.ptr.prototype.nonAdjacentForm = function(w) {
		var _q, _r, bitBuf, carry, digits, i, indexBit, indexU64, naf, pos, s, w, width, window, windowMask, x, x$1, x$2, x$3, x$4, x$5;
		s = this;
		if (s.s[31] > 127) {
			$panic(new $String("scalar has high bit set illegally"));
		}
		if (w < 2) {
			$panic(new $String("w must be at least 2 by the definition of NAF"));
		} else if (w > 8) {
			$panic(new $String("NAF digits must fit in int8"));
		}
		naf = arrayType$7.zero();
		digits = arrayType$11.zero();
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			((i < 0 || i >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i] = $clone(binary.LittleEndian, binary.littleEndian).Uint64($subslice(new sliceType(s.s), ($imul(i, 8)))));
			i = i + (1) >> 0;
		}
		width = ($shiftLeft64(new $Uint64(0, 1), w));
		windowMask = (new $Uint64(width.$high - 0, width.$low - 1));
		pos = 0;
		carry = new $Uint64(0, 0);
		while (true) {
			if (!(pos < 256)) { break; }
			indexU64 = (_q = pos / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			indexBit = (_r = pos % 64, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			bitBuf = new $Uint64(0, 0);
			if (indexBit < (64 - w >>> 0)) {
				bitBuf = $shiftRightUint64(((indexU64 < 0 || indexU64 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[indexU64]), indexBit);
			} else {
				bitBuf = (x = $shiftRightUint64(((indexU64 < 0 || indexU64 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[indexU64]), indexBit), x$1 = $shiftLeft64((x$2 = 1 + indexU64 >>> 0, ((x$2 < 0 || x$2 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[x$2])), ((64 - indexBit >>> 0))), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
			}
			window = (x$3 = new $Uint64(bitBuf.$high & windowMask.$high, (bitBuf.$low & windowMask.$low) >>> 0), new $Uint64(carry.$high + x$3.$high, carry.$low + x$3.$low));
			if ((x$4 = new $Uint64(window.$high & 0, (window.$low & 1) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
				pos = pos + (1) >>> 0;
				continue;
			}
			if ((x$5 = $div64(width, new $Uint64(0, 2), false), (window.$high < x$5.$high || (window.$high === x$5.$high && window.$low < x$5.$low)))) {
				carry = new $Uint64(0, 0);
				((pos < 0 || pos >= naf.length) ? ($throwRuntimeError("index out of range"), undefined) : naf[pos] = ((window.$low << 24 >> 24)));
			} else {
				carry = new $Uint64(0, 1);
				((pos < 0 || pos >= naf.length) ? ($throwRuntimeError("index out of range"), undefined) : naf[pos] = (((window.$low << 24 >> 24)) - ((width.$low << 24 >> 24)) << 24 >> 24));
			}
			pos = pos + (w) >>> 0;
		}
		return naf;
	};
	Scalar.prototype.nonAdjacentForm = function(w) { return this.$val.nonAdjacentForm(w); };
	Scalar.ptr.prototype.signedRadix16 = function() {
		var _index, carry, digits, i, i$1, s, x, x$1, x$2, x$3;
		s = this;
		if (s.s[31] > 127) {
			$panic(new $String("scalar has high bit set illegally"));
		}
		digits = arrayType$5.zero();
		i = 0;
		while (true) {
			if (!(i < 32)) { break; }
			(x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[x$1] = (((((x = s.s, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) & 15) >>> 0) << 24 >> 24))));
			(x$3 = ($imul(2, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[x$3] = (((((((x$2 = s.s, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) >>> 4 << 24 >>> 24)) & 15) >>> 0) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < 63)) { break; }
			carry = ((((i$1 < 0 || i$1 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i$1]) + 8 << 24 >> 24)) >> 4 << 24 >> 24;
			((i$1 < 0 || i$1 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i$1] = (((i$1 < 0 || i$1 >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[i$1]) - ((carry << 4 << 24 >> 24)) << 24 >> 24));
			_index = i$1 + 1 >> 0;
			((_index < 0 || _index >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[_index] = (((_index < 0 || _index >= digits.length) ? ($throwRuntimeError("index out of range"), undefined) : digits[_index]) + (carry) << 24 >> 24));
			i$1 = i$1 + (1) >> 0;
		}
		return digits;
	};
	Scalar.prototype.signedRadix16 = function() { return this.$val.signedRadix16(); };
	checkInitialized = function(points) {
		var _i, _ref, p, points;
		_ref = points;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($equal(p.x, (new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))), field.Element) && $equal(p.y, (new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))), field.Element)) {
				$panic(new $String("edwards25519: use of uninitialized Point"));
			}
			_i++;
		}
	};
	projP2.ptr.prototype.Zero = function() {
		var v;
		v = this;
		v.X.Zero();
		v.Y.One();
		v.Z.One();
		return v;
	};
	projP2.prototype.Zero = function() { return this.$val.Zero(); };
	NewIdentityPoint = function() {
		return new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero()).Set(identity);
	};
	$pkg.NewIdentityPoint = NewIdentityPoint;
	NewGeneratorPoint = function() {
		return new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero()).Set(generator);
	};
	$pkg.NewGeneratorPoint = NewGeneratorPoint;
	projCached.ptr.prototype.Zero = function() {
		var v;
		v = this;
		v.YplusX.One();
		v.YminusX.One();
		v.Z.One();
		v.T2d.Zero();
		return v;
	};
	projCached.prototype.Zero = function() { return this.$val.Zero(); };
	affineCached.ptr.prototype.Zero = function() {
		var v;
		v = this;
		v.YplusX.One();
		v.YminusX.One();
		v.T2d.Zero();
		return v;
	};
	affineCached.prototype.Zero = function() { return this.$val.Zero(); };
	Point.ptr.prototype.Set = function(u) {
		var u, v;
		v = this;
		Point.copy(v, u);
		return v;
	};
	Point.prototype.Set = function(u) { return this.$val.Set(u); };
	Point.ptr.prototype.Bytes = function() {
		var buf, v;
		v = this;
		buf = arrayType$3.zero();
		return v.bytes(buf);
	};
	Point.prototype.Bytes = function() { return this.$val.Bytes(); };
	Point.ptr.prototype.bytes = function(buf) {
		var _tmp, _tmp$1, _tmp$2, buf, out, v, x, y, zInv;
		v = this;
		checkInitialized(new sliceType$1([v]));
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		zInv = $clone(_tmp, field.Element);
		x = $clone(_tmp$1, field.Element);
		y = $clone(_tmp$2, field.Element);
		zInv.Invert(v.z);
		x.Multiply(v.x, zInv);
		y.Multiply(v.y, zInv);
		out = copyFieldElement(buf, y);
		(31 >= out.$length ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + 31] = (((31 >= out.$length ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + 31]) | ((((x.IsNegative() << 7 >> 0) << 24 >>> 24)))) >>> 0));
		return out;
	};
	Point.prototype.bytes = function(buf) { return this.$val.bytes(buf); };
	Point.ptr.prototype.SetBytes = function(x) {
		var _tuple$3, _tuple$4, err, u, v, vv, wasSquare, x, xx, xxNeg, y, y2;
		v = this;
		_tuple$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).SetBytes(x);
		y = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, errors.New("edwards25519: invalid point encoding length")];
		}
		y2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Square(y);
		u = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Subtract(y2, feOne);
		vv = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Multiply(y2, d);
		vv = vv.Add(vv, feOne);
		_tuple$4 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).SqrtRatio(u, vv);
		xx = _tuple$4[0];
		wasSquare = _tuple$4[1];
		if (wasSquare === 0) {
			return [ptrType.nil, errors.New("edwards25519: invalid point encoding")];
		}
		xxNeg = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Negate(xx);
		xx = xx.Select(xxNeg, xx, ((((31 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 31]) >>> 7 << 24 >>> 24) >> 0)));
		v.x.Set(xx);
		v.y.Set(y);
		v.z.One();
		v.t.Multiply(xx, y);
		return [v, $ifaceNil];
	};
	Point.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	copyFieldElement = function(buf, v) {
		var buf, v;
		$copySlice(new sliceType(buf), v.Bytes());
		return new sliceType(buf);
	};
	projP2.ptr.prototype.FromP1xP1 = function(p) {
		var p, v;
		v = this;
		v.X.Multiply(p.X, p.T);
		v.Y.Multiply(p.Y, p.Z);
		v.Z.Multiply(p.Z, p.T);
		return v;
	};
	projP2.prototype.FromP1xP1 = function(p) { return this.$val.FromP1xP1(p); };
	projP2.ptr.prototype.FromP3 = function(p) {
		var p, v;
		v = this;
		v.X.Set(p.x);
		v.Y.Set(p.y);
		v.Z.Set(p.z);
		return v;
	};
	projP2.prototype.FromP3 = function(p) { return this.$val.FromP3(p); };
	Point.ptr.prototype.fromP1xP1 = function(p) {
		var p, v;
		v = this;
		v.x.Multiply(p.X, p.T);
		v.y.Multiply(p.Y, p.Z);
		v.z.Multiply(p.Z, p.T);
		v.t.Multiply(p.X, p.Y);
		return v;
	};
	Point.prototype.fromP1xP1 = function(p) { return this.$val.fromP1xP1(p); };
	Point.ptr.prototype.fromP2 = function(p) {
		var p, v;
		v = this;
		v.x.Multiply(p.X, p.Z);
		v.y.Multiply(p.Y, p.Z);
		v.z.Square(p.Z);
		v.t.Multiply(p.X, p.Y);
		return v;
	};
	Point.prototype.fromP2 = function(p) { return this.$val.fromP2(p); };
	projCached.ptr.prototype.FromP3 = function(p) {
		var p, v;
		v = this;
		v.YplusX.Add(p.y, p.x);
		v.YminusX.Subtract(p.y, p.x);
		v.Z.Set(p.z);
		v.T2d.Multiply(p.t, d2);
		return v;
	};
	projCached.prototype.FromP3 = function(p) { return this.$val.FromP3(p); };
	affineCached.ptr.prototype.FromP3 = function(p) {
		var invZ, p, v;
		v = this;
		v.YplusX.Add(p.y, p.x);
		v.YminusX.Subtract(p.y, p.x);
		v.T2d.Multiply(p.t, d2);
		invZ = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		invZ.Invert(p.z);
		v.YplusX.Multiply(v.YplusX, invZ);
		v.YminusX.Multiply(v.YminusX, invZ);
		v.T2d.Multiply(v.T2d, invZ);
		return v;
	};
	affineCached.prototype.FromP3 = function(p) { return this.$val.FromP3(p); };
	Point.ptr.prototype.Add = function(p, q) {
		var p, q, qCached, result, v;
		v = this;
		checkInitialized(new sliceType$1([p, q]));
		qCached = new projCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))).FromP3(q);
		result = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))).Add(p, qCached);
		return v.fromP1xP1(result);
	};
	Point.prototype.Add = function(p, q) { return this.$val.Add(p, q); };
	Point.ptr.prototype.Subtract = function(p, q) {
		var p, q, qCached, result, v;
		v = this;
		checkInitialized(new sliceType$1([p, q]));
		qCached = new projCached.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))).FromP3(q);
		result = new projP1xP1.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0))).Sub(p, qCached);
		return v.fromP1xP1(result);
	};
	Point.prototype.Subtract = function(p, q) { return this.$val.Subtract(p, q); };
	projP1xP1.ptr.prototype.Add = function(p, q) {
		var MM, PP, TT2d, YminusX, YplusX, ZZ2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, p, q, v;
		v = this;
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$4 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$5 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		YplusX = $clone(_tmp, field.Element);
		YminusX = $clone(_tmp$1, field.Element);
		PP = $clone(_tmp$2, field.Element);
		MM = $clone(_tmp$3, field.Element);
		TT2d = $clone(_tmp$4, field.Element);
		ZZ2 = $clone(_tmp$5, field.Element);
		YplusX.Add(p.y, p.x);
		YminusX.Subtract(p.y, p.x);
		PP.Multiply(YplusX, q.YplusX);
		MM.Multiply(YminusX, q.YminusX);
		TT2d.Multiply(p.t, q.T2d);
		ZZ2.Multiply(p.z, q.Z);
		ZZ2.Add(ZZ2, ZZ2);
		v.X.Subtract(PP, MM);
		v.Y.Add(PP, MM);
		v.Z.Add(ZZ2, TT2d);
		v.T.Subtract(ZZ2, TT2d);
		return v;
	};
	projP1xP1.prototype.Add = function(p, q) { return this.$val.Add(p, q); };
	projP1xP1.ptr.prototype.Sub = function(p, q) {
		var MM, PP, TT2d, YminusX, YplusX, ZZ2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, p, q, v;
		v = this;
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$4 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$5 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		YplusX = $clone(_tmp, field.Element);
		YminusX = $clone(_tmp$1, field.Element);
		PP = $clone(_tmp$2, field.Element);
		MM = $clone(_tmp$3, field.Element);
		TT2d = $clone(_tmp$4, field.Element);
		ZZ2 = $clone(_tmp$5, field.Element);
		YplusX.Add(p.y, p.x);
		YminusX.Subtract(p.y, p.x);
		PP.Multiply(YplusX, q.YminusX);
		MM.Multiply(YminusX, q.YplusX);
		TT2d.Multiply(p.t, q.T2d);
		ZZ2.Multiply(p.z, q.Z);
		ZZ2.Add(ZZ2, ZZ2);
		v.X.Subtract(PP, MM);
		v.Y.Add(PP, MM);
		v.Z.Subtract(ZZ2, TT2d);
		v.T.Add(ZZ2, TT2d);
		return v;
	};
	projP1xP1.prototype.Sub = function(p, q) { return this.$val.Sub(p, q); };
	projP1xP1.ptr.prototype.AddAffine = function(p, q) {
		var MM, PP, TT2d, YminusX, YplusX, Z2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, p, q, v;
		v = this;
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$4 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$5 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		YplusX = $clone(_tmp, field.Element);
		YminusX = $clone(_tmp$1, field.Element);
		PP = $clone(_tmp$2, field.Element);
		MM = $clone(_tmp$3, field.Element);
		TT2d = $clone(_tmp$4, field.Element);
		Z2 = $clone(_tmp$5, field.Element);
		YplusX.Add(p.y, p.x);
		YminusX.Subtract(p.y, p.x);
		PP.Multiply(YplusX, q.YplusX);
		MM.Multiply(YminusX, q.YminusX);
		TT2d.Multiply(p.t, q.T2d);
		Z2.Add(p.z, p.z);
		v.X.Subtract(PP, MM);
		v.Y.Add(PP, MM);
		v.Z.Add(Z2, TT2d);
		v.T.Subtract(Z2, TT2d);
		return v;
	};
	projP1xP1.prototype.AddAffine = function(p, q) { return this.$val.AddAffine(p, q); };
	projP1xP1.ptr.prototype.SubAffine = function(p, q) {
		var MM, PP, TT2d, YminusX, YplusX, Z2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, p, q, v;
		v = this;
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$4 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$5 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		YplusX = $clone(_tmp, field.Element);
		YminusX = $clone(_tmp$1, field.Element);
		PP = $clone(_tmp$2, field.Element);
		MM = $clone(_tmp$3, field.Element);
		TT2d = $clone(_tmp$4, field.Element);
		Z2 = $clone(_tmp$5, field.Element);
		YplusX.Add(p.y, p.x);
		YminusX.Subtract(p.y, p.x);
		PP.Multiply(YplusX, q.YminusX);
		MM.Multiply(YminusX, q.YplusX);
		TT2d.Multiply(p.t, q.T2d);
		Z2.Add(p.z, p.z);
		v.X.Subtract(PP, MM);
		v.Y.Add(PP, MM);
		v.Z.Subtract(Z2, TT2d);
		v.T.Add(Z2, TT2d);
		return v;
	};
	projP1xP1.prototype.SubAffine = function(p, q) { return this.$val.SubAffine(p, q); };
	projP1xP1.ptr.prototype.Double = function(p) {
		var XX, XplusYsq, YY, ZZ2, _tmp, _tmp$1, _tmp$2, _tmp$3, p, v;
		v = this;
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		XX = $clone(_tmp, field.Element);
		YY = $clone(_tmp$1, field.Element);
		ZZ2 = $clone(_tmp$2, field.Element);
		XplusYsq = $clone(_tmp$3, field.Element);
		XX.Square(p.X);
		YY.Square(p.Y);
		ZZ2.Square(p.Z);
		ZZ2.Add(ZZ2, ZZ2);
		XplusYsq.Add(p.X, p.Y);
		XplusYsq.Square(XplusYsq);
		v.Y.Add(YY, XX);
		v.Z.Subtract(YY, XX);
		v.X.Subtract(XplusYsq, v.Y);
		v.T.Subtract(ZZ2, v.Z);
		return v;
	};
	projP1xP1.prototype.Double = function(p) { return this.$val.Double(p); };
	Point.ptr.prototype.Negate = function(p) {
		var p, v;
		v = this;
		checkInitialized(new sliceType$1([p]));
		v.x.Negate(p.x);
		v.y.Set(p.y);
		v.z.Set(p.z);
		v.t.Negate(p.t);
		return v;
	};
	Point.prototype.Negate = function(p) { return this.$val.Negate(p); };
	Point.ptr.prototype.Equal = function(u) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, t1, t2, t3, t4, u, v;
		v = this;
		checkInitialized(new sliceType$1([v, u]));
		_tmp = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$1 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		_tmp$3 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0));
		t1 = $clone(_tmp, field.Element);
		t2 = $clone(_tmp$1, field.Element);
		t3 = $clone(_tmp$2, field.Element);
		t4 = $clone(_tmp$3, field.Element);
		t1.Multiply(v.x, u.z);
		t2.Multiply(u.x, v.z);
		t3.Multiply(v.y, u.z);
		t4.Multiply(u.y, v.z);
		return t1.Equal(t2) & t3.Equal(t4);
	};
	Point.prototype.Equal = function(u) { return this.$val.Equal(u); };
	projCached.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		v.YplusX.Select(a.YplusX, b.YplusX, cond);
		v.YminusX.Select(a.YminusX, b.YminusX, cond);
		v.Z.Select(a.Z, b.Z, cond);
		v.T2d.Select(a.T2d, b.T2d, cond);
		return v;
	};
	projCached.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	affineCached.ptr.prototype.Select = function(a, b, cond) {
		var a, b, cond, v;
		v = this;
		v.YplusX.Select(a.YplusX, b.YplusX, cond);
		v.YminusX.Select(a.YminusX, b.YminusX, cond);
		v.T2d.Select(a.T2d, b.T2d, cond);
		return v;
	};
	affineCached.prototype.Select = function(a, b, cond) { return this.$val.Select(a, b, cond); };
	projCached.ptr.prototype.CondNeg = function(cond) {
		var cond, v;
		v = this;
		v.YplusX.Swap(v.YminusX, cond);
		v.T2d.Select(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Negate(v.T2d), v.T2d, cond);
		return v;
	};
	projCached.prototype.CondNeg = function(cond) { return this.$val.CondNeg(cond); };
	affineCached.ptr.prototype.CondNeg = function(cond) {
		var cond, v;
		v = this;
		v.YplusX.Swap(v.YminusX, cond);
		v.T2d.Select(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Negate(v.T2d), v.T2d, cond);
		return v;
	};
	affineCached.prototype.CondNeg = function(cond) { return this.$val.CondNeg(cond); };
	ptrType$3.methods = [{prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SelectInto", name: "SelectInto", pkg: "", typ: $funcType([ptrType$2, $Int8], [], false)}];
	ptrType$5.methods = [{prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SelectInto", name: "SelectInto", pkg: "", typ: $funcType([ptrType$4, $Int8], [], false)}];
	ptrType$6.methods = [{prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SelectInto", name: "SelectInto", pkg: "", typ: $funcType([ptrType$2, $Int8], [], false)}];
	ptrType$7.methods = [{prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SelectInto", name: "SelectInto", pkg: "", typ: $funcType([ptrType$4, $Int8], [], false)}];
	ptrType$1.methods = [{prop: "MultiplyAdd", name: "MultiplyAdd", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Subtract", name: "Subtract", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "SetUniformBytes", name: "SetUniformBytes", pkg: "", typ: $funcType([sliceType], [ptrType$1, $error], false)}, {prop: "SetCanonicalBytes", name: "SetCanonicalBytes", pkg: "", typ: $funcType([sliceType], [ptrType$1, $error], false)}, {prop: "SetBytesWithClamping", name: "SetBytesWithClamping", pkg: "", typ: $funcType([sliceType], [ptrType$1, $error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "nonAdjacentForm", name: "nonAdjacentForm", pkg: "crypto/internal/edwards25519", typ: $funcType([$Uint], [arrayType$7], false)}, {prop: "signedRadix16", name: "signedRadix16", pkg: "crypto/internal/edwards25519", typ: $funcType([], [arrayType$5], false)}];
	ptrType$8.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType$2], [ptrType$8], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType, ptrType$2], [ptrType$8], false)}, {prop: "AddAffine", name: "AddAffine", pkg: "", typ: $funcType([ptrType, ptrType$4], [ptrType$8], false)}, {prop: "SubAffine", name: "SubAffine", pkg: "", typ: $funcType([ptrType, ptrType$4], [ptrType$8], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$9], [ptrType$8], false)}];
	ptrType$9.methods = [{prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "FromP1xP1", name: "FromP1xP1", pkg: "", typ: $funcType([ptrType$8], [ptrType$9], false)}, {prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [ptrType$9], false)}];
	ptrType.methods = [{prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([ptrType$1], [ptrType], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType], [ptrType], false)}, {prop: "VarTimeDoubleScalarBaseMult", name: "VarTimeDoubleScalarBaseMult", pkg: "", typ: $funcType([ptrType$1, ptrType, ptrType$1], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "bytes", name: "bytes", pkg: "crypto/internal/edwards25519", typ: $funcType([ptrType$10], [sliceType], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType, $error], false)}, {prop: "fromP1xP1", name: "fromP1xP1", pkg: "crypto/internal/edwards25519", typ: $funcType([ptrType$8], [ptrType], false)}, {prop: "fromP2", name: "fromP2", pkg: "crypto/internal/edwards25519", typ: $funcType([ptrType$9], [ptrType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Subtract", name: "Subtract", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Negate", name: "Negate", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType], [$Int], false)}];
	ptrType$2.methods = [{prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [ptrType$2], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$2, ptrType$2, $Int], [ptrType$2], false)}, {prop: "CondNeg", name: "CondNeg", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}];
	ptrType$4.methods = [{prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "FromP3", name: "FromP3", pkg: "", typ: $funcType([ptrType], [ptrType$4], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$4, ptrType$4, $Int], [ptrType$4], false)}, {prop: "CondNeg", name: "CondNeg", pkg: "", typ: $funcType([$Int], [ptrType$4], false)}];
	projLookupTable.init("crypto/internal/edwards25519", [{prop: "points", name: "points", embedded: false, exported: false, typ: arrayType$6, tag: ""}]);
	affineLookupTable.init("crypto/internal/edwards25519", [{prop: "points", name: "points", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	nafLookupTable5.init("crypto/internal/edwards25519", [{prop: "points", name: "points", embedded: false, exported: false, typ: arrayType$6, tag: ""}]);
	nafLookupTable8.init("crypto/internal/edwards25519", [{prop: "points", name: "points", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
	Scalar.init("crypto/internal/edwards25519", [{prop: "s", name: "s", embedded: false, exported: false, typ: arrayType$3, tag: ""}]);
	projP1xP1.init("", [{prop: "X", name: "X", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "Y", name: "Y", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "Z", name: "Z", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "T", name: "T", embedded: false, exported: true, typ: field.Element, tag: ""}]);
	projP2.init("", [{prop: "X", name: "X", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "Y", name: "Y", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "Z", name: "Z", embedded: false, exported: true, typ: field.Element, tag: ""}]);
	Point.init("crypto/internal/edwards25519", [{prop: "x", name: "x", embedded: false, exported: false, typ: field.Element, tag: ""}, {prop: "y", name: "y", embedded: false, exported: false, typ: field.Element, tag: ""}, {prop: "z", name: "z", embedded: false, exported: false, typ: field.Element, tag: ""}, {prop: "t", name: "t", embedded: false, exported: false, typ: field.Element, tag: ""}, {prop: "_$4", name: "_", embedded: false, exported: false, typ: incomparable, tag: ""}]);
	incomparable.init(funcType, 0);
	projCached.init("", [{prop: "YplusX", name: "YplusX", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "YminusX", name: "YminusX", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "Z", name: "Z", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "T2d", name: "T2d", embedded: false, exported: true, typ: field.Element, tag: ""}]);
	affineCached.init("", [{prop: "YplusX", name: "YplusX", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "YminusX", name: "YminusX", embedded: false, exported: true, typ: field.Element, tag: ""}, {prop: "T2d", name: "T2d", embedded: false, exported: true, typ: field.Element, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = field.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		basepointTablePrecomp = new structType.ptr(arrayType$1.zero(), new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0)));
		basepointNafTablePrecomp = new structType$1.ptr(new nafLookupTable8.ptr(arrayType$2.zero()), new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0)));
		scZero = new Scalar.ptr($clone($toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), arrayType$3));
		scOne = new Scalar.ptr($clone($toNativeArray($kindUint8, [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), arrayType$3));
		scMinusOne = new Scalar.ptr($clone($toNativeArray($kindUint8, [236, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]), arrayType$3));
		feOne = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).One();
		_tuple = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).SetBytes(new sliceType([163, 120, 89, 19, 202, 77, 235, 117, 171, 216, 65, 65, 77, 10, 112, 0, 152, 232, 121, 119, 121, 64, 199, 140, 115, 254, 111, 43, 238, 108, 3, 82]));
		d = _tuple[0];
		_tuple$1 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero()).SetBytes(new sliceType([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
		identity = _tuple$1[0];
		_tuple$2 = new Point.ptr(new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$4.zero()).SetBytes(new sliceType([88, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102]));
		generator = _tuple$2[0];
		d2 = new field.Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)).Add(d, d);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/ed25519"] = (function() {
	var $pkg = {}, $init, bytes, crypto, edwards25519, rand, sha512, errors, io, strconv, PublicKey, sliceType, funcType, arrayType$1, Verify;
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	edwards25519 = $packages["crypto/internal/edwards25519"];
	rand = $packages["crypto/rand"];
	sha512 = $packages["crypto/sha512"];
	errors = $packages["errors"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	PublicKey = $pkg.PublicKey = $newType(12, $kindSlice, "ed25519.PublicKey", true, "crypto/ed25519", true, null);
	sliceType = $sliceType($Uint8);
	funcType = $funcType([], [], false);
	arrayType$1 = $arrayType(funcType, 0);
	PublicKey.prototype.Equal = function(x) {
		var _tuple, ok, pub, x, xx;
		pub = this;
		_tuple = $assertType(x, PublicKey, true);
		xx = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		return bytes.Equal($convertSliceType(pub, sliceType), $convertSliceType(xx, sliceType));
	};
	$ptrType(PublicKey).prototype.Equal = function(x) { return this.$get().Equal(x); };
	Verify = function(publicKey, message, sig) {
		var {A, R, S, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, err, hramDigest, k, kh, l, message, minusA, publicKey, sig, $s, $r, $c} = $restore(this, {publicKey, message, sig});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = publicKey.$length;
		if (!((l === 32))) {
			$panic(new $String("ed25519: bad public key length: " + strconv.Itoa(l)));
		}
		if (!((sig.$length === 64)) || !(((((63 >= sig.$length ? ($throwRuntimeError("index out of range"), undefined) : sig.$array[sig.$offset + 63]) & 224) >>> 0) === 0))) {
			$s = -1; return false;
		}
		_tuple = (new edwards25519.Point.ptr(new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$1.zero())).SetBytes($convertSliceType(publicKey, sliceType));
		A = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return false;
		}
		kh = sha512.New();
		_r = kh.Write($subslice(sig, 0, 32)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = kh.Write($convertSliceType(publicKey, sliceType)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = kh.Write(message); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		hramDigest = $makeSlice(sliceType, 0, 64);
		_r$3 = kh.Sum(hramDigest); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		hramDigest = _r$3;
		_tuple$1 = edwards25519.NewScalar().SetUniformBytes(hramDigest);
		k = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("ed25519: internal error: setting scalar failed"));
		}
		_tuple$2 = edwards25519.NewScalar().SetCanonicalBytes($subslice(sig, 32));
		S = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return false;
		}
		minusA = (new edwards25519.Point.ptr(new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$1.zero())).Negate(A);
		_r$4 = (new edwards25519.Point.ptr(new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), new $packages["crypto/internal/edwards25519/field"].Element.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0)), arrayType$1.zero())).VarTimeDoubleScalarBaseMult(k, minusA, S); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		R = _r$4;
		$s = -1; return bytes.Equal($subslice(sig, 0, 32), R.Bytes());
		/* */ } return; } var $f = {$blk: Verify, $c: true, $r, A, R, S, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, err, hramDigest, k, kh, l, message, minusA, publicKey, sig, $s};return $f;
	};
	$pkg.Verify = Verify;
	PublicKey.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PublicKey], [$Bool], false)}];
	PublicKey.init($Uint8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = edwards25519.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha512.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/md5"] = (function() {
	var $pkg = {}, $init, crypto, binary, errors, hash, bits, digest, sliceType, arrayType, arrayType$1, arrayType$2, arrayType$3, arrayType$4, ptrType, block, blockGeneric, init, appendUint64, appendUint32, consumeUint64, consumeUint32, New;
	crypto = $packages["crypto"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	bits = $packages["math/bits"];
	digest = $pkg.digest = $newType(0, $kindStruct, "md5.digest", true, "crypto/md5", false, function(s_, x_, nx_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = arrayType$2.zero();
			this.x = arrayType$3.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			return;
		}
		this.s = s_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 8);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint32, 4);
	arrayType$3 = $arrayType($Uint8, 64);
	arrayType$4 = $arrayType($Uint8, 16);
	ptrType = $ptrType(digest);
	block = function(dig, p) {
		var dig, p;
		blockGeneric(dig, p);
	};
	blockGeneric = function(dig, p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, aa, b, bb, c, cc, d, dd, dig, i, p, q, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, xa, xb, xc, xd, xe, xf;
		_tmp = dig.s[0];
		_tmp$1 = dig.s[1];
		_tmp$2 = dig.s[2];
		_tmp$3 = dig.s[3];
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		d = _tmp$3;
		i = 0;
		while (true) {
			if (!(i <= (p.$length - 64 >> 0))) { break; }
			q = $subslice(p, i);
			q = $subslice(q, 0, 64, 64);
			_tmp$4 = a;
			_tmp$5 = b;
			_tmp$6 = c;
			_tmp$7 = d;
			aa = _tmp$4;
			bb = _tmp$5;
			cc = _tmp$6;
			dd = _tmp$7;
			x0 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 0));
			x1 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 4));
			x2 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 8));
			x3 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 12));
			x4 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 16));
			x5 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 20));
			x6 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 24));
			x7 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 28));
			x8 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 32));
			x9 = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 36));
			xa = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 40));
			xb = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 44));
			xc = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 48));
			xd = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 52));
			xe = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 56));
			xf = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(q, 60));
			a = b + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + a >>> 0) + x0 >>> 0) + 3614090360 >>> 0, 7) >>> 0;
			d = a + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + d >>> 0) + x1 >>> 0) + 3905402710 >>> 0, 12) >>> 0;
			c = d + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + c >>> 0) + x2 >>> 0) + 606105819 >>> 0, 17) >>> 0;
			b = c + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + b >>> 0) + x3 >>> 0) + 3250441966 >>> 0, 22) >>> 0;
			a = b + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + a >>> 0) + x4 >>> 0) + 4118548399 >>> 0, 7) >>> 0;
			d = a + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + d >>> 0) + x5 >>> 0) + 1200080426 >>> 0, 12) >>> 0;
			c = d + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + c >>> 0) + x6 >>> 0) + 2821735955 >>> 0, 17) >>> 0;
			b = c + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + b >>> 0) + x7 >>> 0) + 4249261313 >>> 0, 22) >>> 0;
			a = b + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + a >>> 0) + x8 >>> 0) + 1770035416 >>> 0, 7) >>> 0;
			d = a + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + d >>> 0) + x9 >>> 0) + 2336552879 >>> 0, 12) >>> 0;
			c = d + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + c >>> 0) + xa >>> 0) + 4294925233 >>> 0, 17) >>> 0;
			b = c + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + b >>> 0) + xb >>> 0) + 2304563134 >>> 0, 22) >>> 0;
			a = b + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + a >>> 0) + xc >>> 0) + 1804603682 >>> 0, 7) >>> 0;
			d = a + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + d >>> 0) + xd >>> 0) + 4254626195 >>> 0, 12) >>> 0;
			c = d + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + c >>> 0) + xe >>> 0) + 2792965006 >>> 0, 17) >>> 0;
			b = c + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + b >>> 0) + xf >>> 0) + 1236535329 >>> 0, 22) >>> 0;
			a = b + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + a >>> 0) + x1 >>> 0) + 4129170786 >>> 0, 5) >>> 0;
			d = a + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + d >>> 0) + x6 >>> 0) + 3225465664 >>> 0, 9) >>> 0;
			c = d + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + c >>> 0) + xb >>> 0) + 643717713 >>> 0, 14) >>> 0;
			b = c + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + b >>> 0) + x0 >>> 0) + 3921069994 >>> 0, 20) >>> 0;
			a = b + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + a >>> 0) + x5 >>> 0) + 3593408605 >>> 0, 5) >>> 0;
			d = a + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + d >>> 0) + xa >>> 0) + 38016083 >>> 0, 9) >>> 0;
			c = d + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + c >>> 0) + xf >>> 0) + 3634488961 >>> 0, 14) >>> 0;
			b = c + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + b >>> 0) + x4 >>> 0) + 3889429448 >>> 0, 20) >>> 0;
			a = b + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + a >>> 0) + x9 >>> 0) + 568446438 >>> 0, 5) >>> 0;
			d = a + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + d >>> 0) + xe >>> 0) + 3275163606 >>> 0, 9) >>> 0;
			c = d + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + c >>> 0) + x3 >>> 0) + 4107603335 >>> 0, 14) >>> 0;
			b = c + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + b >>> 0) + x8 >>> 0) + 1163531501 >>> 0, 20) >>> 0;
			a = b + bits.RotateLeft32((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + a >>> 0) + xd >>> 0) + 2850285829 >>> 0, 5) >>> 0;
			d = a + bits.RotateLeft32((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + d >>> 0) + x2 >>> 0) + 4243563512 >>> 0, 9) >>> 0;
			c = d + bits.RotateLeft32((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + c >>> 0) + x7 >>> 0) + 1735328473 >>> 0, 14) >>> 0;
			b = c + bits.RotateLeft32((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + b >>> 0) + xc >>> 0) + 2368359562 >>> 0, 20) >>> 0;
			a = b + bits.RotateLeft32((((((((b ^ c) >>> 0) ^ d) >>> 0)) + a >>> 0) + x5 >>> 0) + 4294588738 >>> 0, 4) >>> 0;
			d = a + bits.RotateLeft32((((((((a ^ b) >>> 0) ^ c) >>> 0)) + d >>> 0) + x8 >>> 0) + 2272392833 >>> 0, 11) >>> 0;
			c = d + bits.RotateLeft32((((((((d ^ a) >>> 0) ^ b) >>> 0)) + c >>> 0) + xb >>> 0) + 1839030562 >>> 0, 16) >>> 0;
			b = c + bits.RotateLeft32((((((((c ^ d) >>> 0) ^ a) >>> 0)) + b >>> 0) + xe >>> 0) + 4259657740 >>> 0, 23) >>> 0;
			a = b + bits.RotateLeft32((((((((b ^ c) >>> 0) ^ d) >>> 0)) + a >>> 0) + x1 >>> 0) + 2763975236 >>> 0, 4) >>> 0;
			d = a + bits.RotateLeft32((((((((a ^ b) >>> 0) ^ c) >>> 0)) + d >>> 0) + x4 >>> 0) + 1272893353 >>> 0, 11) >>> 0;
			c = d + bits.RotateLeft32((((((((d ^ a) >>> 0) ^ b) >>> 0)) + c >>> 0) + x7 >>> 0) + 4139469664 >>> 0, 16) >>> 0;
			b = c + bits.RotateLeft32((((((((c ^ d) >>> 0) ^ a) >>> 0)) + b >>> 0) + xa >>> 0) + 3200236656 >>> 0, 23) >>> 0;
			a = b + bits.RotateLeft32((((((((b ^ c) >>> 0) ^ d) >>> 0)) + a >>> 0) + xd >>> 0) + 681279174 >>> 0, 4) >>> 0;
			d = a + bits.RotateLeft32((((((((a ^ b) >>> 0) ^ c) >>> 0)) + d >>> 0) + x0 >>> 0) + 3936430074 >>> 0, 11) >>> 0;
			c = d + bits.RotateLeft32((((((((d ^ a) >>> 0) ^ b) >>> 0)) + c >>> 0) + x3 >>> 0) + 3572445317 >>> 0, 16) >>> 0;
			b = c + bits.RotateLeft32((((((((c ^ d) >>> 0) ^ a) >>> 0)) + b >>> 0) + x6 >>> 0) + 76029189 >>> 0, 23) >>> 0;
			a = b + bits.RotateLeft32((((((((b ^ c) >>> 0) ^ d) >>> 0)) + a >>> 0) + x9 >>> 0) + 3654602809 >>> 0, 4) >>> 0;
			d = a + bits.RotateLeft32((((((((a ^ b) >>> 0) ^ c) >>> 0)) + d >>> 0) + xc >>> 0) + 3873151461 >>> 0, 11) >>> 0;
			c = d + bits.RotateLeft32((((((((d ^ a) >>> 0) ^ b) >>> 0)) + c >>> 0) + xf >>> 0) + 530742520 >>> 0, 16) >>> 0;
			b = c + bits.RotateLeft32((((((((c ^ d) >>> 0) ^ a) >>> 0)) + b >>> 0) + x2 >>> 0) + 3299628645 >>> 0, 23) >>> 0;
			a = b + bits.RotateLeft32((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + a >>> 0) + x0 >>> 0) + 4096336452 >>> 0, 6) >>> 0;
			d = a + bits.RotateLeft32((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + d >>> 0) + x7 >>> 0) + 1126891415 >>> 0, 10) >>> 0;
			c = d + bits.RotateLeft32((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + c >>> 0) + xe >>> 0) + 2878612391 >>> 0, 15) >>> 0;
			b = c + bits.RotateLeft32((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + b >>> 0) + x5 >>> 0) + 4237533241 >>> 0, 21) >>> 0;
			a = b + bits.RotateLeft32((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + a >>> 0) + xc >>> 0) + 1700485571 >>> 0, 6) >>> 0;
			d = a + bits.RotateLeft32((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + d >>> 0) + x3 >>> 0) + 2399980690 >>> 0, 10) >>> 0;
			c = d + bits.RotateLeft32((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + c >>> 0) + xa >>> 0) + 4293915773 >>> 0, 15) >>> 0;
			b = c + bits.RotateLeft32((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + b >>> 0) + x1 >>> 0) + 2240044497 >>> 0, 21) >>> 0;
			a = b + bits.RotateLeft32((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + a >>> 0) + x8 >>> 0) + 1873313359 >>> 0, 6) >>> 0;
			d = a + bits.RotateLeft32((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + d >>> 0) + xf >>> 0) + 4264355552 >>> 0, 10) >>> 0;
			c = d + bits.RotateLeft32((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + c >>> 0) + x6 >>> 0) + 2734768916 >>> 0, 15) >>> 0;
			b = c + bits.RotateLeft32((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + b >>> 0) + xd >>> 0) + 1309151649 >>> 0, 21) >>> 0;
			a = b + bits.RotateLeft32((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + a >>> 0) + x4 >>> 0) + 4149444226 >>> 0, 6) >>> 0;
			d = a + bits.RotateLeft32((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + d >>> 0) + xb >>> 0) + 3174756917 >>> 0, 10) >>> 0;
			c = d + bits.RotateLeft32((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + c >>> 0) + x2 >>> 0) + 718787259 >>> 0, 15) >>> 0;
			b = c + bits.RotateLeft32((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + b >>> 0) + x9 >>> 0) + 3951481745 >>> 0, 21) >>> 0;
			a = a + (aa) >>> 0;
			b = b + (bb) >>> 0;
			c = c + (cc) >>> 0;
			d = d + (dd) >>> 0;
			i = i + (64) >> 0;
		}
		_tmp$8 = a;
		_tmp$9 = b;
		_tmp$10 = c;
		_tmp$11 = d;
		dig.s[0] = _tmp$8;
		dig.s[1] = _tmp$9;
		dig.s[2] = _tmp$10;
		dig.s[3] = _tmp$11;
	};
	init = function() {
		crypto.RegisterHash(2, New);
	};
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.s[0] = 1732584193;
		d.s[1] = 4023233417;
		d.s[2] = 2562383102;
		d.s[3] = 271733878;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	digest.ptr.prototype.MarshalBinary = function() {
		var b, d;
		d = this;
		b = $makeSlice(sliceType, 0, 92);
		b = $appendSlice(b, "md5\x01");
		b = appendUint32(b, d.s[0]);
		b = appendUint32(b, d.s[1]);
		b = appendUint32(b, d.s[2]);
		b = appendUint32(b, d.s[3]);
		b = $appendSlice(b, $subslice(new sliceType(d.x), 0, d.nx));
		b = $subslice(b, 0, ((b.$length + 64 >> 0) - d.nx >> 0));
		b = appendUint64(b, d.len);
		return [b, $ifaceNil];
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, d;
		d = this;
		if (b.$length < 4 || !(($bytesToString($subslice(b, 0, 4))) === "md5\x01")) {
			return errors.New("crypto/md5: invalid hash state identifier");
		}
		if (!((b.$length === 92))) {
			return errors.New("crypto/md5: invalid hash state size");
		}
		b = $subslice(b, 4);
		_tuple = consumeUint32(b);
		b = _tuple[0];
		d.s[0] = _tuple[1];
		_tuple$1 = consumeUint32(b);
		b = _tuple$1[0];
		d.s[1] = _tuple$1[1];
		_tuple$2 = consumeUint32(b);
		b = _tuple$2[0];
		d.s[2] = _tuple$2[1];
		_tuple$3 = consumeUint32(b);
		b = _tuple$3[0];
		d.s[3] = _tuple$3[1];
		b = $subslice(b, $copySlice(new sliceType(d.x), b));
		_tuple$4 = consumeUint64(b);
		b = _tuple$4[0];
		d.len = _tuple$4[1];
		d.nx = (($div64(d.len, new $Uint64(0, 64), true).$low >> 0));
		return $ifaceNil;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint64 = function(b, x) {
		var a, b, x;
		a = arrayType.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType(a), x);
		return $appendSlice(b, new sliceType(a));
	};
	appendUint32 = function(b, x) {
		var a, b, x;
		a = arrayType$1.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint32(new sliceType(a), x);
		return $appendSlice(b, new sliceType(a));
	};
	consumeUint64 = function(b) {
		var b;
		return [$subslice(b, 8), $clone(binary.BigEndian, binary.bigEndian).Uint64($subslice(b, 0, 8))];
	};
	consumeUint32 = function(b) {
		var b;
		return [$subslice(b, 4), $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(b, 0, 4))];
	};
	New = function() {
		var d;
		d = new digest.ptr(arrayType$2.zero(), arrayType$3.zero(), 0, new $Uint64(0, 0));
		d.Reset();
		return d;
	};
	$pkg.New = New;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		return 16;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = (new $Uint64(0, nn)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				if (false) {
					block(d, new sliceType(d.x));
				} else {
					blockGeneric(d, new sliceType(d.x));
				}
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = (p.$length & ~63) >> 0;
			if (false) {
				block(d, $subslice(p, 0, n$1));
			} else {
				blockGeneric(d, $subslice(p, 0, n$1));
			}
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var d, d0, hash$1, in$1;
		d = this;
		d0 = $clone(d, digest);
		hash$1 = $clone(d0.checkSum(), arrayType$4);
		return $appendSlice(in$1, new sliceType(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var d, digest$1, pad, tmp, x, x$1;
		d = this;
		tmp = $toNativeArray($kindUint8, [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		pad = $div64(((x = d.len, new $Uint64(0 - x.$high, 55 - x.$low))), new $Uint64(0, 64), true);
		$clone(binary.LittleEndian, binary.littleEndian).PutUint64($subslice(new sliceType(tmp), $flatten64(new $Uint64(0 + pad.$high, 1 + pad.$low))), $shiftLeft64(d.len, 3));
		d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$1 = new $Uint64(0 + pad.$high, 1 + pad.$low), new $Uint64(x$1.$high + 0, x$1.$low + 8)))));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = arrayType$4.zero();
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(new sliceType(digest$1), 0), d.s[0]);
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(new sliceType(digest$1), 4), d.s[1]);
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(new sliceType(digest$1), 8), d.s[2]);
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(new sliceType(digest$1), 12), d.s[3]);
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/md5", typ: $funcType([], [arrayType$4], false)}];
	digest.init("crypto/md5", [{prop: "s", name: "s", embedded: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "x", name: "x", embedded: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "nx", name: "nx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha1"] = (function() {
	var $pkg = {}, $init, crypto, binary, errors, hash, bits, digest, arrayType, sliceType, arrayType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, ptrType, block, blockGeneric, init, appendUint64, appendUint32, consumeUint64, consumeUint32, New, Sum, boringNewSHA1, boringUnreachable, boringSHA1;
	crypto = $packages["crypto"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	bits = $packages["math/bits"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha1.digest", true, "crypto/sha1", false, function(h_, x_, nx_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$3.zero();
			this.x = arrayType$4.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
	});
	arrayType = $arrayType($Uint32, 16);
	sliceType = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 8);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint32, 5);
	arrayType$4 = $arrayType($Uint8, 64);
	arrayType$5 = $arrayType($Uint8, 20);
	ptrType = $ptrType(digest);
	block = function(dig, p) {
		var dig, p;
		blockGeneric(dig, p);
	};
	blockGeneric = function(dig, p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, f$1, f$2, f$3, f$4, h0, h1, h2, h3, h4, i, i$1, j, p, t, t$1, t$2, t$3, t$4, tmp, tmp$1, tmp$2, tmp$3, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		w = arrayType.zero();
		_tmp = dig.h[0];
		_tmp$1 = dig.h[1];
		_tmp$2 = dig.h[2];
		_tmp$3 = dig.h[3];
		_tmp$4 = dig.h[4];
		h0 = _tmp;
		h1 = _tmp$1;
		h2 = _tmp$2;
		h3 = _tmp$3;
		h4 = _tmp$4;
		while (true) {
			if (!(p.$length >= 64)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = $imul(i, 4);
				((i < 0 || i >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i] = (((((((((((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) >>> 0)) << 24 >>> 0) | ((((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])) >>> 0))) >>> 0));
				i = i + (1) >> 0;
			}
			_tmp$5 = h0;
			_tmp$6 = h1;
			_tmp$7 = h2;
			_tmp$8 = h3;
			_tmp$9 = h4;
			a = _tmp$5;
			b = _tmp$6;
			c = _tmp$7;
			d = _tmp$8;
			e = _tmp$9;
			i$1 = 0;
			while (true) {
				if (!(i$1 < 16)) { break; }
				f = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				t = (((bits.RotateLeft32(a, 5) + f >>> 0) + e >>> 0) + (x$3 = i$1 & 15, ((x$3 < 0 || x$3 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$3])) >>> 0) + 1518500249 >>> 0;
				_tmp$10 = t;
				_tmp$11 = a;
				_tmp$12 = bits.RotateLeft32(b, 30);
				_tmp$13 = c;
				_tmp$14 = d;
				a = _tmp$10;
				b = _tmp$11;
				c = _tmp$12;
				d = _tmp$13;
				e = _tmp$14;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 20)) { break; }
				tmp = ((((((x$4 = ((i$1 - 3 >> 0)) & 15, ((x$4 < 0 || x$4 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$4])) ^ (x$5 = ((i$1 - 8 >> 0)) & 15, ((x$5 < 0 || x$5 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$5]))) >>> 0) ^ (x$6 = ((i$1 - 14 >> 0)) & 15, ((x$6 < 0 || x$6 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$6]))) >>> 0) ^ (x$7 = (i$1) & 15, ((x$7 < 0 || x$7 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$7]))) >>> 0;
				(x$8 = i$1 & 15, ((x$8 < 0 || x$8 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$8] = (((tmp << 1 >>> 0) | (tmp >>> 31 >>> 0)) >>> 0)));
				f$1 = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				t$1 = (((bits.RotateLeft32(a, 5) + f$1 >>> 0) + e >>> 0) + (x$9 = i$1 & 15, ((x$9 < 0 || x$9 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$9])) >>> 0) + 1518500249 >>> 0;
				_tmp$15 = t$1;
				_tmp$16 = a;
				_tmp$17 = bits.RotateLeft32(b, 30);
				_tmp$18 = c;
				_tmp$19 = d;
				a = _tmp$15;
				b = _tmp$16;
				c = _tmp$17;
				d = _tmp$18;
				e = _tmp$19;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 40)) { break; }
				tmp$1 = ((((((x$10 = ((i$1 - 3 >> 0)) & 15, ((x$10 < 0 || x$10 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$10])) ^ (x$11 = ((i$1 - 8 >> 0)) & 15, ((x$11 < 0 || x$11 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$11]))) >>> 0) ^ (x$12 = ((i$1 - 14 >> 0)) & 15, ((x$12 < 0 || x$12 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$12]))) >>> 0) ^ (x$13 = (i$1) & 15, ((x$13 < 0 || x$13 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$13]))) >>> 0;
				(x$14 = i$1 & 15, ((x$14 < 0 || x$14 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$14] = (((tmp$1 << 1 >>> 0) | (tmp$1 >>> 31 >>> 0)) >>> 0)));
				f$2 = (((b ^ c) >>> 0) ^ d) >>> 0;
				t$2 = (((bits.RotateLeft32(a, 5) + f$2 >>> 0) + e >>> 0) + (x$15 = i$1 & 15, ((x$15 < 0 || x$15 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$15])) >>> 0) + 1859775393 >>> 0;
				_tmp$20 = t$2;
				_tmp$21 = a;
				_tmp$22 = bits.RotateLeft32(b, 30);
				_tmp$23 = c;
				_tmp$24 = d;
				a = _tmp$20;
				b = _tmp$21;
				c = _tmp$22;
				d = _tmp$23;
				e = _tmp$24;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 60)) { break; }
				tmp$2 = ((((((x$16 = ((i$1 - 3 >> 0)) & 15, ((x$16 < 0 || x$16 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$16])) ^ (x$17 = ((i$1 - 8 >> 0)) & 15, ((x$17 < 0 || x$17 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$17]))) >>> 0) ^ (x$18 = ((i$1 - 14 >> 0)) & 15, ((x$18 < 0 || x$18 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$18]))) >>> 0) ^ (x$19 = (i$1) & 15, ((x$19 < 0 || x$19 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$19]))) >>> 0;
				(x$20 = i$1 & 15, ((x$20 < 0 || x$20 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$20] = (((tmp$2 << 1 >>> 0) | (tmp$2 >>> 31 >>> 0)) >>> 0)));
				f$3 = (((((((b | c) >>> 0)) & d) >>> 0)) | (((b & c) >>> 0))) >>> 0;
				t$3 = (((bits.RotateLeft32(a, 5) + f$3 >>> 0) + e >>> 0) + (x$21 = i$1 & 15, ((x$21 < 0 || x$21 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$21])) >>> 0) + 2400959708 >>> 0;
				_tmp$25 = t$3;
				_tmp$26 = a;
				_tmp$27 = bits.RotateLeft32(b, 30);
				_tmp$28 = c;
				_tmp$29 = d;
				a = _tmp$25;
				b = _tmp$26;
				c = _tmp$27;
				d = _tmp$28;
				e = _tmp$29;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 80)) { break; }
				tmp$3 = ((((((x$22 = ((i$1 - 3 >> 0)) & 15, ((x$22 < 0 || x$22 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$22])) ^ (x$23 = ((i$1 - 8 >> 0)) & 15, ((x$23 < 0 || x$23 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$23]))) >>> 0) ^ (x$24 = ((i$1 - 14 >> 0)) & 15, ((x$24 < 0 || x$24 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$24]))) >>> 0) ^ (x$25 = (i$1) & 15, ((x$25 < 0 || x$25 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$25]))) >>> 0;
				(x$26 = i$1 & 15, ((x$26 < 0 || x$26 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$26] = (((tmp$3 << 1 >>> 0) | (tmp$3 >>> 31 >>> 0)) >>> 0)));
				f$4 = (((b ^ c) >>> 0) ^ d) >>> 0;
				t$4 = (((bits.RotateLeft32(a, 5) + f$4 >>> 0) + e >>> 0) + (x$27 = i$1 & 15, ((x$27 < 0 || x$27 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$27])) >>> 0) + 3395469782 >>> 0;
				_tmp$30 = t$4;
				_tmp$31 = a;
				_tmp$32 = bits.RotateLeft32(b, 30);
				_tmp$33 = c;
				_tmp$34 = d;
				a = _tmp$30;
				b = _tmp$31;
				c = _tmp$32;
				d = _tmp$33;
				e = _tmp$34;
				i$1 = i$1 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$35 = h0;
		_tmp$36 = h1;
		_tmp$37 = h2;
		_tmp$38 = h3;
		_tmp$39 = h4;
		dig.h[0] = _tmp$35;
		dig.h[1] = _tmp$36;
		dig.h[2] = _tmp$37;
		dig.h[3] = _tmp$38;
		dig.h[4] = _tmp$39;
	};
	init = function() {
		crypto.RegisterHash(3, New);
	};
	digest.ptr.prototype.MarshalBinary = function() {
		var b, d;
		d = this;
		b = $makeSlice(sliceType, 0, 96);
		b = $appendSlice(b, "sha\x01");
		b = appendUint32(b, d.h[0]);
		b = appendUint32(b, d.h[1]);
		b = appendUint32(b, d.h[2]);
		b = appendUint32(b, d.h[3]);
		b = appendUint32(b, d.h[4]);
		b = $appendSlice(b, $subslice(new sliceType(d.x), 0, d.nx));
		b = $subslice(b, 0, ((b.$length + 64 >> 0) - (d.nx) >> 0));
		b = appendUint64(b, d.len);
		return [b, $ifaceNil];
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, d;
		d = this;
		if (b.$length < 4 || !(($bytesToString($subslice(b, 0, 4))) === "sha\x01")) {
			return errors.New("crypto/sha1: invalid hash state identifier");
		}
		if (!((b.$length === 96))) {
			return errors.New("crypto/sha1: invalid hash state size");
		}
		b = $subslice(b, 4);
		_tuple = consumeUint32(b);
		b = _tuple[0];
		d.h[0] = _tuple[1];
		_tuple$1 = consumeUint32(b);
		b = _tuple$1[0];
		d.h[1] = _tuple$1[1];
		_tuple$2 = consumeUint32(b);
		b = _tuple$2[0];
		d.h[2] = _tuple$2[1];
		_tuple$3 = consumeUint32(b);
		b = _tuple$3[0];
		d.h[3] = _tuple$3[1];
		_tuple$4 = consumeUint32(b);
		b = _tuple$4[0];
		d.h[4] = _tuple$4[1];
		b = $subslice(b, $copySlice(new sliceType(d.x), b));
		_tuple$5 = consumeUint64(b);
		b = _tuple$5[0];
		d.len = _tuple$5[1];
		d.nx = (($div64(d.len, new $Uint64(0, 64), true).$low >> 0));
		return $ifaceNil;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint64 = function(b, x) {
		var a, b, x;
		a = arrayType$1.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType(a), x);
		return $appendSlice(b, new sliceType(a));
	};
	appendUint32 = function(b, x) {
		var a, b, x;
		a = arrayType$2.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint32(new sliceType(a), x);
		return $appendSlice(b, new sliceType(a));
	};
	consumeUint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		x$14 = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		return [$subslice(b, 8), x$14];
	};
	consumeUint32 = function(b) {
		var b, x;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		x = ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
		return [$subslice(b, 4), x];
	};
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.h[0] = 1732584193;
		d.h[1] = 4023233417;
		d.h[2] = 2562383102;
		d.h[3] = 271733878;
		d.h[4] = 3285377520;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var d;
		if (false) {
			return boringNewSHA1();
		}
		d = new digest.ptr(arrayType$3.zero(), arrayType$4.zero(), 0, new $Uint64(0, 0));
		d.Reset();
		return d;
	};
	$pkg.New = New;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		return 20;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		boringUnreachable();
		nn = p.$length;
		d.len = (x = d.len, x$1 = (new $Uint64(0, nn)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, new sliceType(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = (p.$length & ~63) >> 0;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var d, d0, hash$1, in$1;
		d = this;
		boringUnreachable();
		d0 = $clone(d, digest);
		hash$1 = $clone(d0.checkSum(), arrayType$5);
		return $appendSlice(in$1, new sliceType(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var d, digest$1, len, tmp, x, x$1, x$2;
		d = this;
		len = d.len;
		tmp = arrayType$4.zero();
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType(tmp), len);
		d.Write($subslice(new sliceType(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = arrayType$5.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType(digest$1), 0), d.h[0]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType(digest$1), 4), d.h[1]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType(digest$1), 8), d.h[2]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType(digest$1), 12), d.h[3]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType(digest$1), 16), d.h[4]);
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	digest.ptr.prototype.ConstantTimeSum = function(in$1) {
		var d, d0, hash$1, in$1;
		d = this;
		d0 = $clone(d, digest);
		hash$1 = $clone(d0.constSum(), arrayType$5);
		return $appendSlice(in$1, new sliceType(hash$1));
	};
	digest.prototype.ConstantTimeSum = function(in$1) { return this.$val.ConstantTimeSum(in$1); };
	digest.ptr.prototype.constSum = function() {
		var _i, _i$1, _index, _index$1, _index$2, _index$3, _ref, _ref$1, d, digest$1, i, i$1, i$2, i$3, i$4, l, length, mask, mask1b, nx, s, s$1, separator, t, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		d = this;
		length = arrayType$1.zero();
		l = $shiftLeft64(d.len, 3);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= length.length) ? ($throwRuntimeError("index out of range"), undefined) : length[i] = (($shiftRightUint64(l, ((56 - (8 * i >>> 0) >>> 0))).$low << 24 >>> 24)));
			i = i + (1) >>> 0;
		}
		nx = ((d.nx << 24 >>> 24));
		t = nx - 56 << 24 >>> 24;
		mask1b = (((((t << 24 >> 24)) >> 7 << 24 >> 24) << 24 >>> 24));
		separator = 128;
		i$1 = 0;
		while (true) {
			if (!(i$1 < 64)) { break; }
			mask = ((((((i$1 - nx << 24 >>> 24) << 24 >> 24)) >> 7 << 24 >> 24) << 24 >>> 24));
			(x$1 = d.x, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1] = ((((((~mask << 24 >>> 24) & separator) >>> 0)) | (((mask & (x = d.x, ((i$1 < 0 || i$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i$1]))) >>> 0))) >>> 0)));
			separator = (separator & (mask)) >>> 0;
			if (i$1 >= 56) {
				(x$4 = d.x, ((i$1 < 0 || i$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$1] = (((x$2 = d.x, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1])) | (((mask1b & (x$3 = i$1 - 56 << 24 >>> 24, ((x$3 < 0 || x$3 >= length.length) ? ($throwRuntimeError("index out of range"), undefined) : length[x$3]))) >>> 0))) >>> 0)));
			}
			i$1 = i$1 + (1) << 24 >>> 24;
		}
		block(d, new sliceType(d.x));
		digest$1 = arrayType$5.zero();
		_ref = d.h;
		_i = 0;
		while (true) {
			if (!(_i < 5)) { break; }
			i$2 = _i;
			s = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			(x$5 = $imul(i$2, 4), ((x$5 < 0 || x$5 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$5] = ((mask1b & (((s >>> 24 >>> 0) << 24 >>> 24))) >>> 0)));
			(x$6 = ($imul(i$2, 4)) + 1 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$6] = ((mask1b & (((s >>> 16 >>> 0) << 24 >>> 24))) >>> 0)));
			(x$7 = ($imul(i$2, 4)) + 2 >> 0, ((x$7 < 0 || x$7 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$7] = ((mask1b & (((s >>> 8 >>> 0) << 24 >>> 24))) >>> 0)));
			(x$8 = ($imul(i$2, 4)) + 3 >> 0, ((x$8 < 0 || x$8 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[x$8] = ((mask1b & ((s << 24 >>> 24))) >>> 0)));
			_i++;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < 64)) { break; }
			if (i$3 < 56) {
				(x$9 = d.x, ((i$3 < 0 || i$3 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[i$3] = separator));
				separator = 0;
			} else {
				(x$11 = d.x, ((i$3 < 0 || i$3 >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[i$3] = (x$10 = i$3 - 56 << 24 >>> 24, ((x$10 < 0 || x$10 >= length.length) ? ($throwRuntimeError("index out of range"), undefined) : length[x$10]))));
			}
			i$3 = i$3 + (1) << 24 >>> 24;
		}
		block(d, new sliceType(d.x));
		_ref$1 = d.h;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 5)) { break; }
			i$4 = _i$1;
			s$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
			_index = $imul(i$4, 4);
			((_index < 0 || _index >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index] = ((((_index < 0 || _index >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index]) | ((((~mask1b << 24 >>> 24) & (((s$1 >>> 24 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
			_index$1 = ($imul(i$4, 4)) + 1 >> 0;
			((_index$1 < 0 || _index$1 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$1] = ((((_index$1 < 0 || _index$1 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$1]) | ((((~mask1b << 24 >>> 24) & (((s$1 >>> 16 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
			_index$2 = ($imul(i$4, 4)) + 2 >> 0;
			((_index$2 < 0 || _index$2 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$2] = ((((_index$2 < 0 || _index$2 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$2]) | ((((~mask1b << 24 >>> 24) & (((s$1 >>> 8 >>> 0) << 24 >>> 24))) >>> 0))) >>> 0));
			_index$3 = ($imul(i$4, 4)) + 3 >> 0;
			((_index$3 < 0 || _index$3 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$3] = ((((_index$3 < 0 || _index$3 >= digest$1.length) ? ($throwRuntimeError("index out of range"), undefined) : digest$1[_index$3]) | ((((~mask1b << 24 >>> 24) & ((s$1 << 24 >>> 24))) >>> 0))) >>> 0));
			_i$1++;
		}
		return digest$1;
	};
	digest.prototype.constSum = function() { return this.$val.constSum(); };
	Sum = function(data) {
		var d, data;
		if (false) {
			return boringSHA1(data);
		}
		d = new digest.ptr(arrayType$3.zero(), arrayType$4.zero(), 0, new $Uint64(0, 0));
		d.Reset();
		d.Write(data);
		return d.checkSum();
	};
	$pkg.Sum = Sum;
	boringNewSHA1 = function() {
		$panic(new $String("boringcrypto: not available"));
	};
	boringUnreachable = function() {
	};
	boringSHA1 = function(param) {
		var param;
		$panic(new $String("boringcrypto: not available"));
	};
	ptrType.methods = [{prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha1", typ: $funcType([], [arrayType$5], false)}, {prop: "ConstantTimeSum", name: "ConstantTimeSum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "constSum", name: "constSum", pkg: "crypto/sha1", typ: $funcType([], [arrayType$5], false)}];
	digest.init("crypto/sha1", [{prop: "h", name: "h", embedded: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "x", name: "x", embedded: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "nx", name: "nx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha256"] = (function() {
	var $pkg = {}, $init, crypto, boring, binary, errors, hash, bits, digest, sliceType, arrayType, sliceType$1, arrayType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, ptrType, ptrType$1, _K, block, blockGeneric, init, appendUint64, appendUint32, consumeUint64, consumeUint32, New, New224, Sum224;
	crypto = $packages["crypto"];
	boring = $packages["crypto/internal/boring"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	bits = $packages["math/bits"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha256.digest", true, "crypto/sha256", false, function(h_, x_, nx_, len_, is224_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$3.zero();
			this.x = arrayType$4.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			this.is224 = false;
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
		this.is224 = is224_;
	});
	sliceType = $sliceType($Uint32);
	arrayType = $arrayType($Uint32, 64);
	sliceType$1 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 8);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint32, 8);
	arrayType$4 = $arrayType($Uint8, 64);
	arrayType$5 = $arrayType($Uint8, 32);
	arrayType$6 = $arrayType($Uint8, 28);
	ptrType = $ptrType(arrayType$6);
	ptrType$1 = $ptrType(digest);
	block = function(dig, p) {
		var dig, p;
		blockGeneric(dig, p);
	};
	blockGeneric = function(dig, p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, g, h, h0, h1, h2, h3, h4, h5, h6, h7, i, i$1, i$2, j, p, t1, t1$1, t2, t2$1, v1, v2, w, x, x$1, x$2, x$3, x$4, x$5, x$6;
		w = arrayType.zero();
		_tmp = dig.h[0];
		_tmp$1 = dig.h[1];
		_tmp$2 = dig.h[2];
		_tmp$3 = dig.h[3];
		_tmp$4 = dig.h[4];
		_tmp$5 = dig.h[5];
		_tmp$6 = dig.h[6];
		_tmp$7 = dig.h[7];
		h0 = _tmp;
		h1 = _tmp$1;
		h2 = _tmp$2;
		h3 = _tmp$3;
		h4 = _tmp$4;
		h5 = _tmp$5;
		h6 = _tmp$6;
		h7 = _tmp$7;
		while (true) {
			if (!(p.$length >= 64)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = $imul(i, 4);
				((i < 0 || i >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i] = (((((((((((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) >>> 0)) << 24 >>> 0) | ((((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])) >>> 0))) >>> 0));
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (true) {
				if (!(i$1 < 64)) { break; }
				v1 = (x$3 = i$1 - 2 >> 0, ((x$3 < 0 || x$3 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$3]));
				t1 = ((((bits.RotateLeft32(v1, -17)) ^ (bits.RotateLeft32(v1, -19))) >>> 0) ^ ((v1 >>> 10 >>> 0))) >>> 0;
				v2 = (x$4 = i$1 - 15 >> 0, ((x$4 < 0 || x$4 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$4]));
				t2 = ((((bits.RotateLeft32(v2, -7)) ^ (bits.RotateLeft32(v2, -18))) >>> 0) ^ ((v2 >>> 3 >>> 0))) >>> 0;
				((i$1 < 0 || i$1 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$1] = (((t1 + (x$5 = i$1 - 7 >> 0, ((x$5 < 0 || x$5 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$5])) >>> 0) + t2 >>> 0) + (x$6 = i$1 - 16 >> 0, ((x$6 < 0 || x$6 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[x$6])) >>> 0));
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0;
			_tmp$9 = h1;
			_tmp$10 = h2;
			_tmp$11 = h3;
			_tmp$12 = h4;
			_tmp$13 = h5;
			_tmp$14 = h6;
			_tmp$15 = h7;
			a = _tmp$8;
			b = _tmp$9;
			c = _tmp$10;
			d = _tmp$11;
			e = _tmp$12;
			f = _tmp$13;
			g = _tmp$14;
			h = _tmp$15;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 64)) { break; }
				t1$1 = (((h + ((((((bits.RotateLeft32(e, -6)) ^ (bits.RotateLeft32(e, -11))) >>> 0) ^ (bits.RotateLeft32(e, -25))) >>> 0)) >>> 0) + ((((((e & f) >>> 0)) ^ ((((~e >>> 0) & g) >>> 0))) >>> 0)) >>> 0) + ((i$2 < 0 || i$2 >= _K.$length) ? ($throwRuntimeError("index out of range"), undefined) : _K.$array[_K.$offset + i$2]) >>> 0) + ((i$2 < 0 || i$2 >= w.length) ? ($throwRuntimeError("index out of range"), undefined) : w[i$2]) >>> 0;
				t2$1 = ((((((bits.RotateLeft32(a, -2)) ^ (bits.RotateLeft32(a, -13))) >>> 0) ^ (bits.RotateLeft32(a, -22))) >>> 0)) + ((((((((a & b) >>> 0)) ^ (((a & c) >>> 0))) >>> 0) ^ (((b & c) >>> 0))) >>> 0)) >>> 0;
				h = g;
				g = f;
				f = e;
				e = d + t1$1 >>> 0;
				d = c;
				c = b;
				b = a;
				a = t1$1 + t2$1 >>> 0;
				i$2 = i$2 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			h5 = h5 + (f) >>> 0;
			h6 = h6 + (g) >>> 0;
			h7 = h7 + (h) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$16 = h0;
		_tmp$17 = h1;
		_tmp$18 = h2;
		_tmp$19 = h3;
		_tmp$20 = h4;
		_tmp$21 = h5;
		_tmp$22 = h6;
		_tmp$23 = h7;
		dig.h[0] = _tmp$16;
		dig.h[1] = _tmp$17;
		dig.h[2] = _tmp$18;
		dig.h[3] = _tmp$19;
		dig.h[4] = _tmp$20;
		dig.h[5] = _tmp$21;
		dig.h[6] = _tmp$22;
		dig.h[7] = _tmp$23;
	};
	init = function() {
		crypto.RegisterHash(4, New224);
		crypto.RegisterHash(5, New);
	};
	digest.ptr.prototype.MarshalBinary = function() {
		var b, d;
		d = this;
		b = $makeSlice(sliceType$1, 0, 108);
		if (d.is224) {
			b = $appendSlice(b, "sha\x02");
		} else {
			b = $appendSlice(b, "sha\x03");
		}
		b = appendUint32(b, d.h[0]);
		b = appendUint32(b, d.h[1]);
		b = appendUint32(b, d.h[2]);
		b = appendUint32(b, d.h[3]);
		b = appendUint32(b, d.h[4]);
		b = appendUint32(b, d.h[5]);
		b = appendUint32(b, d.h[6]);
		b = appendUint32(b, d.h[7]);
		b = $appendSlice(b, $subslice(new sliceType$1(d.x), 0, d.nx));
		b = $subslice(b, 0, ((b.$length + 64 >> 0) - (d.nx) >> 0));
		b = appendUint64(b, d.len);
		return [b, $ifaceNil];
	};
	digest.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	digest.ptr.prototype.UnmarshalBinary = function(b) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, b, d;
		d = this;
		if (b.$length < 4 || (d.is224 && !(($bytesToString($subslice(b, 0, 4))) === "sha\x02")) || (!d.is224 && !(($bytesToString($subslice(b, 0, 4))) === "sha\x03"))) {
			return errors.New("crypto/sha256: invalid hash state identifier");
		}
		if (!((b.$length === 108))) {
			return errors.New("crypto/sha256: invalid hash state size");
		}
		b = $subslice(b, 4);
		_tuple = consumeUint32(b);
		b = _tuple[0];
		d.h[0] = _tuple[1];
		_tuple$1 = consumeUint32(b);
		b = _tuple$1[0];
		d.h[1] = _tuple$1[1];
		_tuple$2 = consumeUint32(b);
		b = _tuple$2[0];
		d.h[2] = _tuple$2[1];
		_tuple$3 = consumeUint32(b);
		b = _tuple$3[0];
		d.h[3] = _tuple$3[1];
		_tuple$4 = consumeUint32(b);
		b = _tuple$4[0];
		d.h[4] = _tuple$4[1];
		_tuple$5 = consumeUint32(b);
		b = _tuple$5[0];
		d.h[5] = _tuple$5[1];
		_tuple$6 = consumeUint32(b);
		b = _tuple$6[0];
		d.h[6] = _tuple$6[1];
		_tuple$7 = consumeUint32(b);
		b = _tuple$7[0];
		d.h[7] = _tuple$7[1];
		b = $subslice(b, $copySlice(new sliceType$1(d.x), b));
		_tuple$8 = consumeUint64(b);
		b = _tuple$8[0];
		d.len = _tuple$8[1];
		d.nx = (($div64(d.len, new $Uint64(0, 64), true).$low >> 0));
		return $ifaceNil;
	};
	digest.prototype.UnmarshalBinary = function(b) { return this.$val.UnmarshalBinary(b); };
	appendUint64 = function(b, x) {
		var a, b, x;
		a = arrayType$1.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType$1(a), x);
		return $appendSlice(b, new sliceType$1(a));
	};
	appendUint32 = function(b, x) {
		var a, b, x;
		a = arrayType$2.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint32(new sliceType$1(a), x);
		return $appendSlice(b, new sliceType$1(a));
	};
	consumeUint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		x$14 = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		return [$subslice(b, 8), x$14];
	};
	consumeUint32 = function(b) {
		var b, x;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		x = ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
		return [$subslice(b, 4), x];
	};
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		if (!d.is224) {
			d.h[0] = 1779033703;
			d.h[1] = 3144134277;
			d.h[2] = 1013904242;
			d.h[3] = 2773480762;
			d.h[4] = 1359893119;
			d.h[5] = 2600822924;
			d.h[6] = 528734635;
			d.h[7] = 1541459225;
		} else {
			d.h[0] = 3238371032;
			d.h[1] = 914150663;
			d.h[2] = 812702999;
			d.h[3] = 4144912697;
			d.h[4] = 4290775857;
			d.h[5] = 1750603025;
			d.h[6] = 1694076839;
			d.h[7] = 3204075428;
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var d;
		if (false) {
			return boring.NewSHA256();
		}
		d = new digest.ptr(arrayType$3.zero(), arrayType$4.zero(), 0, new $Uint64(0, 0), false);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	New224 = function() {
		var d;
		if (false) {
			return boring.NewSHA224();
		}
		d = new digest.ptr(arrayType$3.zero(), arrayType$4.zero(), 0, new $Uint64(0, 0), false);
		d.is224 = true;
		d.Reset();
		return d;
	};
	$pkg.New224 = New224;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		if (!d.is224) {
			return 32;
		}
		return 28;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		boring.Unreachable();
		nn = p.$length;
		d.len = (x = d.len, x$1 = (new $Uint64(0, nn)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType$1(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, new sliceType$1(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = (p.$length & ~63) >> 0;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType$1(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var d, d0, hash$1, in$1;
		d = this;
		boring.Unreachable();
		d0 = $clone(d, digest);
		hash$1 = $clone(d0.checkSum(), arrayType$5);
		if (d0.is224) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 28));
		}
		return $appendSlice(in$1, new sliceType$1(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var d, digest$1, len, tmp, x, x$1, x$2;
		d = this;
		len = d.len;
		tmp = arrayType$4.zero();
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(new sliceType$1(tmp), len);
		d.Write($subslice(new sliceType$1(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = arrayType$5.zero();
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 0), d.h[0]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 4), d.h[1]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 8), d.h[2]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 12), d.h[3]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 16), d.h[4]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 20), d.h[5]);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 24), d.h[6]);
		if (!d.is224) {
			$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(new sliceType$1(digest$1), 28), d.h[7]);
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	Sum224 = function(data) {
		var ap, d, data, sum;
		if (false) {
			return boring.SHA224(data);
		}
		d = new digest.ptr(arrayType$3.zero(), arrayType$4.zero(), 0, new $Uint64(0, 0), false);
		d.is224 = true;
		d.Reset();
		d.Write(data);
		sum = $clone(d.checkSum(), arrayType$5);
		ap = ($sliceToGoArray(new sliceType$1(sum), ptrType));
		return ap;
	};
	$pkg.Sum224 = Sum224;
	ptrType$1.methods = [{prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha256", typ: $funcType([], [arrayType$5], false)}];
	digest.init("crypto/sha256", [{prop: "h", name: "h", embedded: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "x", name: "x", embedded: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "nx", name: "nx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "is224", name: "is224", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = boring.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_K = new sliceType([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/hex"] = (function() {
	var $pkg = {}, $init, errors, fmt, io, strings, sliceType$1, EncodedLen, Encode, EncodeToString;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	strings = $packages["strings"];
	sliceType$1 = $sliceType($Uint8);
	EncodedLen = function(n) {
		var n;
		return $imul(n, 2);
	};
	$pkg.EncodedLen = EncodedLen;
	Encode = function(dst, src) {
		var _i, _ref, dst, j, src, v, x;
		j = 0;
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((j < 0 || j >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + j] = "0123456789abcdef".charCodeAt((v >>> 4 << 24 >>> 24)));
			(x = j + 1 >> 0, ((x < 0 || x >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x] = "0123456789abcdef".charCodeAt(((v & 15) >>> 0))));
			j = j + (2) >> 0;
			_i++;
		}
		return $imul(src.$length, 2);
	};
	$pkg.Encode = Encode;
	EncodeToString = function(src) {
		var dst, src;
		dst = $makeSlice(sliceType$1, EncodedLen(src.$length));
		Encode(dst, src);
		return ($bytesToString(dst));
	};
	$pkg.EncodeToString = EncodeToString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrLength = errors.New("encoding/hex: odd length hex string");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/x509/pkix"] = (function() {
	var $pkg = {}, $init, asn1, hex, fmt, big, time, AlgorithmIdentifier, RDNSequence, RelativeDistinguishedNameSET, AttributeTypeAndValue, Extension, Name, CertificateList, TBSCertificateList, RevokedCertificate, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType, ptrType$1, ptrType$2, sliceType$8, sliceType$9, ptrType$3, ptrType$4, attributeTypeNames, oidCountry, oidOrganization, oidOrganizationalUnit, oidCommonName, oidSerialNumber, oidLocality, oidProvince, oidStreetAddress, oidPostalCode, oidInAttributeTypeAndValue;
	asn1 = $packages["encoding/asn1"];
	hex = $packages["encoding/hex"];
	fmt = $packages["fmt"];
	big = $packages["math/big"];
	time = $packages["time"];
	AlgorithmIdentifier = $pkg.AlgorithmIdentifier = $newType(0, $kindStruct, "pkix.AlgorithmIdentifier", true, "crypto/x509/pkix", true, function(Algorithm_, Parameters_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Algorithm = asn1.ObjectIdentifier.nil;
			this.Parameters = new asn1.RawValue.ptr(0, 0, false, sliceType$6.nil, sliceType$6.nil);
			return;
		}
		this.Algorithm = Algorithm_;
		this.Parameters = Parameters_;
	});
	RDNSequence = $pkg.RDNSequence = $newType(12, $kindSlice, "pkix.RDNSequence", true, "crypto/x509/pkix", true, null);
	RelativeDistinguishedNameSET = $pkg.RelativeDistinguishedNameSET = $newType(12, $kindSlice, "pkix.RelativeDistinguishedNameSET", true, "crypto/x509/pkix", true, null);
	AttributeTypeAndValue = $pkg.AttributeTypeAndValue = $newType(0, $kindStruct, "pkix.AttributeTypeAndValue", true, "crypto/x509/pkix", true, function(Type_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = asn1.ObjectIdentifier.nil;
			this.Value = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Value = Value_;
	});
	Extension = $pkg.Extension = $newType(0, $kindStruct, "pkix.Extension", true, "crypto/x509/pkix", true, function(Id_, Critical_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = asn1.ObjectIdentifier.nil;
			this.Critical = false;
			this.Value = sliceType$6.nil;
			return;
		}
		this.Id = Id_;
		this.Critical = Critical_;
		this.Value = Value_;
	});
	Name = $pkg.Name = $newType(0, $kindStruct, "pkix.Name", true, "crypto/x509/pkix", true, function(Country_, Organization_, OrganizationalUnit_, Locality_, Province_, StreetAddress_, PostalCode_, SerialNumber_, CommonName_, Names_, ExtraNames_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Country = sliceType$4.nil;
			this.Organization = sliceType$4.nil;
			this.OrganizationalUnit = sliceType$4.nil;
			this.Locality = sliceType$4.nil;
			this.Province = sliceType$4.nil;
			this.StreetAddress = sliceType$4.nil;
			this.PostalCode = sliceType$4.nil;
			this.SerialNumber = "";
			this.CommonName = "";
			this.Names = sliceType$3.nil;
			this.ExtraNames = sliceType$3.nil;
			return;
		}
		this.Country = Country_;
		this.Organization = Organization_;
		this.OrganizationalUnit = OrganizationalUnit_;
		this.Locality = Locality_;
		this.Province = Province_;
		this.StreetAddress = StreetAddress_;
		this.PostalCode = PostalCode_;
		this.SerialNumber = SerialNumber_;
		this.CommonName = CommonName_;
		this.Names = Names_;
		this.ExtraNames = ExtraNames_;
	});
	CertificateList = $pkg.CertificateList = $newType(0, $kindStruct, "pkix.CertificateList", true, "crypto/x509/pkix", true, function(TBSCertList_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TBSCertList = new TBSCertificateList.ptr(asn1.RawContent.nil, 0, new AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$6.nil, sliceType$6.nil)), RDNSequence.nil, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), sliceType$8.nil, sliceType$9.nil);
			this.SignatureAlgorithm = new AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$6.nil, sliceType$6.nil));
			this.SignatureValue = new asn1.BitString.ptr(sliceType$6.nil, 0);
			return;
		}
		this.TBSCertList = TBSCertList_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.SignatureValue = SignatureValue_;
	});
	TBSCertificateList = $pkg.TBSCertificateList = $newType(0, $kindStruct, "pkix.TBSCertificateList", true, "crypto/x509/pkix", true, function(Raw_, Version_, Signature_, Issuer_, ThisUpdate_, NextUpdate_, RevokedCertificates_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Version = 0;
			this.Signature = new AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$6.nil, sliceType$6.nil));
			this.Issuer = RDNSequence.nil;
			this.ThisUpdate = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
			this.NextUpdate = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
			this.RevokedCertificates = sliceType$8.nil;
			this.Extensions = sliceType$9.nil;
			return;
		}
		this.Raw = Raw_;
		this.Version = Version_;
		this.Signature = Signature_;
		this.Issuer = Issuer_;
		this.ThisUpdate = ThisUpdate_;
		this.NextUpdate = NextUpdate_;
		this.RevokedCertificates = RevokedCertificates_;
		this.Extensions = Extensions_;
	});
	RevokedCertificate = $pkg.RevokedCertificate = $newType(0, $kindStruct, "pkix.RevokedCertificate", true, "crypto/x509/pkix", true, function(SerialNumber_, RevocationTime_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SerialNumber = ptrType$4.nil;
			this.RevocationTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
			this.Extensions = sliceType$9.nil;
			return;
		}
		this.SerialNumber = SerialNumber_;
		this.RevocationTime = RevocationTime_;
		this.Extensions = Extensions_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Int32);
	sliceType$3 = $sliceType(AttributeTypeAndValue);
	sliceType$4 = $sliceType($String);
	sliceType$5 = $sliceType(RelativeDistinguishedNameSET);
	sliceType$6 = $sliceType($Uint8);
	ptrType = $ptrType(RDNSequence);
	ptrType$1 = $ptrType(Name);
	ptrType$2 = $ptrType(time.Location);
	sliceType$8 = $sliceType(RevokedCertificate);
	sliceType$9 = $sliceType(Extension);
	ptrType$3 = $ptrType(CertificateList);
	ptrType$4 = $ptrType(big.Int);
	RDNSequence.prototype.String = function() {
		var {_1, _entry, _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _tuple, _tuple$1, c, derBytes, err, escape, escaped, i, j, k, oidString, ok, r, rdn, s, tv, typeName, valueString, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		s = "";
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < r.$length)) { break; } */ if(!(i < r.$length)) { $s = 2; continue; }
			rdn = (x = (r.$length - 1 >> 0) - i >> 0, ((x < 0 || x >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x]));
			if (i > 0) {
				s = s + (",");
			}
			_ref = rdn;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				j = _i;
				tv = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), AttributeTypeAndValue);
				if (j > 0) {
					s = s + ("+");
				}
				oidString = tv.Type.String();
				_tuple = (_entry = $mapIndex(attributeTypeNames,$String.keyFor(oidString)), _entry !== undefined ? [_entry.v, true] : ["", false]);
				typeName = _tuple[0];
				ok = _tuple[1];
				/* */ if (!ok) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!ok) { */ case 5:
					_r = asn1.Marshal(tv.Value); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tuple$1 = _r;
					derBytes = _tuple$1[0];
					err = _tuple$1[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						s = s + (oidString + "=#" + hex.EncodeToString(derBytes));
						_i++;
						/* continue; */ $s = 3; continue;
					}
					typeName = oidString;
				/* } */ case 6:
				_r$1 = fmt.Sprint(new sliceType$1([tv.Value])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				valueString = _r$1;
				escaped = $makeSlice(sliceType$2, 0, valueString.length);
				_ref$1 = valueString;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune = $decodeRune(_ref$1, _i$1);
					k = _i$1;
					c = _rune[0];
					escape = false;
					_1 = c;
					if ((_1 === (44)) || (_1 === (43)) || (_1 === (34)) || (_1 === (92)) || (_1 === (60)) || (_1 === (62)) || (_1 === (59))) {
						escape = true;
					} else if (_1 === (32)) {
						escape = (k === 0) || (k === (valueString.length - 1 >> 0));
					} else if (_1 === (35)) {
						escape = k === 0;
					}
					if (escape) {
						escaped = $append(escaped, 92, c);
					} else {
						escaped = $append(escaped, c);
					}
					_i$1 += _rune[1];
				}
				s = s + (typeName + "=" + ($runesToString(escaped)));
				_i++;
			$s = 3; continue;
			case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: RDNSequence.prototype.String, $c: true, $r, _1, _entry, _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _tuple, _tuple$1, c, derBytes, err, escape, escaped, i, j, k, oidString, ok, r, rdn, s, tv, typeName, valueString, x, $s};return $f;
	};
	$ptrType(RDNSequence).prototype.String = function() { return this.$get().String(); };
	Name.ptr.prototype.FillFromRDNSequence = function(rdns) {
		var _1, _i, _i$1, _ref, _ref$1, _tuple, atv, n, ok, rdn, rdns, t, value;
		n = this;
		_ref = rdns.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rdn = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (rdn.$length === 0) {
				_i++;
				continue;
			}
			_ref$1 = rdn;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				atv = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), AttributeTypeAndValue);
				n.Names = $append(n.Names, atv);
				_tuple = $assertType(atv.Value, $String, true);
				value = _tuple[0];
				ok = _tuple[1];
				if (!ok) {
					_i$1++;
					continue;
				}
				t = atv.Type;
				if ((t.$length === 4) && ((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) === 2) && ((1 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 1]) === 5) && ((2 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 2]) === 4)) {
					_1 = (3 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 3]);
					if (_1 === (3)) {
						n.CommonName = value;
					} else if (_1 === (5)) {
						n.SerialNumber = value;
					} else if (_1 === (6)) {
						n.Country = $append(n.Country, value);
					} else if (_1 === (7)) {
						n.Locality = $append(n.Locality, value);
					} else if (_1 === (8)) {
						n.Province = $append(n.Province, value);
					} else if (_1 === (9)) {
						n.StreetAddress = $append(n.StreetAddress, value);
					} else if (_1 === (10)) {
						n.Organization = $append(n.Organization, value);
					} else if (_1 === (11)) {
						n.OrganizationalUnit = $append(n.OrganizationalUnit, value);
					} else if (_1 === (17)) {
						n.PostalCode = $append(n.PostalCode, value);
					}
				}
				_i$1++;
			}
			_i++;
		}
	};
	Name.prototype.FillFromRDNSequence = function(rdns) { return this.$val.FillFromRDNSequence(rdns); };
	Name.ptr.prototype.appendRDNs = function(in$1, values, oid) {
		var _i, _ref, i, in$1, n, oid, s, value, values;
		n = this;
		if ((values.$length === 0) || oidInAttributeTypeAndValue(oid, n.ExtraNames)) {
			return in$1;
		}
		s = $makeSlice(sliceType$3, values.$length);
		_ref = values;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			value = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).Type = oid;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).Value = new $String(value);
			_i++;
		}
		return $append(in$1, $convertSliceType(s, RelativeDistinguishedNameSET));
	};
	Name.prototype.appendRDNs = function(in$1, values, oid) { return this.$val.appendRDNs(in$1, values, oid); };
	Name.ptr.prototype.ToRDNSequence = function() {
		var _i, _ref, atv, n, ret;
		ret = RDNSequence.nil;
		n = this;
		ret = $clone(n, Name).appendRDNs(ret, n.Country, $convertSliceType(oidCountry, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.Province, $convertSliceType(oidProvince, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.Locality, $convertSliceType(oidLocality, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.StreetAddress, $convertSliceType(oidStreetAddress, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.PostalCode, $convertSliceType(oidPostalCode, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.Organization, $convertSliceType(oidOrganization, asn1.ObjectIdentifier));
		ret = $clone(n, Name).appendRDNs(ret, n.OrganizationalUnit, $convertSliceType(oidOrganizationalUnit, asn1.ObjectIdentifier));
		if (n.CommonName.length > 0) {
			ret = $clone(n, Name).appendRDNs(ret, new sliceType$4([n.CommonName]), $convertSliceType(oidCommonName, asn1.ObjectIdentifier));
		}
		if (n.SerialNumber.length > 0) {
			ret = $clone(n, Name).appendRDNs(ret, new sliceType$4([n.SerialNumber]), $convertSliceType(oidSerialNumber, asn1.ObjectIdentifier));
		}
		_ref = n.ExtraNames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			atv = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), AttributeTypeAndValue);
			ret = $append(ret, $convertSliceType(new sliceType$3([$clone(atv, AttributeTypeAndValue)]), RelativeDistinguishedNameSET));
			_i++;
		}
		ret = ret;
		return ret;
	};
	Name.prototype.ToRDNSequence = function() { return this.$val.ToRDNSequence(); };
	Name.ptr.prototype.String = function() {
		var {$24r, _1, _i, _r, _ref, atv, n, rdns, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		rdns = RDNSequence.nil;
		if (n.ExtraNames === sliceType$3.nil) {
			_ref = n.Names;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				atv = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), AttributeTypeAndValue);
				t = atv.Type;
				if ((t.$length === 4) && ((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) === 2) && ((1 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 1]) === 5) && ((2 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 2]) === 4)) {
					_1 = (3 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 3]);
					if ((_1 === (3)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (17))) {
						_i++;
						continue;
					}
				}
				rdns = $append(rdns, $convertSliceType(new sliceType$3([$clone(atv, AttributeTypeAndValue)]), RelativeDistinguishedNameSET));
				_i++;
			}
		}
		rdns = $appendSlice(rdns, $convertSliceType($clone(n, Name).ToRDNSequence(), sliceType$5));
		_r = rdns.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Name.ptr.prototype.String, $c: true, $r, $24r, _1, _i, _r, _ref, atv, n, rdns, t, $s};return $f;
	};
	Name.prototype.String = function() { return this.$val.String(); };
	oidInAttributeTypeAndValue = function(oid, atv) {
		var _i, _ref, a, atv, oid;
		_ref = atv;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			a = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), AttributeTypeAndValue);
			if (a.Type.Equal(oid)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	CertificateList.ptr.prototype.HasExpired = function(now) {
		var certList, now;
		certList = this;
		return !$clone(now, time.Time).Before($clone(certList.TBSCertList.NextUpdate, time.Time));
	};
	CertificateList.prototype.HasExpired = function(now) { return this.$val.HasExpired(now); };
	RDNSequence.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Name.methods = [{prop: "appendRDNs", name: "appendRDNs", pkg: "crypto/x509/pkix", typ: $funcType([RDNSequence, sliceType$4, asn1.ObjectIdentifier], [RDNSequence], false)}, {prop: "ToRDNSequence", name: "ToRDNSequence", pkg: "", typ: $funcType([], [RDNSequence], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "FillFromRDNSequence", name: "FillFromRDNSequence", pkg: "", typ: $funcType([ptrType], [], false)}];
	ptrType$3.methods = [{prop: "HasExpired", name: "HasExpired", pkg: "", typ: $funcType([time.Time], [$Bool], false)}];
	AlgorithmIdentifier.init("", [{prop: "Algorithm", name: "Algorithm", embedded: false, exported: true, typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Parameters", name: "Parameters", embedded: false, exported: true, typ: asn1.RawValue, tag: "asn1:\"optional\""}]);
	RDNSequence.init(RelativeDistinguishedNameSET);
	RelativeDistinguishedNameSET.init(AttributeTypeAndValue);
	AttributeTypeAndValue.init("", [{prop: "Type", name: "Type", embedded: false, exported: true, typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $emptyInterface, tag: ""}]);
	Extension.init("", [{prop: "Id", name: "Id", embedded: false, exported: true, typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Critical", name: "Critical", embedded: false, exported: true, typ: $Bool, tag: "asn1:\"optional\""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: sliceType$6, tag: ""}]);
	Name.init("", [{prop: "Country", name: "Country", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Organization", name: "Organization", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "OrganizationalUnit", name: "OrganizationalUnit", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Locality", name: "Locality", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Province", name: "Province", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "StreetAddress", name: "StreetAddress", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "PostalCode", name: "PostalCode", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "SerialNumber", name: "SerialNumber", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "CommonName", name: "CommonName", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Names", name: "Names", embedded: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "ExtraNames", name: "ExtraNames", embedded: false, exported: true, typ: sliceType$3, tag: ""}]);
	CertificateList.init("", [{prop: "TBSCertList", name: "TBSCertList", embedded: false, exported: true, typ: TBSCertificateList, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", embedded: false, exported: true, typ: AlgorithmIdentifier, tag: ""}, {prop: "SignatureValue", name: "SignatureValue", embedded: false, exported: true, typ: asn1.BitString, tag: ""}]);
	TBSCertificateList.init("", [{prop: "Raw", name: "Raw", embedded: false, exported: true, typ: asn1.RawContent, tag: ""}, {prop: "Version", name: "Version", embedded: false, exported: true, typ: $Int, tag: "asn1:\"optional,default:0\""}, {prop: "Signature", name: "Signature", embedded: false, exported: true, typ: AlgorithmIdentifier, tag: ""}, {prop: "Issuer", name: "Issuer", embedded: false, exported: true, typ: RDNSequence, tag: ""}, {prop: "ThisUpdate", name: "ThisUpdate", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "NextUpdate", name: "NextUpdate", embedded: false, exported: true, typ: time.Time, tag: "asn1:\"optional\""}, {prop: "RevokedCertificates", name: "RevokedCertificates", embedded: false, exported: true, typ: sliceType$8, tag: "asn1:\"optional\""}, {prop: "Extensions", name: "Extensions", embedded: false, exported: true, typ: sliceType$9, tag: "asn1:\"tag:0,optional,explicit\""}]);
	RevokedCertificate.init("", [{prop: "SerialNumber", name: "SerialNumber", embedded: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "RevocationTime", name: "RevocationTime", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "Extensions", name: "Extensions", embedded: false, exported: true, typ: sliceType$9, tag: "asn1:\"optional\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = asn1.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		attributeTypeNames = $makeMap($String.keyFor, [{ k: "2.5.4.6", v: "C" }, { k: "2.5.4.10", v: "O" }, { k: "2.5.4.11", v: "OU" }, { k: "2.5.4.3", v: "CN" }, { k: "2.5.4.5", v: "SERIALNUMBER" }, { k: "2.5.4.7", v: "L" }, { k: "2.5.4.8", v: "ST" }, { k: "2.5.4.9", v: "STREET" }, { k: "2.5.4.17", v: "POSTALCODE" }]);
		oidCountry = new sliceType([2, 5, 4, 6]);
		oidOrganization = new sliceType([2, 5, 4, 10]);
		oidOrganizationalUnit = new sliceType([2, 5, 4, 11]);
		oidCommonName = new sliceType([2, 5, 4, 3]);
		oidSerialNumber = new sliceType([2, 5, 4, 5]);
		oidLocality = new sliceType([2, 5, 4, 7]);
		oidProvince = new sliceType([2, 5, 4, 8]);
		oidStreetAddress = new sliceType([2, 5, 4, 9]);
		oidPostalCode = new sliceType([2, 5, 4, 17]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, binary, io, strconv, Encoding, encoder, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$2, arrayType$3, arrayType$4, ptrType$1, NewEncoding, NewEncoder, assemble32, assemble64;
	binary = $packages["encoding/binary"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_, strict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			this.strict = false;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
		this.strict = strict_;
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", true, "encoding/base64", false, function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.enc = ptrType.nil;
			this.w = $ifaceNil;
			this.buf = arrayType$2.zero();
			this.nbuf = 0;
			this.out = arrayType$3.zero();
			return;
		}
		this.err = err_;
		this.enc = enc_;
		this.w = w_;
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.out = out_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 1024);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$1 = $ptrType(encoder);
	NewEncoding = function(encoder$1) {
		var e, encoder$1, i, i$1, i$2, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		i = 0;
		while (true) {
			if (!(i < encoder$1.length)) { break; }
			if ((encoder$1.charCodeAt(i) === 10) || (encoder$1.charCodeAt(i) === 13)) {
				$panic(new $String("encoding alphabet contains newline character"));
			}
			i = i + (1) >> 0;
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0, false);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 256)) { break; }
			(x = e.decodeMap, ((i$1 < 0 || i$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i$1] = 255));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$2), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((i$2 << 24 >>> 24))));
			i$2 = i$2 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var enc, i, padding, x;
		enc = this;
		if ((padding === 13) || (padding === 10) || padding > 255) {
			$panic(new $String("invalid padding"));
		}
		i = 0;
		while (true) {
			if (!(i < 64)) { break; }
			if ((((x = enc.encode, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) >> 0)) === padding) {
				$panic(new $String("padding contained in alphabet"));
			}
			i = i + (1) >> 0;
		}
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Strict = function() {
		var enc;
		enc = this;
		enc.strict = true;
		return enc;
	};
	Encoding.prototype.Strict = function() { return this.$val.Strict(); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		$unused(enc.encode);
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = (((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x])) >>> 0)) << 16 >>> 0) | ((((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$2])) >>> 0))) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = (((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$15])) >>> 0)) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | (((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$16])) >>> 0)) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? ($throwRuntimeError("index out of range"), undefined) : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[x$21]))));
		_1 = remain;
		if (_1 === (2)) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? ($throwRuntimeError("index out of range"), undefined) : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$26] = ((enc.padChar << 24 >>> 24))));
			}
		} else if (_1 === (1)) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$27] = ((enc.padChar << 24 >>> 24))));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$28] = ((enc.padChar << 24 >>> 24))));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return ($bytesToString(buf));
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.ptr.prototype.Write = function(p) {
		var {_q, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, i, n, nn, p, x, x$1, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.nbuf > 0) { */ case 1:
			i = 0;
			i = 0;
			while (true) {
				if (!(i < p.$length && e.nbuf < 3)) { break; }
				(x = e.buf, x$1 = e.nbuf, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i])));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				$s = -1; return [n, err];
			}
			e.enc.Encode(new sliceType(e.out), new sliceType(e.buf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e.err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			e.nbuf = 0;
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(p.$length >= 3)) { break; } */ if(!(p.$length >= 3)) { $s = 5; continue; }
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r$1 = nn % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode(new sliceType(e.out), $subslice(p, 0, nn));
			_r$2 = e.w.Write($subslice(new sliceType(e.out), 0, ($imul((_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 4)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			e.err = _tuple$1[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = e.err;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		$s = 4; continue;
		case 5:
		$copySlice(new sliceType(e.buf), p);
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.Write, $c: true, $r, _q, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, i, n, nn, p, x, x$1, $s};return $f;
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.ptr.prototype.Close = function() {
		var {_r, _tuple, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { */ case 1:
			e.enc.Encode(new sliceType(e.out), $subslice(new sliceType(e.buf), 0, e.nbuf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, e.enc.EncodedLen(e.nbuf))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			e.nbuf = 0;
		/* } */ case 2:
		$s = -1; return e.err;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.Close, $c: true, $r, _r, _tuple, e, $s};return $f;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = function(enc, w) {
		var enc, w;
		return new encoder.ptr($ifaceNil, enc, w, arrayType$2.zero(), 0, arrayType$3.zero());
	};
	$pkg.NewEncoder = NewEncoder;
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decodeQuantum = function(dst, src, si) {
		var _1, _2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dlen, dst, enc, err, in$1, j, n, nsi, out, si, src, val, x;
		nsi = 0;
		n = 0;
		err = $ifaceNil;
		enc = this;
		dbuf = arrayType$4.zero();
		dlen = 4;
		$unused(enc.decodeMap);
		j = 0;
		while (true) {
			if (!(j < 4)) { break; }
			if (src.$length === si) {
				if ((j === 0)) {
					_tmp = si;
					_tmp$1 = 0;
					_tmp$2 = $ifaceNil;
					nsi = _tmp;
					n = _tmp$1;
					err = _tmp$2;
					return [nsi, n, err];
				} else if (((j === 1)) || (!((enc.padChar === -1)))) {
					_tmp$3 = si;
					_tmp$4 = 0;
					_tmp$5 = (new CorruptInputError(0, (si - j >> 0)));
					nsi = _tmp$3;
					n = _tmp$4;
					err = _tmp$5;
					return [nsi, n, err];
				}
				dlen = j;
				break;
			}
			in$1 = ((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]);
			si = si + (1) >> 0;
			out = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[in$1]));
			if (!((out === 255))) {
				((j < 0 || j >= dbuf.length) ? ($throwRuntimeError("index out of range"), undefined) : dbuf[j] = out);
				j = j + (1) >> 0;
				continue;
			}
			if ((in$1 === 10) || (in$1 === 13)) {
				j = j - (1) >> 0;
				j = j + (1) >> 0;
				continue;
			}
			if (!((((in$1 >> 0)) === enc.padChar))) {
				_tmp$6 = si;
				_tmp$7 = 0;
				_tmp$8 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$6;
				n = _tmp$7;
				err = _tmp$8;
				return [nsi, n, err];
			}
			_1 = j;
			if ((_1 === (0)) || (_1 === (1))) {
				_tmp$9 = si;
				_tmp$10 = 0;
				_tmp$11 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$9;
				n = _tmp$10;
				err = _tmp$11;
				return [nsi, n, err];
			} else if (_1 === (2)) {
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if (si === src.$length) {
					_tmp$12 = si;
					_tmp$13 = 0;
					_tmp$14 = (new CorruptInputError(0, src.$length));
					nsi = _tmp$12;
					n = _tmp$13;
					err = _tmp$14;
					return [nsi, n, err];
				}
				if (!((((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) >> 0)) === enc.padChar))) {
					_tmp$15 = si;
					_tmp$16 = 0;
					_tmp$17 = (new CorruptInputError(0, (si - 1 >> 0)));
					nsi = _tmp$15;
					n = _tmp$16;
					err = _tmp$17;
					return [nsi, n, err];
				}
				si = si + (1) >> 0;
			}
			while (true) {
				if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
				si = si + (1) >> 0;
			}
			if (si < src.$length) {
				err = (new CorruptInputError(0, si));
			}
			dlen = j;
			break;
		}
		val = ((((((((dbuf[0] >>> 0)) << 18 >>> 0) | (((dbuf[1] >>> 0)) << 12 >>> 0)) >>> 0) | (((dbuf[2] >>> 0)) << 6 >>> 0)) >>> 0) | ((dbuf[3] >>> 0))) >>> 0;
		_tmp$18 = (((val >>> 0 >>> 0) << 24 >>> 24));
		_tmp$19 = (((val >>> 8 >>> 0) << 24 >>> 24));
		_tmp$20 = (((val >>> 16 >>> 0) << 24 >>> 24));
		dbuf[2] = _tmp$18;
		dbuf[1] = _tmp$19;
		dbuf[0] = _tmp$20;
		_2 = dlen;
		if (_2 === (4)) {
			(2 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 2] = dbuf[2]);
			dbuf[2] = 0;
			(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
			if (enc.strict && !((dbuf[2] === 0))) {
				_tmp$21 = si;
				_tmp$22 = 0;
				_tmp$23 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$21;
				n = _tmp$22;
				err = _tmp$23;
				return [nsi, n, err];
			}
			dbuf[1] = 0;
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$24 = si;
				_tmp$25 = 0;
				_tmp$26 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$24;
				n = _tmp$25;
				err = _tmp$26;
				return [nsi, n, err];
			}
		} else if (_2 === (3)) {
			(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
			if (enc.strict && !((dbuf[2] === 0))) {
				_tmp$27 = si;
				_tmp$28 = 0;
				_tmp$29 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$27;
				n = _tmp$28;
				err = _tmp$29;
				return [nsi, n, err];
			}
			dbuf[1] = 0;
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$30 = si;
				_tmp$31 = 0;
				_tmp$32 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$30;
				n = _tmp$31;
				err = _tmp$32;
				return [nsi, n, err];
			}
		} else if (_2 === (2)) {
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$33 = si;
				_tmp$34 = 0;
				_tmp$35 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$33;
				n = _tmp$34;
				err = _tmp$35;
				return [nsi, n, err];
			}
		}
		_tmp$36 = si;
		_tmp$37 = dlen - 1 >> 0;
		_tmp$38 = err;
		nsi = _tmp$36;
		n = _tmp$37;
		err = _tmp$38;
		return [nsi, n, err];
	};
	Encoding.prototype.decodeQuantum = function(dst, src, si) { return this.$val.decodeQuantum(dst, src, si); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.Decode(dbuf, (new sliceType($stringToBytes(s))));
		n = _tuple[0];
		err = _tuple[1];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, dn, dn$1, dst, enc, err, n, ninc, ninc$1, ninc$2, ok, ok$1, si, src, src2, src2$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		n = 0;
		err = $ifaceNil;
		enc = this;
		if (src.$length === 0) {
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		$unused(enc.decodeMap);
		si = 0;
		while (true) {
			if (!(false && (src.$length - si >> 0) >= 8 && (dst.$length - n >> 0) >= 8)) { break; }
			src2 = $subslice(src, si, (si + 8 >> 0));
			_tuple = assemble64((x = enc.decodeMap, x$1 = (0 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 0]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), (x$2 = enc.decodeMap, x$3 = (1 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 1]), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])), (x$4 = enc.decodeMap, x$5 = (2 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 2]), ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), (x$6 = enc.decodeMap, x$7 = (3 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 3]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])), (x$8 = enc.decodeMap, x$9 = (4 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 4]), ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9])), (x$10 = enc.decodeMap, x$11 = (5 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 5]), ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])), (x$12 = enc.decodeMap, x$13 = (6 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 6]), ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13])), (x$14 = enc.decodeMap, x$15 = (7 >= src2.$length ? ($throwRuntimeError("index out of range"), undefined) : src2.$array[src2.$offset + 7]), ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15])));
			dn = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(dst, n), dn);
				n = n + (6) >> 0;
				si = si + (8) >> 0;
			} else {
				ninc = 0;
				_tuple$1 = enc.decodeQuantum($subslice(dst, n), src, si);
				si = _tuple$1[0];
				ninc = _tuple$1[1];
				err = _tuple$1[2];
				n = n + (ninc) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$2 = n;
					_tmp$3 = err;
					n = _tmp$2;
					err = _tmp$3;
					return [n, err];
				}
			}
		}
		while (true) {
			if (!((src.$length - si >> 0) >= 4 && (dst.$length - n >> 0) >= 4)) { break; }
			src2$1 = $subslice(src, si, (si + 4 >> 0));
			_tuple$2 = assemble32((x$16 = enc.decodeMap, x$17 = (0 >= src2$1.$length ? ($throwRuntimeError("index out of range"), undefined) : src2$1.$array[src2$1.$offset + 0]), ((x$17 < 0 || x$17 >= x$16.length) ? ($throwRuntimeError("index out of range"), undefined) : x$16[x$17])), (x$18 = enc.decodeMap, x$19 = (1 >= src2$1.$length ? ($throwRuntimeError("index out of range"), undefined) : src2$1.$array[src2$1.$offset + 1]), ((x$19 < 0 || x$19 >= x$18.length) ? ($throwRuntimeError("index out of range"), undefined) : x$18[x$19])), (x$20 = enc.decodeMap, x$21 = (2 >= src2$1.$length ? ($throwRuntimeError("index out of range"), undefined) : src2$1.$array[src2$1.$offset + 2]), ((x$21 < 0 || x$21 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[x$21])), (x$22 = enc.decodeMap, x$23 = (3 >= src2$1.$length ? ($throwRuntimeError("index out of range"), undefined) : src2$1.$array[src2$1.$offset + 3]), ((x$23 < 0 || x$23 >= x$22.length) ? ($throwRuntimeError("index out of range"), undefined) : x$22[x$23])));
			dn$1 = _tuple$2[0];
			ok$1 = _tuple$2[1];
			if (ok$1) {
				$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(dst, n), dn$1);
				n = n + (3) >> 0;
				si = si + (4) >> 0;
			} else {
				ninc$1 = 0;
				_tuple$3 = enc.decodeQuantum($subslice(dst, n), src, si);
				si = _tuple$3[0];
				ninc$1 = _tuple$3[1];
				err = _tuple$3[2];
				n = n + (ninc$1) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$4 = n;
					_tmp$5 = err;
					n = _tmp$4;
					err = _tmp$5;
					return [n, err];
				}
			}
		}
		while (true) {
			if (!(si < src.$length)) { break; }
			ninc$2 = 0;
			_tuple$4 = enc.decodeQuantum($subslice(dst, n), src, si);
			si = _tuple$4[0];
			ninc$2 = _tuple$4[1];
			err = _tuple$4[2];
			n = n + (ninc$2) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = n;
				_tmp$7 = err;
				n = _tmp$6;
				err = _tmp$7;
				return [n, err];
			}
		}
		_tmp$8 = n;
		_tmp$9 = err;
		n = _tmp$8;
		err = _tmp$9;
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	assemble32 = function(n1, n2, n3, n4) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dn, n1, n2, n3, n4, ok;
		dn = 0;
		ok = false;
		if (((((((n1 | n2) >>> 0) | n3) >>> 0) | n4) >>> 0) === 255) {
			_tmp = 0;
			_tmp$1 = false;
			dn = _tmp;
			ok = _tmp$1;
			return [dn, ok];
		}
		_tmp$2 = ((((((((n1 >>> 0)) << 26 >>> 0) | (((n2 >>> 0)) << 20 >>> 0)) >>> 0) | (((n3 >>> 0)) << 14 >>> 0)) >>> 0) | (((n4 >>> 0)) << 8 >>> 0)) >>> 0;
		_tmp$3 = true;
		dn = _tmp$2;
		ok = _tmp$3;
		return [dn, ok];
	};
	assemble64 = function(n1, n2, n3, n4, n5, n6, n7, n8) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dn, n1, n2, n3, n4, n5, n6, n7, n8, ok, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		dn = new $Uint64(0, 0);
		ok = false;
		if (((((((((((((((n1 | n2) >>> 0) | n3) >>> 0) | n4) >>> 0) | n5) >>> 0) | n6) >>> 0) | n7) >>> 0) | n8) >>> 0) === 255) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			dn = _tmp;
			ok = _tmp$1;
			return [dn, ok];
		}
		_tmp$2 = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64((new $Uint64(0, n1)), 58), x$7 = $shiftLeft64((new $Uint64(0, n2)), 52), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, n3)), 46), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, n4)), 40), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, n5)), 34), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, n6)), 28), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, n7)), 22), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, n8)), 16), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		_tmp$3 = true;
		dn = _tmp$2;
		ok = _tmp$3;
		return [dn, ok];
	};
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ($imul(n, 6)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}, {prop: "Strict", name: "Strict", pkg: "", typ: $funcType([], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decodeQuantum", name: "decodeQuantum", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType, $Int], [$Int, $Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init("encoding/base64", [{prop: "encode", name: "encode", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "strict", name: "strict", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	encoder.init("encoding/base64", [{prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}, {prop: "enc", name: "enc", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "w", name: "w", embedded: false, exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "nbuf", name: "nbuf", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", embedded: false, exported: false, typ: arrayType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = binary.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $clone($pkg.StdEncoding, Encoding).WithPadding(-1);
		$pkg.RawURLEncoding = $clone($pkg.URLEncoding, Encoding).WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/pem"] = (function() {
	var $pkg = {}, $init, bytes, base64, errors, io, sort, strings, Block, lineBreaker, sliceType, ptrType, sliceType$1, arrayType, mapType, ptrType$1, pemStart, pemEnd, pemEndOfLine, colon, nl, getLine, removeSpacesAndTabs, Decode, writeHeader, Encode, EncodeToMemory;
	bytes = $packages["bytes"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	io = $packages["io"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	Block = $pkg.Block = $newType(0, $kindStruct, "pem.Block", true, "encoding/pem", true, function(Type_, Headers_, Bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			this.Headers = false;
			this.Bytes = sliceType.nil;
			return;
		}
		this.Type = Type_;
		this.Headers = Headers_;
		this.Bytes = Bytes_;
	});
	lineBreaker = $pkg.lineBreaker = $newType(0, $kindStruct, "pem.lineBreaker", true, "encoding/pem", false, function(line_, used_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.line = arrayType.zero();
			this.used = 0;
			this.out = $ifaceNil;
			return;
		}
		this.line = line_;
		this.used = used_;
		this.out = out_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Block);
	sliceType$1 = $sliceType($String);
	arrayType = $arrayType($Uint8, 64);
	mapType = $mapType($String, $String);
	ptrType$1 = $ptrType(lineBreaker);
	getLine = function(data) {
		var _tmp, _tmp$1, data, i, j, line, rest, x;
		line = sliceType.nil;
		rest = sliceType.nil;
		i = bytes.IndexByte(data, 10);
		j = 0;
		if (i < 0) {
			i = data.$length;
			j = i;
		} else {
			j = i + 1 >> 0;
			if (i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= data.$length) ? ($throwRuntimeError("index out of range"), undefined) : data.$array[data.$offset + x])) === 13)) {
				i = i - (1) >> 0;
			}
		}
		_tmp = bytes.TrimRight($subslice(data, 0, i), " \t");
		_tmp$1 = $subslice(data, j);
		line = _tmp;
		rest = _tmp$1;
		return [line, rest];
	};
	removeSpacesAndTabs = function(data) {
		var _i, _ref, b, data, n, result;
		if (!bytes.ContainsAny(data, " \t")) {
			return data;
		}
		result = $makeSlice(sliceType, data.$length);
		n = 0;
		_ref = data;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ((b === 32) || (b === 9)) {
				_i++;
				continue;
			}
			((n < 0 || n >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + n] = b);
			n = n + (1) >> 0;
			_i++;
		}
		return $subslice(result, 0, n);
	};
	Decode = function(data) {
		var {_key, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, after, base64Data, data, endIndex, endTrailer, endTrailerIndex, endTrailerLen, err, key, line, n, next, ok, ok$1, p, rest, restOfEndLine, s, typeLine, val, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = ptrType.nil;
		rest = sliceType.nil;
		rest = data;
		/* while (true) { */ case 1:
			if (bytes.HasPrefix(rest, $subslice(pemStart, 1))) {
				rest = $subslice(rest, (pemStart.$length - 1 >> 0));
			} else {
				_tuple = bytes.Cut(rest, pemStart);
				after = _tuple[1];
				ok = _tuple[2];
				if (ok) {
					rest = after;
				} else {
					_tmp = ptrType.nil;
					_tmp$1 = data;
					p = _tmp;
					rest = _tmp$1;
					$s = -1; return [p, rest];
				}
			}
			typeLine = sliceType.nil;
			_tuple$1 = getLine(rest);
			typeLine = _tuple$1[0];
			rest = _tuple$1[1];
			if (!bytes.HasSuffix(typeLine, pemEndOfLine)) {
				/* continue; */ $s = 1; continue;
			}
			typeLine = $subslice(typeLine, 0, (typeLine.$length - pemEndOfLine.$length >> 0));
			p = new Block.ptr(($bytesToString(typeLine)), new $global.Map(), sliceType.nil);
			/* while (true) { */ case 3:
				if (rest.$length === 0) {
					_tmp$2 = ptrType.nil;
					_tmp$3 = data;
					p = _tmp$2;
					rest = _tmp$3;
					$s = -1; return [p, rest];
				}
				_tuple$2 = getLine(rest);
				line = _tuple$2[0];
				next = _tuple$2[1];
				_tuple$3 = bytes.Cut(line, colon);
				key = _tuple$3[0];
				val = _tuple$3[1];
				ok$1 = _tuple$3[2];
				if (!ok$1) {
					/* break; */ $s = 4; continue;
				}
				_r = bytes.TrimSpace(key); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				key = _r;
				_r$1 = bytes.TrimSpace(val); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				val = _r$1;
				_key = ($bytesToString(key)); (p.Headers || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: ($bytesToString(val)) });
				rest = next;
			$s = 3; continue;
			case 4:
			_tmp$4 = 0;
			_tmp$5 = 0;
			endIndex = _tmp$4;
			endTrailerIndex = _tmp$5;
			if (((p.Headers ? p.Headers.size : 0) === 0) && bytes.HasPrefix(rest, $subslice(pemEnd, 1))) {
				endIndex = 0;
				endTrailerIndex = pemEnd.$length - 1 >> 0;
			} else {
				endIndex = bytes.Index(rest, pemEnd);
				endTrailerIndex = endIndex + pemEnd.$length >> 0;
			}
			if (endIndex < 0) {
				/* continue; */ $s = 1; continue;
			}
			endTrailer = $subslice(rest, endTrailerIndex);
			endTrailerLen = typeLine.$length + pemEndOfLine.$length >> 0;
			if (endTrailer.$length < endTrailerLen) {
				/* continue; */ $s = 1; continue;
			}
			restOfEndLine = $subslice(endTrailer, endTrailerLen);
			endTrailer = $subslice(endTrailer, 0, endTrailerLen);
			if (!bytes.HasPrefix(endTrailer, typeLine) || !bytes.HasSuffix(endTrailer, pemEndOfLine)) {
				/* continue; */ $s = 1; continue;
			}
			_tuple$4 = getLine(restOfEndLine);
			s = _tuple$4[0];
			if (!((s.$length === 0))) {
				/* continue; */ $s = 1; continue;
			}
			base64Data = removeSpacesAndTabs($subslice(rest, 0, endIndex));
			p.Bytes = $makeSlice(sliceType, base64.StdEncoding.DecodedLen(base64Data.$length));
			_tuple$5 = base64.StdEncoding.Decode(p.Bytes, base64Data);
			n = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* continue; */ $s = 1; continue;
			}
			p.Bytes = $subslice(p.Bytes, 0, n);
			_tuple$6 = getLine($subslice(rest, ((endIndex + pemEnd.$length >> 0) - 1 >> 0)));
			rest = _tuple$6[1];
			_tmp$6 = p;
			_tmp$7 = rest;
			p = _tmp$6;
			rest = _tmp$7;
			$s = -1; return [p, rest];
		case 2:
		$s = -1; return [p, rest];
		/* */ } return; } var $f = {$blk: Decode, $c: true, $r, _key, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, after, base64Data, data, endIndex, endTrailer, endTrailerIndex, endTrailerLen, err, key, line, n, next, ok, ok$1, p, rest, restOfEndLine, s, typeLine, val, $s};return $f;
	};
	$pkg.Decode = Decode;
	lineBreaker.ptr.prototype.Write = function(b) {
		var {$24r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, b, err, excess, l, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((l.used + b.$length >> 0) < 64) {
			$copySlice($subslice(new sliceType(l.line), l.used), b);
			l.used = l.used + (b.$length) >> 0;
			_tmp = b.$length;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = l.out.Write($subslice(new sliceType(l.line), 0, l.used)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		excess = 64 - l.used >> 0;
		l.used = 0;
		_r$1 = l.out.Write($subslice(b, 0, excess)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_r$2 = l.out.Write(nl); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		n = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_r$3 = l.Write($subslice(b, excess)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		n = _tuple$3[0];
		err = _tuple$3[1];
		$24r = [n, err];
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: lineBreaker.ptr.prototype.Write, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, b, err, excess, l, n, $s};return $f;
	};
	lineBreaker.prototype.Write = function(b) { return this.$val.Write(b); };
	lineBreaker.ptr.prototype.Close = function() {
		var {_r, _r$1, _tuple, _tuple$1, err, l, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		l = this;
		/* */ if (l.used > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.used > 0) { */ case 1:
			_r = l.out.Write($subslice(new sliceType(l.line), 0, l.used)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_r$1 = l.out.Write(nl); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			err = _tuple$1[1];
		/* } */ case 2:
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: lineBreaker.ptr.prototype.Close, $c: true, $r, _r, _r$1, _tuple, _tuple$1, err, l, $s};return $f;
	};
	lineBreaker.prototype.Close = function() { return this.$val.Close(); };
	writeHeader = function(out, k, v) {
		var {_r, _tuple, err, k, out, v, $s, $r, $c} = $restore(this, {out, k, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = out.Write((new sliceType($stringToBytes(k + ": " + v + "\n")))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: writeHeader, $c: true, $r, _r, _tuple, err, k, out, v, $s};return $f;
	};
	Encode = function(out, b) {
		var {_entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _i$2, _key, _key$1, _keys, _keys$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _size, _size$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, b64, breaker, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, h, hasProcType, k, k$1, k$2, out, $s, $r, $c} = $restore(this, {out, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		breaker = [breaker];
		_ref = b.Headers;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			if (strings.Contains(k, ":")) {
				$s = -1; return errors.New("pem: cannot encode a header key that contains a colon");
			}
			_i++;
		}
		_r = out.Write($subslice(pemStart, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = out.Write((new sliceType($stringToBytes(b.Type + "-----\n")))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* */ if ((b.Headers ? b.Headers.size : 0) > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((b.Headers ? b.Headers.size : 0) > 0) { */ case 3:
			h = $makeSlice(sliceType$1, 0, (b.Headers ? b.Headers.size : 0));
			hasProcType = false;
			_ref$1 = b.Headers;
			_i$1 = 0;
			_keys$1 = _ref$1 ? _ref$1.keys() : undefined;
			_size$1 = _ref$1 ? _ref$1.size : 0;
			while (true) {
				if (!(_i$1 < _size$1)) { break; }
				_key$1 = _keys$1.next().value;
				_entry$1 = _ref$1.get(_key$1);
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k$1 = _entry$1.k;
				if (k$1 === "Proc-Type") {
					hasProcType = true;
					_i$1++;
					continue;
				}
				h = $append(h, k$1);
				_i$1++;
			}
			/* */ if (hasProcType) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (hasProcType) { */ case 5:
				_r$2 = writeHeader(out, "Proc-Type", (_entry$2 = $mapIndex(b.Headers,$String.keyFor("Proc-Type")), _entry$2 !== undefined ? _entry$2.v : "")); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err$2 = _r$2;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
				}
			/* } */ case 6:
			$r = sort.Strings(h); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$2 = h;
			_i$2 = 0;
			/* while (true) { */ case 9:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 10; continue; }
				k$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$3 = writeHeader(out, k$2, (_entry$3 = $mapIndex(b.Headers,$String.keyFor(k$2)), _entry$3 !== undefined ? _entry$3.v : "")); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
				_i$2++;
			$s = 9; continue;
			case 10:
			_r$4 = out.Write(nl); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			err$4 = _tuple$2[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				$s = -1; return err$4;
			}
		/* } */ case 4:
		breaker[0] = new lineBreaker.ptr(arrayType.zero(), 0, $ifaceNil);
		breaker[0].out = out;
		b64 = base64.NewEncoder(base64.StdEncoding, breaker[0]);
		_r$5 = b64.Write(b.Bytes); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$3 = _r$5;
		err$5 = _tuple$3[1];
		if (!($interfaceIsEqual(err$5, $ifaceNil))) {
			$s = -1; return err$5;
		}
		_r$6 = b64.Close(); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = breaker[0].Close(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = out.Write($subslice(pemEnd, 1)); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$4 = _r$8;
		err$6 = _tuple$4[1];
		if (!($interfaceIsEqual(err$6, $ifaceNil))) {
			$s = -1; return err$6;
		}
		_r$9 = out.Write((new sliceType($stringToBytes(b.Type + "-----\n")))); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$5 = _r$9;
		err$7 = _tuple$5[1];
		$s = -1; return err$7;
		/* */ } return; } var $f = {$blk: Encode, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _i$2, _key, _key$1, _keys, _keys$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _size, _size$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, b64, breaker, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, h, hasProcType, k, k$1, k$2, out, $s};return $f;
	};
	$pkg.Encode = Encode;
	EncodeToMemory = function(b) {
		var {_r, b, buf, err, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, 0);
		_r = Encode(buf[0], b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return sliceType.nil;
		}
		$s = -1; return buf[0].Bytes();
		/* */ } return; } var $f = {$blk: EncodeToMemory, $c: true, $r, _r, b, buf, err, $s};return $f;
	};
	$pkg.EncodeToMemory = EncodeToMemory;
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	Block.init("", [{prop: "Type", name: "Type", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Headers", name: "Headers", embedded: false, exported: true, typ: mapType, tag: ""}, {prop: "Bytes", name: "Bytes", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	lineBreaker.init("encoding/pem", [{prop: "line", name: "line", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "used", name: "used", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", embedded: false, exported: false, typ: io.Writer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pemStart = (new sliceType($stringToBytes("\n-----BEGIN ")));
		pemEnd = (new sliceType($stringToBytes("\n-----END ")));
		pemEndOfLine = (new sliceType($stringToBytes("-----")));
		colon = (new sliceType($stringToBytes(":")));
		nl = new sliceType([10]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/godebug"] = (function() {
	var $pkg = {}, $init, os, Get, get;
	os = $packages["os"];
	Get = function(key) {
		var {$24r, _r, _r$1, key, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = os.Getenv("GODEBUG"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = get(_r, key); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Get, $c: true, $r, $24r, _r, _r$1, key, $s};return $f;
	};
	$pkg.Get = Get;
	get = function(s, key) {
		var _i, _ref, _rune, afterKey, b, i, i$1, key, s, val;
		i = 0;
		while (true) {
			if (!(i < ((s.length - key.length >> 0) - 1 >> 0))) { break; }
			if (i > 0 && !((s.charCodeAt((i - 1 >> 0)) === 44))) {
				i = i + (1) >> 0;
				continue;
			}
			afterKey = $substring(s, (i + key.length >> 0));
			if (!((afterKey.charCodeAt(0) === 61)) || !($substring(s, i, (i + key.length >> 0)) === key)) {
				i = i + (1) >> 0;
				continue;
			}
			val = $substring(afterKey, 1);
			_ref = val;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i$1 = _i;
				b = _rune[0];
				if (b === 44) {
					return $substring(val, 0, i$1);
				}
				_i += _rune[1];
			}
			return val;
		}
		return "";
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = os.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["context"] = (function() {
	var $pkg = {}, $init, errors, reflectlite, sync, atomic, time, emptyCtx, ptrType, structType, ptrType$1, chanType$1, background, todo, closedchan, init;
	errors = $packages["errors"];
	reflectlite = $packages["internal/reflectlite"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	emptyCtx = $pkg.emptyCtx = $newType(4, $kindInt, "context.emptyCtx", true, "context", false, null);
	ptrType = $ptrType(emptyCtx);
	structType = $structType("", []);
	ptrType$1 = $ptrType(time.Location);
	chanType$1 = $chanType(structType, false, true);
	$ptrType(emptyCtx).prototype.Deadline = function() {
		var deadline, ok;
		deadline = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$1.nil);
		ok = false;
		return [deadline, ok];
	};
	$ptrType(emptyCtx).prototype.Done = function() {
		return $chanNil;
	};
	$ptrType(emptyCtx).prototype.Err = function() {
		return $ifaceNil;
	};
	$ptrType(emptyCtx).prototype.Value = function(key) {
		var key;
		return $ifaceNil;
	};
	$ptrType(emptyCtx).prototype.String = function() {
		var _1, e;
		e = this;
		_1 = e;
		if (_1 === (background)) {
			return "context.Background";
		} else if (_1 === (todo)) {
			return "context.TODO";
		}
		return "unknown empty Context";
	};
	init = function() {
		$close(closedchan);
	};
	ptrType.methods = [{prop: "Deadline", name: "Deadline", pkg: "", typ: $funcType([], [time.Time, $Bool], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType$1], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflectlite.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Canceled = errors.New("context canceled");
		background = $newDataPointer(0, ptrType);
		todo = $newDataPointer(0, ptrType);
		closedchan = new $Chan(structType, 0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/nettrace"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/singleflight"] = (function() {
	var $pkg = {}, $init, sync;
	sync = $packages["sync"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/netip"] = (function() {
	var $pkg = {}, $init, errors, bytealg, itoa, math, bits, strconv;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	itoa = $packages["internal/itoa"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	strconv = $packages["strconv"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["vendor/golang.org/x/net/dns/dnsmessage"] = (function() {
	var $pkg = {}, $init, errors, errBaseLen, errCalcLen, errReserved, errTooManyPtr, errInvalidPtr, errNilResouceBody, errResourceLen, errSegTooLong, errZeroSegLen, errResTooLong, errTooManyQuestions, errTooManyAnswers, errTooManyAuthorities, errTooManyAdditionals, errNonCanonicalName, errStringTooLong, errCompressedSRV;
	errors = $packages["errors"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNotStarted = errors.New("parsing/packing of this type isn't available yet");
		$pkg.ErrSectionDone = errors.New("parsing/packing of this section has completed");
		errBaseLen = errors.New("insufficient data for base length type");
		errCalcLen = errors.New("insufficient data for calculated length type");
		errReserved = errors.New("segment prefix is reserved");
		errTooManyPtr = errors.New("too many pointers (>10)");
		errInvalidPtr = errors.New("invalid pointer");
		errNilResouceBody = errors.New("nil resource body");
		errResourceLen = errors.New("insufficient data for resource body length");
		errSegTooLong = errors.New("segment length too long");
		errZeroSegLen = errors.New("zero length segment");
		errResTooLong = errors.New("resource length too long");
		errTooManyQuestions = errors.New("too many Questions to pack (>65535)");
		errTooManyAnswers = errors.New("too many Answers to pack (>65535)");
		errTooManyAuthorities = errors.New("too many Authorities to pack (>65535)");
		errTooManyAdditionals = errors.New("too many Additionals to pack (>65535)");
		errNonCanonicalName = errors.New("name is not in canonical format (it must end with a .)");
		errStringTooLong = errors.New("character string exceeds maximum length (255)");
		errCompressedSRV = errors.New("compressed name in SRV resource data");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net"] = (function() {
	var $pkg = {}, $init, context, errors, bytealg, itoa, nettrace, poll, singleflight, io, netip, os, runtime, sort, sync, atomic, syscall, time, dnsmessage, Addr, OpError, timeout, temporary, ParseError, AddrError, HardwareAddr, IP, IPMask, IPNet, Interface, Flags, ipv6ZoneCache, policyTableEntry, policyTable, byMaskLength, ptrType, sliceType, sliceType$1, ptrType$3, arrayType, ptrType$15, ptrType$18, ptrType$19, ptrType$29, sliceType$13, sliceType$14, ptrType$41, ptrType$46, ptrType$47, mapType$2, mapType$3, listeners, netGo, errNoSuitableAddress, errMissingAddress, aLongTimeAgo, errNoSuchHost, v4InV6Prefix, classAMask, classBMask, classCMask, errInvalidInterface, errInvalidInterfaceIndex, errInvalidInterfaceName, errNoSuchInterface, errNoSuchMulticastInterface, flagNames, zoneCache, testHookLookupIP, rfc6724policyTable, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, dtoi, xtoi, appendHex, last, init, SplitHostPort, IPv4, IPv4Mask, CIDRMask, isZeros, allFF, ubtoa, hexString, simpleMaskLength, networkNumberAndMask, parseIPv4, parseIPv6, ParseIP, ParseCIDR, interfaceAddrTable, interfaceMulticastAddrTable, isConnError, init$1, mustCIDR;
	context = $packages["context"];
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	itoa = $packages["internal/itoa"];
	nettrace = $packages["internal/nettrace"];
	poll = $packages["internal/poll"];
	singleflight = $packages["internal/singleflight"];
	io = $packages["io"];
	netip = $packages["net/netip"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	dnsmessage = $packages["vendor/golang.org/x/net/dns/dnsmessage"];
	Addr = $pkg.Addr = $newType(8, $kindInterface, "net.Addr", true, "net", true, null);
	OpError = $pkg.OpError = $newType(0, $kindStruct, "net.OpError", true, "net", true, function(Op_, Net_, Source_, Addr_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Net = "";
			this.Source = $ifaceNil;
			this.Addr = $ifaceNil;
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Net = Net_;
		this.Source = Source_;
		this.Addr = Addr_;
		this.Err = Err_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "net.timeout", true, "net", false, null);
	temporary = $pkg.temporary = $newType(8, $kindInterface, "net.temporary", true, "net", false, null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "net.ParseError", true, "net", true, function(Type_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			this.Text = "";
			return;
		}
		this.Type = Type_;
		this.Text = Text_;
	});
	AddrError = $pkg.AddrError = $newType(0, $kindStruct, "net.AddrError", true, "net", true, function(Err_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = "";
			this.Addr = "";
			return;
		}
		this.Err = Err_;
		this.Addr = Addr_;
	});
	HardwareAddr = $pkg.HardwareAddr = $newType(12, $kindSlice, "net.HardwareAddr", true, "net", true, null);
	IP = $pkg.IP = $newType(12, $kindSlice, "net.IP", true, "net", true, null);
	IPMask = $pkg.IPMask = $newType(12, $kindSlice, "net.IPMask", true, "net", true, null);
	IPNet = $pkg.IPNet = $newType(0, $kindStruct, "net.IPNet", true, "net", true, function(IP_, Mask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IP = IP.nil;
			this.Mask = IPMask.nil;
			return;
		}
		this.IP = IP_;
		this.Mask = Mask_;
	});
	Interface = $pkg.Interface = $newType(0, $kindStruct, "net.Interface", true, "net", true, function(Index_, MTU_, Name_, HardwareAddr_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Index = 0;
			this.MTU = 0;
			this.Name = "";
			this.HardwareAddr = HardwareAddr.nil;
			this.Flags = 0;
			return;
		}
		this.Index = Index_;
		this.MTU = MTU_;
		this.Name = Name_;
		this.HardwareAddr = HardwareAddr_;
		this.Flags = Flags_;
	});
	Flags = $pkg.Flags = $newType(4, $kindUint, "net.Flags", true, "net", true, null);
	ipv6ZoneCache = $pkg.ipv6ZoneCache = $newType(0, $kindStruct, "net.ipv6ZoneCache", true, "net", false, function(RWMutex_, lastFetched_, toIndex_, toName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RWMutex = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.lastFetched = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
			this.toIndex = false;
			this.toName = false;
			return;
		}
		this.RWMutex = RWMutex_;
		this.lastFetched = lastFetched_;
		this.toIndex = toIndex_;
		this.toName = toName_;
	});
	policyTableEntry = $pkg.policyTableEntry = $newType(0, $kindStruct, "net.policyTableEntry", true, "net", false, function(Prefix_, Precedence_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Prefix = ptrType$3.nil;
			this.Precedence = 0;
			this.Label = 0;
			return;
		}
		this.Prefix = Prefix_;
		this.Precedence = Precedence_;
		this.Label = Label_;
	});
	policyTable = $pkg.policyTable = $newType(12, $kindSlice, "net.policyTable", true, "net", false, null);
	byMaskLength = $pkg.byMaskLength = $newType(12, $kindSlice, "net.byMaskLength", true, "net", false, null);
	ptrType = $ptrType(time.Location);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	ptrType$3 = $ptrType(IPNet);
	arrayType = $arrayType($Uint8, 4);
	ptrType$15 = $ptrType(Interface);
	ptrType$18 = $ptrType(OpError);
	ptrType$19 = $ptrType(os.SyscallError);
	ptrType$29 = $ptrType(AddrError);
	sliceType$13 = $sliceType(Interface);
	sliceType$14 = $sliceType(Addr);
	ptrType$41 = $ptrType(ParseError);
	ptrType$46 = $ptrType(IP);
	ptrType$47 = $ptrType(ipv6ZoneCache);
	mapType$2 = $mapType($String, $Int);
	mapType$3 = $mapType($Int, $String);
	dtoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
			n = ($imul(n, 10)) + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			if (n >= 16777215) {
				_tmp = 16777215;
				_tmp$1 = i;
				_tmp$2 = false;
				n = _tmp;
				i = _tmp$1;
				ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === 0) {
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = false;
			n = _tmp$3;
			i = _tmp$4;
			ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n;
		_tmp$7 = i;
		_tmp$8 = true;
		n = _tmp$6;
		i = _tmp$7;
		ok = _tmp$8;
		return [n, i, ok];
	};
	xtoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				n = $imul(n, (16));
				n = n + ((((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0))) >> 0;
			} else if (97 <= s.charCodeAt(i) && s.charCodeAt(i) <= 102) {
				n = $imul(n, (16));
				n = n + (((((s.charCodeAt(i) - 97 << 24 >>> 24) >> 0)) + 10 >> 0)) >> 0;
			} else if (65 <= s.charCodeAt(i) && s.charCodeAt(i) <= 70) {
				n = $imul(n, (16));
				n = n + (((((s.charCodeAt(i) - 65 << 24 >>> 24) >> 0)) + 10 >> 0)) >> 0;
			} else {
				break;
			}
			if (n >= 16777215) {
				_tmp = 0;
				_tmp$1 = i;
				_tmp$2 = false;
				n = _tmp;
				i = _tmp$1;
				ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === 0) {
			_tmp$3 = 0;
			_tmp$4 = i;
			_tmp$5 = false;
			n = _tmp$3;
			i = _tmp$4;
			ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n;
		_tmp$7 = i;
		_tmp$8 = true;
		n = _tmp$6;
		i = _tmp$7;
		ok = _tmp$8;
		return [n, i, ok];
	};
	appendHex = function(dst, i) {
		var dst, i, j, v, y;
		if (i === 0) {
			return $append(dst, 48);
		}
		j = 7;
		while (true) {
			if (!(j >= 0)) { break; }
			v = (y = ((($imul(j, 4)) >>> 0)), y < 32 ? (i >>> y) : 0) >>> 0;
			if (v > 0) {
				dst = $append(dst, "0123456789abcdef".charCodeAt(((v & 15) >>> 0)));
			}
			j = j - (1) >> 0;
		}
		return dst;
	};
	last = function(s, b) {
		var b, i, s;
		i = s.length;
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === b) {
				break;
			}
			i = i - (1) >> 0;
		}
		return i;
	};
	init = function() {
		netGo = true;
	};
	OpError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	OpError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	OpError.ptr.prototype.Error = function() {
		var {_r$10, _r$11, _r$9, e, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		if (e === ptrType$18.nil) {
			$s = -1; return "<nil>";
		}
		s = e.Op;
		if (!(e.Net === "")) {
			s = s + (" " + e.Net);
		}
		/* */ if (!($interfaceIsEqual(e.Source, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e.Source, $ifaceNil))) { */ case 1:
			_r$9 = e.Source.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			s = s + (" " + _r$9);
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(e.Addr, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(e.Addr, $ifaceNil))) { */ case 4:
			if (!($interfaceIsEqual(e.Source, $ifaceNil))) {
				s = s + ("->");
			} else {
				s = s + (" ");
			}
			_r$10 = e.Addr.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			s = s + (_r$10);
		/* } */ case 5:
		_r$11 = e.Err.Error(); /* */ $s = 7; case 7: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		s = s + (": " + _r$11);
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: OpError.ptr.prototype.Error, $c: true, $r, _r$10, _r$11, _r$9, e, s, $s};return $f;
	};
	OpError.prototype.Error = function() { return this.$val.Error(); };
	OpError.ptr.prototype.Timeout = function() {
		var {$24r, $24r$1, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, ptrType$19, true);
		ne = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_tuple$1 = $assertType(ne.Err, timeout, true);
			t = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (!(ok$1)) { _v = false; $s = 3; continue s; }
			_r$9 = t.Timeout(); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9; case 3:
			$24r = _v;
			$s = 5; case 5: return $24r;
		/* } */ case 2:
		_tuple$2 = $assertType(e.Err, timeout, true);
		t$1 = _tuple$2[0];
		ok$2 = _tuple$2[1];
		if (!(ok$2)) { _v$1 = false; $s = 6; continue s; }
		_r$10 = t$1.Timeout(); /* */ $s = 7; case 7: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$1 = _r$10; case 6:
		$24r$1 = _v$1;
		$s = 8; case 8: return $24r$1;
		/* */ } return; } var $f = {$blk: OpError.ptr.prototype.Timeout, $c: true, $r, $24r, $24r$1, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s};return $f;
	};
	OpError.prototype.Timeout = function() { return this.$val.Timeout(); };
	OpError.ptr.prototype.Temporary = function() {
		var {$24r, $24r$1, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		if (e.Op === "accept" && isConnError(e.Err)) {
			$s = -1; return true;
		}
		_tuple = $assertType(e.Err, ptrType$19, true);
		ne = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_tuple$1 = $assertType(ne.Err, temporary, true);
			t = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (!(ok$1)) { _v = false; $s = 3; continue s; }
			_r$9 = t.Temporary(); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9; case 3:
			$24r = _v;
			$s = 5; case 5: return $24r;
		/* } */ case 2:
		_tuple$2 = $assertType(e.Err, temporary, true);
		t$1 = _tuple$2[0];
		ok$2 = _tuple$2[1];
		if (!(ok$2)) { _v$1 = false; $s = 6; continue s; }
		_r$10 = t$1.Temporary(); /* */ $s = 7; case 7: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$1 = _r$10; case 6:
		$24r$1 = _v$1;
		$s = 8; case 8: return $24r$1;
		/* */ } return; } var $f = {$blk: OpError.ptr.prototype.Temporary, $c: true, $r, $24r, $24r$1, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s};return $f;
	};
	OpError.prototype.Temporary = function() { return this.$val.Temporary(); };
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "invalid " + e.Type + ": " + e.Text;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	ParseError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return false;
	};
	ParseError.prototype.Timeout = function() { return this.$val.Timeout(); };
	ParseError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return false;
	};
	ParseError.prototype.Temporary = function() { return this.$val.Temporary(); };
	AddrError.ptr.prototype.Error = function() {
		var e, s;
		e = this;
		if (e === ptrType$29.nil) {
			return "<nil>";
		}
		s = e.Err;
		if (!(e.Addr === "")) {
			s = "address " + e.Addr + ": " + s;
		}
		return s;
	};
	AddrError.prototype.Error = function() { return this.$val.Error(); };
	AddrError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return false;
	};
	AddrError.prototype.Timeout = function() { return this.$val.Timeout(); };
	AddrError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return false;
	};
	AddrError.prototype.Temporary = function() { return this.$val.Temporary(); };
	HardwareAddr.prototype.String = function() {
		var _i, _ref, a, b, buf, i;
		a = this;
		if (a.$length === 0) {
			return "";
		}
		buf = $makeSlice(sliceType$1, 0, (($imul(a.$length, 3)) - 1 >> 0));
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf = $append(buf, 58);
			}
			buf = $append(buf, "0123456789abcdef".charCodeAt((b >>> 4 << 24 >>> 24)));
			buf = $append(buf, "0123456789abcdef".charCodeAt(((b & 15) >>> 0)));
			_i++;
		}
		return ($bytesToString(buf));
	};
	$ptrType(HardwareAddr).prototype.String = function() { return this.$get().String(); };
	SplitHostPort = function(hostport) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, addrErr, end, err, host, hostport, i, j, k, port, $s, $r, $c} = $restore(this, {hostport});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		host = "";
		port = "";
		err = $ifaceNil;
		addrErr = (function(addr, why) {
			var _tmp, _tmp$1, _tmp$2, addr, err$1, host$1, port$1, why;
			host$1 = "";
			port$1 = "";
			err$1 = $ifaceNil;
			_tmp = "";
			_tmp$1 = "";
			_tmp$2 = new AddrError.ptr(why, addr);
			host$1 = _tmp;
			port$1 = _tmp$1;
			err$1 = _tmp$2;
			return [host$1, port$1, err$1];
		});
		_tmp = 0;
		_tmp$1 = 0;
		j = _tmp;
		k = _tmp$1;
		i = last(hostport, 58);
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r$9 = addrErr(hostport, "missing port in address"); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple = _r$9;
			host = _tuple[0];
			port = _tuple[1];
			err = _tuple[2];
			$24r = [host, port, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (hostport.charCodeAt(0) === 91) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (hostport.charCodeAt(0) === 91) { */ case 5:
			end = bytealg.IndexByteString(hostport, 93);
			/* */ if (end < 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (end < 0) { */ case 8:
				_r$10 = addrErr(hostport, "missing ']' in address"); /* */ $s = 10; case 10: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$1 = _r$10;
				host = _tuple$1[0];
				port = _tuple$1[1];
				err = _tuple$1[2];
				$24r$1 = [host, port, err];
				$s = 11; case 11: return $24r$1;
			/* } */ case 9:
				_1 = end + 1 >> 0;
				/* */ if (_1 === (hostport.length)) { $s = 13; continue; }
				/* */ if (_1 === (i)) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_1 === (hostport.length)) { */ case 13:
					_r$11 = addrErr(hostport, "missing port in address"); /* */ $s = 17; case 17: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$2 = _r$11;
					host = _tuple$2[0];
					port = _tuple$2[1];
					err = _tuple$2[2];
					$24r$2 = [host, port, err];
					$s = 18; case 18: return $24r$2;
				/* } else if (_1 === (i)) { */ case 14:
					$s = 16; continue;
				/* } else { */ case 15:
					/* */ if (hostport.charCodeAt((end + 1 >> 0)) === 58) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (hostport.charCodeAt((end + 1 >> 0)) === 58) { */ case 19:
						_r$12 = addrErr(hostport, "too many colons in address"); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_tuple$3 = _r$12;
						host = _tuple$3[0];
						port = _tuple$3[1];
						err = _tuple$3[2];
						$24r$3 = [host, port, err];
						$s = 22; case 22: return $24r$3;
					/* } */ case 20:
					_r$13 = addrErr(hostport, "missing port in address"); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$4 = _r$13;
					host = _tuple$4[0];
					port = _tuple$4[1];
					err = _tuple$4[2];
					$24r$4 = [host, port, err];
					$s = 24; case 24: return $24r$4;
				/* } */ case 16:
			case 12:
			host = $substring(hostport, 1, end);
			_tmp$2 = 1;
			_tmp$3 = end + 1 >> 0;
			j = _tmp$2;
			k = _tmp$3;
			$s = 7; continue;
		/* } else { */ case 6:
			host = $substring(hostport, 0, i);
			/* */ if (bytealg.IndexByteString(host, 58) >= 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (bytealg.IndexByteString(host, 58) >= 0) { */ case 25:
				_r$14 = addrErr(hostport, "too many colons in address"); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$5 = _r$14;
				host = _tuple$5[0];
				port = _tuple$5[1];
				err = _tuple$5[2];
				$24r$5 = [host, port, err];
				$s = 28; case 28: return $24r$5;
			/* } */ case 26:
		/* } */ case 7:
		/* */ if (bytealg.IndexByteString($substring(hostport, j), 91) >= 0) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (bytealg.IndexByteString($substring(hostport, j), 91) >= 0) { */ case 29:
			_r$15 = addrErr(hostport, "unexpected '[' in address"); /* */ $s = 31; case 31: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tuple$6 = _r$15;
			host = _tuple$6[0];
			port = _tuple$6[1];
			err = _tuple$6[2];
			$24r$6 = [host, port, err];
			$s = 32; case 32: return $24r$6;
		/* } */ case 30:
		/* */ if (bytealg.IndexByteString($substring(hostport, k), 93) >= 0) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (bytealg.IndexByteString($substring(hostport, k), 93) >= 0) { */ case 33:
			_r$16 = addrErr(hostport, "unexpected ']' in address"); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$7 = _r$16;
			host = _tuple$7[0];
			port = _tuple$7[1];
			err = _tuple$7[2];
			$24r$7 = [host, port, err];
			$s = 36; case 36: return $24r$7;
		/* } */ case 34:
		port = $substring(hostport, (i + 1 >> 0));
		_tmp$4 = host;
		_tmp$5 = port;
		_tmp$6 = $ifaceNil;
		host = _tmp$4;
		port = _tmp$5;
		err = _tmp$6;
		$s = -1; return [host, port, err];
		/* */ } return; } var $f = {$blk: SplitHostPort, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, addrErr, end, err, host, hostport, i, j, k, port, $s};return $f;
	};
	$pkg.SplitHostPort = SplitHostPort;
	IPv4 = function(a, b, c, d) {
		var a, b, c, d, p;
		p = $makeSlice(IP, 16);
		$copySlice(p, v4InV6Prefix);
		(12 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 12] = a);
		(13 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 13] = b);
		(14 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 14] = c);
		(15 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 15] = d);
		return p;
	};
	$pkg.IPv4 = IPv4;
	IPv4Mask = function(a, b, c, d) {
		var a, b, c, d, p;
		p = $makeSlice(IPMask, 4);
		(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = a);
		(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = b);
		(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = c);
		(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = d);
		return p;
	};
	$pkg.IPv4Mask = IPv4Mask;
	CIDRMask = function(ones, bits) {
		var _q, bits, i, l, m, n, ones, y;
		if (!((bits === 32)) && !((bits === 128))) {
			return IPMask.nil;
		}
		if (ones < 0 || ones > bits) {
			return IPMask.nil;
		}
		l = (_q = bits / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		m = $makeSlice(IPMask, l);
		n = ((ones >>> 0));
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			if (n >= 8) {
				((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = 255);
				n = n - (8) >>> 0;
				i = i + (1) >> 0;
				continue;
			}
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = (~(((y = n, y < 32 ? (255 >>> y) : 0) << 24 >>> 24)) << 24 >>> 24));
			n = 0;
			i = i + (1) >> 0;
		}
		return m;
	};
	$pkg.CIDRMask = CIDRMask;
	IP.prototype.IsUnspecified = function() {
		var ip;
		ip = this;
		return ip.Equal($pkg.IPv4zero) || ip.Equal($pkg.IPv6unspecified);
	};
	$ptrType(IP).prototype.IsUnspecified = function() { return this.$get().IsUnspecified(); };
	IP.prototype.IsLoopback = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return (0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 127;
		}
		return ip.Equal($pkg.IPv6loopback);
	};
	$ptrType(IP).prototype.IsLoopback = function() { return this.$get().IsLoopback(); };
	IP.prototype.IsPrivate = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return ((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 10) || (((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 172) && ((((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) & 240) >>> 0) === 16)) || (((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 192) && ((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) === 168));
		}
		return (ip.$length === 16) && ((((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) & 254) >>> 0) === 252);
	};
	$ptrType(IP).prototype.IsPrivate = function() { return this.$get().IsPrivate(); };
	IP.prototype.IsMulticast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return (((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) & 240) >>> 0) === 224;
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255);
	};
	$ptrType(IP).prototype.IsMulticast = function() { return this.$get().IsMulticast(); };
	IP.prototype.IsInterfaceLocalMulticast = function() {
		var ip;
		ip = this;
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 1);
	};
	$ptrType(IP).prototype.IsInterfaceLocalMulticast = function() { return this.$get().IsInterfaceLocalMulticast(); };
	IP.prototype.IsLinkLocalMulticast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return ((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 224) && ((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) === 0) && ((2 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 2]) === 0);
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 2);
	};
	$ptrType(IP).prototype.IsLinkLocalMulticast = function() { return this.$get().IsLinkLocalMulticast(); };
	IP.prototype.IsLinkLocalUnicast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return ((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 169) && ((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) === 254);
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 254) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 192) >>> 0) === 128);
	};
	$ptrType(IP).prototype.IsLinkLocalUnicast = function() { return this.$get().IsLinkLocalUnicast(); };
	IP.prototype.IsGlobalUnicast = function() {
		var ip;
		ip = this;
		return ((ip.$length === 4) || (ip.$length === 16)) && !ip.Equal($pkg.IPv4bcast) && !ip.IsUnspecified() && !ip.IsLoopback() && !ip.IsMulticast() && !ip.IsLinkLocalUnicast();
	};
	$ptrType(IP).prototype.IsGlobalUnicast = function() { return this.$get().IsGlobalUnicast(); };
	isZeros = function(p) {
		var i, p;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (!((((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) === 0))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IP.prototype.To4 = function() {
		var ip;
		ip = this;
		if (ip.$length === 4) {
			return ip;
		}
		if ((ip.$length === 16) && isZeros($subslice(ip, 0, 10)) && ((10 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 10]) === 255) && ((11 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 11]) === 255)) {
			return $subslice(ip, 12, 16);
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To4 = function() { return this.$get().To4(); };
	IP.prototype.To16 = function() {
		var ip;
		ip = this;
		if (ip.$length === 4) {
			return IPv4((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]), (1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]), (2 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 2]), (3 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 3]));
		}
		if (ip.$length === 16) {
			return ip;
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To16 = function() { return this.$get().To16(); };
	IP.prototype.DefaultMask = function() {
		var ip;
		ip = this;
		ip = ip.To4();
		if (ip === IP.nil) {
			return IPMask.nil;
		}
		if ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) < 128) {
			return classAMask;
		} else if ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) < 192) {
			return classBMask;
		} else {
			return classCMask;
		}
	};
	$ptrType(IP).prototype.DefaultMask = function() { return this.$get().DefaultMask(); };
	allFF = function(b) {
		var _i, _ref, b, c;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === 255))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	IP.prototype.Mask = function(mask) {
		var i, ip, mask, n, out;
		ip = this;
		if ((mask.$length === 16) && (ip.$length === 4) && allFF($convertSliceType($subslice(mask, 0, 12), sliceType$1))) {
			mask = $subslice(mask, 12);
		}
		if ((mask.$length === 4) && (ip.$length === 16) && bytealg.Equal($convertSliceType($subslice(ip, 0, 12), sliceType$1), v4InV6Prefix)) {
			ip = $subslice(ip, 12);
		}
		n = ip.$length;
		if (!((n === mask.$length))) {
			return IP.nil;
		}
		out = $makeSlice(IP, n);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i] = ((((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i]) & ((i < 0 || i >= mask.$length) ? ($throwRuntimeError("index out of range"), undefined) : mask.$array[mask.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		return out;
	};
	$ptrType(IP).prototype.Mask = function(mask) { return this.$get().Mask(mask); };
	ubtoa = function(dst, start, v) {
		var _q, _q$1, _q$2, _r$10, _r$11, _r$9, dst, start, v, x, x$1, x$2;
		if (v < 10) {
			((start < 0 || start >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + start] = (v + 48 << 24 >>> 24));
			return 1;
		} else if (v < 100) {
			(x = start + 1 >> 0, ((x < 0 || x >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x] = ((_r$9 = v % 10, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24)));
			((start < 0 || start >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + start] = ((_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24));
			return 2;
		}
		(x$1 = start + 2 >> 0, ((x$1 < 0 || x$1 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$1] = ((_r$10 = v % 10, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24)));
		(x$2 = start + 1 >> 0, ((x$2 < 0 || x$2 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$2] = ((_r$11 = ((_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$11 === _r$11 ? _r$11 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24)));
		((start < 0 || start >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + start] = ((_q$2 = v / 100, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24));
		return 3;
	};
	IP.prototype.String = function() {
		var b, b$1, e0, e1, i, i$1, ip, j, n, p, p4, x, x$1;
		ip = this;
		p = ip;
		if (ip.$length === 0) {
			return "<nil>";
		}
		p4 = p.To4();
		if (p4.$length === 4) {
			b = $makeSlice(sliceType$1, 15);
			n = ubtoa(b, 0, (0 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 0]));
			((n < 0 || n >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + n] = 46);
			n = n + (1) >> 0;
			n = n + (ubtoa(b, n, (1 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 1]))) >> 0;
			((n < 0 || n >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + n] = 46);
			n = n + (1) >> 0;
			n = n + (ubtoa(b, n, (2 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 2]))) >> 0;
			((n < 0 || n >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + n] = 46);
			n = n + (1) >> 0;
			n = n + (ubtoa(b, n, (3 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 3]))) >> 0;
			return ($bytesToString($subslice(b, 0, n)));
		}
		if (!((p.$length === 16))) {
			return "?" + hexString($convertSliceType(ip, sliceType$1));
		}
		e0 = -1;
		e1 = -1;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			j = i;
			while (true) {
				if (!(j < 16 && (((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) === 0) && ((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) === 0))) { break; }
				j = j + (2) >> 0;
			}
			if (j > i && (j - i >> 0) > (e1 - e0 >> 0)) {
				e0 = i;
				e1 = j;
				i = j;
			}
			i = i + (2) >> 0;
		}
		if ((e1 - e0 >> 0) <= 2) {
			e0 = -1;
			e1 = -1;
		}
		b$1 = $makeSlice(sliceType$1, 0, 39);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 16)) { break; }
			if (i$1 === e0) {
				b$1 = $append(b$1, 58, 58);
				i$1 = e1;
				if (i$1 >= 16) {
					break;
				}
			} else if (i$1 > 0) {
				b$1 = $append(b$1, 58);
			}
			b$1 = appendHex(b$1, (((((((i$1 < 0 || i$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i$1]) >>> 0)) << 8 >>> 0)) | (((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])) >>> 0))) >>> 0);
			i$1 = i$1 + (2) >> 0;
		}
		return ($bytesToString(b$1));
	};
	$ptrType(IP).prototype.String = function() { return this.$get().String(); };
	hexString = function(b) {
		var _i, _ref, _tmp, _tmp$1, b, i, s, tn, x, x$1;
		s = $makeSlice(sliceType$1, ($imul(b.$length, 2)));
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			tn = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tmp = "0123456789abcdef".charCodeAt((tn >>> 4 << 24 >>> 24));
			_tmp$1 = "0123456789abcdef".charCodeAt(((tn & 15) >>> 0));
			(x = $imul(i, 2), ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x] = _tmp));
			(x$1 = ($imul(i, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1] = _tmp$1));
			_i++;
		}
		return ($bytesToString(s));
	};
	IP.prototype.MarshalText = function() {
		var ip;
		ip = this;
		if (ip.$length === 0) {
			return [(new sliceType$1($stringToBytes(""))), $ifaceNil];
		}
		if (!((ip.$length === 4)) && !((ip.$length === 16))) {
			return [sliceType$1.nil, new AddrError.ptr("invalid IP address", hexString($convertSliceType(ip, sliceType$1)))];
		}
		return [(new sliceType$1($stringToBytes(ip.String()))), $ifaceNil];
	};
	$ptrType(IP).prototype.MarshalText = function() { return this.$get().MarshalText(); };
	$ptrType(IP).prototype.UnmarshalText = function(text) {
		var ip, s, text, x;
		ip = this;
		if (text.$length === 0) {
			ip.$set(IP.nil);
			return $ifaceNil;
		}
		s = ($bytesToString(text));
		x = ParseIP(s);
		if (x === IP.nil) {
			return new ParseError.ptr("IP address", s);
		}
		ip.$set(x);
		return $ifaceNil;
	};
	IP.prototype.Equal = function(x) {
		var ip, x;
		ip = this;
		if (ip.$length === x.$length) {
			return bytealg.Equal($convertSliceType(ip, sliceType$1), $convertSliceType(x, sliceType$1));
		}
		if ((ip.$length === 4) && (x.$length === 16)) {
			return bytealg.Equal($convertSliceType($subslice(x, 0, 12), sliceType$1), v4InV6Prefix) && bytealg.Equal($convertSliceType(ip, sliceType$1), $convertSliceType($subslice(x, 12), sliceType$1));
		}
		if ((ip.$length === 16) && (x.$length === 4)) {
			return bytealg.Equal($convertSliceType($subslice(ip, 0, 12), sliceType$1), v4InV6Prefix) && bytealg.Equal($convertSliceType($subslice(ip, 12), sliceType$1), $convertSliceType(x, sliceType$1));
		}
		return false;
	};
	$ptrType(IP).prototype.Equal = function(x) { return this.$get().Equal(x); };
	simpleMaskLength = function(mask) {
		var _i, _ref, i, mask, n, v, y;
		n = 0;
		_ref = mask;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (v === 255) {
				n = n + (8) >> 0;
				_i++;
				continue;
			}
			while (true) {
				if (!(!((((v & 128) >>> 0) === 0)))) { break; }
				n = n + (1) >> 0;
				v = (y = (1), y < 32 ? (v << y) : 0) << 24 >>> 24;
			}
			if (!((v === 0))) {
				return -1;
			}
			i = i + (1) >> 0;
			while (true) {
				if (!(i < mask.$length)) { break; }
				if (!((((i < 0 || i >= mask.$length) ? ($throwRuntimeError("index out of range"), undefined) : mask.$array[mask.$offset + i]) === 0))) {
					return -1;
				}
				i = i + (1) >> 0;
			}
			break;
		}
		return n;
	};
	IPMask.prototype.Size = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, bits, m, ones;
		ones = 0;
		bits = 0;
		m = this;
		_tmp = simpleMaskLength(m);
		_tmp$1 = $imul(m.$length, 8);
		ones = _tmp;
		bits = _tmp$1;
		if (ones === -1) {
			_tmp$2 = 0;
			_tmp$3 = 0;
			ones = _tmp$2;
			bits = _tmp$3;
			return [ones, bits];
		}
		return [ones, bits];
	};
	$ptrType(IPMask).prototype.Size = function() { return this.$get().Size(); };
	IPMask.prototype.String = function() {
		var m;
		m = this;
		if (m.$length === 0) {
			return "<nil>";
		}
		return hexString($convertSliceType(m, sliceType$1));
	};
	$ptrType(IPMask).prototype.String = function() { return this.$get().String(); };
	networkNumberAndMask = function(n) {
		var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, ip, m, n;
		ip = IP.nil;
		m = IPMask.nil;
		ip = n.IP.To4();
		if (ip === IP.nil) {
			ip = n.IP;
			if (!((ip.$length === 16))) {
				_tmp = IP.nil;
				_tmp$1 = IPMask.nil;
				ip = _tmp;
				m = _tmp$1;
				return [ip, m];
			}
		}
		m = n.Mask;
		_1 = m.$length;
		if (_1 === (4)) {
			if (!((ip.$length === 4))) {
				_tmp$2 = IP.nil;
				_tmp$3 = IPMask.nil;
				ip = _tmp$2;
				m = _tmp$3;
				return [ip, m];
			}
		} else if (_1 === (16)) {
			if (ip.$length === 4) {
				m = $subslice(m, 12);
			}
		} else {
			_tmp$4 = IP.nil;
			_tmp$5 = IPMask.nil;
			ip = _tmp$4;
			m = _tmp$5;
			return [ip, m];
		}
		return [ip, m];
	};
	IPNet.ptr.prototype.Contains = function(ip) {
		var _tuple, i, ip, l, m, n, nn, x;
		n = this;
		_tuple = networkNumberAndMask(n);
		nn = _tuple[0];
		m = _tuple[1];
		x = ip.To4();
		if (!(x === IP.nil)) {
			ip = x;
		}
		l = ip.$length;
		if (!((l === nn.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			if (!((((((i < 0 || i >= nn.$length) ? ($throwRuntimeError("index out of range"), undefined) : nn.$array[nn.$offset + i]) & ((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i])) >>> 0) === ((((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i]) & ((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i])) >>> 0)))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IPNet.prototype.Contains = function(ip) { return this.$val.Contains(ip); };
	IPNet.ptr.prototype.Network = function() {
		var n;
		n = this;
		return "ip+net";
	};
	IPNet.prototype.Network = function() { return this.$val.Network(); };
	IPNet.ptr.prototype.String = function() {
		var _tuple, l, m, n, nn;
		n = this;
		if (n === ptrType$3.nil) {
			return "<nil>";
		}
		_tuple = networkNumberAndMask(n);
		nn = _tuple[0];
		m = _tuple[1];
		if (nn === IP.nil || m === IPMask.nil) {
			return "<nil>";
		}
		l = simpleMaskLength(m);
		if (l === -1) {
			return nn.String() + "/" + m.String();
		}
		return nn.String() + "/" + itoa.Uitoa(((l >>> 0)));
	};
	IPNet.prototype.String = function() { return this.$val.String(); };
	parseIPv4 = function(s) {
		var _tuple, c, i, n, ok, p, s;
		p = arrayType.zero();
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			if (s.length === 0) {
				return IP.nil;
			}
			if (i > 0) {
				if (!((s.charCodeAt(0) === 46))) {
					return IP.nil;
				}
				s = $substring(s, 1);
			}
			_tuple = dtoi(s);
			n = _tuple[0];
			c = _tuple[1];
			ok = _tuple[2];
			if (!ok || n > 255) {
				return IP.nil;
			}
			if (c > 1 && (s.charCodeAt(0) === 48)) {
				return IP.nil;
			}
			s = $substring(s, c);
			((i < 0 || i >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[i] = ((n << 24 >>> 24)));
			i = i + (1) >> 0;
		}
		if (!((s.length === 0))) {
			return IP.nil;
		}
		return IPv4(p[0], p[1], p[2], p[3]);
	};
	parseIPv6 = function(s) {
		var _tuple, c, ellipsis, i, ip, ip4, j, j$1, n, n$1, ok, s, x, x$1, x$2, x$3, x$4;
		ip = IP.nil;
		ip = $makeSlice(IP, 16);
		ellipsis = -1;
		if (s.length >= 2 && (s.charCodeAt(0) === 58) && (s.charCodeAt(1) === 58)) {
			ellipsis = 0;
			s = $substring(s, 2);
			if (s.length === 0) {
				ip = ip;
				return ip;
			}
		}
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			_tuple = xtoi(s);
			n = _tuple[0];
			c = _tuple[1];
			ok = _tuple[2];
			if (!ok || n > 65535) {
				ip = IP.nil;
				return ip;
			}
			if (c < s.length && (s.charCodeAt(c) === 46)) {
				if (ellipsis < 0 && !((i === 12))) {
					ip = IP.nil;
					return ip;
				}
				if ((i + 4 >> 0) > 16) {
					ip = IP.nil;
					return ip;
				}
				ip4 = parseIPv4(s);
				if (ip4 === IP.nil) {
					ip = IP.nil;
					return ip;
				}
				((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i] = (12 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 12]));
				(x = i + 1 >> 0, ((x < 0 || x >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x] = (13 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 13])));
				(x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$1] = (14 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 14])));
				(x$2 = i + 3 >> 0, ((x$2 < 0 || x$2 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$2] = (15 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 15])));
				s = "";
				i = i + (4) >> 0;
				break;
			}
			((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i] = (((n >> 8 >> 0) << 24 >>> 24)));
			(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$3] = ((n << 24 >>> 24))));
			i = i + (2) >> 0;
			s = $substring(s, c);
			if (s.length === 0) {
				break;
			}
			if (!((s.charCodeAt(0) === 58)) || (s.length === 1)) {
				ip = IP.nil;
				return ip;
			}
			s = $substring(s, 1);
			if (s.charCodeAt(0) === 58) {
				if (ellipsis >= 0) {
					ip = IP.nil;
					return ip;
				}
				ellipsis = i;
				s = $substring(s, 1);
				if (s.length === 0) {
					break;
				}
			}
		}
		if (!((s.length === 0))) {
			ip = IP.nil;
			return ip;
		}
		if (i < 16) {
			if (ellipsis < 0) {
				ip = IP.nil;
				return ip;
			}
			n$1 = 16 - i >> 0;
			j = i - 1 >> 0;
			while (true) {
				if (!(j >= ellipsis)) { break; }
				(x$4 = j + n$1 >> 0, ((x$4 < 0 || x$4 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$4] = ((j < 0 || j >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + j])));
				j = j - (1) >> 0;
			}
			j$1 = (ellipsis + n$1 >> 0) - 1 >> 0;
			while (true) {
				if (!(j$1 >= ellipsis)) { break; }
				((j$1 < 0 || j$1 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + j$1] = 0);
				j$1 = j$1 - (1) >> 0;
			}
		} else if (ellipsis >= 0) {
			ip = IP.nil;
			return ip;
		}
		ip = ip;
		return ip;
	};
	ParseIP = function(s) {
		var _1, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (46)) {
				return parseIPv4(s);
			} else if (_1 === (58)) {
				return parseIPv6(s);
			}
			i = i + (1) >> 0;
		}
		return IP.nil;
	};
	$pkg.ParseIP = ParseIP;
	ParseCIDR = function(s) {
		var _tmp, _tmp$1, _tuple, addr, i, ip, iplen, m, mask, n, ok, s;
		i = bytealg.IndexByteString(s, 47);
		if (i < 0) {
			return [IP.nil, ptrType$3.nil, new ParseError.ptr("CIDR address", s)];
		}
		_tmp = $substring(s, 0, i);
		_tmp$1 = $substring(s, (i + 1 >> 0));
		addr = _tmp;
		mask = _tmp$1;
		iplen = 4;
		ip = parseIPv4(addr);
		if (ip === IP.nil) {
			iplen = 16;
			ip = parseIPv6(addr);
		}
		_tuple = dtoi(mask);
		n = _tuple[0];
		i = _tuple[1];
		ok = _tuple[2];
		if (ip === IP.nil || !ok || !((i === mask.length)) || n < 0 || n > ($imul(8, iplen))) {
			return [IP.nil, ptrType$3.nil, new ParseError.ptr("CIDR address", s)];
		}
		m = CIDRMask(n, $imul(8, iplen));
		return [ip, new IPNet.ptr(ip.Mask(m), m), $ifaceNil];
	};
	$pkg.ParseCIDR = ParseCIDR;
	interfaceAddrTable = function(ifi) {
		var ifi;
		return [sliceType$14.nil, $ifaceNil];
	};
	interfaceMulticastAddrTable = function(ifi) {
		var ifi;
		return [sliceType$14.nil, $ifaceNil];
	};
	Flags.prototype.String = function() {
		var _i, _ref, f, i, name, s, y;
		f = this.$val;
		s = "";
		_ref = flagNames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((f & (((y = ((i >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				if (!(s === "")) {
					s = s + ("|");
				}
				s = s + (name);
			}
			_i++;
		}
		if (s === "") {
			s = "0";
		}
		return s;
	};
	$ptrType(Flags).prototype.String = function() { return new Flags(this.$get()).String(); };
	Interface.ptr.prototype.Addrs = function() {
		var _tuple, err, ifat, ifi;
		ifi = this;
		if (ifi === ptrType$15.nil) {
			return [sliceType$14.nil, new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, errInvalidInterface)];
		}
		_tuple = interfaceAddrTable(ifi);
		ifat = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, err);
		}
		return [ifat, err];
	};
	Interface.prototype.Addrs = function() { return this.$val.Addrs(); };
	Interface.ptr.prototype.MulticastAddrs = function() {
		var _tuple, err, ifat, ifi;
		ifi = this;
		if (ifi === ptrType$15.nil) {
			return [sliceType$14.nil, new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, errInvalidInterface)];
		}
		_tuple = interfaceMulticastAddrTable(ifi);
		ifat = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, err);
		}
		return [ifat, err];
	};
	Interface.prototype.MulticastAddrs = function() { return this.$val.MulticastAddrs(); };
	isConnError = function(err) {
		var _tuple, err, ok, se;
		_tuple = $assertType(err, syscall.Errno, true);
		se = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return (se === 104) || (se === 103);
		}
		return false;
	};
	init$1 = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = sort.Sort(sort.Reverse(($convertSliceType(rfc6724policyTable, byMaskLength)))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: init$1, $c: true, $r, $s};return $f;
	};
	byMaskLength.prototype.Len = function() {
		var s;
		s = this;
		return s.$length;
	};
	$ptrType(byMaskLength).prototype.Len = function() { return this.$get().Len(); };
	byMaskLength.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), policyTableEntry);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), policyTableEntry);
		policyTableEntry.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		policyTableEntry.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byMaskLength).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byMaskLength.prototype.Less = function(i, j) {
		var _tuple, _tuple$1, i, isize, j, jsize, s;
		s = this;
		_tuple = ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).Prefix.Mask.Size();
		isize = _tuple[0];
		_tuple$1 = ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).Prefix.Mask.Size();
		jsize = _tuple$1[0];
		return isize < jsize;
	};
	$ptrType(byMaskLength).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	mustCIDR = function(s) {
		var {_r$9, _tuple, err, ip, ipNet, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = ParseCIDR(s);
		ip = _tuple[0];
		ipNet = _tuple[1];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$9 = err.Error(); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$panic(new $String(_r$9));
		/* } */ case 2:
		if (!((ip.$length === 16))) {
			$panic(new $String("unexpected IP length"));
		}
		$s = -1; return ipNet;
		/* */ } return; } var $f = {$blk: mustCIDR, $c: true, $r, _r$9, _tuple, err, ip, ipNet, s, $s};return $f;
	};
	policyTable.prototype.Classify = function(ip) {
		var _i, _ref, ent, ip, t;
		t = this;
		_ref = t;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ent = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), policyTableEntry);
			if (ent.Prefix.Contains(ip)) {
				return ent;
			}
			_i++;
		}
		return new policyTableEntry.ptr(ptrType$3.nil, 0, 0);
	};
	$ptrType(policyTable).prototype.Classify = function(ip) { return this.$get().Classify(ip); };
	ptrType$18.methods = [{prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$41.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	HardwareAddr.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	IP.methods = [{prop: "IsUnspecified", name: "IsUnspecified", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLoopback", name: "IsLoopback", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsPrivate", name: "IsPrivate", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsMulticast", name: "IsMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInterfaceLocalMulticast", name: "IsInterfaceLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalMulticast", name: "IsLinkLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalUnicast", name: "IsLinkLocalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsGlobalUnicast", name: "IsGlobalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "To4", name: "To4", pkg: "", typ: $funcType([], [IP], false)}, {prop: "To16", name: "To16", pkg: "", typ: $funcType([], [IP], false)}, {prop: "DefaultMask", name: "DefaultMask", pkg: "", typ: $funcType([], [IPMask], false)}, {prop: "Mask", name: "Mask", pkg: "", typ: $funcType([IPMask], [IP], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([IP], [$Bool], false)}, {prop: "matchAddrFamily", name: "matchAddrFamily", pkg: "net", typ: $funcType([IP], [$Bool], false)}];
	ptrType$46.methods = [{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	IPMask.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([IP], [$Bool], false)}, {prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$15.methods = [{prop: "Addrs", name: "Addrs", pkg: "", typ: $funcType([], [sliceType$14, $error], false)}, {prop: "MulticastAddrs", name: "MulticastAddrs", pkg: "", typ: $funcType([], [sliceType$14, $error], false)}];
	Flags.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$47.methods = [{prop: "update", name: "update", pkg: "net", typ: $funcType([sliceType$13, $Bool], [$Bool], false)}, {prop: "name", name: "name", pkg: "net", typ: $funcType([$Int], [$String], false)}, {prop: "index", name: "index", pkg: "net", typ: $funcType([$String], [$Int], false)}];
	policyTable.methods = [{prop: "Classify", name: "Classify", pkg: "", typ: $funcType([IP], [policyTableEntry], false)}];
	byMaskLength.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	Addr.init([{prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	OpError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Net", name: "Net", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Source", name: "Source", embedded: false, exported: true, typ: Addr, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: Addr, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	temporary.init([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	ParseError.init("", [{prop: "Type", name: "Type", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Text", name: "Text", embedded: false, exported: true, typ: $String, tag: ""}]);
	AddrError.init("", [{prop: "Err", name: "Err", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: $String, tag: ""}]);
	HardwareAddr.init($Uint8);
	IP.init($Uint8);
	IPMask.init($Uint8);
	IPNet.init("", [{prop: "IP", name: "IP", embedded: false, exported: true, typ: IP, tag: ""}, {prop: "Mask", name: "Mask", embedded: false, exported: true, typ: IPMask, tag: ""}]);
	Interface.init("", [{prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MTU", name: "MTU", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "HardwareAddr", name: "HardwareAddr", embedded: false, exported: true, typ: HardwareAddr, tag: ""}, {prop: "Flags", name: "Flags", embedded: false, exported: true, typ: Flags, tag: ""}]);
	ipv6ZoneCache.init("net", [{prop: "RWMutex", name: "RWMutex", embedded: true, exported: true, typ: sync.RWMutex, tag: ""}, {prop: "lastFetched", name: "lastFetched", embedded: false, exported: false, typ: time.Time, tag: ""}, {prop: "toIndex", name: "toIndex", embedded: false, exported: false, typ: mapType$2, tag: ""}, {prop: "toName", name: "toName", embedded: false, exported: false, typ: mapType$3, tag: ""}]);
	policyTableEntry.init("", [{prop: "Prefix", name: "Prefix", embedded: false, exported: true, typ: ptrType$3, tag: ""}, {prop: "Precedence", name: "Precedence", embedded: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Label", name: "Label", embedded: false, exported: true, typ: $Uint8, tag: ""}]);
	policyTable.init(policyTableEntry);
	byMaskLength.init(policyTableEntry);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = context.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nettrace.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = singleflight.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = netip.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dnsmessage.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		netGo = false;
		listeners = new $global.Map();
		errNoSuitableAddress = errors.New("no suitable address found");
		errMissingAddress = errors.New("missing address");
		$pkg.ErrWriteToConnected = errors.New("use of WriteTo with pre-connected connection");
		aLongTimeAgo = $clone(time.Unix(new $Int64(0, 1), new $Int64(0, 0)), time.Time);
		errNoSuchHost = errors.New("no such host");
		v4InV6Prefix = new sliceType$1([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);
		$pkg.IPv4bcast = IPv4(255, 255, 255, 255);
		$pkg.IPv4allsys = IPv4(224, 0, 0, 1);
		$pkg.IPv4allrouter = IPv4(224, 0, 0, 2);
		$pkg.IPv4zero = IPv4(0, 0, 0, 0);
		$pkg.IPv6unspecified = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.IPv6loopback = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);
		classAMask = IPv4Mask(255, 0, 0, 0);
		classBMask = IPv4Mask(255, 255, 0, 0);
		classCMask = IPv4Mask(255, 255, 255, 0);
		errInvalidInterface = errors.New("invalid network interface");
		errInvalidInterfaceIndex = errors.New("invalid network interface index");
		errInvalidInterfaceName = errors.New("invalid network interface name");
		errNoSuchInterface = errors.New("no such network interface");
		errNoSuchMulticastInterface = errors.New("no such multicast network interface");
		flagNames = new sliceType(["up", "broadcast", "loopback", "pointtopoint", "multicast"]);
		zoneCache = new ipv6ZoneCache.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), new $global.Map(), new $global.Map());
		testHookLookupIP = (function $b(ctx, fn, network, host) {
			var {$24r, _r, ctx, fn, host, network, $s, $r, $c} = $restore(this, {ctx, fn, network, host});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = fn(ctx, network, host); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r, ctx, fn, host, network, $s};return $f;
		});
		_r = mustCIDR("::1/128"); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = mustCIDR("::/0"); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = mustCIDR("::ffff:0:0/96"); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = mustCIDR("2002::/16"); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = mustCIDR("2001::/32"); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = mustCIDR("fc00::/7"); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = mustCIDR("::/96"); /* */ $s = 24; case 24: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = mustCIDR("fec0::/10"); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = mustCIDR("3ffe::/16"); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		rfc6724policyTable = new policyTable([$clone(new policyTableEntry.ptr(_r, 50, 0), policyTableEntry), $clone(new policyTableEntry.ptr(_r$1, 40, 1), policyTableEntry), $clone(new policyTableEntry.ptr(_r$2, 35, 4), policyTableEntry), $clone(new policyTableEntry.ptr(_r$3, 30, 2), policyTableEntry), $clone(new policyTableEntry.ptr(_r$4, 5, 5), policyTableEntry), $clone(new policyTableEntry.ptr(_r$5, 3, 13), policyTableEntry), $clone(new policyTableEntry.ptr(_r$6, 1, 3), policyTableEntry), $clone(new policyTableEntry.ptr(_r$7, 1, 11), policyTableEntry), $clone(new policyTableEntry.ptr(_r$8, 1, 12), policyTableEntry)]);
		init();
		$r = init$1(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, $init, errors, fmt, path, sort, strconv, strings, Error, EscapeError, InvalidHostError, URL, Userinfo, Values, sliceType, interfaceType, interfaceType$1, ptrType, sliceType$1, arrayType, ptrType$1, ptrType$2, sliceType$2, ptrType$3, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape, User, UserPassword, getScheme, Parse, parse, parseAuthority, parseHost, validEncoded, validOptionalPort, ParseQuery, parseQuery, resolvePath, splitHostPort, validUserinfo, stringContainsCTLByte;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	path = $packages["path"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Error = $pkg.Error = $newType(0, $kindStruct, "url.Error", true, "net/url", true, function(Op_, URL_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.URL = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.URL = URL_;
		this.Err = Err_;
	});
	EscapeError = $pkg.EscapeError = $newType(8, $kindString, "url.EscapeError", true, "net/url", true, null);
	InvalidHostError = $pkg.InvalidHostError = $newType(8, $kindString, "url.InvalidHostError", true, "net/url", true, null);
	URL = $pkg.URL = $newType(0, $kindStruct, "url.URL", true, "net/url", true, function(Scheme_, Opaque_, User_, Host_, Path_, RawPath_, OmitHost_, ForceQuery_, RawQuery_, Fragment_, RawFragment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Scheme = "";
			this.Opaque = "";
			this.User = ptrType$1.nil;
			this.Host = "";
			this.Path = "";
			this.RawPath = "";
			this.OmitHost = false;
			this.ForceQuery = false;
			this.RawQuery = "";
			this.Fragment = "";
			this.RawFragment = "";
			return;
		}
		this.Scheme = Scheme_;
		this.Opaque = Opaque_;
		this.User = User_;
		this.Host = Host_;
		this.Path = Path_;
		this.RawPath = RawPath_;
		this.OmitHost = OmitHost_;
		this.ForceQuery = ForceQuery_;
		this.RawQuery = RawQuery_;
		this.Fragment = Fragment_;
		this.RawFragment = RawFragment_;
	});
	Userinfo = $pkg.Userinfo = $newType(0, $kindStruct, "url.Userinfo", true, "net/url", true, function(username_, password_, passwordSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.username = "";
			this.password = "";
			this.passwordSet = false;
			return;
		}
		this.username = username_;
		this.password = password_;
		this.passwordSet = passwordSet_;
	});
	Values = $pkg.Values = $newType(4, $kindMap, "url.Values", true, "net/url", true, null);
	sliceType = $sliceType($emptyInterface);
	interfaceType = $interfaceType([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	interfaceType$1 = $interfaceType([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	ptrType = $ptrType(strings.Builder);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Userinfo);
	ptrType$2 = $ptrType(URL);
	sliceType$2 = $sliceType($String);
	ptrType$3 = $ptrType(Error);
	Error.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	Error.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	Error.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("%s %q: %s", new sliceType([new $String(e.Op), new $String(e.URL), e.Err])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Error.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Timeout = function() {
		var {$24r, _r, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, interfaceType, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Error.ptr.prototype.Timeout, $c: true, $r, $24r, _r, _tuple, _v, e, ok, t, $s};return $f;
	};
	Error.prototype.Timeout = function() { return this.$val.Timeout(); };
	Error.ptr.prototype.Temporary = function() {
		var {$24r, _r, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, interfaceType$1, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Temporary(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Error.ptr.prototype.Temporary, $c: true, $r, $24r, _r, _tuple, _v, e, ok, t, $s};return $f;
	};
	Error.prototype.Temporary = function() { return this.$val.Temporary(); };
	ishex = function(c) {
		var c;
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		var c;
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	EscapeError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "invalid URL escape " + strconv.Quote((e));
	};
	$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };
	InvalidHostError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "invalid character " + strconv.Quote((e)) + " in host name";
	};
	$ptrType(InvalidHostError).prototype.Error = function() { return new InvalidHostError(this.$get()).Error(); };
	shouldEscape = function(c, mode) {
		var _1, _2, _3, _4, c, mode;
		if (97 <= c && c <= 122 || 65 <= c && c <= 90 || 48 <= c && c <= 57) {
			return false;
		}
		if ((mode === 3) || (mode === 4)) {
			_1 = c;
			if ((_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (58)) || (_1 === (91)) || (_1 === (93)) || (_1 === (60)) || (_1 === (62)) || (_1 === (34))) {
				return false;
			}
		}
		_2 = c;
		if ((_2 === (45)) || (_2 === (95)) || (_2 === (46)) || (_2 === (126))) {
			return false;
		} else if ((_2 === (36)) || (_2 === (38)) || (_2 === (43)) || (_2 === (44)) || (_2 === (47)) || (_2 === (58)) || (_2 === (59)) || (_2 === (61)) || (_2 === (63)) || (_2 === (64))) {
			_3 = mode;
			if (_3 === (1)) {
				return c === 63;
			} else if (_3 === (2)) {
				return (c === 47) || (c === 59) || (c === 44) || (c === 63);
			} else if (_3 === (5)) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_3 === (6)) {
				return true;
			} else if (_3 === (7)) {
				return false;
			}
		}
		if (mode === 7) {
			_4 = c;
			if ((_4 === (33)) || (_4 === (40)) || (_4 === (41)) || (_4 === (42))) {
				return false;
			}
		}
		return true;
	};
	QueryUnescape = function(s) {
		var s;
		return unescape(s, 6);
	};
	$pkg.QueryUnescape = QueryUnescape;
	unescape = function(s, mode) {
		var _1, _2, hasPlus, i, i$1, mode, n, s, t, v;
		n = 0;
		hasPlus = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (37)) {
				n = n + (1) >> 0;
				if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
					s = $substring(s, i);
					if (s.length > 3) {
						s = $substring(s, 0, 3);
					}
					return ["", new EscapeError((s))];
				}
				if ((mode === 3) && unhex(s.charCodeAt((i + 1 >> 0))) < 8 && !($substring(s, i, (i + 3 >> 0)) === "%25")) {
					return ["", new EscapeError(($substring(s, i, (i + 3 >> 0))))];
				}
				if (mode === 4) {
					v = ((unhex(s.charCodeAt((i + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i + 2 >> 0)))) >>> 0;
					if (!($substring(s, i, (i + 3 >> 0)) === "%25") && !((v === 32)) && shouldEscape(v, 3)) {
						return ["", new EscapeError(($substring(s, i, (i + 3 >> 0))))];
					}
				}
				i = i + (3) >> 0;
			} else if (_1 === (43)) {
				hasPlus = mode === 6;
				i = i + (1) >> 0;
			} else {
				if (((mode === 3) || (mode === 4)) && s.charCodeAt(i) < 128 && shouldEscape(s.charCodeAt(i), mode)) {
					return ["", new InvalidHostError(($substring(s, i, (i + 1 >> 0))))];
				}
				i = i + (1) >> 0;
			}
		}
		if ((n === 0) && !hasPlus) {
			return [s, $ifaceNil];
		}
		t = new strings.Builder.ptr(ptrType.nil, sliceType$1.nil);
		t.Grow(s.length - ($imul(2, n)) >> 0);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			_2 = s.charCodeAt(i$1);
			if (_2 === (37)) {
				t.WriteByte(((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0);
				i$1 = i$1 + (2) >> 0;
			} else if (_2 === (43)) {
				if (mode === 6) {
					t.WriteByte(32);
				} else {
					t.WriteByte(43);
				}
			} else {
				t.WriteByte(s.charCodeAt(i$1));
			}
			i$1 = i$1 + (1) >> 0;
		}
		return [t.String(), $ifaceNil];
	};
	QueryEscape = function(s) {
		var s;
		return escape(s, 6);
	};
	$pkg.QueryEscape = QueryEscape;
	escape = function(s, mode) {
		var _tmp, _tmp$1, buf, c, c$1, hexCount, i, i$1, i$2, j, mode, required, s, spaceCount, t, x, x$1;
		_tmp = 0;
		_tmp$1 = 0;
		spaceCount = _tmp;
		hexCount = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 6)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		buf = arrayType.zero();
		t = sliceType$1.nil;
		required = s.length + ($imul(2, hexCount)) >> 0;
		if (required <= 64) {
			t = $subslice(new sliceType$1(buf), 0, required);
		} else {
			t = $makeSlice(sliceType$1, required);
		}
		if (hexCount === 0) {
			$copyString(t, s);
			i$1 = 0;
			while (true) {
				if (!(i$1 < s.length)) { break; }
				if (s.charCodeAt(i$1) === 32) {
					((i$1 < 0 || i$1 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i$1] = 43);
				}
				i$1 = i$1 + (1) >> 0;
			}
			return ($bytesToString(t));
		}
		j = 0;
		i$2 = 0;
		while (true) {
			if (!(i$2 < s.length)) { break; }
			c$1 = s.charCodeAt(i$2);
			if ((c$1 === 32) && (mode === 6)) {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 43);
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 37);
				(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))));
				j = j + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = s.charCodeAt(i$2));
				j = j + (1) >> 0;
			}
			i$2 = i$2 + (1) >> 0;
		}
		return ($bytesToString(t));
	};
	User = function(username) {
		var username;
		return new Userinfo.ptr(username, "", false);
	};
	$pkg.User = User;
	UserPassword = function(username, password) {
		var password, username;
		return new Userinfo.ptr(username, password, true);
	};
	$pkg.UserPassword = UserPassword;
	Userinfo.ptr.prototype.Username = function() {
		var u;
		u = this;
		if (u === ptrType$1.nil) {
			return "";
		}
		return u.username;
	};
	Userinfo.prototype.Username = function() { return this.$val.Username(); };
	Userinfo.ptr.prototype.Password = function() {
		var u;
		u = this;
		if (u === ptrType$1.nil) {
			return ["", false];
		}
		return [u.password, u.passwordSet];
	};
	Userinfo.prototype.Password = function() { return this.$val.Password(); };
	Userinfo.ptr.prototype.String = function() {
		var s, u;
		u = this;
		if (u === ptrType$1.nil) {
			return "";
		}
		s = escape(u.username, 5);
		if (u.passwordSet) {
			s = s + (":" + escape(u.password, 5));
		}
		return s;
	};
	Userinfo.prototype.String = function() { return this.$val.String(); };
	getScheme = function(rawURL) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, err, i, path$1, rawURL, scheme;
		scheme = "";
		path$1 = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < rawURL.length)) { break; }
			c = rawURL.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
			} else if (48 <= c && c <= 57 || (c === 43) || (c === 45) || (c === 46)) {
				if (i === 0) {
					_tmp = "";
					_tmp$1 = rawURL;
					_tmp$2 = $ifaceNil;
					scheme = _tmp;
					path$1 = _tmp$1;
					err = _tmp$2;
					return [scheme, path$1, err];
				}
			} else if ((c === 58)) {
				if (i === 0) {
					_tmp$3 = "";
					_tmp$4 = "";
					_tmp$5 = errors.New("missing protocol scheme");
					scheme = _tmp$3;
					path$1 = _tmp$4;
					err = _tmp$5;
					return [scheme, path$1, err];
				}
				_tmp$6 = $substring(rawURL, 0, i);
				_tmp$7 = $substring(rawURL, (i + 1 >> 0));
				_tmp$8 = $ifaceNil;
				scheme = _tmp$6;
				path$1 = _tmp$7;
				err = _tmp$8;
				return [scheme, path$1, err];
			} else {
				_tmp$9 = "";
				_tmp$10 = rawURL;
				_tmp$11 = $ifaceNil;
				scheme = _tmp$9;
				path$1 = _tmp$10;
				err = _tmp$11;
				return [scheme, path$1, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$12 = "";
		_tmp$13 = rawURL;
		_tmp$14 = $ifaceNil;
		scheme = _tmp$12;
		path$1 = _tmp$13;
		err = _tmp$14;
		return [scheme, path$1, err];
	};
	Parse = function(rawURL) {
		var {_r, _tuple, _tuple$1, err, frag, rawURL, u, url, $s, $r, $c} = $restore(this, {rawURL});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = strings.Cut(rawURL, "#");
		u = _tuple[0];
		frag = _tuple[1];
		_r = parse(u, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		url = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, new Error.ptr("parse", u, err)];
		}
		if (frag === "") {
			$s = -1; return [url, $ifaceNil];
		}
		err = url.setFragment(frag);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, new Error.ptr("parse", rawURL, err)];
		}
		$s = -1; return [url, $ifaceNil];
		/* */ } return; } var $f = {$blk: Parse, $c: true, $r, _r, _tuple, _tuple$1, err, frag, rawURL, u, url, $s};return $f;
	};
	$pkg.Parse = Parse;
	parse = function(rawURL, viaRequest) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, authority, err, err$1, i, rawURL, rest, segment, url, viaRequest, $s, $r, $c} = $restore(this, {rawURL, viaRequest});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rest = "";
		err = $ifaceNil;
		if (stringContainsCTLByte(rawURL)) {
			$s = -1; return [ptrType$2.nil, errors.New("net/url: invalid control character in URL")];
		}
		if (rawURL === "" && viaRequest) {
			$s = -1; return [ptrType$2.nil, errors.New("empty url")];
		}
		url = new URL.ptr("", "", ptrType$1.nil, "", "", "", false, false, "", "", "");
		if (rawURL === "*") {
			url.Path = "*";
			$s = -1; return [url, $ifaceNil];
		}
		_tuple = getScheme(rawURL);
		url.Scheme = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err];
		}
		_r = strings.ToLower(url.Scheme); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url.Scheme = _r;
		if (strings.HasSuffix(rest, "?") && (strings.Count(rest, "?") === 1)) {
			url.ForceQuery = true;
			rest = $substring(rest, 0, (rest.length - 1 >> 0));
		} else {
			_tuple$1 = strings.Cut(rest, "?");
			rest = _tuple$1[0];
			url.RawQuery = _tuple$1[1];
		}
		if (!strings.HasPrefix(rest, "/")) {
			if (!(url.Scheme === "")) {
				url.Opaque = rest;
				$s = -1; return [url, $ifaceNil];
			}
			if (viaRequest) {
				$s = -1; return [ptrType$2.nil, errors.New("invalid URI for request")];
			}
			_tuple$2 = strings.Cut(rest, "/");
			segment = _tuple$2[0];
			if (strings.Contains(segment, ":")) {
				$s = -1; return [ptrType$2.nil, errors.New("first path segment in URL cannot contain colon")];
			}
		}
		/* */ if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { $s = 2; continue; }
		/* */ if (!(url.Scheme === "") && strings.HasPrefix(rest, "/")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { */ case 2:
			authority = "";
			_tmp = $substring(rest, 2);
			_tmp$1 = "";
			authority = _tmp;
			rest = _tmp$1;
			i = strings.Index(authority, "/");
			if (i >= 0) {
				_tmp$2 = $substring(authority, 0, i);
				_tmp$3 = $substring(authority, i);
				authority = _tmp$2;
				rest = _tmp$3;
			}
			_r$1 = parseAuthority(authority); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			url.User = _tuple$3[0];
			url.Host = _tuple$3[1];
			err = _tuple$3[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, err];
			}
			$s = 4; continue;
		/* } else if (!(url.Scheme === "") && strings.HasPrefix(rest, "/")) { */ case 3:
			url.OmitHost = true;
		/* } */ case 4:
		err$1 = url.setPath(rest);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err$1];
		}
		$s = -1; return [url, $ifaceNil];
		/* */ } return; } var $f = {$blk: parse, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, authority, err, err$1, i, rawURL, rest, segment, url, viaRequest, $s};return $f;
	};
	parseAuthority = function(authority) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, authority, err, host, i, password, user, userinfo, username, $s, $r, $c} = $restore(this, {authority});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		user = ptrType$1.nil;
		host = "";
		err = $ifaceNil;
		i = strings.LastIndex(authority, "@");
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r = parseHost(authority); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			host = _tuple[0];
			err = _tuple[1];
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = parseHost($substring(authority, (i + 1 >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			host = _tuple$1[0];
			err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = "";
			_tmp$2 = err;
			user = _tmp;
			host = _tmp$1;
			err = _tmp$2;
			$s = -1; return [user, host, err];
		}
		if (i < 0) {
			_tmp$3 = ptrType$1.nil;
			_tmp$4 = host;
			_tmp$5 = $ifaceNil;
			user = _tmp$3;
			host = _tmp$4;
			err = _tmp$5;
			$s = -1; return [user, host, err];
		}
		userinfo = $substring(authority, 0, i);
		if (!validUserinfo(userinfo)) {
			_tmp$6 = ptrType$1.nil;
			_tmp$7 = "";
			_tmp$8 = errors.New("net/url: invalid userinfo");
			user = _tmp$6;
			host = _tmp$7;
			err = _tmp$8;
			$s = -1; return [user, host, err];
		}
		if (!strings.Contains(userinfo, ":")) {
			_tuple$2 = unescape(userinfo, 5);
			userinfo = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$9 = ptrType$1.nil;
				_tmp$10 = "";
				_tmp$11 = err;
				user = _tmp$9;
				host = _tmp$10;
				err = _tmp$11;
				$s = -1; return [user, host, err];
			}
			user = User(userinfo);
		} else {
			_tuple$3 = strings.Cut(userinfo, ":");
			username = _tuple$3[0];
			password = _tuple$3[1];
			_tuple$4 = unescape(username, 5);
			username = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = ptrType$1.nil;
				_tmp$13 = "";
				_tmp$14 = err;
				user = _tmp$12;
				host = _tmp$13;
				err = _tmp$14;
				$s = -1; return [user, host, err];
			}
			_tuple$5 = unescape(password, 5);
			password = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$15 = ptrType$1.nil;
				_tmp$16 = "";
				_tmp$17 = err;
				user = _tmp$15;
				host = _tmp$16;
				err = _tmp$17;
				$s = -1; return [user, host, err];
			}
			user = UserPassword(username, password);
		}
		_tmp$18 = user;
		_tmp$19 = host;
		_tmp$20 = $ifaceNil;
		user = _tmp$18;
		host = _tmp$19;
		err = _tmp$20;
		$s = -1; return [user, host, err];
		/* */ } return; } var $f = {$blk: parseAuthority, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, authority, err, host, i, password, user, userinfo, username, $s};return $f;
	};
	parseHost = function(host) {
		var {$24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, colonPort, colonPort$1, err, err$1, host, host1, host2, host3, i, i$1, zone, $s, $r, $c} = $restore(this, {host});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (strings.HasPrefix(host, "[")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (strings.HasPrefix(host, "[")) { */ case 1:
			i = strings.LastIndex(host, "]");
			if (i < 0) {
				$s = -1; return ["", errors.New("missing ']' in host")];
			}
			colonPort = $substring(host, (i + 1 >> 0));
			/* */ if (!validOptionalPort(colonPort)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!validOptionalPort(colonPort)) { */ case 4:
				_r = fmt.Errorf("invalid port %q after host", new sliceType([new $String(colonPort)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = ["", _r];
				$s = 7; case 7: return $24r;
			/* } */ case 5:
			zone = strings.Index($substring(host, 0, i), "%25");
			if (zone >= 0) {
				_tuple = unescape($substring(host, 0, zone), 3);
				host1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				_tuple$1 = unescape($substring(host, zone, i), 4);
				host2 = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				_tuple$2 = unescape($substring(host, i), 3);
				host3 = _tuple$2[0];
				err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				$s = -1; return [host1 + host2 + host3, $ifaceNil];
			}
			$s = 3; continue;
		/* } else { */ case 2:
			i$1 = strings.LastIndex(host, ":");
			/* */ if (!((i$1 === -1))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!((i$1 === -1))) { */ case 8:
				colonPort$1 = $substring(host, i$1);
				/* */ if (!validOptionalPort(colonPort$1)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!validOptionalPort(colonPort$1)) { */ case 10:
					_r$1 = fmt.Errorf("invalid port %q after host", new sliceType([new $String(colonPort$1)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r$1 = ["", _r$1];
					$s = 13; case 13: return $24r$1;
				/* } */ case 11:
			/* } */ case 9:
		/* } */ case 3:
		err$1 = $ifaceNil;
		_tuple$3 = unescape(host, 3);
		host = _tuple$3[0];
		err$1 = _tuple$3[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return ["", err$1];
		}
		$s = -1; return [host, $ifaceNil];
		/* */ } return; } var $f = {$blk: parseHost, $c: true, $r, $24r, $24r$1, _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, colonPort, colonPort$1, err, err$1, host, host1, host2, host3, i, i$1, zone, $s};return $f;
	};
	URL.ptr.prototype.setPath = function(p) {
		var _tuple, err, escp, p, path$1, u;
		u = this;
		_tuple = unescape(p, 1);
		path$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		u.Path = path$1;
		escp = escape(path$1, 1);
		if (p === escp) {
			u.RawPath = "";
		} else {
			u.RawPath = p;
		}
		return $ifaceNil;
	};
	URL.prototype.setPath = function(p) { return this.$val.setPath(p); };
	URL.ptr.prototype.EscapedPath = function() {
		var _tuple, err, p, u;
		u = this;
		if (!(u.RawPath === "") && validEncoded(u.RawPath, 1)) {
			_tuple = unescape(u.RawPath, 1);
			p = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && p === u.Path) {
				return u.RawPath;
			}
		}
		if (u.Path === "*") {
			return "*";
		}
		return escape(u.Path, 1);
	};
	URL.prototype.EscapedPath = function() { return this.$val.EscapedPath(); };
	validEncoded = function(s, mode) {
		var _1, i, mode, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if ((_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (58)) || (_1 === (64))) {
			} else if ((_1 === (91)) || (_1 === (93))) {
			} else if (_1 === (37)) {
			} else if (shouldEscape(s.charCodeAt(i), mode)) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	URL.ptr.prototype.setFragment = function(f) {
		var _tuple, err, escf, f, frag, u;
		u = this;
		_tuple = unescape(f, 7);
		frag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		u.Fragment = frag;
		escf = escape(frag, 7);
		if (f === escf) {
			u.RawFragment = "";
		} else {
			u.RawFragment = f;
		}
		return $ifaceNil;
	};
	URL.prototype.setFragment = function(f) { return this.$val.setFragment(f); };
	URL.ptr.prototype.EscapedFragment = function() {
		var _tuple, err, f, u;
		u = this;
		if (!(u.RawFragment === "") && validEncoded(u.RawFragment, 7)) {
			_tuple = unescape(u.RawFragment, 7);
			f = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && f === u.Fragment) {
				return u.RawFragment;
			}
		}
		return escape(u.Fragment, 7);
	};
	URL.prototype.EscapedFragment = function() { return this.$val.EscapedFragment(); };
	validOptionalPort = function(port) {
		var _i, _ref, _rune, b, port;
		if (port === "") {
			return true;
		}
		if (!((port.charCodeAt(0) === 58))) {
			return false;
		}
		_ref = $substring(port, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			b = _rune[0];
			if (b < 48 || b > 57) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	URL.ptr.prototype.String = function() {
		var _tuple, buf, h, path$1, segment, u, ui;
		u = this;
		buf = new strings.Builder.ptr(ptrType.nil, sliceType$1.nil);
		if (!(u.Scheme === "")) {
			buf.WriteString(u.Scheme);
			buf.WriteByte(58);
		}
		if (!(u.Opaque === "")) {
			buf.WriteString(u.Opaque);
		} else {
			if (!(u.Scheme === "") || !(u.Host === "") || !(u.User === ptrType$1.nil)) {
				if (u.OmitHost && u.Host === "" && u.User === ptrType$1.nil) {
				} else {
					if (!(u.Host === "") || !(u.Path === "") || !(u.User === ptrType$1.nil)) {
						buf.WriteString("//");
					}
					ui = u.User;
					if (!(ui === ptrType$1.nil)) {
						buf.WriteString(ui.String());
						buf.WriteByte(64);
					}
					h = u.Host;
					if (!(h === "")) {
						buf.WriteString(escape(h, 3));
					}
				}
			}
			path$1 = u.EscapedPath();
			if (!(path$1 === "") && !((path$1.charCodeAt(0) === 47)) && !(u.Host === "")) {
				buf.WriteByte(47);
			}
			if (buf.Len() === 0) {
				_tuple = strings.Cut(path$1, "/");
				segment = _tuple[0];
				if (strings.Contains(segment, ":")) {
					buf.WriteString("./");
				}
			}
			buf.WriteString(path$1);
		}
		if (u.ForceQuery || !(u.RawQuery === "")) {
			buf.WriteByte(63);
			buf.WriteString(u.RawQuery);
		}
		if (!(u.Fragment === "")) {
			buf.WriteByte(35);
			buf.WriteString(u.EscapedFragment());
		}
		return buf.String();
	};
	URL.prototype.String = function() { return this.$val.String(); };
	URL.ptr.prototype.Redacted = function() {
		var _tuple, has, ru, u;
		u = this;
		if (u === ptrType$2.nil) {
			return "";
		}
		ru = $clone(u, URL);
		_tuple = ru.User.Password();
		has = _tuple[1];
		if (has) {
			ru.User = UserPassword(ru.User.Username(), "xxxxx");
		}
		return ru.String();
	};
	URL.prototype.Redacted = function() { return this.$val.Redacted(); };
	Values.prototype.Get = function(key) {
		var _entry, key, v, vs;
		v = this.$val;
		if (v === false) {
			return "";
		}
		vs = (_entry = $mapIndex(v,$String.keyFor(key)), _entry !== undefined ? _entry.v : sliceType$2.nil);
		if (vs.$length === 0) {
			return "";
		}
		return (0 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 0]);
	};
	$ptrType(Values).prototype.Get = function(key) { return new Values(this.$get()).Get(key); };
	Values.prototype.Set = function(key, value) {
		var _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: new sliceType$2([value]) });
	};
	$ptrType(Values).prototype.Set = function(key, value) { return new Values(this.$get()).Set(key, value); };
	Values.prototype.Add = function(key, value) {
		var _entry, _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: $append((_entry = $mapIndex(v,$String.keyFor(key)), _entry !== undefined ? _entry.v : sliceType$2.nil), value) });
	};
	$ptrType(Values).prototype.Add = function(key, value) { return new Values(this.$get()).Add(key, value); };
	Values.prototype.Del = function(key) {
		var key, v;
		v = this.$val;
		$mapDelete(v, $String.keyFor(key));
	};
	$ptrType(Values).prototype.Del = function(key) { return new Values(this.$get()).Del(key); };
	Values.prototype.Has = function(key) {
		var _entry, _tuple, key, ok, v;
		v = this.$val;
		_tuple = (_entry = $mapIndex(v,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [sliceType$2.nil, false]);
		ok = _tuple[1];
		return ok;
	};
	$ptrType(Values).prototype.Has = function(key) { return new Values(this.$get()).Has(key); };
	ParseQuery = function(query) {
		var {_r, err, m, query, $s, $r, $c} = $restore(this, {query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = new $global.Map();
		_r = parseQuery(m, query); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$s = -1; return [m, err];
		/* */ } return; } var $f = {$blk: ParseQuery, $c: true, $r, _r, err, m, query, $s};return $f;
	};
	$pkg.ParseQuery = ParseQuery;
	parseQuery = function(m, query) {
		var {_entry, _key, _r, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err1, key, m, query, value, $s, $r, $c} = $restore(this, {m, query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		/* while (true) { */ case 1:
			/* if (!(!(query === ""))) { break; } */ if(!(!(query === ""))) { $s = 2; continue; }
			key = "";
			_tuple = strings.Cut(query, "&");
			key = _tuple[0];
			query = _tuple[1];
			/* */ if (strings.Contains(key, ";")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (strings.Contains(key, ";")) { */ case 3:
				_r = fmt.Errorf("invalid semicolon separator in query", sliceType.nil); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			if (key === "") {
				/* continue; */ $s = 1; continue;
			}
			_tuple$1 = strings.Cut(key, "=");
			key = _tuple$1[0];
			value = _tuple$1[1];
			_tuple$2 = QueryUnescape(key);
			key = _tuple$2[0];
			err1 = _tuple$2[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				/* continue; */ $s = 1; continue;
			}
			_tuple$3 = QueryUnescape(value);
			value = _tuple$3[0];
			err1 = _tuple$3[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				/* continue; */ $s = 1; continue;
			}
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: $append((_entry = $mapIndex(m,$String.keyFor(key)), _entry !== undefined ? _entry.v : sliceType$2.nil), value) });
		$s = 1; continue;
		case 2:
		err = err;
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: parseQuery, $c: true, $r, _entry, _key, _r, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err1, key, m, query, value, $s};return $f;
	};
	Values.prototype.Encode = function() {
		var {_entry, _entry$1, _i, _i$1, _i$2, _key, _keys, _ref, _ref$1, _ref$2, _size, buf, k, k$1, keyEscaped, keys, v, v$1, vs, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this.$val;
		if (v === false) {
			$s = -1; return "";
		}
		buf = new strings.Builder.ptr(ptrType.nil, sliceType$1.nil);
		keys = $makeSlice(sliceType$2, 0, (v ? v.size : 0));
		_ref = v;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			keys = $append(keys, k);
			_i++;
		}
		$r = sort.Strings(keys); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = keys;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			k$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			vs = (_entry$1 = $mapIndex(v,$String.keyFor(k$1)), _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil);
			keyEscaped = QueryEscape(k$1);
			_ref$2 = vs;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				v$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (buf.Len() > 0) {
					buf.WriteByte(38);
				}
				buf.WriteString(keyEscaped);
				buf.WriteByte(61);
				buf.WriteString(QueryEscape(v$1));
				_i$2++;
			}
			_i$1++;
		}
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: Values.prototype.Encode, $c: true, $r, _entry, _entry$1, _i, _i$1, _i$2, _key, _keys, _ref, _ref$1, _ref$2, _size, buf, k, k$1, keyEscaped, keys, v, v$1, vs, $s};return $f;
	};
	$ptrType(Values).prototype.Encode = function() { return new Values(this.$get()).Encode(); };
	resolvePath = function(base, ref) {
		var _tuple, base, dst, elem, first, found, full, i, index, r, ref, remaining, str;
		full = "";
		if (ref === "") {
			full = base;
		} else if (!((ref.charCodeAt(0) === 47))) {
			i = strings.LastIndex(base, "/");
			full = $substring(base, 0, (i + 1 >> 0)) + ref;
		} else {
			full = ref;
		}
		if (full === "") {
			return "";
		}
		elem = "";
		dst = new strings.Builder.ptr(ptrType.nil, sliceType$1.nil);
		first = true;
		remaining = full;
		dst.WriteByte(47);
		found = true;
		while (true) {
			if (!(found)) { break; }
			_tuple = strings.Cut(remaining, "/");
			elem = _tuple[0];
			remaining = _tuple[1];
			found = _tuple[2];
			if (elem === ".") {
				first = false;
				continue;
			}
			if (elem === "..") {
				str = $substring(dst.String(), 1);
				index = strings.LastIndexByte(str, 47);
				dst.Reset();
				dst.WriteByte(47);
				if (index === -1) {
					first = true;
				} else {
					dst.WriteString($substring(str, 0, index));
				}
			} else {
				if (!first) {
					dst.WriteByte(47);
				}
				dst.WriteString(elem);
				first = false;
			}
		}
		if (elem === "." || elem === "..") {
			dst.WriteByte(47);
		}
		r = dst.String();
		if (r.length > 1 && (r.charCodeAt(1) === 47)) {
			r = $substring(r, 1);
		}
		return r;
	};
	URL.ptr.prototype.IsAbs = function() {
		var u;
		u = this;
		return !(u.Scheme === "");
	};
	URL.prototype.IsAbs = function() { return this.$val.IsAbs(); };
	URL.ptr.prototype.Parse = function(ref) {
		var {_r, _tuple, err, ref, refURL, u, $s, $r, $c} = $restore(this, {ref});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		u = this;
		_r = Parse(ref); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		refURL = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err];
		}
		$s = -1; return [u.ResolveReference(refURL), $ifaceNil];
		/* */ } return; } var $f = {$blk: URL.ptr.prototype.Parse, $c: true, $r, _r, _tuple, err, ref, refURL, u, $s};return $f;
	};
	URL.prototype.Parse = function(ref) { return this.$val.Parse(ref); };
	URL.ptr.prototype.ResolveReference = function(ref) {
		var ref, u, url;
		u = this;
		url = $clone(ref, URL);
		if (ref.Scheme === "") {
			url.Scheme = u.Scheme;
		}
		if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ptrType$1.nil)) {
			url.setPath(resolvePath(ref.EscapedPath(), ""));
			return url;
		}
		if (!(ref.Opaque === "")) {
			url.User = ptrType$1.nil;
			url.Host = "";
			url.Path = "";
			return url;
		}
		if (ref.Path === "" && !ref.ForceQuery && ref.RawQuery === "") {
			url.RawQuery = u.RawQuery;
			if (ref.Fragment === "") {
				url.Fragment = u.Fragment;
				url.RawFragment = u.RawFragment;
			}
		}
		url.Host = u.Host;
		url.User = u.User;
		url.setPath(resolvePath(u.EscapedPath(), ref.EscapedPath()));
		return url;
	};
	URL.prototype.ResolveReference = function(ref) { return this.$val.ResolveReference(ref); };
	URL.ptr.prototype.Query = function() {
		var {_r, _tuple, u, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		u = this;
		_r = ParseQuery(u.RawQuery); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: URL.ptr.prototype.Query, $c: true, $r, _r, _tuple, u, v, $s};return $f;
	};
	URL.prototype.Query = function() { return this.$val.Query(); };
	URL.ptr.prototype.RequestURI = function() {
		var result, u;
		u = this;
		result = u.Opaque;
		if (result === "") {
			result = u.EscapedPath();
			if (result === "") {
				result = "/";
			}
		} else {
			if (strings.HasPrefix(result, "//")) {
				result = u.Scheme + ":" + result;
			}
		}
		if (u.ForceQuery || !(u.RawQuery === "")) {
			result = result + ("?" + u.RawQuery);
		}
		return result;
	};
	URL.prototype.RequestURI = function() { return this.$val.RequestURI(); };
	URL.ptr.prototype.Hostname = function() {
		var _tuple, host, u;
		u = this;
		_tuple = splitHostPort(u.Host);
		host = _tuple[0];
		return host;
	};
	URL.prototype.Hostname = function() { return this.$val.Hostname(); };
	URL.ptr.prototype.Port = function() {
		var _tuple, port, u;
		u = this;
		_tuple = splitHostPort(u.Host);
		port = _tuple[1];
		return port;
	};
	URL.prototype.Port = function() { return this.$val.Port(); };
	splitHostPort = function(hostPort) {
		var _tmp, _tmp$1, colon, host, hostPort, port;
		host = "";
		port = "";
		host = hostPort;
		colon = strings.LastIndexByte(host, 58);
		if (!((colon === -1)) && validOptionalPort($substring(host, colon))) {
			_tmp = $substring(host, 0, colon);
			_tmp$1 = $substring(host, (colon + 1 >> 0));
			host = _tmp;
			port = _tmp$1;
		}
		if (strings.HasPrefix(host, "[") && strings.HasSuffix(host, "]")) {
			host = $substring(host, 1, (host.length - 1 >> 0));
		}
		return [host, port];
	};
	URL.ptr.prototype.MarshalBinary = function() {
		var _tmp, _tmp$1, err, text, u;
		text = sliceType$1.nil;
		err = $ifaceNil;
		u = this;
		_tmp = (new sliceType$1($stringToBytes(u.String())));
		_tmp$1 = $ifaceNil;
		text = _tmp;
		err = _tmp$1;
		return [text, err];
	};
	URL.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	URL.ptr.prototype.UnmarshalBinary = function(text) {
		var {_r, _tuple, err, text, u, u1, $s, $r, $c} = $restore(this, {text});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		u = this;
		_r = Parse(($bytesToString(text))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		URL.copy(u, u1);
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: URL.ptr.prototype.UnmarshalBinary, $c: true, $r, _r, _tuple, err, text, u, u1, $s};return $f;
	};
	URL.prototype.UnmarshalBinary = function(text) { return this.$val.UnmarshalBinary(text); };
	URL.ptr.prototype.JoinPath = function(elem) {
		var elem, p, u, url, x;
		u = this;
		elem = $appendSlice(new sliceType$2([u.EscapedPath()]), elem);
		p = "";
		if (!strings.HasPrefix((0 >= elem.$length ? ($throwRuntimeError("index out of range"), undefined) : elem.$array[elem.$offset + 0]), "/")) {
			(0 >= elem.$length ? ($throwRuntimeError("index out of range"), undefined) : elem.$array[elem.$offset + 0] = "/" + (0 >= elem.$length ? ($throwRuntimeError("index out of range"), undefined) : elem.$array[elem.$offset + 0]));
			p = $substring(path.Join(elem), 1);
		} else {
			p = path.Join(elem);
		}
		if (strings.HasSuffix((x = elem.$length - 1 >> 0, ((x < 0 || x >= elem.$length) ? ($throwRuntimeError("index out of range"), undefined) : elem.$array[elem.$offset + x])), "/") && !strings.HasSuffix(p, "/")) {
			p = p + ("/");
		}
		url = $clone(u, URL);
		url.setPath(p);
		return url;
	};
	URL.prototype.JoinPath = function(elem) { return this.$val.JoinPath(elem); };
	validUserinfo = function(s) {
		var _1, _i, _ref, _rune, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (65 <= r && r <= 90) {
				_i += _rune[1];
				continue;
			}
			if (97 <= r && r <= 122) {
				_i += _rune[1];
				continue;
			}
			if (48 <= r && r <= 57) {
				_i += _rune[1];
				continue;
			}
			_1 = r;
			if ((_1 === (45)) || (_1 === (46)) || (_1 === (95)) || (_1 === (58)) || (_1 === (126)) || (_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (37)) || (_1 === (64))) {
				_i += _rune[1];
				continue;
			} else {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	stringContainsCTLByte = function(s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (b < 32 || (b === 127)) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	ptrType$3.methods = [{prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	EscapeError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InvalidHostError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "setPath", name: "setPath", pkg: "net/url", typ: $funcType([$String], [$error], false)}, {prop: "EscapedPath", name: "EscapedPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "setFragment", name: "setFragment", pkg: "net/url", typ: $funcType([$String], [$error], false)}, {prop: "EscapedFragment", name: "EscapedFragment", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Redacted", name: "Redacted", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsAbs", name: "IsAbs", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType$2, $error], false)}, {prop: "ResolveReference", name: "ResolveReference", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Query", name: "Query", pkg: "", typ: $funcType([], [Values], false)}, {prop: "RequestURI", name: "RequestURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Hostname", name: "Hostname", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Port", name: "Port", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "JoinPath", name: "JoinPath", pkg: "", typ: $funcType([sliceType$2], [ptrType$2], true)}];
	ptrType$1.methods = [{prop: "Username", name: "Username", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Password", name: "Password", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Values.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Del", name: "Del", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Has", name: "Has", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "URL", name: "URL", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	URL.init("", [{prop: "Scheme", name: "Scheme", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Opaque", name: "Opaque", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "User", name: "User", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Host", name: "Host", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RawPath", name: "RawPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "OmitHost", name: "OmitHost", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "ForceQuery", name: "ForceQuery", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "RawQuery", name: "RawQuery", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Fragment", name: "Fragment", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RawFragment", name: "RawFragment", embedded: false, exported: true, typ: $String, tag: ""}]);
	Userinfo.init("net/url", [{prop: "username", name: "username", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "password", name: "password", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "passwordSet", name: "passwordSet", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Values.init($String, sliceType$2);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = path.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, fs, os, runtime, sort, strings, syscall, utf8, lazybuf, sliceType$1, ptrType, volumeNameLen, join, Clean, FromSlash, Join;
	errors = $packages["errors"];
	fs = $packages["io/fs"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(lazybuf);
	volumeNameLen = function(path) {
		var path;
		return 0;
	};
	join = function(elem) {
		var _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, i, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				if (false && (out.w === 0) && (out.volLen === 0) && !((r === 0))) {
					i = r;
					while (true) {
						if (!(i < n && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
						if (path.charCodeAt(i) === 58) {
							out.append(46);
							out.append(47);
							break;
						}
						i = i + (1) >> 0;
					}
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var path;
		if (true) {
			return path;
		}
		return strings.ReplaceAll(path, "/", "/");
	};
	$pkg.FromSlash = FromSlash;
	Join = function(elem) {
		var elem;
		return join(elem);
	};
	$pkg.Join = Join;
	ptrType.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fs.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/x509"] = (function() {
	var $pkg = {}, $init, bytes, crypto, aes, cipher, des, dsa, ecdsa, ed25519, elliptic, md5, rsa, sha1, sha256, sha512, pkix, asn1, hex, pem, errors, fmt, godebug, io, fs, big, net, url, os, filepath, reflect, runtime, strconv, strings, sync, time, unicode, utf16, utf8, cryptobyte, asn1$1, certificate, tbsCertificate, validity, publicKeyInfo, authKeyId, SignatureAlgorithm, PublicKeyAlgorithm, pssParameters, KeyUsage, ExtKeyUsage, Certificate, InsecureAlgorithmError, ConstraintViolationError, UnhandledCriticalExtension, basicConstraints, policyInformation, authorityInfoAccess, distributionPoint, distributionPointName, InvalidReason, CertificateInvalidError, HostnameError, UnknownAuthorityError, SystemRootsError, VerifyOptions, rfc2821Mailbox, pkcs1PrivateKey, pkcs1AdditionalRSAPrime, pkcs1PublicKey, sum224, CertPool, lazyCert, privateKey, pubKeyEqual, ptrType, structType, sliceType, sliceType$1, structType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, ptrType$2, ptrType$3, sliceType$6, ptrType$4, sliceType$7, sliceType$8, sliceType$9, ptrType$5, ptrType$6, sliceType$10, arrayType, sliceType$11, sliceType$12, arrayType$1, ptrType$7, ptrType$8, sliceType$13, ptrType$9, sliceType$15, sliceType$18, ptrType$13, sliceType$19, ptrType$14, sliceType$20, ptrType$16, ptrType$17, sliceType$21, sliceType$22, ptrType$18, ptrType$19, sliceType$23, sliceType$24, sliceType$27, ptrType$24, ptrType$25, sliceType$28, sliceType$29, structType$3, sliceType$30, funcType, ptrType$26, funcType$2, mapType, mapType$1, publicKeyAlgoName, oidSignatureMD2WithRSA, oidSignatureMD5WithRSA, oidSignatureSHA1WithRSA, oidSignatureSHA256WithRSA, oidSignatureSHA384WithRSA, oidSignatureSHA512WithRSA, oidSignatureRSAPSS, oidSignatureDSAWithSHA1, oidSignatureDSAWithSHA256, oidSignatureECDSAWithSHA1, oidSignatureECDSAWithSHA256, oidSignatureECDSAWithSHA384, oidSignatureECDSAWithSHA512, oidSignatureEd25519, oidSHA256, oidSHA384, oidSHA512, oidMGF1, oidISOSignatureSHA1WithRSA, signatureAlgorithmDetails, hashToPSSParameters, oidPublicKeyRSA, oidPublicKeyDSA, oidPublicKeyECDSA, oidPublicKeyEd25519, oidNamedCurveP224, oidNamedCurveP256, oidNamedCurveP384, oidNamedCurveP521, oidExtKeyUsageAny, oidExtKeyUsageServerAuth, oidExtKeyUsageClientAuth, oidExtKeyUsageCodeSigning, oidExtKeyUsageEmailProtection, oidExtKeyUsageIPSECEndSystem, oidExtKeyUsageIPSECTunnel, oidExtKeyUsageIPSECUser, oidExtKeyUsageTimeStamping, oidExtKeyUsageOCSPSigning, oidExtKeyUsageMicrosoftServerGatedCrypto, oidExtKeyUsageNetscapeServerGatedCrypto, oidExtKeyUsageMicrosoftCommercialCodeSigning, oidExtKeyUsageMicrosoftKernelCodeSigning, extKeyUsageOIDs, oidExtensionSubjectKeyId, oidExtensionKeyUsage, oidExtensionExtendedKeyUsage, oidExtensionAuthorityKeyId, oidExtensionBasicConstraints, oidExtensionSubjectAltName, oidExtensionCertificatePolicies, oidExtensionNameConstraints, oidExtensionCRLDistributionPoints, oidExtensionAuthorityInfoAccess, oidAuthorityInfoAccessOcsp, oidAuthorityInfoAccessIssuers, emptyASN1Subject, errNotParsed, certFiles, certDirectories, once, systemRoots, systemRootsErr, marshalPublicKey, getSignatureAlgorithmFromAI, getPublicKeyAlgorithmFromOID, namedCurveFromOID, oidFromNamedCurve, extKeyUsageFromOID, oidFromExtKeyUsage, signaturePublicKeyAlgoMismatchError, checkSignature, reverseBitsInAByte, asn1BitLength, oidInExtensions, marshalSANs, isIA5String, buildCertExtensions, marshalKeyUsage, marshalExtKeyUsage, marshalBasicConstraints, marshalCertificatePolicies, subjectBytes, signingParamsForPublicKey, CreateCertificate, parseRFC2821Mailbox, domainToReverseLabels, matchEmailConstraint, matchURIConstraint, matchIPConstraint, matchDomainConstraint, appendToFreshChain, alreadyInChain, validHostnamePattern, validHostnameInput, validHostname, matchExactly, matchHostnames, toLowerCaseASCII, checkChainForKeyUsage, loadSystemRoots, readUniqueDirectoryEntries, isSameDirSymlink, systemRootsPool, initSystemRoots, MarshalPKCS1PrivateKey, isPrintable, parseASN1String, parseName, parseAI, parseTime, parseValidity, parseExtension, parsePublicKey, parseKeyUsageExtension, parseBasicConstraintsExtension, forEachSAN, parseSANExtension, parseExtKeyUsageExtension, parseCertificatePoliciesExtension, isValidIPMask, parseNameConstraintsExtension, processExtensions, parseCertificate, ParseCertificate, boringAllowCert, NewCertPool;
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	aes = $packages["crypto/aes"];
	cipher = $packages["crypto/cipher"];
	des = $packages["crypto/des"];
	dsa = $packages["crypto/dsa"];
	ecdsa = $packages["crypto/ecdsa"];
	ed25519 = $packages["crypto/ed25519"];
	elliptic = $packages["crypto/elliptic"];
	md5 = $packages["crypto/md5"];
	rsa = $packages["crypto/rsa"];
	sha1 = $packages["crypto/sha1"];
	sha256 = $packages["crypto/sha256"];
	sha512 = $packages["crypto/sha512"];
	pkix = $packages["crypto/x509/pkix"];
	asn1 = $packages["encoding/asn1"];
	hex = $packages["encoding/hex"];
	pem = $packages["encoding/pem"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	godebug = $packages["internal/godebug"];
	io = $packages["io"];
	fs = $packages["io/fs"];
	big = $packages["math/big"];
	net = $packages["net"];
	url = $packages["net/url"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	cryptobyte = $packages["vendor/golang.org/x/crypto/cryptobyte"];
	asn1$1 = $packages["vendor/golang.org/x/crypto/cryptobyte/asn1"];
	certificate = $pkg.certificate = $newType(0, $kindStruct, "x509.certificate", true, "crypto/x509", false, function(Raw_, TBSCertificate_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.TBSCertificate = new tbsCertificate.ptr(asn1.RawContent.nil, 0, ptrType$1.nil, new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)), new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil), new validity.ptr(new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil)), new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil), new publicKeyInfo.ptr(asn1.RawContent.nil, new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)), new asn1.BitString.ptr(sliceType$1.nil, 0)), new asn1.BitString.ptr(sliceType$1.nil, 0), new asn1.BitString.ptr(sliceType$1.nil, 0), sliceType$8.nil);
			this.SignatureAlgorithm = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			this.SignatureValue = new asn1.BitString.ptr(sliceType$1.nil, 0);
			return;
		}
		this.Raw = Raw_;
		this.TBSCertificate = TBSCertificate_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.SignatureValue = SignatureValue_;
	});
	tbsCertificate = $pkg.tbsCertificate = $newType(0, $kindStruct, "x509.tbsCertificate", true, "crypto/x509", false, function(Raw_, Version_, SerialNumber_, SignatureAlgorithm_, Issuer_, Validity_, Subject_, PublicKey_, UniqueId_, SubjectUniqueId_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Version = 0;
			this.SerialNumber = ptrType$1.nil;
			this.SignatureAlgorithm = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			this.Issuer = new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil);
			this.Validity = new validity.ptr(new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil));
			this.Subject = new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil);
			this.PublicKey = new publicKeyInfo.ptr(asn1.RawContent.nil, new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)), new asn1.BitString.ptr(sliceType$1.nil, 0));
			this.UniqueId = new asn1.BitString.ptr(sliceType$1.nil, 0);
			this.SubjectUniqueId = new asn1.BitString.ptr(sliceType$1.nil, 0);
			this.Extensions = sliceType$8.nil;
			return;
		}
		this.Raw = Raw_;
		this.Version = Version_;
		this.SerialNumber = SerialNumber_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.Issuer = Issuer_;
		this.Validity = Validity_;
		this.Subject = Subject_;
		this.PublicKey = PublicKey_;
		this.UniqueId = UniqueId_;
		this.SubjectUniqueId = SubjectUniqueId_;
		this.Extensions = Extensions_;
	});
	validity = $pkg.validity = $newType(0, $kindStruct, "x509.validity", true, "crypto/x509", false, function(NotBefore_, NotAfter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NotBefore = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			this.NotAfter = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			return;
		}
		this.NotBefore = NotBefore_;
		this.NotAfter = NotAfter_;
	});
	publicKeyInfo = $pkg.publicKeyInfo = $newType(0, $kindStruct, "x509.publicKeyInfo", true, "crypto/x509", false, function(Raw_, Algorithm_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Algorithm = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			this.PublicKey = new asn1.BitString.ptr(sliceType$1.nil, 0);
			return;
		}
		this.Raw = Raw_;
		this.Algorithm = Algorithm_;
		this.PublicKey = PublicKey_;
	});
	authKeyId = $pkg.authKeyId = $newType(0, $kindStruct, "x509.authKeyId", true, "crypto/x509", false, function(Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = sliceType$1.nil;
			return;
		}
		this.Id = Id_;
	});
	SignatureAlgorithm = $pkg.SignatureAlgorithm = $newType(4, $kindInt, "x509.SignatureAlgorithm", true, "crypto/x509", true, null);
	PublicKeyAlgorithm = $pkg.PublicKeyAlgorithm = $newType(4, $kindInt, "x509.PublicKeyAlgorithm", true, "crypto/x509", true, null);
	pssParameters = $pkg.pssParameters = $newType(0, $kindStruct, "x509.pssParameters", true, "crypto/x509", false, function(Hash_, MGF_, SaltLength_, TrailerField_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hash = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			this.MGF = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			this.SaltLength = 0;
			this.TrailerField = 0;
			return;
		}
		this.Hash = Hash_;
		this.MGF = MGF_;
		this.SaltLength = SaltLength_;
		this.TrailerField = TrailerField_;
	});
	KeyUsage = $pkg.KeyUsage = $newType(4, $kindInt, "x509.KeyUsage", true, "crypto/x509", true, null);
	ExtKeyUsage = $pkg.ExtKeyUsage = $newType(4, $kindInt, "x509.ExtKeyUsage", true, "crypto/x509", true, null);
	Certificate = $pkg.Certificate = $newType(0, $kindStruct, "x509.Certificate", true, "crypto/x509", true, function(Raw_, RawTBSCertificate_, RawSubjectPublicKeyInfo_, RawSubject_, RawIssuer_, Signature_, SignatureAlgorithm_, PublicKeyAlgorithm_, PublicKey_, Version_, SerialNumber_, Issuer_, Subject_, NotBefore_, NotAfter_, KeyUsage_, Extensions_, ExtraExtensions_, UnhandledCriticalExtensions_, ExtKeyUsage_, UnknownExtKeyUsage_, BasicConstraintsValid_, IsCA_, MaxPathLen_, MaxPathLenZero_, SubjectKeyId_, AuthorityKeyId_, OCSPServer_, IssuingCertificateURL_, DNSNames_, EmailAddresses_, IPAddresses_, URIs_, PermittedDNSDomainsCritical_, PermittedDNSDomains_, ExcludedDNSDomains_, PermittedIPRanges_, ExcludedIPRanges_, PermittedEmailAddresses_, ExcludedEmailAddresses_, PermittedURIDomains_, ExcludedURIDomains_, CRLDistributionPoints_, PolicyIdentifiers_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = sliceType$1.nil;
			this.RawTBSCertificate = sliceType$1.nil;
			this.RawSubjectPublicKeyInfo = sliceType$1.nil;
			this.RawSubject = sliceType$1.nil;
			this.RawIssuer = sliceType$1.nil;
			this.Signature = sliceType$1.nil;
			this.SignatureAlgorithm = 0;
			this.PublicKeyAlgorithm = 0;
			this.PublicKey = $ifaceNil;
			this.Version = 0;
			this.SerialNumber = ptrType$1.nil;
			this.Issuer = new pkix.Name.ptr(sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, "", "", sliceType$15.nil, sliceType$15.nil);
			this.Subject = new pkix.Name.ptr(sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, "", "", sliceType$15.nil, sliceType$15.nil);
			this.NotBefore = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			this.NotAfter = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			this.KeyUsage = 0;
			this.Extensions = sliceType$8.nil;
			this.ExtraExtensions = sliceType$8.nil;
			this.UnhandledCriticalExtensions = sliceType$11.nil;
			this.ExtKeyUsage = sliceType$22.nil;
			this.UnknownExtKeyUsage = sliceType$11.nil;
			this.BasicConstraintsValid = false;
			this.IsCA = false;
			this.MaxPathLen = 0;
			this.MaxPathLenZero = false;
			this.SubjectKeyId = sliceType$1.nil;
			this.AuthorityKeyId = sliceType$1.nil;
			this.OCSPServer = sliceType$4.nil;
			this.IssuingCertificateURL = sliceType$4.nil;
			this.DNSNames = sliceType$4.nil;
			this.EmailAddresses = sliceType$4.nil;
			this.IPAddresses = sliceType$18.nil;
			this.URIs = sliceType$19.nil;
			this.PermittedDNSDomainsCritical = false;
			this.PermittedDNSDomains = sliceType$4.nil;
			this.ExcludedDNSDomains = sliceType$4.nil;
			this.PermittedIPRanges = sliceType$28.nil;
			this.ExcludedIPRanges = sliceType$28.nil;
			this.PermittedEmailAddresses = sliceType$4.nil;
			this.ExcludedEmailAddresses = sliceType$4.nil;
			this.PermittedURIDomains = sliceType$4.nil;
			this.ExcludedURIDomains = sliceType$4.nil;
			this.CRLDistributionPoints = sliceType$4.nil;
			this.PolicyIdentifiers = sliceType$11.nil;
			return;
		}
		this.Raw = Raw_;
		this.RawTBSCertificate = RawTBSCertificate_;
		this.RawSubjectPublicKeyInfo = RawSubjectPublicKeyInfo_;
		this.RawSubject = RawSubject_;
		this.RawIssuer = RawIssuer_;
		this.Signature = Signature_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.PublicKeyAlgorithm = PublicKeyAlgorithm_;
		this.PublicKey = PublicKey_;
		this.Version = Version_;
		this.SerialNumber = SerialNumber_;
		this.Issuer = Issuer_;
		this.Subject = Subject_;
		this.NotBefore = NotBefore_;
		this.NotAfter = NotAfter_;
		this.KeyUsage = KeyUsage_;
		this.Extensions = Extensions_;
		this.ExtraExtensions = ExtraExtensions_;
		this.UnhandledCriticalExtensions = UnhandledCriticalExtensions_;
		this.ExtKeyUsage = ExtKeyUsage_;
		this.UnknownExtKeyUsage = UnknownExtKeyUsage_;
		this.BasicConstraintsValid = BasicConstraintsValid_;
		this.IsCA = IsCA_;
		this.MaxPathLen = MaxPathLen_;
		this.MaxPathLenZero = MaxPathLenZero_;
		this.SubjectKeyId = SubjectKeyId_;
		this.AuthorityKeyId = AuthorityKeyId_;
		this.OCSPServer = OCSPServer_;
		this.IssuingCertificateURL = IssuingCertificateURL_;
		this.DNSNames = DNSNames_;
		this.EmailAddresses = EmailAddresses_;
		this.IPAddresses = IPAddresses_;
		this.URIs = URIs_;
		this.PermittedDNSDomainsCritical = PermittedDNSDomainsCritical_;
		this.PermittedDNSDomains = PermittedDNSDomains_;
		this.ExcludedDNSDomains = ExcludedDNSDomains_;
		this.PermittedIPRanges = PermittedIPRanges_;
		this.ExcludedIPRanges = ExcludedIPRanges_;
		this.PermittedEmailAddresses = PermittedEmailAddresses_;
		this.ExcludedEmailAddresses = ExcludedEmailAddresses_;
		this.PermittedURIDomains = PermittedURIDomains_;
		this.ExcludedURIDomains = ExcludedURIDomains_;
		this.CRLDistributionPoints = CRLDistributionPoints_;
		this.PolicyIdentifiers = PolicyIdentifiers_;
	});
	InsecureAlgorithmError = $pkg.InsecureAlgorithmError = $newType(4, $kindInt, "x509.InsecureAlgorithmError", true, "crypto/x509", true, null);
	ConstraintViolationError = $pkg.ConstraintViolationError = $newType(0, $kindStruct, "x509.ConstraintViolationError", true, "crypto/x509", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	UnhandledCriticalExtension = $pkg.UnhandledCriticalExtension = $newType(0, $kindStruct, "x509.UnhandledCriticalExtension", true, "crypto/x509", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	basicConstraints = $pkg.basicConstraints = $newType(0, $kindStruct, "x509.basicConstraints", true, "crypto/x509", false, function(IsCA_, MaxPathLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IsCA = false;
			this.MaxPathLen = 0;
			return;
		}
		this.IsCA = IsCA_;
		this.MaxPathLen = MaxPathLen_;
	});
	policyInformation = $pkg.policyInformation = $newType(0, $kindStruct, "x509.policyInformation", true, "crypto/x509", false, function(Policy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Policy = asn1.ObjectIdentifier.nil;
			return;
		}
		this.Policy = Policy_;
	});
	authorityInfoAccess = $pkg.authorityInfoAccess = $newType(0, $kindStruct, "x509.authorityInfoAccess", true, "crypto/x509", false, function(Method_, Location_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = asn1.ObjectIdentifier.nil;
			this.Location = new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil);
			return;
		}
		this.Method = Method_;
		this.Location = Location_;
	});
	distributionPoint = $pkg.distributionPoint = $newType(0, $kindStruct, "x509.distributionPoint", true, "crypto/x509", false, function(DistributionPoint_, Reason_, CRLIssuer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DistributionPoint = new distributionPointName.ptr(sliceType$7.nil, pkix.RDNSequence.nil);
			this.Reason = new asn1.BitString.ptr(sliceType$1.nil, 0);
			this.CRLIssuer = new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil);
			return;
		}
		this.DistributionPoint = DistributionPoint_;
		this.Reason = Reason_;
		this.CRLIssuer = CRLIssuer_;
	});
	distributionPointName = $pkg.distributionPointName = $newType(0, $kindStruct, "x509.distributionPointName", true, "crypto/x509", false, function(FullName_, RelativeName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FullName = sliceType$7.nil;
			this.RelativeName = pkix.RDNSequence.nil;
			return;
		}
		this.FullName = FullName_;
		this.RelativeName = RelativeName_;
	});
	InvalidReason = $pkg.InvalidReason = $newType(4, $kindInt, "x509.InvalidReason", true, "crypto/x509", true, null);
	CertificateInvalidError = $pkg.CertificateInvalidError = $newType(0, $kindStruct, "x509.CertificateInvalidError", true, "crypto/x509", true, function(Cert_, Reason_, Detail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Cert = ptrType$4.nil;
			this.Reason = 0;
			this.Detail = "";
			return;
		}
		this.Cert = Cert_;
		this.Reason = Reason_;
		this.Detail = Detail_;
	});
	HostnameError = $pkg.HostnameError = $newType(0, $kindStruct, "x509.HostnameError", true, "crypto/x509", true, function(Certificate_, Host_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Certificate = ptrType$4.nil;
			this.Host = "";
			return;
		}
		this.Certificate = Certificate_;
		this.Host = Host_;
	});
	UnknownAuthorityError = $pkg.UnknownAuthorityError = $newType(0, $kindStruct, "x509.UnknownAuthorityError", true, "crypto/x509", true, function(Cert_, hintErr_, hintCert_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Cert = ptrType$4.nil;
			this.hintErr = $ifaceNil;
			this.hintCert = ptrType$4.nil;
			return;
		}
		this.Cert = Cert_;
		this.hintErr = hintErr_;
		this.hintCert = hintCert_;
	});
	SystemRootsError = $pkg.SystemRootsError = $newType(0, $kindStruct, "x509.SystemRootsError", true, "crypto/x509", true, function(Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			return;
		}
		this.Err = Err_;
	});
	VerifyOptions = $pkg.VerifyOptions = $newType(0, $kindStruct, "x509.VerifyOptions", true, "crypto/x509", true, function(DNSName_, Intermediates_, Roots_, CurrentTime_, KeyUsages_, MaxConstraintComparisions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DNSName = "";
			this.Intermediates = ptrType.nil;
			this.Roots = ptrType.nil;
			this.CurrentTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			this.KeyUsages = sliceType$22.nil;
			this.MaxConstraintComparisions = 0;
			return;
		}
		this.DNSName = DNSName_;
		this.Intermediates = Intermediates_;
		this.Roots = Roots_;
		this.CurrentTime = CurrentTime_;
		this.KeyUsages = KeyUsages_;
		this.MaxConstraintComparisions = MaxConstraintComparisions_;
	});
	rfc2821Mailbox = $pkg.rfc2821Mailbox = $newType(0, $kindStruct, "x509.rfc2821Mailbox", true, "crypto/x509", false, function(local_, domain_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = "";
			this.domain = "";
			return;
		}
		this.local = local_;
		this.domain = domain_;
	});
	pkcs1PrivateKey = $pkg.pkcs1PrivateKey = $newType(0, $kindStruct, "x509.pkcs1PrivateKey", true, "crypto/x509", false, function(Version_, N_, E_, D_, P_, Q_, Dp_, Dq_, Qinv_, AdditionalPrimes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Version = 0;
			this.N = ptrType$1.nil;
			this.E = 0;
			this.D = ptrType$1.nil;
			this.P = ptrType$1.nil;
			this.Q = ptrType$1.nil;
			this.Dp = ptrType$1.nil;
			this.Dq = ptrType$1.nil;
			this.Qinv = ptrType$1.nil;
			this.AdditionalPrimes = sliceType$23.nil;
			return;
		}
		this.Version = Version_;
		this.N = N_;
		this.E = E_;
		this.D = D_;
		this.P = P_;
		this.Q = Q_;
		this.Dp = Dp_;
		this.Dq = Dq_;
		this.Qinv = Qinv_;
		this.AdditionalPrimes = AdditionalPrimes_;
	});
	pkcs1AdditionalRSAPrime = $pkg.pkcs1AdditionalRSAPrime = $newType(0, $kindStruct, "x509.pkcs1AdditionalRSAPrime", true, "crypto/x509", false, function(Prime_, Exp_, Coeff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Prime = ptrType$1.nil;
			this.Exp = ptrType$1.nil;
			this.Coeff = ptrType$1.nil;
			return;
		}
		this.Prime = Prime_;
		this.Exp = Exp_;
		this.Coeff = Coeff_;
	});
	pkcs1PublicKey = $pkg.pkcs1PublicKey = $newType(0, $kindStruct, "x509.pkcs1PublicKey", true, "crypto/x509", false, function(N_, E_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.N = ptrType$1.nil;
			this.E = 0;
			return;
		}
		this.N = N_;
		this.E = E_;
	});
	sum224 = $pkg.sum224 = $newType(28, $kindArray, "x509.sum224", true, "crypto/x509", false, null);
	CertPool = $pkg.CertPool = $newType(0, $kindStruct, "x509.CertPool", true, "crypto/x509", true, function(byName_, lazyCerts_, haveSum_, systemPool_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.byName = false;
			this.lazyCerts = sliceType$29.nil;
			this.haveSum = false;
			this.systemPool = false;
			return;
		}
		this.byName = byName_;
		this.lazyCerts = lazyCerts_;
		this.haveSum = haveSum_;
		this.systemPool = systemPool_;
	});
	lazyCert = $pkg.lazyCert = $newType(0, $kindStruct, "x509.lazyCert", true, "crypto/x509", false, function(rawSubject_, getCert_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rawSubject = sliceType$1.nil;
			this.getCert = $throwNilPointerError;
			return;
		}
		this.rawSubject = rawSubject_;
		this.getCert = getCert_;
	});
	privateKey = $newType(8, $kindInterface, "x509.privateKey", true, "crypto/x509", false, null);
	pubKeyEqual = $newType(8, $kindInterface, "x509.pubKeyEqual", true, "crypto/x509", false, null);
	ptrType = $ptrType(CertPool);
	structType = $structType("crypto/x509", [{prop: "algo", name: "algo", embedded: false, exported: false, typ: SignatureAlgorithm, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "oid", name: "oid", embedded: false, exported: false, typ: asn1.ObjectIdentifier, tag: ""}, {prop: "pubKeyAlgo", name: "pubKeyAlgo", embedded: false, exported: false, typ: PublicKeyAlgorithm, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: crypto.Hash, tag: ""}]);
	sliceType = $sliceType(structType);
	sliceType$1 = $sliceType($Uint8);
	structType$1 = $structType("crypto/x509", [{prop: "extKeyUsage", name: "extKeyUsage", embedded: false, exported: false, typ: ExtKeyUsage, tag: ""}, {prop: "oid", name: "oid", embedded: false, exported: false, typ: asn1.ObjectIdentifier, tag: ""}]);
	sliceType$2 = $sliceType(structType$1);
	sliceType$3 = $sliceType($Int);
	sliceType$4 = $sliceType($String);
	ptrType$1 = $ptrType(big.Int);
	ptrType$2 = $ptrType(rsa.PublicKey);
	ptrType$3 = $ptrType(ecdsa.PublicKey);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$4 = $ptrType(Certificate);
	sliceType$7 = $sliceType(asn1.RawValue);
	sliceType$8 = $sliceType(pkix.Extension);
	sliceType$9 = $sliceType(authorityInfoAccess);
	ptrType$5 = $ptrType(cryptobyte.Builder);
	ptrType$6 = $ptrType($Bool);
	sliceType$10 = $sliceType(distributionPoint);
	arrayType = $arrayType($Uint8, 2);
	sliceType$11 = $sliceType(asn1.ObjectIdentifier);
	sliceType$12 = $sliceType(policyInformation);
	arrayType$1 = $arrayType($Uint8, 20);
	ptrType$7 = $ptrType(time.Location);
	ptrType$8 = $ptrType(pem.Block);
	sliceType$13 = $sliceType(pkix.RevokedCertificate);
	ptrType$9 = $ptrType(pkix.CertificateList);
	sliceType$15 = $sliceType(pkix.AttributeTypeAndValue);
	sliceType$18 = $sliceType(net.IP);
	ptrType$13 = $ptrType(url.URL);
	sliceType$19 = $sliceType(ptrType$13);
	ptrType$14 = $ptrType(pkix.RDNSequence);
	sliceType$20 = $sliceType(ptrType$4);
	ptrType$16 = $ptrType($Int);
	ptrType$17 = $ptrType(net.IPNet);
	sliceType$21 = $sliceType(sliceType$20);
	sliceType$22 = $sliceType(ExtKeyUsage);
	ptrType$18 = $ptrType(pkix.Extension);
	ptrType$19 = $ptrType(asn1.ObjectIdentifier);
	sliceType$23 = $sliceType(pkcs1AdditionalRSAPrime);
	sliceType$24 = $sliceType(fs.DirEntry);
	sliceType$27 = $sliceType($Uint16);
	ptrType$24 = $ptrType(cryptobyte.String);
	ptrType$25 = $ptrType(asn1$1.Tag);
	sliceType$28 = $sliceType(ptrType$17);
	sliceType$29 = $sliceType(lazyCert);
	structType$3 = $structType("crypto/x509", [{prop: "Once", name: "Once", embedded: true, exported: true, typ: sync.Once, tag: ""}, {prop: "v", name: "v", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
	sliceType$30 = $sliceType(sliceType$1);
	funcType = $funcType([$emptyInterface, $emptyInterface], [$Bool, $error], false);
	ptrType$26 = $ptrType(VerifyOptions);
	funcType$2 = $funcType([], [ptrType$4, $error], false);
	mapType = $mapType($String, sliceType$3);
	mapType$1 = $mapType(sum224, $Bool);
	marshalPublicKey = function(pub) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, err, oid, ok, paramBytes, pub, pub$1, pub$2, pub$3, pub$4, publicKeyAlgorithm, publicKeyBytes, x, $s, $r, $c} = $restore(this, {pub});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		publicKeyBytes = sliceType$1.nil;
		publicKeyAlgorithm = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
		err = $ifaceNil;
		_ref = pub;
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ed25519.PublicKey, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$2, true)[1]) { */ case 1:
			pub$1 = _ref.$val;
			_r = asn1.Marshal((x = new pkcs1PublicKey.ptr(pub$1.N, pub$1.E), new x.constructor.elem(x))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			publicKeyBytes = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType$1.nil;
				_tmp$1 = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
				_tmp$2 = err;
				publicKeyBytes = _tmp;
				pkix.AlgorithmIdentifier.copy(publicKeyAlgorithm, _tmp$1);
				err = _tmp$2;
				$s = -1; return [publicKeyBytes, publicKeyAlgorithm, err];
			}
			publicKeyAlgorithm.Algorithm = oidPublicKeyRSA;
			asn1.RawValue.copy(publicKeyAlgorithm.Parameters, asn1.NullRawValue);
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 2:
			pub$2 = _ref.$val;
			_r$1 = oidFromNamedCurve(pub$2.Curve); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			oid = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				_tmp$3 = sliceType$1.nil;
				_tmp$4 = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
				_tmp$5 = errors.New("x509: unsupported elliptic curve");
				publicKeyBytes = _tmp$3;
				pkix.AlgorithmIdentifier.copy(publicKeyAlgorithm, _tmp$4);
				err = _tmp$5;
				$s = -1; return [publicKeyBytes, publicKeyAlgorithm, err];
			}
			_r$2 = pub$2.Curve.IsOnCurve(pub$2.X, pub$2.Y); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$2) { */ case 8:
				_tmp$6 = sliceType$1.nil;
				_tmp$7 = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
				_tmp$8 = errors.New("x509: invalid elliptic curve public key");
				publicKeyBytes = _tmp$6;
				pkix.AlgorithmIdentifier.copy(publicKeyAlgorithm, _tmp$7);
				err = _tmp$8;
				$s = -1; return [publicKeyBytes, publicKeyAlgorithm, err];
			/* } */ case 9:
			_r$3 = elliptic.Marshal(pub$2.Curve, pub$2.X, pub$2.Y); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			publicKeyBytes = _r$3;
			publicKeyAlgorithm.Algorithm = oidPublicKeyECDSA;
			paramBytes = sliceType$1.nil;
			_r$4 = asn1.Marshal(oid); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			paramBytes = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [publicKeyBytes, publicKeyAlgorithm, err];
			}
			publicKeyAlgorithm.Parameters.FullBytes = paramBytes;
			$s = 5; continue;
		/* } else if ($assertType(_ref, ed25519.PublicKey, true)[1]) { */ case 3:
			pub$3 = _ref.$val;
			publicKeyBytes = $convertSliceType(pub$3, sliceType$1);
			publicKeyAlgorithm.Algorithm = oidPublicKeyEd25519;
			$s = 5; continue;
		/* } else { */ case 4:
			pub$4 = _ref;
			_tmp$9 = sliceType$1.nil;
			_tmp$10 = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
			_r$5 = fmt.Errorf("x509: unsupported public key type: %T", new sliceType$6([pub$4])); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tmp$11 = _r$5;
			publicKeyBytes = _tmp$9;
			pkix.AlgorithmIdentifier.copy(publicKeyAlgorithm, _tmp$10);
			err = _tmp$11;
			$24r = [publicKeyBytes, publicKeyAlgorithm, err];
			$s = 14; case 14: return $24r;
		/* } */ case 5:
		_tmp$12 = publicKeyBytes;
		_tmp$13 = $clone(publicKeyAlgorithm, pkix.AlgorithmIdentifier);
		_tmp$14 = $ifaceNil;
		publicKeyBytes = _tmp$12;
		pkix.AlgorithmIdentifier.copy(publicKeyAlgorithm, _tmp$13);
		err = _tmp$14;
		$s = -1; return [publicKeyBytes, publicKeyAlgorithm, err];
		/* */ } return; } var $f = {$blk: marshalPublicKey, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, err, oid, ok, paramBytes, pub, pub$1, pub$2, pub$3, pub$4, publicKeyAlgorithm, publicKeyBytes, x, $s};return $f;
	};
	SignatureAlgorithm.prototype.isRSAPSS = function() {
		var _1, algo;
		algo = this.$val;
		_1 = algo;
		if ((_1 === (13)) || (_1 === (14)) || (_1 === (15))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(SignatureAlgorithm).prototype.isRSAPSS = function() { return new SignatureAlgorithm(this.$get()).isRSAPSS(); };
	SignatureAlgorithm.prototype.String = function() {
		var _i, _ref, algo, details;
		algo = this.$val;
		_ref = signatureAlgorithmDetails;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			details = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType);
			if (details.algo === algo) {
				return details.name;
			}
			_i++;
		}
		return strconv.Itoa(((algo >> 0)));
	};
	$ptrType(SignatureAlgorithm).prototype.String = function() { return new SignatureAlgorithm(this.$get()).String(); };
	PublicKeyAlgorithm.prototype.String = function() {
		var algo;
		algo = this.$val;
		if (0 < algo && ((algo >> 0)) < 5) {
			return ((algo < 0 || algo >= publicKeyAlgoName.length) ? ($throwRuntimeError("index out of range"), undefined) : publicKeyAlgoName[algo]);
		}
		return strconv.Itoa(((algo >> 0)));
	};
	$ptrType(PublicKeyAlgorithm).prototype.String = function() { return new PublicKeyAlgorithm(this.$get()).String(); };
	getSignatureAlgorithmFromAI = function(ai) {
		var {_i, _r, _r$1, _ref, _tuple, _tuple$1, ai, details, err, err$1, mgf1HashFunc, params, $s, $r, $c} = $restore(this, {ai});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mgf1HashFunc = [mgf1HashFunc];
		params = [params];
		if (ai.Algorithm.Equal(oidSignatureEd25519)) {
			if (!((ai.Parameters.FullBytes.$length === 0))) {
				$s = -1; return 0;
			}
		}
		if (!ai.Algorithm.Equal(oidSignatureRSAPSS)) {
			_ref = signatureAlgorithmDetails;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				details = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType);
				if (ai.Algorithm.Equal(details.oid)) {
					$s = -1; return details.algo;
				}
				_i++;
			}
			$s = -1; return 0;
		}
		params[0] = new pssParameters.ptr(new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)), new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)), 0, 0);
		_r = asn1.Unmarshal(ai.Parameters.FullBytes, params[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return 0;
		}
		mgf1HashFunc[0] = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
		_r$1 = asn1.Unmarshal(params[0].MGF.Parameters.FullBytes, mgf1HashFunc[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return 0;
		}
		if ((!((params[0].Hash.Parameters.FullBytes.$length === 0)) && !bytes.Equal(params[0].Hash.Parameters.FullBytes, asn1.NullBytes)) || !params[0].MGF.Algorithm.Equal(oidMGF1) || !mgf1HashFunc[0].Algorithm.Equal(params[0].Hash.Algorithm) || (!((mgf1HashFunc[0].Parameters.FullBytes.$length === 0)) && !bytes.Equal(mgf1HashFunc[0].Parameters.FullBytes, asn1.NullBytes)) || !((params[0].TrailerField === 1))) {
			$s = -1; return 0;
		}
		if (params[0].Hash.Algorithm.Equal(oidSHA256) && (params[0].SaltLength === 32)) {
			$s = -1; return 13;
		} else if (params[0].Hash.Algorithm.Equal(oidSHA384) && (params[0].SaltLength === 48)) {
			$s = -1; return 14;
		} else if (params[0].Hash.Algorithm.Equal(oidSHA512) && (params[0].SaltLength === 64)) {
			$s = -1; return 15;
		}
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: getSignatureAlgorithmFromAI, $c: true, $r, _i, _r, _r$1, _ref, _tuple, _tuple$1, ai, details, err, err$1, mgf1HashFunc, params, $s};return $f;
	};
	getPublicKeyAlgorithmFromOID = function(oid) {
		var oid;
		if (oid.Equal(oidPublicKeyRSA)) {
			return 1;
		} else if (oid.Equal(oidPublicKeyDSA)) {
			return 2;
		} else if (oid.Equal(oidPublicKeyECDSA)) {
			return 3;
		} else if (oid.Equal(oidPublicKeyEd25519)) {
			return 4;
		}
		return 0;
	};
	namedCurveFromOID = function(oid) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _r$2, _r$3, oid, $s, $r, $c} = $restore(this, {oid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			/* */ if (oid.Equal(oidNamedCurveP224)) { $s = 2; continue; }
			/* */ if (oid.Equal(oidNamedCurveP256)) { $s = 3; continue; }
			/* */ if (oid.Equal(oidNamedCurveP384)) { $s = 4; continue; }
			/* */ if (oid.Equal(oidNamedCurveP521)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (oid.Equal(oidNamedCurveP224)) { */ case 2:
				_r = elliptic.P224(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else if (oid.Equal(oidNamedCurveP256)) { */ case 3:
				_r$1 = elliptic.P256(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 10; case 10: return $24r$1;
			/* } else if (oid.Equal(oidNamedCurveP384)) { */ case 4:
				_r$2 = elliptic.P384(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$24r$2 = _r$2;
				$s = 12; case 12: return $24r$2;
			/* } else if (oid.Equal(oidNamedCurveP521)) { */ case 5:
				_r$3 = elliptic.P521(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$24r$3 = _r$3;
				$s = 14; case 14: return $24r$3;
			/* } */ case 6:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: namedCurveFromOID, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _r$2, _r$3, oid, $s};return $f;
	};
	oidFromNamedCurve = function(curve) {
		var {_1, _r, _r$1, _r$2, _r$3, curve, $s, $r, $c} = $restore(this, {curve});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = curve;
			_r = elliptic.P224(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_1, (_r))) { $s = 2; continue; }
			_r$1 = elliptic.P256(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_1, (_r$1))) { $s = 3; continue; }
			_r$2 = elliptic.P384(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_1, (_r$2))) { $s = 4; continue; }
			_r$3 = elliptic.P521(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_1, (_r$3))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(_1, (_r))) { */ case 2:
				$s = -1; return [oidNamedCurveP224, true];
			/* } else if ($interfaceIsEqual(_1, (_r$1))) { */ case 3:
				$s = -1; return [oidNamedCurveP256, true];
			/* } else if ($interfaceIsEqual(_1, (_r$2))) { */ case 4:
				$s = -1; return [oidNamedCurveP384, true];
			/* } else if ($interfaceIsEqual(_1, (_r$3))) { */ case 5:
				$s = -1; return [oidNamedCurveP521, true];
			/* } */ case 6:
		case 1:
		$s = -1; return [asn1.ObjectIdentifier.nil, false];
		/* */ } return; } var $f = {$blk: oidFromNamedCurve, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, curve, $s};return $f;
	};
	extKeyUsageFromOID = function(oid) {
		var _i, _ref, _tmp, _tmp$1, eku, oid, ok, pair;
		eku = 0;
		ok = false;
		_ref = extKeyUsageOIDs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pair = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType$1);
			if (oid.Equal(pair.oid)) {
				_tmp = pair.extKeyUsage;
				_tmp$1 = true;
				eku = _tmp;
				ok = _tmp$1;
				return [eku, ok];
			}
			_i++;
		}
		return [eku, ok];
	};
	oidFromExtKeyUsage = function(eku) {
		var _i, _ref, _tmp, _tmp$1, eku, oid, ok, pair;
		oid = asn1.ObjectIdentifier.nil;
		ok = false;
		_ref = extKeyUsageOIDs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pair = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType$1);
			if (eku === pair.extKeyUsage) {
				_tmp = pair.oid;
				_tmp$1 = true;
				oid = _tmp;
				ok = _tmp$1;
				return [oid, ok];
			}
			_i++;
		}
		return [oid, ok];
	};
	InsecureAlgorithmError.prototype.Error = function() {
		var {$24r, _r, e, override, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this.$val;
		override = "";
		if ((((e >> 0)) === 3) || (((e >> 0)) === 9)) {
			override = " (temporarily override with GODEBUG=x509sha1=1)";
		}
		_r = fmt.Sprintf("x509: cannot verify signature: insecure algorithm %v", new sliceType$6([new SignatureAlgorithm(((e >> 0)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r + override;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: InsecureAlgorithmError.prototype.Error, $c: true, $r, $24r, _r, e, override, $s};return $f;
	};
	$ptrType(InsecureAlgorithmError).prototype.Error = function() { return new InsecureAlgorithmError(this.$get()).Error(); };
	ConstraintViolationError.ptr.prototype.Error = function() {
		return "x509: invalid signature: parent certificate cannot sign this kind of certificate";
	};
	ConstraintViolationError.prototype.Error = function() { return this.$val.Error(); };
	Certificate.ptr.prototype.Equal = function(other) {
		var c, other;
		c = this;
		if (c === ptrType$4.nil || other === ptrType$4.nil) {
			return c === other;
		}
		return bytes.Equal(c.Raw, other.Raw);
	};
	Certificate.prototype.Equal = function(other) { return this.$val.Equal(other); };
	Certificate.ptr.prototype.hasSANExtension = function() {
		var c;
		c = this;
		return oidInExtensions($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier), c.Extensions);
	};
	Certificate.prototype.hasSANExtension = function() { return this.$val.hasSANExtension(); };
	Certificate.ptr.prototype.CheckSignatureFrom = function(parent) {
		var {$24r, _r, c, parent, x, x$1, $s, $r, $c} = $restore(this, {parent});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if ((parent.Version === 3) && !parent.BasicConstraintsValid || parent.BasicConstraintsValid && !parent.IsCA) {
			$s = -1; return (x = new ConstraintViolationError.ptr(), new x.constructor.elem(x));
		}
		if (!((parent.KeyUsage === 0)) && ((parent.KeyUsage & 32) === 0)) {
			$s = -1; return (x$1 = new ConstraintViolationError.ptr(), new x$1.constructor.elem(x$1));
		}
		if (parent.PublicKeyAlgorithm === 0) {
			$s = -1; return $pkg.ErrUnsupportedAlgorithm;
		}
		_r = checkSignature(c.SignatureAlgorithm, c.RawTBSCertificate, c.Signature, parent.PublicKey, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.CheckSignatureFrom, $c: true, $r, $24r, _r, c, parent, x, x$1, $s};return $f;
	};
	Certificate.prototype.CheckSignatureFrom = function(parent) { return this.$val.CheckSignatureFrom(parent); };
	Certificate.ptr.prototype.CheckSignature = function(algo, signed, signature) {
		var {$24r, _r, algo, c, signature, signed, $s, $r, $c} = $restore(this, {algo, signed, signature});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		_r = checkSignature(algo, signed, signature, c.PublicKey, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.CheckSignature, $c: true, $r, $24r, _r, algo, c, signature, signed, $s};return $f;
	};
	Certificate.prototype.CheckSignature = function(algo, signed, signature) { return this.$val.CheckSignature(algo, signed, signature); };
	Certificate.ptr.prototype.hasNameConstraints = function() {
		var c;
		c = this;
		return oidInExtensions($convertSliceType(oidExtensionNameConstraints, asn1.ObjectIdentifier), c.Extensions);
	};
	Certificate.prototype.hasNameConstraints = function() { return this.$val.hasNameConstraints(); };
	Certificate.ptr.prototype.getSANExtension = function() {
		var _i, _ref, c, e;
		c = this;
		_ref = c.Extensions;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			if (e.Id.Equal($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier))) {
				return e.Value;
			}
			_i++;
		}
		return sliceType$1.nil;
	};
	Certificate.prototype.getSANExtension = function() { return this.$val.getSANExtension(); };
	signaturePublicKeyAlgoMismatchError = function(expectedPubKeyAlgo, pubKey) {
		var {$24r, _r, expectedPubKeyAlgo, pubKey, $s, $r, $c} = $restore(this, {expectedPubKeyAlgo, pubKey});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = fmt.Errorf("x509: signature algorithm specifies an %s public key, but have public key of type %T", new sliceType$6([new $String(new PublicKeyAlgorithm(expectedPubKeyAlgo).String()), pubKey])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: signaturePublicKeyAlgoMismatchError, $c: true, $r, $24r, _r, expectedPubKeyAlgo, pubKey, $s};return $f;
	};
	checkSignature = function(algo, signed, signature, publicKey, allowSHA1) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, algo, allowSHA1, details, err, h, hashType, pub, pub$1, pub$2, pubKeyAlgo, publicKey, signature, signed, $s, $r, $c} = $restore(this, {algo, signed, signature, publicKey, allowSHA1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		hashType = 0;
		pubKeyAlgo = 0;
		_ref = signatureAlgorithmDetails;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			details = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), structType);
			if (details.algo === algo) {
				hashType = details.hash;
				pubKeyAlgo = details.pubKeyAlgo;
			}
			_i++;
		}
			_1 = hashType;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (0)) { */ case 2:
				if (!((pubKeyAlgo === 4))) {
					err = $pkg.ErrUnsupportedAlgorithm;
					$s = -1; return err;
				}
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 3:
				err = new InsecureAlgorithmError(((algo >> 0)));
				$s = -1; return err;
			/* } else if (_1 === (3)) { */ case 4:
				if (!(!allowSHA1)) { _v = false; $s = 9; continue s; }
				_r = godebug.Get("x509sha1"); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !(_r === "1"); case 9:
				/* */ if (_v) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_v) { */ case 7:
					err = new InsecureAlgorithmError(((algo >> 0)));
					$s = -1; return err;
				/* } */ case 8:
				if (!new crypto.Hash(hashType).Available()) {
					err = $pkg.ErrUnsupportedAlgorithm;
					$s = -1; return err;
				}
				_r$1 = new crypto.Hash(hashType).New(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				h = _r$1;
				_r$2 = h.Write(signed); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_r$3 = h.Sum(sliceType$1.nil); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				signed = _r$3;
				$s = 6; continue;
			/* } else { */ case 5:
				if (!new crypto.Hash(hashType).Available()) {
					err = $pkg.ErrUnsupportedAlgorithm;
					$s = -1; return err;
				}
				_r$4 = new crypto.Hash(hashType).New(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				h = _r$4;
				_r$5 = h.Write(signed); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				_r$6 = h.Sum(sliceType$1.nil); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				signed = _r$6;
			/* } */ case 6:
		case 1:
		_ref$1 = publicKey;
		/* */ if ($assertType(_ref$1, ptrType$2, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref$1, ptrType$3, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref$1, ed25519.PublicKey, true)[1]) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ($assertType(_ref$1, ptrType$2, true)[1]) { */ case 17:
			pub = _ref$1.$val;
			/* */ if (!((pubKeyAlgo === 1))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!((pubKeyAlgo === 1))) { */ case 21:
				_r$7 = signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				$24r = err;
				$s = 24; case 24: return $24r;
			/* } */ case 22:
			/* */ if (new SignatureAlgorithm(algo).isRSAPSS()) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (new SignatureAlgorithm(algo).isRSAPSS()) { */ case 25:
				_r$8 = rsa.VerifyPSS(pub, hashType, signed, signature, new rsa.PSSOptions.ptr(-1, 0)); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = _r$8;
				$24r$1 = err;
				$s = 29; case 29: return $24r$1;
			/* } else { */ case 26:
				_r$9 = rsa.VerifyPKCS1v15(pub, hashType, signed, signature); /* */ $s = 30; case 30: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				err = _r$9;
				$24r$2 = err;
				$s = 31; case 31: return $24r$2;
			/* } */ case 27:
			$s = 20; continue;
		/* } else if ($assertType(_ref$1, ptrType$3, true)[1]) { */ case 18:
			pub$1 = _ref$1.$val;
			/* */ if (!((pubKeyAlgo === 3))) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (!((pubKeyAlgo === 3))) { */ case 32:
				_r$10 = signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub$1); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				err = _r$10;
				$24r$3 = err;
				$s = 35; case 35: return $24r$3;
			/* } */ case 33:
			_r$11 = ecdsa.VerifyASN1(pub$1, signed, signature); /* */ $s = 38; case 38: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (!_r$11) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (!_r$11) { */ case 36:
				err = errors.New("x509: ECDSA verification failure");
				$s = -1; return err;
			/* } */ case 37:
			$s = -1; return err;
		/* } else if ($assertType(_ref$1, ed25519.PublicKey, true)[1]) { */ case 19:
			pub$2 = _ref$1.$val;
			/* */ if (!((pubKeyAlgo === 4))) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (!((pubKeyAlgo === 4))) { */ case 39:
				_r$12 = signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub$2); /* */ $s = 41; case 41: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				err = _r$12;
				$24r$4 = err;
				$s = 42; case 42: return $24r$4;
			/* } */ case 40:
			_r$13 = ed25519.Verify(pub$2, signed, signature); /* */ $s = 45; case 45: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (!_r$13) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (!_r$13) { */ case 43:
				err = errors.New("x509: Ed25519 verification failure");
				$s = -1; return err;
			/* } */ case 44:
			$s = -1; return err;
		/* } */ case 20:
		err = $pkg.ErrUnsupportedAlgorithm;
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: checkSignature, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, algo, allowSHA1, details, err, h, hashType, pub, pub$1, pub$2, pubKeyAlgo, publicKey, signature, signed, $s};return $f;
	};
	Certificate.ptr.prototype.CheckCRLSignature = function(crl) {
		var {$24r, _r, _r$1, algo, c, crl, $s, $r, $c} = $restore(this, {crl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		_r = getSignatureAlgorithmFromAI($clone(crl.SignatureAlgorithm, pkix.AlgorithmIdentifier)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		algo = _r;
		_r$1 = c.CheckSignature(algo, $convertSliceType(crl.TBSCertList.Raw, sliceType$1), $clone(crl.SignatureValue, asn1.BitString).RightAlign()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.CheckCRLSignature, $c: true, $r, $24r, _r, _r$1, algo, c, crl, $s};return $f;
	};
	Certificate.prototype.CheckCRLSignature = function(crl) { return this.$val.CheckCRLSignature(crl); };
	UnhandledCriticalExtension.ptr.prototype.Error = function() {
		var h;
		h = this;
		return "x509: unhandled critical extension";
	};
	UnhandledCriticalExtension.prototype.Error = function() { return this.$val.Error(); };
	reverseBitsInAByte = function(in$1) {
		var b1, b2, b3, in$1;
		b1 = ((in$1 >>> 4 << 24 >>> 24) | (in$1 << 4 << 24 >>> 24)) >>> 0;
		b2 = ((((b1 >>> 2 << 24 >>> 24) & 51) >>> 0) | (((b1 << 2 << 24 >>> 24) & 204) >>> 0)) >>> 0;
		b3 = ((((b2 >>> 1 << 24 >>> 24) & 85) >>> 0) | (((b2 << 1 << 24 >>> 24) & 170) >>> 0)) >>> 0;
		return b3;
	};
	asn1BitLength = function(bitString) {
		var _i, _ref, b, bit, bitLen, bitString, i, x, y;
		bitLen = $imul(bitString.$length, 8);
		_ref = bitString;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = (x = (bitString.$length - i >> 0) - 1 >> 0, ((x < 0 || x >= bitString.$length) ? ($throwRuntimeError("index out of range"), undefined) : bitString.$array[bitString.$offset + x]));
			bit = 0;
			while (true) {
				if (!(bit < 8)) { break; }
				if ((((((y = bit, y < 32 ? (b >>> y) : 0) << 24 >>> 24)) & 1) >>> 0) === 1) {
					return bitLen;
				}
				bitLen = bitLen - (1) >> 0;
				bit = bit + (1) >>> 0;
			}
			_i++;
		}
		return 0;
	};
	oidInExtensions = function(oid, extensions) {
		var _i, _ref, e, extensions, oid;
		_ref = extensions;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			if (e.Id.Equal(oid)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	marshalSANs = function(dnsNames, emailAddresses, ipAddresses, uris) {
		var {$24r, _i, _i$1, _i$2, _i$3, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, derBytes, dnsNames, email, emailAddresses, err, err$1, err$2, err$3, ip, ipAddresses, name, rawIP, rawValues, uri, uriStr, uris, $s, $r, $c} = $restore(this, {dnsNames, emailAddresses, ipAddresses, uris});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		derBytes = sliceType$1.nil;
		err = $ifaceNil;
		rawValues = sliceType$7.nil;
		_ref = dnsNames;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = isIA5String(name); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err$1 = _r;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = sliceType$1.nil;
				_tmp$1 = err$1;
				derBytes = _tmp;
				err = _tmp$1;
				$s = -1; return [derBytes, err];
			}
			rawValues = $append(rawValues, new asn1.RawValue.ptr(2, 2, false, (new sliceType$1($stringToBytes(name))), sliceType$1.nil));
			_i++;
		$s = 1; continue;
		case 2:
		_ref$1 = emailAddresses;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
			email = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$1 = isIA5String(email); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$2 = _r$1;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = sliceType$1.nil;
				_tmp$3 = err$2;
				derBytes = _tmp$2;
				err = _tmp$3;
				$s = -1; return [derBytes, err];
			}
			rawValues = $append(rawValues, new asn1.RawValue.ptr(2, 1, false, (new sliceType$1($stringToBytes(email))), sliceType$1.nil));
			_i$1++;
		$s = 4; continue;
		case 5:
		_ref$2 = ipAddresses;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			rawIP = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			ip = rawIP.To4();
			if (ip === net.IP.nil) {
				ip = rawIP;
			}
			rawValues = $append(rawValues, new asn1.RawValue.ptr(2, 7, false, $convertSliceType(ip, sliceType$1), sliceType$1.nil));
			_i$2++;
		}
		_ref$3 = uris;
		_i$3 = 0;
		/* while (true) { */ case 7:
			/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 8; continue; }
			uri = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			uriStr = uri.String();
			_r$2 = isIA5String(uriStr); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$3 = _r$2;
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = sliceType$1.nil;
				_tmp$5 = err$3;
				derBytes = _tmp$4;
				err = _tmp$5;
				$s = -1; return [derBytes, err];
			}
			rawValues = $append(rawValues, new asn1.RawValue.ptr(2, 6, false, (new sliceType$1($stringToBytes(uriStr))), sliceType$1.nil));
			_i$3++;
		$s = 7; continue;
		case 8:
		_r$3 = asn1.Marshal(rawValues); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		derBytes = _tuple[0];
		err = _tuple[1];
		$24r = [derBytes, err];
		$s = 11; case 11: return $24r;
		/* */ } return; } var $f = {$blk: marshalSANs, $c: true, $r, $24r, _i, _i$1, _i$2, _i$3, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, derBytes, dnsNames, email, emailAddresses, err, err$1, err$2, err$3, ip, ipAddresses, name, rawIP, rawValues, uri, uriStr, uris, $s};return $f;
	};
	isIA5String = function(s) {
		var {$24r, _i, _r, _ref, _rune, r, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			/* */ if (r > 127) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r > 127) { */ case 3:
				_r = fmt.Errorf("x509: %q cannot be encoded as an IA5String", new sliceType$6([new $String(s)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			_i += _rune[1];
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: isIA5String, $c: true, $r, $24r, _i, _r, _ref, _rune, r, s, $s};return $f;
	};
	buildCertExtensions = function(template, subjectIsEmpty, authorityKeyId, subjectKeyId) {
		var {_i, _i$1, _i$2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, aiaValues, authorityKeyId, b, crlDp, dp, err, err$1, excluded, ipAndMask, n, name, name$1, name$2, permitted, ret, serialiseConstraints, subjectIsEmpty, subjectKeyId, template, x, $s, $r, $c} = $restore(this, {template, subjectIsEmpty, authorityKeyId, subjectKeyId});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		excluded = [excluded];
		ipAndMask = [ipAndMask];
		permitted = [permitted];
		ret = sliceType$8.nil;
		err = $ifaceNil;
		ret = $makeSlice(sliceType$8, 10);
		n = 0;
		/* */ if (!((template.KeyUsage === 0)) && !oidInExtensions($convertSliceType(oidExtensionKeyUsage, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((template.KeyUsage === 0)) && !oidInExtensions($convertSliceType(oidExtensionKeyUsage, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 1:
			_r = marshalKeyUsage(template.KeyUsage); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			pkix.Extension.copy(((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]), _tuple[0]);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType$8.nil;
				_tmp$1 = err;
				ret = _tmp;
				err = _tmp$1;
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 2:
		/* */ if ((template.ExtKeyUsage.$length > 0 || template.UnknownExtKeyUsage.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionExtendedKeyUsage, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((template.ExtKeyUsage.$length > 0 || template.UnknownExtKeyUsage.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionExtendedKeyUsage, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 4:
			_r$1 = marshalExtKeyUsage(template.ExtKeyUsage, template.UnknownExtKeyUsage); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			pkix.Extension.copy(((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]), _tuple$1[0]);
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$2 = sliceType$8.nil;
				_tmp$3 = err;
				ret = _tmp$2;
				err = _tmp$3;
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 5:
		/* */ if (template.BasicConstraintsValid && !oidInExtensions($convertSliceType(oidExtensionBasicConstraints, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (template.BasicConstraintsValid && !oidInExtensions($convertSliceType(oidExtensionBasicConstraints, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 7:
			_r$2 = marshalBasicConstraints(template.IsCA, template.MaxPathLen, template.MaxPathLenZero); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			pkix.Extension.copy(((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]), _tuple$2[0]);
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = sliceType$8.nil;
				_tmp$5 = err;
				ret = _tmp$4;
				err = _tmp$5;
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 8:
		/* */ if (subjectKeyId.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionSubjectKeyId, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (subjectKeyId.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionSubjectKeyId, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 10:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionSubjectKeyId, asn1.ObjectIdentifier);
			_r$3 = asn1.Marshal(subjectKeyId); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3;
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$3[0];
			err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 11:
		/* */ if (authorityKeyId.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionAuthorityKeyId, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (authorityKeyId.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionAuthorityKeyId, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 13:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionAuthorityKeyId, asn1.ObjectIdentifier);
			_r$4 = asn1.Marshal((x = new authKeyId.ptr(authorityKeyId), new x.constructor.elem(x))); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$4 = _r$4;
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 14:
		/* */ if ((template.OCSPServer.$length > 0 || template.IssuingCertificateURL.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionAuthorityInfoAccess, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((template.OCSPServer.$length > 0 || template.IssuingCertificateURL.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionAuthorityInfoAccess, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 16:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionAuthorityInfoAccess, asn1.ObjectIdentifier);
			aiaValues = sliceType$9.nil;
			_ref = template.OCSPServer;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				aiaValues = $append(aiaValues, new authorityInfoAccess.ptr(oidAuthorityInfoAccessOcsp, $clone(new asn1.RawValue.ptr(2, 6, false, (new sliceType$1($stringToBytes(name))), sliceType$1.nil), asn1.RawValue)));
				_i++;
			}
			_ref$1 = template.IssuingCertificateURL;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				name$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				aiaValues = $append(aiaValues, new authorityInfoAccess.ptr(oidAuthorityInfoAccessIssuers, $clone(new asn1.RawValue.ptr(2, 6, false, (new sliceType$1($stringToBytes(name$1))), sliceType$1.nil), asn1.RawValue)));
				_i$1++;
			}
			_r$5 = asn1.Marshal(aiaValues); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$5 = _r$5;
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 17:
		/* */ if ((template.DNSNames.$length > 0 || template.EmailAddresses.$length > 0 || template.IPAddresses.$length > 0 || template.URIs.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ((template.DNSNames.$length > 0 || template.EmailAddresses.$length > 0 || template.IPAddresses.$length > 0 || template.URIs.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 19:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier);
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Critical = subjectIsEmpty;
			_r$6 = marshalSANs(template.DNSNames, template.EmailAddresses, template.IPAddresses, template.URIs); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$6 = _r$6;
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$6[0];
			err = _tuple$6[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 20:
		/* */ if (template.PolicyIdentifiers.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionCertificatePolicies, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (template.PolicyIdentifiers.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionCertificatePolicies, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 22:
			_r$7 = marshalCertificatePolicies(template.PolicyIdentifiers); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$7 = _r$7;
			pkix.Extension.copy(((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]), _tuple$7[0]);
			err = _tuple$7[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = sliceType$8.nil;
				_tmp$7 = err;
				ret = _tmp$6;
				err = _tmp$7;
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 23:
		/* */ if ((template.PermittedDNSDomains.$length > 0 || template.ExcludedDNSDomains.$length > 0 || template.PermittedIPRanges.$length > 0 || template.ExcludedIPRanges.$length > 0 || template.PermittedEmailAddresses.$length > 0 || template.ExcludedEmailAddresses.$length > 0 || template.PermittedURIDomains.$length > 0 || template.ExcludedURIDomains.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionNameConstraints, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if ((template.PermittedDNSDomains.$length > 0 || template.ExcludedDNSDomains.$length > 0 || template.PermittedIPRanges.$length > 0 || template.ExcludedIPRanges.$length > 0 || template.PermittedEmailAddresses.$length > 0 || template.ExcludedEmailAddresses.$length > 0 || template.PermittedURIDomains.$length > 0 || template.ExcludedURIDomains.$length > 0) && !oidInExtensions($convertSliceType(oidExtensionNameConstraints, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 25:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionNameConstraints, asn1.ObjectIdentifier);
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Critical = template.PermittedDNSDomainsCritical;
			ipAndMask[0] = (function(excluded, ipAndMask, permitted) { return function(ipNet) {
				var ipAndMask$1, ipNet, maskedIP;
				maskedIP = ipNet.IP.Mask(ipNet.Mask);
				ipAndMask$1 = $makeSlice(sliceType$1, 0, (maskedIP.$length + ipNet.Mask.$length >> 0));
				ipAndMask$1 = $appendSlice(ipAndMask$1, $convertSliceType(maskedIP, sliceType$1));
				ipAndMask$1 = $appendSlice(ipAndMask$1, $convertSliceType(ipNet.Mask, sliceType$1));
				return ipAndMask$1;
			}; })(excluded, ipAndMask, permitted);
			serialiseConstraints = (function(excluded, ipAndMask, permitted) { return function $b(dns, ips, emails, uriDomains) {
				var {_i$2, _i$3, _i$4, _i$5, _r$10, _r$8, _r$9, _ref$2, _ref$3, _ref$4, _ref$5, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$8, _tmp$9, _tuple$8, b, der, dns, email, emails, err$1, ipNet, ips, name$2, uriDomain, uriDomains, $s, $r, $c} = $restore(this, {dns, ips, emails, uriDomains});
				/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				email = [email];
				ipNet = [ipNet];
				name$2 = [name$2];
				uriDomain = [uriDomain];
				der = sliceType$1.nil;
				err$1 = $ifaceNil;
				b = new cryptobyte.Builder.ptr($ifaceNil, sliceType$1.nil, false, ptrType$5.nil, 0, 0, false, ptrType$6.nil);
				_ref$2 = dns;
				_i$2 = 0;
				/* while (true) { */ case 1:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 2; continue; }
					name$2[0] = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					_r$8 = isIA5String(name$2[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					err$1 = _r$8;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tmp$8 = sliceType$1.nil;
						_tmp$9 = err$1;
						der = _tmp$8;
						err$1 = _tmp$9;
						$s = -1; return [der, err$1];
					}
					$r = b.AddASN1(48, (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function $b(b$1) {
						var {b$1, $s, $r, $c} = $restore(this, {b$1});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						$r = b$1.AddASN1(new asn1$1.Tag(2).ContextSpecific(), (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function(b$2) {
							var b$2;
							b$2.AddBytes((new sliceType$1($stringToBytes(name$2[0]))));
						}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
					}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				$s = 1; continue;
				case 2:
				_ref$3 = ips;
				_i$3 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 6; continue; }
					ipNet[0] = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
					$r = b.AddASN1(48, (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function $b(b$1) {
						var {b$1, $s, $r, $c} = $restore(this, {b$1});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						$r = b$1.AddASN1(new asn1$1.Tag(7).ContextSpecific(), (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function $b(b$2) {
							var {_r$9, b$2, $s, $r, $c} = $restore(this, {b$2});
							/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
							_r$9 = ipAndMask[0](ipNet[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							$r = b$2.AddBytes(_r$9); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
							/* */ } return; } var $f = {$blk: $b, $c: true, $r, _r$9, b$2, $s};return $f;
						}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
					}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$3++;
				$s = 5; continue;
				case 6:
				_ref$4 = emails;
				_i$4 = 0;
				/* while (true) { */ case 8:
					/* if (!(_i$4 < _ref$4.$length)) { break; } */ if(!(_i$4 < _ref$4.$length)) { $s = 9; continue; }
					email[0] = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
					_r$9 = isIA5String(email[0]); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err$1 = _r$9;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tmp$10 = sliceType$1.nil;
						_tmp$11 = err$1;
						der = _tmp$10;
						err$1 = _tmp$11;
						$s = -1; return [der, err$1];
					}
					$r = b.AddASN1(48, (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function $b(b$1) {
						var {b$1, $s, $r, $c} = $restore(this, {b$1});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						$r = b$1.AddASN1(new asn1$1.Tag(1).ContextSpecific(), (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function(b$2) {
							var b$2;
							b$2.AddBytes((new sliceType$1($stringToBytes(email[0]))));
						}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
					}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$4++;
				$s = 8; continue;
				case 9:
				_ref$5 = uriDomains;
				_i$5 = 0;
				/* while (true) { */ case 12:
					/* if (!(_i$5 < _ref$5.$length)) { break; } */ if(!(_i$5 < _ref$5.$length)) { $s = 13; continue; }
					uriDomain[0] = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
					_r$10 = isIA5String(uriDomain[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$1 = _r$10;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tmp$12 = sliceType$1.nil;
						_tmp$13 = err$1;
						der = _tmp$12;
						err$1 = _tmp$13;
						$s = -1; return [der, err$1];
					}
					$r = b.AddASN1(48, (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function $b(b$1) {
						var {b$1, $s, $r, $c} = $restore(this, {b$1});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						$r = b$1.AddASN1(new asn1$1.Tag(6).ContextSpecific(), (function(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain) { return function(b$2) {
							var b$2;
							b$2.AddBytes((new sliceType$1($stringToBytes(uriDomain[0]))));
						}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
					}; })(email, excluded, ipAndMask, ipNet, name$2, permitted, uriDomain)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$5++;
				$s = 12; continue;
				case 13:
				_tuple$8 = b.Bytes();
				der = _tuple$8[0];
				err$1 = _tuple$8[1];
				$s = -1; return [der, err$1];
				/* */ } return; } var $f = {$blk: $b, $c: true, $r, _i$2, _i$3, _i$4, _i$5, _r$10, _r$8, _r$9, _ref$2, _ref$3, _ref$4, _ref$5, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$8, _tmp$9, _tuple$8, b, der, dns, email, emails, err$1, ipNet, ips, name$2, uriDomain, uriDomains, $s};return $f;
			}; })(excluded, ipAndMask, permitted);
			_r$8 = serialiseConstraints(template.PermittedDNSDomains, template.PermittedIPRanges, template.PermittedEmailAddresses, template.PermittedURIDomains); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$8 = _r$8;
			permitted[0] = _tuple$8[0];
			err$1 = _tuple$8[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$8 = sliceType$8.nil;
				_tmp$9 = err$1;
				ret = _tmp$8;
				err = _tmp$9;
				$s = -1; return [ret, err];
			}
			_r$9 = serialiseConstraints(template.ExcludedDNSDomains, template.ExcludedIPRanges, template.ExcludedEmailAddresses, template.ExcludedURIDomains); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$9 = _r$9;
			excluded[0] = _tuple$9[0];
			err$1 = _tuple$9[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$10 = sliceType$8.nil;
				_tmp$11 = err$1;
				ret = _tmp$10;
				err = _tmp$11;
				$s = -1; return [ret, err];
			}
			b = new cryptobyte.Builder.ptr($ifaceNil, sliceType$1.nil, false, ptrType$5.nil, 0, 0, false, ptrType$6.nil);
			$r = b.AddASN1(48, (function(excluded, ipAndMask, permitted) { return function $b(b$1) {
				var {b$1, $s, $r, $c} = $restore(this, {b$1});
				/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				/* */ if (permitted[0].$length > 0) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (permitted[0].$length > 0) { */ case 1:
					$r = b$1.AddASN1(new asn1$1.Tag(new asn1$1.Tag(0).ContextSpecific()).Constructed(), (function(excluded, ipAndMask, permitted) { return function(b$2) {
						var b$2;
						b$2.AddBytes(permitted[0]);
					}; })(excluded, ipAndMask, permitted)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 2:
				/* */ if (excluded[0].$length > 0) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (excluded[0].$length > 0) { */ case 4:
					$r = b$1.AddASN1(new asn1$1.Tag(new asn1$1.Tag(1).ContextSpecific()).Constructed(), (function(excluded, ipAndMask, permitted) { return function(b$2) {
						var b$2;
						b$2.AddBytes(excluded[0]);
					}; })(excluded, ipAndMask, permitted)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 5:
				$s = -1; return;
				/* */ } return; } var $f = {$blk: $b, $c: true, $r, b$1, $s};return $f;
			}; })(excluded, ipAndMask, permitted)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$10 = b.Bytes();
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$10[0];
			err$1 = _tuple$10[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$12 = sliceType$8.nil;
				_tmp$13 = err$1;
				ret = _tmp$12;
				err = _tmp$13;
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 26:
		/* */ if (template.CRLDistributionPoints.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionCRLDistributionPoints, asn1.ObjectIdentifier), template.ExtraExtensions)) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (template.CRLDistributionPoints.$length > 0 && !oidInExtensions($convertSliceType(oidExtensionCRLDistributionPoints, asn1.ObjectIdentifier), template.ExtraExtensions)) { */ case 30:
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Id = $convertSliceType(oidExtensionCRLDistributionPoints, asn1.ObjectIdentifier);
			crlDp = sliceType$10.nil;
			_ref$2 = template.CRLDistributionPoints;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				name$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				dp = new distributionPoint.ptr($clone(new distributionPointName.ptr(new sliceType$7([$clone(new asn1.RawValue.ptr(2, 6, false, (new sliceType$1($stringToBytes(name$2))), sliceType$1.nil), asn1.RawValue)]), pkix.RDNSequence.nil), distributionPointName), new asn1.BitString.ptr(sliceType$1.nil, 0), new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
				crlDp = $append(crlDp, dp);
				_i$2++;
			}
			_r$10 = asn1.Marshal(crlDp); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$11 = _r$10;
			((n < 0 || n >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + n]).Value = _tuple$11[0];
			err = _tuple$11[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ret, err];
			}
			n = n + (1) >> 0;
		/* } */ case 31:
		_tmp$14 = $appendSlice($subslice(ret, 0, n), template.ExtraExtensions);
		_tmp$15 = $ifaceNil;
		ret = _tmp$14;
		err = _tmp$15;
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: buildCertExtensions, $c: true, $r, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, aiaValues, authorityKeyId, b, crlDp, dp, err, err$1, excluded, ipAndMask, n, name, name$1, name$2, permitted, ret, serialiseConstraints, subjectIsEmpty, subjectKeyId, template, x, $s};return $f;
	};
	marshalKeyUsage = function(ku) {
		var {_r, _tuple, a, bitString, err, ext, ku, l, x, $s, $r, $c} = $restore(this, {ku});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ext = new pkix.Extension.ptr($convertSliceType(oidExtensionKeyUsage, asn1.ObjectIdentifier), true, sliceType$1.nil);
		a = arrayType.zero();
		a[0] = reverseBitsInAByte(((ku << 24 >>> 24)));
		a[1] = reverseBitsInAByte((((ku >> 8 >> 0) << 24 >>> 24)));
		l = 1;
		if (!((a[1] === 0))) {
			l = 2;
		}
		bitString = $subslice(new sliceType$1(a), 0, l);
		err = $ifaceNil;
		_r = asn1.Marshal((x = new asn1.BitString.ptr(bitString, asn1BitLength(bitString)), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ext.Value = _tuple[0];
		err = _tuple[1];
		$s = -1; return [ext, err];
		/* */ } return; } var $f = {$blk: marshalKeyUsage, $c: true, $r, _r, _tuple, a, bitString, err, ext, ku, l, x, $s};return $f;
	};
	marshalExtKeyUsage = function(extUsages, unknownUsages) {
		var {_i, _r, _ref, _tuple, _tuple$1, err, ext, extUsages, i, oid, oids, ok, u, unknownUsages, $s, $r, $c} = $restore(this, {extUsages, unknownUsages});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ext = new pkix.Extension.ptr($convertSliceType(oidExtensionExtendedKeyUsage, asn1.ObjectIdentifier), false, sliceType$1.nil);
		oids = $makeSlice(sliceType$11, (extUsages.$length + unknownUsages.$length >> 0));
		_ref = extUsages;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			u = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = oidFromExtKeyUsage(u);
			oid = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				((i < 0 || i >= oids.$length) ? ($throwRuntimeError("index out of range"), undefined) : oids.$array[oids.$offset + i] = oid);
			} else {
				$s = -1; return [ext, errors.New("x509: unknown extended key usage")];
			}
			_i++;
		}
		$copySlice($subslice(oids, extUsages.$length), unknownUsages);
		err = $ifaceNil;
		_r = asn1.Marshal(oids); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		ext.Value = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [ext, err];
		/* */ } return; } var $f = {$blk: marshalExtKeyUsage, $c: true, $r, _i, _r, _ref, _tuple, _tuple$1, err, ext, extUsages, i, oid, oids, ok, u, unknownUsages, $s};return $f;
	};
	marshalBasicConstraints = function(isCA, maxPathLen, maxPathLenZero) {
		var {_r, _tuple, err, ext, isCA, maxPathLen, maxPathLenZero, x, $s, $r, $c} = $restore(this, {isCA, maxPathLen, maxPathLenZero});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ext = new pkix.Extension.ptr($convertSliceType(oidExtensionBasicConstraints, asn1.ObjectIdentifier), true, sliceType$1.nil);
		if ((maxPathLen === 0) && !maxPathLenZero) {
			maxPathLen = -1;
		}
		err = $ifaceNil;
		_r = asn1.Marshal((x = new basicConstraints.ptr(isCA, maxPathLen), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ext.Value = _tuple[0];
		err = _tuple[1];
		$s = -1; return [ext, err];
		/* */ } return; } var $f = {$blk: marshalBasicConstraints, $c: true, $r, _r, _tuple, err, ext, isCA, maxPathLen, maxPathLenZero, x, $s};return $f;
	};
	marshalCertificatePolicies = function(policyIdentifiers) {
		var {_i, _r, _ref, _tuple, err, ext, i, policies, policy, policyIdentifiers, $s, $r, $c} = $restore(this, {policyIdentifiers});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ext = new pkix.Extension.ptr($convertSliceType(oidExtensionCertificatePolicies, asn1.ObjectIdentifier), false, sliceType$1.nil);
		policies = $makeSlice(sliceType$12, policyIdentifiers.$length);
		_ref = policyIdentifiers;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			policy = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= policies.$length) ? ($throwRuntimeError("index out of range"), undefined) : policies.$array[policies.$offset + i]).Policy = policy;
			_i++;
		}
		err = $ifaceNil;
		_r = asn1.Marshal(policies); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ext.Value = _tuple[0];
		err = _tuple[1];
		$s = -1; return [ext, err];
		/* */ } return; } var $f = {$blk: marshalCertificatePolicies, $c: true, $r, _i, _r, _ref, _tuple, err, ext, i, policies, policy, policyIdentifiers, $s};return $f;
	};
	subjectBytes = function(cert) {
		var {$24r, _r, cert, $s, $r, $c} = $restore(this, {cert});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (cert.RawSubject.$length > 0) {
			$s = -1; return [cert.RawSubject, $ifaceNil];
		}
		_r = asn1.Marshal($clone(cert.Subject, pkix.Name).ToRDNSequence()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: subjectBytes, $c: true, $r, $24r, _r, cert, $s};return $f;
	};
	signingParamsForPublicKey = function(pub, requestedSigAlgo) {
		var {_1, _entry, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, _v, details, err, found, hashFunc, pub, pub$1, pub$2, pub$3, pub$4, pubType, requestedSigAlgo, sigAlgo, $s, $r, $c} = $restore(this, {pub, requestedSigAlgo});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		hashFunc = 0;
		sigAlgo = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
		err = $ifaceNil;
		pubType = 0;
		_ref = pub;
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ed25519.PublicKey, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$2, true)[1]) { */ case 1:
			pub$1 = _ref.$val;
			pubType = 1;
			hashFunc = 5;
			sigAlgo.Algorithm = oidSignatureSHA256WithRSA;
			asn1.RawValue.copy(sigAlgo.Parameters, asn1.NullRawValue);
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 2:
			pub$2 = _ref.$val;
			pubType = 3;
				_1 = pub$2.Curve;
				_r = elliptic.P224(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if ($interfaceIsEqual(_1, (_r))) { _v = true; $s = 12; continue s; }
				_r$1 = elliptic.P256(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = $interfaceIsEqual(_1, (_r$1)); case 12:
				/* */ if (_v) { $s = 7; continue; }
				_r$2 = elliptic.P384(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_1, (_r$2))) { $s = 8; continue; }
				_r$3 = elliptic.P521(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_1, (_r$3))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 7:
					hashFunc = 5;
					sigAlgo.Algorithm = oidSignatureECDSAWithSHA256;
					$s = 11; continue;
				/* } else if ($interfaceIsEqual(_1, (_r$2))) { */ case 8:
					hashFunc = 6;
					sigAlgo.Algorithm = oidSignatureECDSAWithSHA384;
					$s = 11; continue;
				/* } else if ($interfaceIsEqual(_1, (_r$3))) { */ case 9:
					hashFunc = 7;
					sigAlgo.Algorithm = oidSignatureECDSAWithSHA512;
					$s = 11; continue;
				/* } else { */ case 10:
					err = errors.New("x509: unknown elliptic curve");
				/* } */ case 11:
			case 6:
			$s = 5; continue;
		/* } else if ($assertType(_ref, ed25519.PublicKey, true)[1]) { */ case 3:
			pub$3 = _ref.$val;
			pubType = 4;
			sigAlgo.Algorithm = oidSignatureEd25519;
			$s = 5; continue;
		/* } else { */ case 4:
			pub$4 = _ref;
			err = errors.New("x509: only RSA, ECDSA and Ed25519 keys supported");
		/* } */ case 5:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [hashFunc, sigAlgo, err];
		}
		if (requestedSigAlgo === 0) {
			$s = -1; return [hashFunc, sigAlgo, err];
		}
		found = false;
		_ref$1 = signatureAlgorithmDetails;
		_i = 0;
		while (true) {
			if (!(_i < _ref$1.$length)) { break; }
			details = $clone(((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]), structType);
			if (details.algo === requestedSigAlgo) {
				if (!((details.pubKeyAlgo === pubType))) {
					err = errors.New("x509: requested SignatureAlgorithm does not match private key type");
					$s = -1; return [hashFunc, sigAlgo, err];
				}
				_tmp = details.oid;
				_tmp$1 = details.hash;
				sigAlgo.Algorithm = _tmp;
				hashFunc = _tmp$1;
				if ((hashFunc === 0) && !((pubType === 4))) {
					err = errors.New("x509: cannot sign with hash function requested");
					$s = -1; return [hashFunc, sigAlgo, err];
				}
				if (hashFunc === 2) {
					err = errors.New("x509: signing with MD5 is not supported");
					$s = -1; return [hashFunc, sigAlgo, err];
				}
				if (new SignatureAlgorithm(requestedSigAlgo).isRSAPSS()) {
					asn1.RawValue.copy(sigAlgo.Parameters, (_entry = $mapIndex(hashToPSSParameters,crypto.Hash.keyFor(hashFunc)), _entry !== undefined ? _entry.v : new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil)));
				}
				found = true;
				break;
			}
			_i++;
		}
		if (!found) {
			err = errors.New("x509: unknown SignatureAlgorithm");
		}
		$s = -1; return [hashFunc, sigAlgo, err];
		/* */ } return; } var $f = {$blk: signingParamsForPublicKey, $c: true, $r, _1, _entry, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, _v, details, err, found, hashFunc, pub, pub$1, pub$2, pub$3, pub$4, pubType, requestedSigAlgo, sigAlgo, $s};return $f;
	};
	CreateCertificate = function(rand, template, parent, pub, priv) {
		var {$24r, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, asn1Issuer, asn1Subject, authorityKeyId, c, encodedPublicKey, err, err$1, extensions, h, h$1, hashFunc, key, ok, ok$1, parent, priv, privPub, pub, publicKeyAlgorithm, publicKeyBytes, rand, signature, signatureAlgorithm, signed, signedCert, signerOpts, subjectKeyId, tbsCertContents, template, x, $s, $r, $c} = $restore(this, {rand, template, parent, pub, priv});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(priv, crypto.Signer, true);
		key = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return [sliceType$1.nil, errors.New("x509: certificate private key does not implement crypto.Signer")];
		}
		if (template.SerialNumber === ptrType$1.nil) {
			$s = -1; return [sliceType$1.nil, errors.New("x509: no SerialNumber given")];
		}
		if (template.SerialNumber.Sign() === -1) {
			$s = -1; return [sliceType$1.nil, errors.New("x509: serial number must be positive")];
		}
		if (template.BasicConstraintsValid && !template.IsCA && !((template.MaxPathLen === -1)) && (!((template.MaxPathLen === 0)) || template.MaxPathLenZero)) {
			$s = -1; return [sliceType$1.nil, errors.New("x509: only CAs are allowed to specify MaxPathLen")];
		}
		_r = key.Public(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = signingParamsForPublicKey(_r, template.SignatureAlgorithm); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hashFunc = _tuple$1[0];
		signatureAlgorithm = $clone(_tuple$1[1], pkix.AlgorithmIdentifier);
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		_r$2 = marshalPublicKey(pub); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		publicKeyBytes = _tuple$2[0];
		publicKeyAlgorithm = $clone(_tuple$2[1], pkix.AlgorithmIdentifier);
		err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		_r$3 = subjectBytes(parent); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		asn1Issuer = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		_r$4 = subjectBytes(template); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$4 = _r$4;
		asn1Subject = _tuple$4[0];
		err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		authorityKeyId = template.AuthorityKeyId;
		if (!bytes.Equal(asn1Issuer, asn1Subject) && parent.SubjectKeyId.$length > 0) {
			authorityKeyId = parent.SubjectKeyId;
		}
		subjectKeyId = template.SubjectKeyId;
		if ((subjectKeyId.$length === 0) && template.IsCA) {
			h = $clone(sha1.Sum(publicKeyBytes), arrayType$1);
			subjectKeyId = new sliceType$1(h);
		}
		_r$5 = key.Public(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$5 = $assertType(_r$5, privateKey, true);
		privPub = _tuple$5[0];
		ok$1 = _tuple$5[1];
		/* */ if (!ok$1) { $s = 7; continue; }
		if (!(!($interfaceIsEqual(parent.PublicKey, $ifaceNil)))) { _v = false; $s = 10; continue s; }
		_r$6 = privPub.Equal(parent.PublicKey); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v = !_r$6; case 10:
		/* */ if (_v) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!ok$1) { */ case 7:
			$s = -1; return [sliceType$1.nil, errors.New("x509: internal error: supported public key does not implement Equal")];
		/* } else if (_v) { */ case 8:
			$s = -1; return [sliceType$1.nil, errors.New("x509: provided PrivateKey doesn't match parent's PublicKey")];
		/* } */ case 9:
		_r$7 = buildCertExtensions(template, bytes.Equal(asn1Subject, emptyASN1Subject), authorityKeyId, subjectKeyId); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$6 = _r$7;
		extensions = _tuple$6[0];
		err = _tuple$6[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		encodedPublicKey = new asn1.BitString.ptr(publicKeyBytes, $imul(publicKeyBytes.$length, 8));
		c = new tbsCertificate.ptr(asn1.RawContent.nil, 2, template.SerialNumber, $clone(signatureAlgorithm, pkix.AlgorithmIdentifier), $clone(new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, asn1Issuer), asn1.RawValue), $clone(new validity.ptr($clone($clone(template.NotBefore, time.Time).UTC(), time.Time), $clone($clone(template.NotAfter, time.Time).UTC(), time.Time)), validity), $clone(new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, asn1Subject), asn1.RawValue), $clone(new publicKeyInfo.ptr(asn1.RawContent.nil, $clone(publicKeyAlgorithm, pkix.AlgorithmIdentifier), $clone(encodedPublicKey, asn1.BitString)), publicKeyInfo), new asn1.BitString.ptr(sliceType$1.nil, 0), new asn1.BitString.ptr(sliceType$1.nil, 0), extensions);
		_r$8 = asn1.Marshal(new c.constructor.elem(c)); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$7 = _r$8;
		tbsCertContents = _tuple$7[0];
		err = _tuple$7[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		c.Raw = $convertSliceType(tbsCertContents, asn1.RawContent);
		signed = tbsCertContents;
		/* */ if (!((hashFunc === 0))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!((hashFunc === 0))) { */ case 14:
			_r$9 = new crypto.Hash(hashFunc).New(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			h$1 = _r$9;
			_r$10 = h$1.Write(signed); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = h$1.Sum(sliceType$1.nil); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			signed = _r$11;
		/* } */ case 15:
		signerOpts = new crypto.Hash(hashFunc);
		if (!((template.SignatureAlgorithm === 0)) && new SignatureAlgorithm(template.SignatureAlgorithm).isRSAPSS()) {
			signerOpts = new rsa.PSSOptions.ptr(-1, hashFunc);
		}
		signature = sliceType$1.nil;
		_r$12 = key.Sign(rand, signed, signerOpts); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_tuple$8 = _r$12;
		signature = _tuple$8[0];
		err = _tuple$8[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		_r$13 = asn1.Marshal((x = new certificate.ptr(asn1.RawContent.nil, $clone(c, tbsCertificate), $clone(signatureAlgorithm, pkix.AlgorithmIdentifier), $clone(new asn1.BitString.ptr(signature, $imul(signature.$length, 8)), asn1.BitString)), new x.constructor.elem(x))); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$9 = _r$13;
		signedCert = _tuple$9[0];
		err = _tuple$9[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
		}
		_r$14 = getSignatureAlgorithmFromAI($clone(signatureAlgorithm, pkix.AlgorithmIdentifier)); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_arg = _r$14;
		_arg$1 = $convertSliceType(c.Raw, sliceType$1);
		_arg$2 = signature;
		_r$15 = key.Public(); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_arg$3 = _r$15;
		_r$16 = checkSignature(_arg, _arg$1, _arg$2, _arg$3, true); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		err$1 = _r$16;
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 24:
			_r$17 = fmt.Errorf("x509: signature over certificate returned by signer is invalid: %w", new sliceType$6([err$1])); /* */ $s = 26; case 26: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$24r = [sliceType$1.nil, _r$17];
			$s = 27; case 27: return $24r;
		/* } */ case 25:
		$s = -1; return [signedCert, $ifaceNil];
		/* */ } return; } var $f = {$blk: CreateCertificate, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, asn1Issuer, asn1Subject, authorityKeyId, c, encodedPublicKey, err, err$1, extensions, h, h$1, hashFunc, key, ok, ok$1, parent, priv, privPub, pub, publicKeyAlgorithm, publicKeyBytes, rand, signature, signatureAlgorithm, signed, signedCert, signerOpts, subjectKeyId, tbsCertContents, template, x, $s};return $f;
	};
	$pkg.CreateCertificate = CreateCertificate;
	Certificate.ptr.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) {
		var {$24r, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, aki, c, crlBytes, err, expiry, h, hashFunc, i, key, now, ok, priv, rand, rc, revokedCerts, revokedCertsUTC, signature, signatureAlgorithm, signed, tbsCertList, tbsCertListContents, x, x$1, $s, $r, $c} = $restore(this, {rand, priv, revokedCerts, now, expiry});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		crlBytes = sliceType$1.nil;
		err = $ifaceNil;
		c = this;
		_tuple = $assertType(priv, crypto.Signer, true);
		key = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp = sliceType$1.nil;
			_tmp$1 = errors.New("x509: certificate private key does not implement crypto.Signer");
			crlBytes = _tmp;
			err = _tmp$1;
			$s = -1; return [crlBytes, err];
		}
		_r = key.Public(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = signingParamsForPublicKey(_r, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hashFunc = _tuple$1[0];
		signatureAlgorithm = $clone(_tuple$1[1], pkix.AlgorithmIdentifier);
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$1.nil;
			_tmp$3 = err;
			crlBytes = _tmp$2;
			err = _tmp$3;
			$s = -1; return [crlBytes, err];
		}
		revokedCertsUTC = $makeSlice(sliceType$13, revokedCerts.$length);
		_ref = revokedCerts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			rc = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pkix.RevokedCertificate);
			time.Time.copy(rc.RevocationTime, $clone(rc.RevocationTime, time.Time).UTC());
			pkix.RevokedCertificate.copy(((i < 0 || i >= revokedCertsUTC.$length) ? ($throwRuntimeError("index out of range"), undefined) : revokedCertsUTC.$array[revokedCertsUTC.$offset + i]), rc);
			_i++;
		}
		tbsCertList = new pkix.TBSCertificateList.ptr(asn1.RawContent.nil, 1, $clone(signatureAlgorithm, pkix.AlgorithmIdentifier), $clone(c.Subject, pkix.Name).ToRDNSequence(), $clone($clone(now, time.Time).UTC(), time.Time), $clone($clone(expiry, time.Time).UTC(), time.Time), revokedCertsUTC, sliceType$8.nil);
		/* */ if (c.SubjectKeyId.$length > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (c.SubjectKeyId.$length > 0) { */ case 3:
			aki = new pkix.Extension.ptr(asn1.ObjectIdentifier.nil, false, sliceType$1.nil);
			aki.Id = $convertSliceType(oidExtensionAuthorityKeyId, asn1.ObjectIdentifier);
			_r$2 = asn1.Marshal((x = new authKeyId.ptr(c.SubjectKeyId), new x.constructor.elem(x))); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			aki.Value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [crlBytes, err];
			}
			tbsCertList.Extensions = $append(tbsCertList.Extensions, aki);
		/* } */ case 4:
		_r$3 = asn1.Marshal(new tbsCertList.constructor.elem(tbsCertList)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		tbsCertListContents = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [crlBytes, err];
		}
		signed = tbsCertListContents;
		/* */ if (!((hashFunc === 0))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!((hashFunc === 0))) { */ case 7:
			_r$4 = new crypto.Hash(hashFunc).New(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			h = _r$4;
			_r$5 = h.Write(signed); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = h.Sum(sliceType$1.nil); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			signed = _r$6;
		/* } */ case 8:
		signature = sliceType$1.nil;
		_r$7 = key.Sign(rand, signed, new crypto.Hash(hashFunc)); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$4 = _r$7;
		signature = _tuple$4[0];
		err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [crlBytes, err];
		}
		_r$8 = asn1.Marshal((x$1 = new pkix.CertificateList.ptr($clone(tbsCertList, pkix.TBSCertificateList), $clone(signatureAlgorithm, pkix.AlgorithmIdentifier), $clone(new asn1.BitString.ptr(signature, $imul(signature.$length, 8)), asn1.BitString)), new x$1.constructor.elem(x$1))); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$5 = _r$8;
		crlBytes = _tuple$5[0];
		err = _tuple$5[1];
		$24r = [crlBytes, err];
		$s = 14; case 14: return $24r;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.CreateCRL, $c: true, $r, $24r, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, aki, c, crlBytes, err, expiry, h, hashFunc, i, key, now, ok, priv, rand, rc, revokedCerts, revokedCertsUTC, signature, signatureAlgorithm, signed, tbsCertList, tbsCertListContents, x, x$1, $s};return $f;
	};
	Certificate.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) { return this.$val.CreateCRL(rand, priv, revokedCerts, now, expiry); };
	CertificateInvalidError.ptr.prototype.Error = function() {
		var _1, e;
		e = this;
		_1 = e.Reason;
		if (_1 === (0)) {
			return "x509: certificate is not authorized to sign other certificates";
		} else if (_1 === (1)) {
			return "x509: certificate has expired or is not yet valid: " + e.Detail;
		} else if (_1 === (2)) {
			return "x509: a root or intermediate certificate is not authorized to sign for this name: " + e.Detail;
		} else if (_1 === (9)) {
			return "x509: a root or intermediate certificate is not authorized for an extended key usage: " + e.Detail;
		} else if (_1 === (3)) {
			return "x509: too many intermediates for path length constraint";
		} else if (_1 === (4)) {
			return "x509: certificate specifies an incompatible key usage";
		} else if (_1 === (5)) {
			return "x509: issuer name does not match subject from issuing certificate";
		} else if (_1 === (6)) {
			return "x509: issuer has name constraints but leaf doesn't have a SAN extension";
		} else if (_1 === (7)) {
			return "x509: issuer has name constraints but leaf contains unknown or unconstrained name: " + e.Detail;
		}
		return "x509: unknown error";
	};
	CertificateInvalidError.prototype.Error = function() { return this.$val.Error(); };
	HostnameError.ptr.prototype.Error = function() {
		var _i, _ref, c, h, ip, san, valid;
		h = this;
		c = h.Certificate;
		if (!c.hasSANExtension() && matchHostnames(c.Subject.CommonName, h.Host)) {
			return "x509: certificate relies on legacy Common Name field, use SANs instead";
		}
		valid = "";
		ip = net.ParseIP(h.Host);
		if (!(ip === net.IP.nil)) {
			if (c.IPAddresses.$length === 0) {
				return "x509: cannot validate certificate for " + h.Host + " because it doesn't contain any IP SANs";
			}
			_ref = c.IPAddresses;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				san = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (valid.length > 0) {
					valid = valid + (", ");
				}
				valid = valid + (san.String());
				_i++;
			}
		} else {
			valid = strings.Join(c.DNSNames, ", ");
		}
		if (valid.length === 0) {
			return "x509: certificate is not valid for any names, but wanted to match " + h.Host;
		}
		return "x509: certificate is valid for " + valid + ", not " + h.Host;
	};
	HostnameError.prototype.Error = function() { return this.$val.Error(); };
	UnknownAuthorityError.ptr.prototype.Error = function() {
		var {_r, _r$1, certName, e, s, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		s = "x509: certificate signed by unknown authority";
		/* */ if (!($interfaceIsEqual(e.hintErr, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e.hintErr, $ifaceNil))) { */ case 1:
			certName = e.hintCert.Subject.CommonName;
			/* */ if (certName.length === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (certName.length === 0) { */ case 3:
				/* */ if (e.hintCert.Subject.Organization.$length > 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (e.hintCert.Subject.Organization.$length > 0) { */ case 5:
					certName = (x = e.hintCert.Subject.Organization, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
					$s = 7; continue;
				/* } else { */ case 6:
					_r = e.hintCert.SerialNumber.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					certName = "serial:" + _r;
				/* } */ case 7:
			/* } */ case 4:
			_r$1 = fmt.Sprintf(" (possibly because of %q while trying to verify candidate authority certificate %q)", new sliceType$6([e.hintErr, new $String(certName)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			s = s + (_r$1);
		/* } */ case 2:
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: UnknownAuthorityError.ptr.prototype.Error, $c: true, $r, _r, _r$1, certName, e, s, x, $s};return $f;
	};
	UnknownAuthorityError.prototype.Error = function() { return this.$val.Error(); };
	SystemRootsError.ptr.prototype.Error = function() {
		var {$24r, _r, msg, se, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		se = this;
		msg = "x509: failed to load system roots and no roots provided";
		/* */ if (!($interfaceIsEqual(se.Err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(se.Err, $ifaceNil))) { */ case 1:
			_r = se.Err.Error(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = msg + "; " + _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		$s = -1; return msg;
		/* */ } return; } var $f = {$blk: SystemRootsError.ptr.prototype.Error, $c: true, $r, $24r, _r, msg, se, $s};return $f;
	};
	SystemRootsError.prototype.Error = function() { return this.$val.Error(); };
	SystemRootsError.ptr.prototype.Unwrap = function() {
		var se;
		se = this;
		return se.Err;
	};
	SystemRootsError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	parseRFC2821Mailbox = function(in$1) {
		var _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, c, c$1, in$1, localPartBytes, mailbox, ok, ok$1, twoDots, x;
		mailbox = new rfc2821Mailbox.ptr("", "");
		ok = false;
		if (in$1.length === 0) {
			_tmp = $clone(mailbox, rfc2821Mailbox);
			_tmp$1 = false;
			rfc2821Mailbox.copy(mailbox, _tmp);
			ok = _tmp$1;
			return [mailbox, ok];
		}
		localPartBytes = $makeSlice(sliceType$1, 0, (_q = in$1.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		if (in$1.charCodeAt(0) === 34) {
			in$1 = $substring(in$1, 1);
			QuotedString:
			while (true) {
				if (in$1.length === 0) {
					_tmp$2 = $clone(mailbox, rfc2821Mailbox);
					_tmp$3 = false;
					rfc2821Mailbox.copy(mailbox, _tmp$2);
					ok = _tmp$3;
					return [mailbox, ok];
				}
				c = in$1.charCodeAt(0);
				in$1 = $substring(in$1, 1);
				if ((c === 34)) {
					break QuotedString;
				} else if ((c === 92)) {
					if (in$1.length === 0) {
						_tmp$4 = $clone(mailbox, rfc2821Mailbox);
						_tmp$5 = false;
						rfc2821Mailbox.copy(mailbox, _tmp$4);
						ok = _tmp$5;
						return [mailbox, ok];
					}
					if ((in$1.charCodeAt(0) === 11) || (in$1.charCodeAt(0) === 12) || (1 <= in$1.charCodeAt(0) && in$1.charCodeAt(0) <= 9) || (14 <= in$1.charCodeAt(0) && in$1.charCodeAt(0) <= 127)) {
						localPartBytes = $append(localPartBytes, in$1.charCodeAt(0));
						in$1 = $substring(in$1, 1);
					} else {
						_tmp$6 = $clone(mailbox, rfc2821Mailbox);
						_tmp$7 = false;
						rfc2821Mailbox.copy(mailbox, _tmp$6);
						ok = _tmp$7;
						return [mailbox, ok];
					}
				} else if ((c === 11) || (c === 12) || (c === 32) || (c === 33) || (c === 127) || (1 <= c && c <= 8) || (14 <= c && c <= 31) || (35 <= c && c <= 91) || (93 <= c && c <= 126)) {
					localPartBytes = $append(localPartBytes, c);
				} else {
					_tmp$8 = $clone(mailbox, rfc2821Mailbox);
					_tmp$9 = false;
					rfc2821Mailbox.copy(mailbox, _tmp$8);
					ok = _tmp$9;
					return [mailbox, ok];
				}
			}
		} else {
			NextChar:
			while (true) {
				if (!(in$1.length > 0)) { break; }
				c$1 = in$1.charCodeAt(0);
				if ((c$1 === 92)) {
					in$1 = $substring(in$1, 1);
					if (in$1.length === 0) {
						_tmp$10 = $clone(mailbox, rfc2821Mailbox);
						_tmp$11 = false;
						rfc2821Mailbox.copy(mailbox, _tmp$10);
						ok = _tmp$11;
						return [mailbox, ok];
					}
					localPartBytes = $append(localPartBytes, in$1.charCodeAt(0));
					in$1 = $substring(in$1, 1);
				} else if ((48 <= c$1 && c$1 <= 57) || (97 <= c$1 && c$1 <= 122) || (65 <= c$1 && c$1 <= 90) || (c$1 === 33) || (c$1 === 35) || (c$1 === 36) || (c$1 === 37) || (c$1 === 38) || (c$1 === 39) || (c$1 === 42) || (c$1 === 43) || (c$1 === 45) || (c$1 === 47) || (c$1 === 61) || (c$1 === 63) || (c$1 === 94) || (c$1 === 95) || (c$1 === 96) || (c$1 === 123) || (c$1 === 124) || (c$1 === 125) || (c$1 === 126) || (c$1 === 46)) {
					localPartBytes = $append(localPartBytes, in$1.charCodeAt(0));
					in$1 = $substring(in$1, 1);
				} else {
					break NextChar;
				}
			}
			if (localPartBytes.$length === 0) {
				_tmp$12 = $clone(mailbox, rfc2821Mailbox);
				_tmp$13 = false;
				rfc2821Mailbox.copy(mailbox, _tmp$12);
				ok = _tmp$13;
				return [mailbox, ok];
			}
			twoDots = new sliceType$1([46, 46]);
			if (((0 >= localPartBytes.$length ? ($throwRuntimeError("index out of range"), undefined) : localPartBytes.$array[localPartBytes.$offset + 0]) === 46) || ((x = localPartBytes.$length - 1 >> 0, ((x < 0 || x >= localPartBytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : localPartBytes.$array[localPartBytes.$offset + x])) === 46) || bytes.Contains(localPartBytes, twoDots)) {
				_tmp$14 = $clone(mailbox, rfc2821Mailbox);
				_tmp$15 = false;
				rfc2821Mailbox.copy(mailbox, _tmp$14);
				ok = _tmp$15;
				return [mailbox, ok];
			}
		}
		if ((in$1.length === 0) || !((in$1.charCodeAt(0) === 64))) {
			_tmp$16 = $clone(mailbox, rfc2821Mailbox);
			_tmp$17 = false;
			rfc2821Mailbox.copy(mailbox, _tmp$16);
			ok = _tmp$17;
			return [mailbox, ok];
		}
		in$1 = $substring(in$1, 1);
		_tuple = domainToReverseLabels(in$1);
		ok$1 = _tuple[1];
		if (!ok$1) {
			_tmp$18 = $clone(mailbox, rfc2821Mailbox);
			_tmp$19 = false;
			rfc2821Mailbox.copy(mailbox, _tmp$18);
			ok = _tmp$19;
			return [mailbox, ok];
		}
		mailbox.local = ($bytesToString(localPartBytes));
		mailbox.domain = in$1;
		_tmp$20 = $clone(mailbox, rfc2821Mailbox);
		_tmp$21 = true;
		rfc2821Mailbox.copy(mailbox, _tmp$20);
		ok = _tmp$21;
		return [mailbox, ok];
	};
	domainToReverseLabels = function(domain) {
		var _i, _i$1, _ref, _ref$1, _rune, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, c, domain, i, label, ok, reverseLabels;
		reverseLabels = sliceType$4.nil;
		ok = false;
		while (true) {
			if (!(domain.length > 0)) { break; }
			i = strings.LastIndexByte(domain, 46);
			if (i === -1) {
				reverseLabels = $append(reverseLabels, domain);
				domain = "";
			} else {
				reverseLabels = $append(reverseLabels, $substring(domain, (i + 1 >> 0)));
				domain = $substring(domain, 0, i);
			}
		}
		if (reverseLabels.$length > 0 && ((0 >= reverseLabels.$length ? ($throwRuntimeError("index out of range"), undefined) : reverseLabels.$array[reverseLabels.$offset + 0]).length === 0)) {
			_tmp = sliceType$4.nil;
			_tmp$1 = false;
			reverseLabels = _tmp;
			ok = _tmp$1;
			return [reverseLabels, ok];
		}
		_ref = reverseLabels;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			label = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (label.length === 0) {
				_tmp$2 = sliceType$4.nil;
				_tmp$3 = false;
				reverseLabels = _tmp$2;
				ok = _tmp$3;
				return [reverseLabels, ok];
			}
			_ref$1 = label;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.length)) { break; }
				_rune = $decodeRune(_ref$1, _i$1);
				c = _rune[0];
				if (c < 33 || c > 126) {
					_tmp$4 = sliceType$4.nil;
					_tmp$5 = false;
					reverseLabels = _tmp$4;
					ok = _tmp$5;
					return [reverseLabels, ok];
				}
				_i$1 += _rune[1];
			}
			_i++;
		}
		_tmp$6 = reverseLabels;
		_tmp$7 = true;
		reverseLabels = _tmp$6;
		ok = _tmp$7;
		return [reverseLabels, ok];
	};
	matchEmailConstraint = function(mailbox, constraint) {
		var {$24r, $24r$1, _r, _r$1, _tuple, constraint, constraintMailbox, mailbox, ok, $s, $r, $c} = $restore(this, {mailbox, constraint});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (strings.Contains(constraint, "@")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (strings.Contains(constraint, "@")) { */ case 1:
			_tuple = parseRFC2821Mailbox(constraint);
			constraintMailbox = $clone(_tuple[0], rfc2821Mailbox);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!ok) { */ case 3:
				_r = fmt.Errorf("x509: internal error: cannot parse constraint %q", new sliceType$6([new $String(constraint)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = [false, _r];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return [mailbox.local === constraintMailbox.local && strings.EqualFold(mailbox.domain, constraintMailbox.domain), $ifaceNil];
		/* } */ case 2:
		_r$1 = matchDomainConstraint(mailbox.domain, constraint); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 8; case 8: return $24r$1;
		/* */ } return; } var $f = {$blk: matchEmailConstraint, $c: true, $r, $24r, $24r$1, _r, _r$1, _tuple, constraint, constraintMailbox, mailbox, ok, $s};return $f;
	};
	matchURIConstraint = function(uri, constraint) {
		var {$24r, $24r$1, $24r$2, _r, _r$1, _r$2, _r$3, _tuple, constraint, err, host, uri, $s, $r, $c} = $restore(this, {uri, constraint});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		host = uri.Host;
		/* */ if (host.length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (host.length === 0) { */ case 1:
			_r = fmt.Errorf("URI with empty host (%q) cannot be matched against constraints", new sliceType$6([new $String(uri.String())])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = [false, _r];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (strings.Contains(host, ":") && !strings.HasSuffix(host, "]")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (strings.Contains(host, ":") && !strings.HasSuffix(host, "]")) { */ case 5:
			err = $ifaceNil;
			_r$1 = net.SplitHostPort(uri.Host); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			host = _tuple[0];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [false, err];
			}
		/* } */ case 6:
		/* */ if (strings.HasPrefix(host, "[") && strings.HasSuffix(host, "]") || !(net.ParseIP(host) === net.IP.nil)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (strings.HasPrefix(host, "[") && strings.HasSuffix(host, "]") || !(net.ParseIP(host) === net.IP.nil)) { */ case 8:
			_r$2 = fmt.Errorf("URI with IP (%q) cannot be matched against constraints", new sliceType$6([new $String(uri.String())])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r$1 = [false, _r$2];
			$s = 11; case 11: return $24r$1;
		/* } */ case 9:
		_r$3 = matchDomainConstraint(host, constraint); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$2 = _r$3;
		$s = 13; case 13: return $24r$2;
		/* */ } return; } var $f = {$blk: matchURIConstraint, $c: true, $r, $24r, $24r$1, $24r$2, _r, _r$1, _r$2, _r$3, _tuple, constraint, err, host, uri, $s};return $f;
	};
	matchIPConstraint = function(ip, constraint) {
		var _i, _ref, constraint, i, ip, mask, x, x$1;
		if (!((ip.$length === constraint.IP.$length))) {
			return [false, $ifaceNil];
		}
		_ref = ip;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			mask = (x = constraint.Mask, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!((((((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i]) & mask) >>> 0) === (((x$1 = constraint.IP, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])) & mask) >>> 0)))) {
				return [false, $ifaceNil];
			}
			_i++;
		}
		return [true, $ifaceNil];
	};
	matchDomainConstraint = function(domain, constraint) {
		var {$24r, $24r$1, _i, _r, _r$1, _ref, _tuple, _tuple$1, constraint, constraintLabel, constraintLabels, domain, domainLabels, i, mustHaveSubdomains, ok, $s, $r, $c} = $restore(this, {domain, constraint});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (constraint.length === 0) {
			$s = -1; return [true, $ifaceNil];
		}
		_tuple = domainToReverseLabels(domain);
		domainLabels = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = fmt.Errorf("x509: internal error: cannot parse domain %q", new sliceType$6([new $String(domain)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = [false, _r];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		mustHaveSubdomains = false;
		if (constraint.charCodeAt(0) === 46) {
			mustHaveSubdomains = true;
			constraint = $substring(constraint, 1);
		}
		_tuple$1 = domainToReverseLabels(constraint);
		constraintLabels = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!ok) { */ case 5:
			_r$1 = fmt.Errorf("x509: internal error: cannot parse domain %q", new sliceType$6([new $String(constraint)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r$1 = [false, _r$1];
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		if (domainLabels.$length < constraintLabels.$length || (mustHaveSubdomains && (domainLabels.$length === constraintLabels.$length))) {
			$s = -1; return [false, $ifaceNil];
		}
		_ref = constraintLabels;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			constraintLabel = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!strings.EqualFold(constraintLabel, ((i < 0 || i >= domainLabels.$length) ? ($throwRuntimeError("index out of range"), undefined) : domainLabels.$array[domainLabels.$offset + i]))) {
				$s = -1; return [false, $ifaceNil];
			}
			_i++;
		}
		$s = -1; return [true, $ifaceNil];
		/* */ } return; } var $f = {$blk: matchDomainConstraint, $c: true, $r, $24r, $24r$1, _i, _r, _r$1, _ref, _tuple, _tuple$1, constraint, constraintLabel, constraintLabels, domain, domainLabels, i, mustHaveSubdomains, ok, $s};return $f;
	};
	Certificate.ptr.prototype.checkNameConstraints = function(count, maxConstraintComparisons, nameType, name, parsedName, match, permitted, excluded) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, c, constraint, constraint$1, count, err, err$1, excluded, excludedValue, i, i$1, match, match$1, maxConstraintComparisons, name, nameType, ok, parsedName, permitted, permittedValue, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {count, maxConstraintComparisons, nameType, name, parsedName, match, permitted, excluded});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		_r = reflect.ValueOf(excluded); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		excludedValue = _r;
		_r$1 = $clone(excludedValue, reflect.Value).Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		count.$set(count.$get() + (_r$1) >> 0);
		if (count.$get() > maxConstraintComparisons) {
			$s = -1; return (x = new CertificateInvalidError.ptr(c, 8, ""), new x.constructor.elem(x));
		}
		i = 0;
		/* while (true) { */ case 3:
			_r$2 = $clone(excludedValue, reflect.Value).Len(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 4; continue; }
			_r$3 = $clone(excludedValue, reflect.Value).Index(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = $clone(_r$3, reflect.Value).Interface(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			constraint = _r$4;
			_r$5 = match(parsedName, constraint); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			match$1 = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
				_r$6 = err.Error(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$24r = (x$1 = new CertificateInvalidError.ptr(c, 2, _r$6), new x$1.constructor.elem(x$1));
				$s = 12; case 12: return $24r;
			/* } */ case 10:
			/* */ if (match$1) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (match$1) { */ case 13:
				_r$7 = fmt.Sprintf("%s %q is excluded by constraint %q", new sliceType$6([new $String(nameType), new $String(name), constraint])); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$1 = (x$2 = new CertificateInvalidError.ptr(c, 2, _r$7), new x$2.constructor.elem(x$2));
				$s = 16; case 16: return $24r$1;
			/* } */ case 14:
			i = i + (1) >> 0;
		$s = 3; continue;
		case 4:
		_r$8 = reflect.ValueOf(permitted); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		permittedValue = _r$8;
		_r$9 = $clone(permittedValue, reflect.Value).Len(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		count.$set(count.$get() + (_r$9) >> 0);
		if (count.$get() > maxConstraintComparisons) {
			$s = -1; return (x$3 = new CertificateInvalidError.ptr(c, 8, ""), new x$3.constructor.elem(x$3));
		}
		ok = true;
		i$1 = 0;
		/* while (true) { */ case 19:
			_r$10 = $clone(permittedValue, reflect.Value).Len(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* if (!(i$1 < _r$10)) { break; } */ if(!(i$1 < _r$10)) { $s = 20; continue; }
			_r$11 = $clone(permittedValue, reflect.Value).Index(i$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$12 = $clone(_r$11, reflect.Value).Interface(); /* */ $s = 23; case 23: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			constraint$1 = _r$12;
			err$1 = $ifaceNil;
			_r$13 = match(parsedName, constraint$1); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_tuple$1 = _r$13;
			ok = _tuple$1[0];
			err$1 = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 25:
				_r$14 = err$1.Error(); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$24r$2 = (x$4 = new CertificateInvalidError.ptr(c, 2, _r$14), new x$4.constructor.elem(x$4));
				$s = 28; case 28: return $24r$2;
			/* } */ case 26:
			if (ok) {
				/* break; */ $s = 20; continue;
			}
			i$1 = i$1 + (1) >> 0;
		$s = 19; continue;
		case 20:
		/* */ if (!ok) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (!ok) { */ case 29:
			_r$15 = fmt.Sprintf("%s %q is not permitted by any constraint", new sliceType$6([new $String(nameType), new $String(name)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$24r$3 = (x$5 = new CertificateInvalidError.ptr(c, 2, _r$15), new x$5.constructor.elem(x$5));
			$s = 32; case 32: return $24r$3;
		/* } */ case 30:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.checkNameConstraints, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, c, constraint, constraint$1, count, err, err$1, excluded, excludedValue, i, i$1, match, match$1, maxConstraintComparisons, name, nameType, ok, parsedName, permitted, permittedValue, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	Certificate.prototype.checkNameConstraints = function(count, maxConstraintComparisons, nameType, name, parsedName, match, permitted, excluded) { return this.$val.checkNameConstraints(count, maxConstraintComparisons, nameType, name, parsedName, match, permitted, excluded); };
	Certificate.ptr.prototype.isValid = function(certType, currentChain, opts) {
		var {$24r, $24r$1, _arg, _arg$1, _arg$2, _arg$3, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, c, certType, child, comparisonCount, currentChain, err, leaf, maxConstraintComparisons, now, numIntermediates, opts, sanCert, toCheck, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r, $c} = $restore(this, {certType, currentChain, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = [c];
		comparisonCount = [comparisonCount];
		maxConstraintComparisons = [maxConstraintComparisons];
		c[0] = this;
		if (c[0].UnhandledCriticalExtensions.$length > 0) {
			$s = -1; return (x = new UnhandledCriticalExtension.ptr(), new x.constructor.elem(x));
		}
		if (currentChain.$length > 0) {
			child = (x$1 = currentChain.$length - 1 >> 0, ((x$1 < 0 || x$1 >= currentChain.$length) ? ($throwRuntimeError("index out of range"), undefined) : currentChain.$array[currentChain.$offset + x$1]));
			if (!bytes.Equal(child.RawIssuer, c[0].RawSubject)) {
				$s = -1; return (x$2 = new CertificateInvalidError.ptr(c[0], 5, ""), new x$2.constructor.elem(x$2));
			}
		}
		now = $clone(opts.CurrentTime, time.Time);
		/* */ if ($clone(now, time.Time).IsZero()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(now, time.Time).IsZero()) { */ case 1:
			_r = time.Now(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			time.Time.copy(now, _r);
		/* } */ case 2:
		/* */ if ($clone(now, time.Time).Before($clone(c[0].NotBefore, time.Time))) { $s = 4; continue; }
		/* */ if ($clone(now, time.Time).After($clone(c[0].NotAfter, time.Time))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($clone(now, time.Time).Before($clone(c[0].NotBefore, time.Time))) { */ case 4:
			_r$1 = $clone(now, time.Time).Format("2006-01-02T15:04:05Z07:00"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg = new $String(_r$1);
			_r$2 = $clone(c[0].NotBefore, time.Time).Format("2006-01-02T15:04:05Z07:00"); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$2);
			_r$3 = fmt.Sprintf("current time %s is before %s", new sliceType$6([_arg, _arg$1])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = (x$3 = new CertificateInvalidError.ptr(c[0], 1, _r$3), new x$3.constructor.elem(x$3));
			$s = 10; case 10: return $24r;
		/* } else if ($clone(now, time.Time).After($clone(c[0].NotAfter, time.Time))) { */ case 5:
			_r$4 = $clone(now, time.Time).Format("2006-01-02T15:04:05Z07:00"); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$4);
			_r$5 = $clone(c[0].NotAfter, time.Time).Format("2006-01-02T15:04:05Z07:00"); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$3 = new $String(_r$5);
			_r$6 = fmt.Sprintf("current time %s is after %s", new sliceType$6([_arg$2, _arg$3])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$24r$1 = (x$4 = new CertificateInvalidError.ptr(c[0], 1, _r$6), new x$4.constructor.elem(x$4));
			$s = 14; case 14: return $24r$1;
		/* } */ case 6:
		maxConstraintComparisons[0] = opts.MaxConstraintComparisions;
		if (maxConstraintComparisons[0] === 0) {
			maxConstraintComparisons[0] = 250000;
		}
		comparisonCount[0] = 0;
		leaf = ptrType$4.nil;
		if ((certType === 1) || (certType === 2)) {
			if (currentChain.$length === 0) {
				$s = -1; return errors.New("x509: internal error: empty chain when appending CA cert");
			}
			leaf = (0 >= currentChain.$length ? ($throwRuntimeError("index out of range"), undefined) : currentChain.$array[currentChain.$offset + 0]);
		}
		/* */ if (((certType === 1) || (certType === 2)) && c[0].hasNameConstraints()) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (((certType === 1) || (certType === 2)) && c[0].hasNameConstraints()) { */ case 15:
			toCheck = new sliceType$20([]);
			if (leaf.hasSANExtension()) {
				toCheck = $append(toCheck, leaf);
			}
			if (c[0].hasSANExtension()) {
				toCheck = $append(toCheck, c[0]);
			}
			_ref = toCheck;
			_i = 0;
			/* while (true) { */ case 17:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 18; continue; }
				sanCert = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$7 = forEachSAN($convertSliceType(sanCert.getSANExtension(), cryptobyte.String), (function(c, comparisonCount, maxConstraintComparisons) { return function $b(tag, data) {
					var {$24r$2, $24r$3, $24r$4, $24r$5, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, data, err, err$1, err$2, err$3, err$4, ip, l, mailbox, name, name$1, name$2, ok, ok$1, tag, uri, $s, $r, $c} = $restore(this, {tag, data});
					/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						_1 = tag;
						/* */ if (_1 === (1)) { $s = 2; continue; }
						/* */ if (_1 === (2)) { $s = 3; continue; }
						/* */ if (_1 === (6)) { $s = 4; continue; }
						/* */ if (_1 === (7)) { $s = 5; continue; }
						/* */ $s = 6; continue;
						/* if (_1 === (1)) { */ case 2:
							name = ($bytesToString(data));
							_tuple = parseRFC2821Mailbox(name);
							mailbox = $clone(_tuple[0], rfc2821Mailbox);
							ok = _tuple[1];
							/* */ if (!ok) { $s = 7; continue; }
							/* */ $s = 8; continue;
							/* if (!ok) { */ case 7:
								_r$7 = fmt.Errorf("x509: cannot parse rfc822Name %q", new sliceType$6([new mailbox.constructor.elem(mailbox)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
								$24r$2 = _r$7;
								$s = 10; case 10: return $24r$2;
							/* } */ case 8:
							_r$8 = c[0].checkNameConstraints((comparisonCount.$ptr || (comparisonCount.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, comparisonCount))), maxConstraintComparisons[0], "email address", name, new mailbox.constructor.elem(mailbox), (function(c, comparisonCount, maxConstraintComparisons) { return function $b(parsedName, constraint) {
								var {$24r$3, _r$8, constraint, parsedName, $s, $r, $c} = $restore(this, {parsedName, constraint});
								/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
								_r$8 = matchEmailConstraint($clone($assertType(parsedName, rfc2821Mailbox), rfc2821Mailbox), $assertType(constraint, $String)); /* */ $s = 1; case 1: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
								$24r$3 = _r$8;
								$s = 2; case 2: return $24r$3;
								/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$3, _r$8, constraint, parsedName, $s};return $f;
							}; })(c, comparisonCount, maxConstraintComparisons), c[0].PermittedEmailAddresses, c[0].ExcludedEmailAddresses); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							err = _r$8;
							if (!($interfaceIsEqual(err, $ifaceNil))) {
								$s = -1; return err;
							}
							$s = 6; continue;
						/* } else if (_1 === (2)) { */ case 3:
							name$1 = ($bytesToString(data));
							_tuple$1 = domainToReverseLabels(name$1);
							ok$1 = _tuple$1[1];
							/* */ if (!ok$1) { $s = 12; continue; }
							/* */ $s = 13; continue;
							/* if (!ok$1) { */ case 12:
								_r$9 = fmt.Errorf("x509: cannot parse dnsName %q", new sliceType$6([new $String(name$1)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
								$24r$3 = _r$9;
								$s = 15; case 15: return $24r$3;
							/* } */ case 13:
							_r$10 = c[0].checkNameConstraints((comparisonCount.$ptr || (comparisonCount.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, comparisonCount))), maxConstraintComparisons[0], "DNS name", name$1, new $String(name$1), (function(c, comparisonCount, maxConstraintComparisons) { return function $b(parsedName, constraint) {
								var {$24r$4, _r$10, constraint, parsedName, $s, $r, $c} = $restore(this, {parsedName, constraint});
								/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
								_r$10 = matchDomainConstraint($assertType(parsedName, $String), $assertType(constraint, $String)); /* */ $s = 1; case 1: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
								$24r$4 = _r$10;
								$s = 2; case 2: return $24r$4;
								/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$4, _r$10, constraint, parsedName, $s};return $f;
							}; })(c, comparisonCount, maxConstraintComparisons), c[0].PermittedDNSDomains, c[0].ExcludedDNSDomains); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							err$1 = _r$10;
							if (!($interfaceIsEqual(err$1, $ifaceNil))) {
								$s = -1; return err$1;
							}
							$s = 6; continue;
						/* } else if (_1 === (6)) { */ case 4:
							name$2 = ($bytesToString(data));
							_r$11 = url.Parse(name$2); /* */ $s = 17; case 17: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							_tuple$2 = _r$11;
							uri = _tuple$2[0];
							err$2 = _tuple$2[1];
							/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 18; continue; }
							/* */ $s = 19; continue;
							/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 18:
								_r$12 = fmt.Errorf("x509: internal error: URI SAN %q failed to parse", new sliceType$6([new $String(name$2)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								$24r$4 = _r$12;
								$s = 21; case 21: return $24r$4;
							/* } */ case 19:
							_r$13 = c[0].checkNameConstraints((comparisonCount.$ptr || (comparisonCount.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, comparisonCount))), maxConstraintComparisons[0], "URI", name$2, uri, (function(c, comparisonCount, maxConstraintComparisons) { return function $b(parsedName, constraint) {
								var {$24r$5, _r$13, constraint, parsedName, $s, $r, $c} = $restore(this, {parsedName, constraint});
								/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
								_r$13 = matchURIConstraint($assertType(parsedName, ptrType$13), $assertType(constraint, $String)); /* */ $s = 1; case 1: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								$24r$5 = _r$13;
								$s = 2; case 2: return $24r$5;
								/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$5, _r$13, constraint, parsedName, $s};return $f;
							}; })(c, comparisonCount, maxConstraintComparisons), c[0].PermittedURIDomains, c[0].ExcludedURIDomains); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							err$3 = _r$13;
							if (!($interfaceIsEqual(err$3, $ifaceNil))) {
								$s = -1; return err$3;
							}
							$s = 6; continue;
						/* } else if (_1 === (7)) { */ case 5:
							ip = ($convertSliceType(data, net.IP));
							l = ip.$length;
							/* */ if (!((l === 4)) && !((l === 16))) { $s = 23; continue; }
							/* */ $s = 24; continue;
							/* if (!((l === 4)) && !((l === 16))) { */ case 23:
								_r$14 = fmt.Errorf("x509: internal error: IP SAN %x failed to parse", new sliceType$6([data])); /* */ $s = 25; case 25: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								$24r$5 = _r$14;
								$s = 26; case 26: return $24r$5;
							/* } */ case 24:
							_r$15 = c[0].checkNameConstraints((comparisonCount.$ptr || (comparisonCount.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, comparisonCount))), maxConstraintComparisons[0], "IP address", ip.String(), ip, (function(c, comparisonCount, maxConstraintComparisons) { return function(parsedName, constraint) {
								var constraint, parsedName;
								return matchIPConstraint($assertType(parsedName, net.IP), $assertType(constraint, ptrType$17));
							}; })(c, comparisonCount, maxConstraintComparisons), c[0].PermittedIPRanges, c[0].ExcludedIPRanges); /* */ $s = 27; case 27: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							err$4 = _r$15;
							if (!($interfaceIsEqual(err$4, $ifaceNil))) {
								$s = -1; return err$4;
							}
						/* } */ case 6:
					case 1:
					$s = -1; return $ifaceNil;
					/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$2, $24r$3, $24r$4, $24r$5, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, data, err, err$1, err$2, err$3, err$4, ip, l, mailbox, name, name$1, name$2, ok, ok$1, tag, uri, $s};return $f;
				}; })(c, comparisonCount, maxConstraintComparisons)); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				_i++;
			$s = 17; continue;
			case 18:
		/* } */ case 16:
		if ((certType === 1) && (!c[0].BasicConstraintsValid || !c[0].IsCA)) {
			$s = -1; return (x$5 = new CertificateInvalidError.ptr(c[0], 0, ""), new x$5.constructor.elem(x$5));
		}
		if (c[0].BasicConstraintsValid && c[0].MaxPathLen >= 0) {
			numIntermediates = currentChain.$length - 1 >> 0;
			if (numIntermediates > c[0].MaxPathLen) {
				$s = -1; return (x$6 = new CertificateInvalidError.ptr(c[0], 3, ""), new x$6.constructor.elem(x$6));
			}
		}
		if (!boringAllowCert(c[0])) {
			$s = -1; return (x$7 = new CertificateInvalidError.ptr(c[0], 4, ""), new x$7.constructor.elem(x$7));
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.isValid, $c: true, $r, $24r, $24r$1, _arg, _arg$1, _arg$2, _arg$3, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, c, certType, child, comparisonCount, currentChain, err, leaf, maxConstraintComparisons, now, numIntermediates, opts, sanCert, toCheck, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s};return $f;
	};
	Certificate.prototype.isValid = function(certType, currentChain, opts) { return this.$val.isValid(certType, currentChain, opts); };
	Certificate.ptr.prototype.Verify = function(opts) {
		var {$24r, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, c, c$1, candidate, candidateChains, chains, eku, err, err$1, err$2, i, opts, platformChains, x, x$1, $s, $r, $c} = $restore(this, {opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		opts = [opts];
		chains = sliceType$21.nil;
		err = $ifaceNil;
		c = this;
		if (c.Raw.$length === 0) {
			_tmp = sliceType$21.nil;
			_tmp$1 = errNotParsed;
			chains = _tmp;
			err = _tmp$1;
			$s = -1; return [chains, err];
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < opts[0].Intermediates.len())) { break; } */ if(!(i < opts[0].Intermediates.len())) { $s = 2; continue; }
			_r = opts[0].Intermediates.cert(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c$1 = _tuple[0];
			err$1 = _tuple[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 4:
				_tmp$2 = sliceType$21.nil;
				_r$1 = fmt.Errorf("crypto/x509: error fetching intermediate: %w", new sliceType$6([err$1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tmp$3 = _r$1;
				chains = _tmp$2;
				err = _tmp$3;
				$24r = [chains, err];
				$s = 7; case 7: return $24r;
			/* } */ case 5:
			if (c$1.Raw.$length === 0) {
				_tmp$4 = sliceType$21.nil;
				_tmp$5 = errNotParsed;
				chains = _tmp$4;
				err = _tmp$5;
				$s = -1; return [chains, err];
			}
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		if (false) {
			if (opts[0].Roots === ptrType.nil) {
				_tuple$1 = c.systemVerify(opts[0]);
				chains = _tuple$1[0];
				err = _tuple$1[1];
				$s = -1; return [chains, err];
			}
			if (!(opts[0].Roots === ptrType.nil) && opts[0].Roots.systemPool) {
				_tuple$2 = c.systemVerify(opts[0]);
				platformChains = _tuple$2[0];
				err$2 = _tuple$2[1];
				if ($interfaceIsEqual(err$2, $ifaceNil) || (opts[0].Roots.len() === 0)) {
					_tmp$6 = platformChains;
					_tmp$7 = err$2;
					chains = _tmp$6;
					err = _tmp$7;
					$s = -1; return [chains, err];
				}
			}
		}
		/* */ if (opts[0].Roots === ptrType.nil) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (opts[0].Roots === ptrType.nil) { */ case 8:
			_r$2 = systemRootsPool(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			opts[0].Roots = _r$2;
			if (opts[0].Roots === ptrType.nil) {
				_tmp$8 = sliceType$21.nil;
				_tmp$9 = (x = new SystemRootsError.ptr(systemRootsErr), new x.constructor.elem(x));
				chains = _tmp$8;
				err = _tmp$9;
				$s = -1; return [chains, err];
			}
		/* } */ case 9:
		_r$3 = c.isValid(0, sliceType$20.nil, opts[0]); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [chains, err];
		}
		if (opts[0].DNSName.length > 0) {
			err = c.VerifyHostname(opts[0].DNSName);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [chains, err];
			}
		}
		candidateChains = sliceType$21.nil;
		/* */ if (opts[0].Roots.contains(c)) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (opts[0].Roots.contains(c)) { */ case 12:
			candidateChains = new sliceType$21([new sliceType$20([c])]);
			$s = 14; continue;
		/* } else { */ case 13:
			_r$4 = c.buildChains(new sliceType$20([c]), ptrType$16.nil, opts[0]); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$3 = _r$4;
			candidateChains = _tuple$3[0];
			err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = sliceType$21.nil;
				_tmp$11 = err;
				chains = _tmp$10;
				err = _tmp$11;
				$s = -1; return [chains, err];
			}
		/* } */ case 14:
		if (opts[0].KeyUsages.$length === 0) {
			opts[0].KeyUsages = new sliceType$22([1]);
		}
		_ref = opts[0].KeyUsages;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			eku = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (eku === 0) {
				_tmp$12 = candidateChains;
				_tmp$13 = $ifaceNil;
				chains = _tmp$12;
				err = _tmp$13;
				$s = -1; return [chains, err];
			}
			_i++;
		}
		chains = $makeSlice(sliceType$21, 0, candidateChains.$length);
		_ref$1 = candidateChains;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			candidate = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (checkChainForKeyUsage(candidate, opts[0].KeyUsages)) {
				chains = $append(chains, candidate);
			}
			_i$1++;
		}
		if (chains.$length === 0) {
			_tmp$14 = sliceType$21.nil;
			_tmp$15 = (x$1 = new CertificateInvalidError.ptr(c, 4, ""), new x$1.constructor.elem(x$1));
			chains = _tmp$14;
			err = _tmp$15;
			$s = -1; return [chains, err];
		}
		_tmp$16 = chains;
		_tmp$17 = $ifaceNil;
		chains = _tmp$16;
		err = _tmp$17;
		$s = -1; return [chains, err];
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.Verify, $c: true, $r, $24r, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, c, c$1, candidate, candidateChains, chains, eku, err, err$1, err$2, i, opts, platformChains, x, x$1, $s};return $f;
	};
	Certificate.prototype.Verify = function(opts) { return this.$val.Verify(opts); };
	appendToFreshChain = function(chain, cert) {
		var cert, chain, n, x;
		n = $makeSlice(sliceType$20, (chain.$length + 1 >> 0));
		$copySlice(n, chain);
		(x = chain.$length, ((x < 0 || x >= n.$length) ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + x] = cert));
		return n;
	};
	alreadyInChain = function(candidate, chain) {
		var {_i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, candidate, candidateSAN, cert, certSAN, chain, ext, ext$1, $s, $r, $c} = $restore(this, {candidate, chain});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ext = [ext];
		candidateSAN = ptrType$18.nil;
		_ref = candidate.Extensions;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ext[0] = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			if (ext[0].Id.Equal($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier))) {
				candidateSAN = ext[0];
				break;
			}
			_i++;
		}
		_ref$1 = chain;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			ext$1 = [ext$1];
			cert = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (!bytes.Equal(candidate.RawSubject, cert.RawSubject)) {
				_i$1++;
				/* continue; */ $s = 1; continue;
			}
			_r = $assertType(candidate.PublicKey, pubKeyEqual).Equal(cert.PublicKey); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_i$1++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			certSAN = ptrType$18.nil;
			_ref$2 = cert.Extensions;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				ext$1[0] = $clone(((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]), pkix.Extension);
				if (ext$1[0].Id.Equal($convertSliceType(oidExtensionSubjectAltName, asn1.ObjectIdentifier))) {
					certSAN = ext$1[0];
					break;
				}
				_i$2++;
			}
			if (candidateSAN === ptrType$18.nil && certSAN === ptrType$18.nil) {
				$s = -1; return true;
			} else if (candidateSAN === ptrType$18.nil || certSAN === ptrType$18.nil) {
				$s = -1; return false;
			}
			if (bytes.Equal(candidateSAN.Value, certSAN.Value)) {
				$s = -1; return true;
			}
			_i$1++;
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: alreadyInChain, $c: true, $r, _i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, candidate, candidateSAN, cert, certSAN, chain, ext, ext$1, $s};return $f;
	};
	Certificate.ptr.prototype.buildChains = function(currentChain, sigChecks, opts) {
		var {_i, _i$1, _r, _r$1, _ref, _ref$1, c, chains, considerCandidate, currentChain, err, hintCert, hintErr, intermediate, opts, root, sigChecks, x, $s, $r, $c} = $restore(this, {currentChain, sigChecks, opts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = [c];
		chains = [chains];
		currentChain = [currentChain];
		err = [err];
		hintCert = [hintCert];
		hintErr = [hintErr];
		opts = [opts];
		sigChecks = [sigChecks];
		chains[0] = sliceType$21.nil;
		err[0] = $ifaceNil;
		c[0] = this;
		hintErr[0] = $ifaceNil;
		hintCert[0] = ptrType$4.nil;
		considerCandidate = (function(c, chains, currentChain, err, hintCert, hintErr, opts, sigChecks) { return function $b(certType, candidate) {
			var {_1, _r, _r$1, _r$2, _r$3, _tuple, candidate, certType, childChains, err$1, $s, $r, $c} = $restore(this, {certType, candidate});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = alreadyInChain(candidate, currentChain[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_r) { */ case 1:
				$s = -1; return;
			/* } */ case 2:
			if (sigChecks[0] === ptrType$16.nil) {
				sigChecks[0] = $newDataPointer(0, ptrType$16);
			}
			sigChecks[0].$set(sigChecks[0].$get() + (1) >> 0);
			if (sigChecks[0].$get() > 100) {
				err[0] = errors.New("x509: signature check attempts limit reached while verifying certificate chain");
				$s = -1; return;
			}
			_r$1 = c[0].CheckSignatureFrom(candidate); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$1 = _r$1;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(hintErr[0], $ifaceNil)) {
					hintErr[0] = err$1;
					hintCert[0] = candidate;
				}
				$s = -1; return;
			}
			_r$2 = candidate.isValid(certType, currentChain[0], opts[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err[0] = _r$2;
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				$s = -1; return;
			}
				_1 = certType;
				/* */ if (_1 === (2)) { $s = 7; continue; }
				/* */ if (_1 === (1)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (2)) { */ case 7:
					chains[0] = $append(chains[0], appendToFreshChain(currentChain[0], candidate));
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 8:
					childChains = sliceType$21.nil;
					_r$3 = candidate.buildChains(appendToFreshChain(currentChain[0], candidate), sigChecks[0], opts[0]); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					childChains = _tuple[0];
					err[0] = _tuple[1];
					chains[0] = $appendSlice(chains[0], childChains);
				/* } */ case 9:
			case 6:
			$s = -1; return;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, _tuple, candidate, certType, childChains, err$1, $s};return $f;
		}; })(c, chains, currentChain, err, hintCert, hintErr, opts, sigChecks);
		_r = opts[0].Roots.findPotentialParents(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			root = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = considerCandidate(2, root); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		$s = 2; continue;
		case 3:
		_r$1 = opts[0].Intermediates.findPotentialParents(c[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_ref$1 = _r$1;
		_i$1 = 0;
		/* while (true) { */ case 6:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
			intermediate = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = considerCandidate(1, intermediate); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		$s = 6; continue;
		case 7:
		if (chains[0].$length > 0) {
			err[0] = $ifaceNil;
		}
		if ((chains[0].$length === 0) && $interfaceIsEqual(err[0], $ifaceNil)) {
			err[0] = (x = new UnknownAuthorityError.ptr(c[0], hintErr[0], hintCert[0]), new x.constructor.elem(x));
		}
		$s = -1; return [chains[0], err[0]];
		/* */ } return; } var $f = {$blk: Certificate.ptr.prototype.buildChains, $c: true, $r, _i, _i$1, _r, _r$1, _ref, _ref$1, c, chains, considerCandidate, currentChain, err, hintCert, hintErr, intermediate, opts, root, sigChecks, x, $s};return $f;
	};
	Certificate.prototype.buildChains = function(currentChain, sigChecks, opts) { return this.$val.buildChains(currentChain, sigChecks, opts); };
	validHostnamePattern = function(host) {
		var host;
		return validHostname(host, true);
	};
	validHostnameInput = function(host) {
		var host;
		return validHostname(host, false);
	};
	validHostname = function(host, isPattern) {
		var _i, _i$1, _ref, _ref$1, _rune, c, host, i, isPattern, j, part;
		if (!isPattern) {
			host = strings.TrimSuffix(host, ".");
		}
		if (host.length === 0) {
			return false;
		}
		_ref = strings.Split(host, ".");
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			part = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (part === "") {
				return false;
			}
			if (isPattern && (i === 0) && part === "*") {
				_i++;
				continue;
			}
			_ref$1 = part;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.length)) { break; }
				_rune = $decodeRune(_ref$1, _i$1);
				j = _i$1;
				c = _rune[0];
				if (97 <= c && c <= 122) {
					_i$1 += _rune[1];
					continue;
				}
				if (48 <= c && c <= 57) {
					_i$1 += _rune[1];
					continue;
				}
				if (65 <= c && c <= 90) {
					_i$1 += _rune[1];
					continue;
				}
				if ((c === 45) && !((j === 0))) {
					_i$1 += _rune[1];
					continue;
				}
				if (c === 95) {
					_i$1 += _rune[1];
					continue;
				}
				return false;
			}
			_i++;
		}
		return true;
	};
	matchExactly = function(hostA, hostB) {
		var hostA, hostB;
		if (hostA === "" || hostA === "." || hostB === "" || hostB === ".") {
			return false;
		}
		return toLowerCaseASCII(hostA) === toLowerCaseASCII(hostB);
	};
	matchHostnames = function(pattern, host) {
		var _i, _ref, host, hostParts, i, pattern, patternPart, patternParts;
		pattern = toLowerCaseASCII(pattern);
		host = toLowerCaseASCII(strings.TrimSuffix(host, "."));
		if ((pattern.length === 0) || (host.length === 0)) {
			return false;
		}
		patternParts = strings.Split(pattern, ".");
		hostParts = strings.Split(host, ".");
		if (!((patternParts.$length === hostParts.$length))) {
			return false;
		}
		_ref = patternParts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			patternPart = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ((i === 0) && patternPart === "*") {
				_i++;
				continue;
			}
			if (!(patternPart === ((i < 0 || i >= hostParts.$length) ? ($throwRuntimeError("index out of range"), undefined) : hostParts.$array[hostParts.$offset + i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	toLowerCaseASCII = function(in$1) {
		var _i, _i$1, _ref, _ref$1, _rune, c, c$1, i, in$1, isAlreadyLowerCase, out;
		isAlreadyLowerCase = true;
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 65533) {
				isAlreadyLowerCase = false;
				break;
			}
			if (65 <= c && c <= 90) {
				isAlreadyLowerCase = false;
				break;
			}
			_i += _rune[1];
		}
		if (isAlreadyLowerCase) {
			return in$1;
		}
		out = (new sliceType$1($stringToBytes(in$1)));
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (65 <= c$1 && c$1 <= 90) {
				((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i] = (((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i]) + (32) << 24 >>> 24));
			}
			_i$1++;
		}
		return ($bytesToString(out));
	};
	Certificate.ptr.prototype.VerifyHostname = function(h) {
		var _i, _i$1, _ref, _ref$1, c, candidate, candidateIP, candidateName, h, ip, match, validCandidateName, x, x$1;
		c = this;
		candidateIP = h;
		if (h.length >= 3 && (h.charCodeAt(0) === 91) && (h.charCodeAt((h.length - 1 >> 0)) === 93)) {
			candidateIP = $substring(h, 1, (h.length - 1 >> 0));
		}
		ip = net.ParseIP(candidateIP);
		if (!(ip === net.IP.nil)) {
			_ref = c.IPAddresses;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				candidate = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (ip.Equal(candidate)) {
					return $ifaceNil;
				}
				_i++;
			}
			return (x = new HostnameError.ptr(c, candidateIP), new x.constructor.elem(x));
		}
		candidateName = toLowerCaseASCII(h);
		validCandidateName = validHostnameInput(candidateName);
		_ref$1 = c.DNSNames;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			match = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (validCandidateName && validHostnamePattern(match)) {
				if (matchHostnames(match, candidateName)) {
					return $ifaceNil;
				}
			} else {
				if (matchExactly(match, candidateName)) {
					return $ifaceNil;
				}
			}
			_i$1++;
		}
		return (x$1 = new HostnameError.ptr(c, h), new x$1.constructor.elem(x$1));
	};
	Certificate.prototype.VerifyHostname = function(h) { return this.$val.VerifyHostname(h); };
	checkChainForKeyUsage = function(chain, keyUsages) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, cert, chain, i, i$1, keyUsages, requestedUsage, usage, usage$1, usages, usagesRemaining;
		usages = $makeSlice(sliceType$22, keyUsages.$length);
		$copySlice(usages, keyUsages);
		if (chain.$length === 0) {
			return false;
		}
		usagesRemaining = usages.$length;
		i = chain.$length - 1 >> 0;
		NextCert:
		while (true) {
			if (!(i >= 0)) { break; }
			cert = ((i < 0 || i >= chain.$length) ? ($throwRuntimeError("index out of range"), undefined) : chain.$array[chain.$offset + i]);
			if ((cert.ExtKeyUsage.$length === 0) && (cert.UnknownExtKeyUsage.$length === 0)) {
				i = i - (1) >> 0;
				continue;
			}
			_ref = cert.ExtKeyUsage;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				usage = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (usage === 0) {
					i = i - (1) >> 0;
					continue NextCert;
				}
				_i++;
			}
			_ref$1 = usages;
			_i$1 = 0;
			NextRequestedUsage:
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				requestedUsage = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (requestedUsage === -1) {
					_i$1++;
					continue;
				}
				_ref$2 = cert.ExtKeyUsage;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					usage$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (requestedUsage === usage$1) {
						_i$1++;
						continue NextRequestedUsage;
					}
					_i$2++;
				}
				((i$1 < 0 || i$1 >= usages.$length) ? ($throwRuntimeError("index out of range"), undefined) : usages.$array[usages.$offset + i$1] = -1);
				usagesRemaining = usagesRemaining - (1) >> 0;
				if (usagesRemaining === 0) {
					return false;
				}
				_i$1++;
			}
			i = i - (1) >> 0;
		}
		return true;
	};
	Certificate.ptr.prototype.systemVerify = function(opts) {
		var _tmp, _tmp$1, c, chains, err, opts;
		chains = sliceType$21.nil;
		err = $ifaceNil;
		c = this;
		_tmp = sliceType$21.nil;
		_tmp$1 = $ifaceNil;
		chains = _tmp;
		err = _tmp$1;
		return [chains, err];
	};
	Certificate.prototype.systemVerify = function(opts) { return this.$val.systemVerify(opts); };
	loadSystemRoots = function() {
		var {_i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, d, data, data$1, directory, dirs, err, err$1, err$2, f, fi, file, files, firstErr, fis, roots, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		roots = NewCertPool();
		files = certFiles;
		_r = os.Getenv("SSL_CERT_FILE"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = _r;
		if (!(f === "")) {
			files = new sliceType$4([f]);
		}
		firstErr = $ifaceNil;
		_ref = files;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			file = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = os.ReadFile(file); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			data = _tuple[0];
			err = _tuple[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 5:
				_r$2 = roots.AppendCertsFromPEM(data); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 3; continue;
			/* } */ case 6:
			if ($interfaceIsEqual(firstErr, $ifaceNil) && !os.IsNotExist(err)) {
				firstErr = err;
			}
			_i++;
		$s = 2; continue;
		case 3:
		dirs = certDirectories;
		_r$3 = os.Getenv("SSL_CERT_DIR"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		d = _r$3;
		if (!(d === "")) {
			dirs = strings.Split(d, ":");
		}
		_ref$1 = dirs;
		_i$1 = 0;
		/* while (true) { */ case 9:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 10; continue; }
			directory = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$4 = readUniqueDirectoryEntries(directory); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			fis = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(firstErr, $ifaceNil) && !os.IsNotExist(err$1)) {
					firstErr = err$1;
				}
				_i$1++;
				/* continue; */ $s = 9; continue;
			}
			_ref$2 = fis;
			_i$2 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 13; continue; }
				fi = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$5 = fi.Name(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = os.ReadFile(directory + "/" + _r$5); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$2 = _r$6;
				data$1 = _tuple$2[0];
				err$2 = _tuple$2[1];
				/* */ if ($interfaceIsEqual(err$2, $ifaceNil)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ($interfaceIsEqual(err$2, $ifaceNil)) { */ case 16:
					_r$7 = roots.AppendCertsFromPEM(data$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 17:
				_i$2++;
			$s = 12; continue;
			case 13:
			_i$1++;
		$s = 9; continue;
		case 10:
		if (roots.len() > 0 || $interfaceIsEqual(firstErr, $ifaceNil)) {
			$s = -1; return [roots, $ifaceNil];
		}
		$s = -1; return [ptrType.nil, firstErr];
		/* */ } return; } var $f = {$blk: loadSystemRoots, $c: true, $r, _i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, d, data, data$1, directory, dirs, err, err$1, err$2, f, fi, file, files, firstErr, fis, roots, $s};return $f;
	};
	readUniqueDirectoryEntries = function(dir) {
		var {_i, _r, _r$1, _ref, _tuple, dir, err, f, files, uniq, $s, $r, $c} = $restore(this, {dir});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = os.ReadDir(dir); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		files = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$24.nil, err];
		}
		uniq = $subslice(files, 0, 0);
		_ref = files;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = isSameDirSymlink(f, dir); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$1) { */ case 4:
				uniq = $append(uniq, f);
			/* } */ case 5:
			_i++;
		$s = 2; continue;
		case 3:
		$s = -1; return [uniq, $ifaceNil];
		/* */ } return; } var $f = {$blk: readUniqueDirectoryEntries, $c: true, $r, _i, _r, _r$1, _ref, _tuple, dir, err, f, files, uniq, $s};return $f;
	};
	isSameDirSymlink = function(f, dir) {
		var {_arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, dir, err, f, target, $s, $r, $c} = $restore(this, {f, dir});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = f.Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (((_r & 134217728) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((_r & 134217728) >>> 0) === 0) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_arg = dir;
		_r$1 = f.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_r$2 = filepath.Join(new sliceType$4([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = os.Readlink(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		target = _tuple[0];
		err = _tuple[1];
		$s = -1; return $interfaceIsEqual(err, $ifaceNil) && !strings.Contains(target, "/");
		/* */ } return; } var $f = {$blk: isSameDirSymlink, $c: true, $r, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, dir, err, f, target, $s};return $f;
	};
	systemRootsPool = function() {
		var {$s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = once.Do(initSystemRoots); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return systemRoots;
		/* */ } return; } var $f = {$blk: systemRootsPool, $c: true, $r, $s};return $f;
	};
	initSystemRoots = function() {
		var {_r, _tuple, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = loadSystemRoots(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		systemRoots = _tuple[0];
		systemRootsErr = _tuple[1];
		if (!($interfaceIsEqual(systemRootsErr, $ifaceNil))) {
			systemRoots = ptrType.nil;
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: initSystemRoots, $c: true, $r, _r, _tuple, $s};return $f;
	};
	MarshalPKCS1PrivateKey = function(key) {
		var {_i, _r, _ref, _tuple, b, i, key, priv, values, version, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = key.Precompute(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		version = 0;
		if (key.Primes.$length > 2) {
			version = 1;
		}
		priv = new pkcs1PrivateKey.ptr(version, key.PublicKey.N, key.PublicKey.E, key.D, (x = key.Primes, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), (x$1 = key.Primes, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])), key.Precomputed.Dp, key.Precomputed.Dq, key.Precomputed.Qinv, sliceType$23.nil);
		priv.AdditionalPrimes = $makeSlice(sliceType$23, key.Precomputed.CRTValues.$length);
		_ref = key.Precomputed.CRTValues;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			values = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), rsa.CRTValue);
			(x$4 = priv.AdditionalPrimes, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).Prime = (x$2 = key.Primes, x$3 = 2 + i >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
			(x$5 = priv.AdditionalPrimes, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])).Exp = values.Exp;
			(x$6 = priv.AdditionalPrimes, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])).Coeff = values.Coeff;
			_i++;
		}
		_r = asn1.Marshal(new priv.constructor.elem(priv)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: MarshalPKCS1PrivateKey, $c: true, $r, _i, _r, _ref, _tuple, b, i, key, priv, values, version, x, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	$pkg.MarshalPKCS1PrivateKey = MarshalPKCS1PrivateKey;
	isPrintable = function(b) {
		var b;
		return 97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || 39 <= b && b <= 41 || 43 <= b && b <= 47 || (b === 32) || (b === 58) || (b === 61) || (b === 63) || (b === 42) || (b === 38);
	};
	parseASN1String = function(tag, value) {
		var {$24r, _1, _i, _i$1, _q, _r, _r$1, _r$2, _ref, _ref$1, b, b$1, l, s, s$1, tag, value, x, x$1, $s, $r, $c} = $restore(this, {tag, value});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = tag;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (19)) { $s = 3; continue; }
			/* */ if (_1 === (12)) { $s = 4; continue; }
			/* */ if (_1 === (30)) { $s = 5; continue; }
			/* */ if (_1 === (22)) { $s = 6; continue; }
			/* */ if (_1 === (18)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (20)) { */ case 2:
				$s = -1; return [($bytesToString(value)), $ifaceNil];
			/* } else if (_1 === (19)) { */ case 3:
				_ref = value;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (!isPrintable(b)) {
						$s = -1; return ["", errors.New("invalid PrintableString")];
					}
					_i++;
				}
				$s = -1; return [($bytesToString(value)), $ifaceNil];
			/* } else if (_1 === (12)) { */ case 4:
				if (!utf8.Valid(value)) {
					$s = -1; return ["", errors.New("invalid UTF-8 string")];
				}
				$s = -1; return [($bytesToString(value)), $ifaceNil];
			/* } else if (_1 === (30)) { */ case 5:
				if (!(((_r = value.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
					$s = -1; return ["", errors.New("invalid BMPString")];
				}
				l = value.$length;
				if (l >= 2 && ((x = l - 1 >> 0, ((x < 0 || x >= value.$length) ? ($throwRuntimeError("index out of range"), undefined) : value.$array[value.$offset + x])) === 0) && ((x$1 = l - 2 >> 0, ((x$1 < 0 || x$1 >= value.$length) ? ($throwRuntimeError("index out of range"), undefined) : value.$array[value.$offset + x$1])) === 0)) {
					value = $subslice(value, 0, (l - 2 >> 0));
				}
				s = $makeSlice(sliceType$27, 0, (_q = value.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
				while (true) {
					if (!(value.$length > 0)) { break; }
					s = $append(s, ((((0 >= value.$length ? ($throwRuntimeError("index out of range"), undefined) : value.$array[value.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16) + (((1 >= value.$length ? ($throwRuntimeError("index out of range"), undefined) : value.$array[value.$offset + 1]) << 16 >>> 16)) << 16 >>> 16);
					value = $subslice(value, 2);
				}
				$s = -1; return [($runesToString(utf16.Decode(s))), $ifaceNil];
			/* } else if (_1 === (22)) { */ case 6:
				s$1 = ($bytesToString(value));
				_r$1 = isIA5String(s$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$1, $ifaceNil))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!($interfaceIsEqual(_r$1, $ifaceNil))) { */ case 9:
					$s = -1; return ["", errors.New("invalid IA5String")];
				/* } */ case 10:
				$s = -1; return [s$1, $ifaceNil];
			/* } else if (_1 === (18)) { */ case 7:
				_ref$1 = value;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (!(48 <= b$1 && b$1 <= 57 || (b$1 === 32))) {
						$s = -1; return ["", errors.New("invalid NumericString")];
					}
					_i$1++;
				}
				$s = -1; return [($bytesToString(value)), $ifaceNil];
			/* } */ case 8:
		case 1:
		_r$2 = fmt.Errorf("unsupported string type: %v", new sliceType$6([new asn1$1.Tag(tag)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ["", _r$2];
		$s = 13; case 13: return $24r;
		/* */ } return; } var $f = {$blk: parseASN1String, $c: true, $r, $24r, _1, _i, _i$1, _q, _r, _r$1, _r$2, _ref, _ref$1, b, b$1, l, s, s$1, tag, value, x, x$1, $s};return $f;
	};
	parseName = function(raw) {
		var {$24r, _r, _r$1, _tuple, atav, attr, err, raw, rawValue, rdnSeq, rdnSet, set, valueTag, $s, $r, $c} = $restore(this, {raw});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		raw = [raw];
		rdnSeq = [rdnSeq];
		if (!(raw.$ptr || (raw.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, raw))).ReadASN1((raw.$ptr || (raw.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, raw))), 48)) {
			$s = -1; return [ptrType$14.nil, errors.New("x509: invalid RDNSequence")];
		}
		rdnSeq[0] = pkix.RDNSequence.nil;
		/* while (true) { */ case 1:
			/* if (!(!raw[0].Empty())) { break; } */ if(!(!raw[0].Empty())) { $s = 2; continue; }
			set = [set];
			rdnSet = pkix.RelativeDistinguishedNameSET.nil;
			set[0] = cryptobyte.String.nil;
			if (!(raw.$ptr || (raw.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, raw))).ReadASN1((set.$ptr || (set.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, set))), 49)) {
				$s = -1; return [ptrType$14.nil, errors.New("x509: invalid RDNSequence")];
			}
			/* while (true) { */ case 3:
				/* if (!(!set[0].Empty())) { break; } */ if(!(!set[0].Empty())) { $s = 4; continue; }
				atav = [atav];
				rawValue = [rawValue];
				valueTag = [valueTag];
				atav[0] = cryptobyte.String.nil;
				if (!(set.$ptr || (set.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, set))).ReadASN1((atav.$ptr || (atav.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, atav))), 48)) {
					$s = -1; return [ptrType$14.nil, errors.New("x509: invalid RDNSequence: invalid attribute")];
				}
				attr = new pkix.AttributeTypeAndValue.ptr(asn1.ObjectIdentifier.nil, $ifaceNil);
				if (!(atav.$ptr || (atav.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, atav))).ReadASN1ObjectIdentifier((attr.$ptr_Type || (attr.$ptr_Type = new ptrType$19(function() { return this.$target.Type; }, function($v) { this.$target.Type = $v; }, attr))))) {
					$s = -1; return [ptrType$14.nil, errors.New("x509: invalid RDNSequence: invalid attribute type")];
				}
				rawValue[0] = cryptobyte.String.nil;
				valueTag[0] = 0;
				if (!(atav.$ptr || (atav.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, atav))).ReadAnyASN1((rawValue.$ptr || (rawValue.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rawValue))), (valueTag.$ptr || (valueTag.$ptr = new ptrType$25(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, valueTag))))) {
					$s = -1; return [ptrType$14.nil, errors.New("x509: invalid RDNSequence: invalid attribute value")];
				}
				err = $ifaceNil;
				_r = parseASN1String(valueTag[0], $convertSliceType(rawValue[0], sliceType$1)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				attr.Value = new $String(_tuple[0]);
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
					_r$1 = fmt.Errorf("x509: invalid RDNSequence: invalid attribute value: %s", new sliceType$6([err])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = [ptrType$14.nil, _r$1];
					$s = 9; case 9: return $24r;
				/* } */ case 7:
				rdnSet = $append(rdnSet, attr);
			$s = 3; continue;
			case 4:
			rdnSeq[0] = $append(rdnSeq[0], rdnSet);
		$s = 1; continue;
		case 2:
		$s = -1; return [(rdnSeq.$ptr || (rdnSeq.$ptr = new ptrType$14(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rdnSeq))), $ifaceNil];
		/* */ } return; } var $f = {$blk: parseName, $c: true, $r, $24r, _r, _r$1, _tuple, atav, attr, err, raw, rawValue, rdnSeq, rdnSet, set, valueTag, $s};return $f;
	};
	parseAI = function(der) {
		var ai, der, der$24ptr, params, params$24ptr, tag, tag$24ptr;
		ai = new pkix.AlgorithmIdentifier.ptr(asn1.ObjectIdentifier.nil, new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, sliceType$1.nil));
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1ObjectIdentifier((ai.$ptr_Algorithm || (ai.$ptr_Algorithm = new ptrType$19(function() { return this.$target.Algorithm; }, function($v) { this.$target.Algorithm = $v; }, ai))))) {
			return [ai, errors.New("x509: malformed OID")];
		}
		if (der.Empty()) {
			return [ai, $ifaceNil];
		}
		params = cryptobyte.String.nil;
		tag = 0;
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadAnyASN1Element((params$24ptr || (params$24ptr = new ptrType$24(function() { return params; }, function($v) { params = $v; }))), (tag$24ptr || (tag$24ptr = new ptrType$25(function() { return tag; }, function($v) { tag = $v; }))))) {
			return [ai, errors.New("x509: malformed parameters")];
		}
		ai.Parameters.Tag = ((tag >> 0));
		ai.Parameters.FullBytes = $convertSliceType(params, sliceType$1);
		return [ai, $ifaceNil];
	};
	parseTime = function(der) {
		var {_r, _r$1, der, t, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = [t];
		t[0] = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil);
			/* */ if (der.PeekASN1Tag(23)) { $s = 2; continue; }
			/* */ if (der.PeekASN1Tag(24)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (der.PeekASN1Tag(23)) { */ case 2:
				_r = der.ReadASN1UTCTime(t[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!_r) { */ case 6:
					$s = -1; return [t[0], errors.New("x509: malformed UTCTime")];
				/* } */ case 7:
				$s = 5; continue;
			/* } else if (der.PeekASN1Tag(24)) { */ case 3:
				_r$1 = der.ReadASN1GeneralizedTime(t[0]); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!_r$1) { */ case 9:
					$s = -1; return [t[0], errors.New("x509: malformed GeneralizedTime")];
				/* } */ case 10:
				$s = 5; continue;
			/* } else { */ case 4:
				$s = -1; return [t[0], errors.New("x509: unsupported time format")];
			/* } */ case 5:
		case 1:
		$s = -1; return [t[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: parseTime, $c: true, $r, _r, _r$1, der, t, $s};return $f;
	};
	parseValidity = function(der) {
		var {_r, _r$1, _tuple, _tuple$1, der, err, notAfter, notBefore, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		der = [der];
		_r = parseTime((der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		notBefore = $clone(_tuple[0], time.Time);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), err];
		}
		_r$1 = parseTime((der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		notAfter = $clone(_tuple$1[0], time.Time);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), err];
		}
		$s = -1; return [notBefore, notAfter, $ifaceNil];
		/* */ } return; } var $f = {$blk: parseValidity, $c: true, $r, _r, _r$1, _tuple, _tuple$1, der, err, notAfter, notBefore, $s};return $f;
	};
	parseExtension = function(der) {
		var der, der$24ptr, ext, val, val$24ptr;
		ext = new pkix.Extension.ptr(asn1.ObjectIdentifier.nil, false, sliceType$1.nil);
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1ObjectIdentifier((ext.$ptr_Id || (ext.$ptr_Id = new ptrType$19(function() { return this.$target.Id; }, function($v) { this.$target.Id = $v; }, ext))))) {
			return [ext, errors.New("x509: malformed extension OID field")];
		}
		if (der.PeekASN1Tag(1)) {
			if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1Boolean((ext.$ptr_Critical || (ext.$ptr_Critical = new ptrType$6(function() { return this.$target.Critical; }, function($v) { this.$target.Critical = $v; }, ext))))) {
				return [ext, errors.New("x509: malformed extension critical field")];
			}
		}
		val = cryptobyte.String.nil;
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1((val$24ptr || (val$24ptr = new ptrType$24(function() { return val; }, function($v) { val = $v; }))), 4)) {
			return [ext, errors.New("x509: malformed extension value field")];
		}
		ext.Value = $convertSliceType(val, sliceType$1);
		return [ext, $ifaceNil];
	};
	parsePublicKey = function(algo, keyData) {
		var {_1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _v, _v$1, _v$2, algo, der, keyData, namedCurve, namedCurveOID, p, paramsDer, paramsDer$1, paramsDer$24ptr, pub, pub$1, pub$2, x, y, y$1, $s, $r, $c} = $restore(this, {algo, keyData});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		der = [der];
		paramsDer = [paramsDer];
		der[0] = ($convertSliceType($clone(keyData.PublicKey, asn1.BitString).RightAlign(), cryptobyte.String));
			_1 = algo;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (3)) { $s = 3; continue; }
			/* */ if (_1 === (4)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (1)) { */ case 2:
				if (!bytes.Equal(keyData.Algorithm.Parameters.FullBytes, asn1.NullBytes)) {
					$s = -1; return [$ifaceNil, errors.New("x509: RSA key missing NULL parameters")];
				}
				p = new pkcs1PublicKey.ptr(new big.Int.ptr(false, big.nat.nil), 0);
				if (!(der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1((der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))), 48)) {
					$s = -1; return [$ifaceNil, errors.New("x509: invalid RSA public key")];
				}
				_r = (der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1Integer(p.N); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r) { */ case 8:
					$s = -1; return [$ifaceNil, errors.New("x509: invalid RSA modulus")];
				/* } */ case 9:
				_r$1 = (der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1Integer((p.$ptr_E || (p.$ptr_E = new ptrType$16(function() { return this.$target.E; }, function($v) { this.$target.E = $v; }, p)))); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!_r$1) { */ case 11:
					$s = -1; return [$ifaceNil, errors.New("x509: invalid RSA public exponent")];
				/* } */ case 12:
				if (p.N.Sign() <= 0) {
					$s = -1; return [$ifaceNil, errors.New("x509: RSA modulus is not a positive number")];
				}
				if (p.E <= 0) {
					$s = -1; return [$ifaceNil, errors.New("x509: RSA public exponent is not a positive number")];
				}
				pub = new rsa.PublicKey.ptr(p.N, p.E);
				$s = -1; return [pub, $ifaceNil];
			/* } else if (_1 === (3)) { */ case 3:
				paramsDer$1 = ($convertSliceType(keyData.Algorithm.Parameters.FullBytes, cryptobyte.String));
				namedCurveOID = $newDataPointer(asn1.ObjectIdentifier.nil, ptrType$19);
				if (!(paramsDer$24ptr || (paramsDer$24ptr = new ptrType$24(function() { return paramsDer$1; }, function($v) { paramsDer$1 = $v; }))).ReadASN1ObjectIdentifier(namedCurveOID)) {
					$s = -1; return [$ifaceNil, errors.New("x509: invalid ECDSA parameters")];
				}
				_r$2 = namedCurveFromOID(namedCurveOID.$get()); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				namedCurve = _r$2;
				if ($interfaceIsEqual(namedCurve, $ifaceNil)) {
					$s = -1; return [$ifaceNil, errors.New("x509: unsupported elliptic curve")];
				}
				_r$3 = elliptic.Unmarshal(namedCurve, $convertSliceType(der[0], sliceType$1)); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				x = _tuple[0];
				y = _tuple[1];
				if (x === ptrType$1.nil) {
					$s = -1; return [$ifaceNil, errors.New("x509: failed to unmarshal elliptic curve point")];
				}
				pub$1 = new ecdsa.PublicKey.ptr(namedCurve, x, y);
				$s = -1; return [pub$1, $ifaceNil];
			/* } else if (_1 === (4)) { */ case 4:
				if (!((keyData.Algorithm.Parameters.FullBytes.$length === 0))) {
					$s = -1; return [$ifaceNil, errors.New("x509: Ed25519 key encoded with illegal parameters")];
				}
				if (!((der[0].$length === 32))) {
					$s = -1; return [$ifaceNil, errors.New("x509: wrong Ed25519 public key size")];
				}
				$s = -1; return [($convertSliceType(der[0], ed25519.PublicKey)), $ifaceNil];
			/* } else if (_1 === (2)) { */ case 5:
				y$1 = new big.Int.ptr(false, big.nat.nil);
				_r$4 = (der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1Integer(y$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (!_r$4) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!_r$4) { */ case 16:
					$s = -1; return [$ifaceNil, errors.New("x509: invalid DSA public key")];
				/* } */ case 17:
				pub$2 = new dsa.PublicKey.ptr($clone(new dsa.Parameters.ptr(new big.Int.ptr(false, big.nat.nil), new big.Int.ptr(false, big.nat.nil), new big.Int.ptr(false, big.nat.nil)), dsa.Parameters), y$1);
				paramsDer[0] = ($convertSliceType(keyData.Algorithm.Parameters.FullBytes, cryptobyte.String));
				if (!(paramsDer.$ptr || (paramsDer.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, paramsDer))).ReadASN1((paramsDer.$ptr || (paramsDer.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, paramsDer))), 48)) { _v$2 = true; $s = 23; continue s; }
				_r$5 = (paramsDer.$ptr || (paramsDer.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, paramsDer))).ReadASN1Integer(pub$2.Parameters.P); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = !_r$5; case 23:
				if (_v$2) { _v$1 = true; $s = 22; continue s; }
				_r$6 = (paramsDer.$ptr || (paramsDer.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, paramsDer))).ReadASN1Integer(pub$2.Parameters.Q); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$1 = !_r$6; case 22:
				if (_v$1) { _v = true; $s = 21; continue s; }
				_r$7 = (paramsDer.$ptr || (paramsDer.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, paramsDer))).ReadASN1Integer(pub$2.Parameters.G); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_v = !_r$7; case 21:
				/* */ if (_v) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_v) { */ case 19:
					$s = -1; return [$ifaceNil, errors.New("x509: invalid DSA parameters")];
				/* } */ case 20:
				if (pub$2.Y.Sign() <= 0 || pub$2.Parameters.P.Sign() <= 0 || pub$2.Parameters.Q.Sign() <= 0 || pub$2.Parameters.G.Sign() <= 0) {
					$s = -1; return [$ifaceNil, errors.New("x509: zero or negative DSA parameter")];
				}
				$s = -1; return [pub$2, $ifaceNil];
			/* } else { */ case 6:
				$s = -1; return [$ifaceNil, $ifaceNil];
			/* } */ case 7:
		case 1:
		$s = -1; return [$ifaceNil, $ifaceNil];
		/* */ } return; } var $f = {$blk: parsePublicKey, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _v, _v$1, _v$2, algo, der, keyData, namedCurve, namedCurveOID, p, paramsDer, paramsDer$1, paramsDer$24ptr, pub, pub$1, pub$2, x, y, y$1, $s};return $f;
	};
	parseKeyUsageExtension = function(der) {
		var der, der$24ptr, i, usage, usageBits, y;
		usageBits = new asn1.BitString.ptr(sliceType$1.nil, 0);
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1BitString(usageBits)) {
			return [0, errors.New("x509: invalid key usage")];
		}
		usage = 0;
		i = 0;
		while (true) {
			if (!(i < 9)) { break; }
			if (!(($clone(usageBits, asn1.BitString).At(i) === 0))) {
				usage = usage | (((y = ((i >>> 0)), y < 32 ? (1 << y) : 0) >> 0));
			}
			i = i + (1) >> 0;
		}
		return [((usage >> 0)), $ifaceNil];
	};
	parseBasicConstraintsExtension = function(der) {
		var {_r, der, isCA, maxPathLen, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		der = [der];
		isCA = [isCA];
		maxPathLen = [maxPathLen];
		isCA[0] = false;
		if (!(der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1((der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))), 48)) {
			$s = -1; return [false, 0, errors.New("x509: invalid basic constraints a")];
		}
		if (der[0].PeekASN1Tag(1)) {
			if (!(der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1Boolean((isCA.$ptr || (isCA.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, isCA))))) {
				$s = -1; return [false, 0, errors.New("x509: invalid basic constraints b")];
			}
		}
		maxPathLen[0] = -1;
		/* */ if (!der[0].Empty() && der[0].PeekASN1Tag(2)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!der[0].Empty() && der[0].PeekASN1Tag(2)) { */ case 1:
			_r = (der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1Integer((maxPathLen.$ptr || (maxPathLen.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, maxPathLen)))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				$s = -1; return [false, 0, errors.New("x509: invalid basic constraints c")];
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return [isCA[0], maxPathLen[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: parseBasicConstraintsExtension, $c: true, $r, _r, der, isCA, maxPathLen, $s};return $f;
	};
	forEachSAN = function(der, callback) {
		var {_r, callback, der, err, san, tag, $s, $r, $c} = $restore(this, {der, callback});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		der = [der];
		if (!(der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadASN1((der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))), 48)) {
			$s = -1; return errors.New("x509: invalid subject alternative names");
		}
		/* while (true) { */ case 1:
			/* if (!(!der[0].Empty())) { break; } */ if(!(!der[0].Empty())) { $s = 2; continue; }
			san = [san];
			tag = [tag];
			san[0] = cryptobyte.String.nil;
			tag[0] = 0;
			if (!(der.$ptr || (der.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, der))).ReadAnyASN1((san.$ptr || (san.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, san))), (tag.$ptr || (tag.$ptr = new ptrType$25(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tag))))) {
				$s = -1; return errors.New("x509: invalid subject alternative name");
			}
			_r = callback(((((tag[0] ^ 128) << 24 >>> 24) >> 0)), $convertSliceType(san[0], sliceType$1)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: forEachSAN, $c: true, $r, _r, callback, der, err, san, tag, $s};return $f;
	};
	parseSANExtension = function(der) {
		var {_r, der, dnsNames, emailAddresses, err, ipAddresses, uris, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dnsNames = [dnsNames];
		emailAddresses = [emailAddresses];
		ipAddresses = [ipAddresses];
		uris = [uris];
		dnsNames[0] = sliceType$4.nil;
		emailAddresses[0] = sliceType$4.nil;
		ipAddresses[0] = sliceType$18.nil;
		uris[0] = sliceType$19.nil;
		err = $ifaceNil;
		_r = forEachSAN(der, (function(dnsNames, emailAddresses, ipAddresses, uris) { return function $b(tag, data) {
			var {$24r, $24r$1, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, data, email, err$1, err$2, err$3, err$4, name, ok, tag, uri, uriStr, $s, $r, $c} = $restore(this, {tag, data});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				_1 = tag;
				/* */ if (_1 === (1)) { $s = 2; continue; }
				/* */ if (_1 === (2)) { $s = 3; continue; }
				/* */ if (_1 === (6)) { $s = 4; continue; }
				/* */ if (_1 === (7)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (1)) { */ case 2:
					email = ($bytesToString(data));
					_r = isIA5String(email); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					err$1 = _r;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return errors.New("x509: SAN rfc822Name is malformed");
					}
					emailAddresses[0] = $append(emailAddresses[0], email);
					$s = 6; continue;
				/* } else if (_1 === (2)) { */ case 3:
					name = ($bytesToString(data));
					_r$1 = isIA5String(name); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err$2 = _r$1;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return errors.New("x509: SAN dNSName is malformed");
					}
					dnsNames[0] = $append(dnsNames[0], (name));
					$s = 6; continue;
				/* } else if (_1 === (6)) { */ case 4:
					uriStr = ($bytesToString(data));
					_r$2 = isIA5String(uriStr); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err$3 = _r$2;
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return errors.New("x509: SAN uniformResourceIdentifier is malformed");
					}
					_r$3 = url.Parse(uriStr); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					uri = _tuple[0];
					err$4 = _tuple[1];
					/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 11:
						_r$4 = fmt.Errorf("x509: cannot parse URI %q: %s", new sliceType$6([new $String(uriStr), err$4])); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$24r = _r$4;
						$s = 14; case 14: return $24r;
					/* } */ case 12:
					/* */ if (uri.Host.length > 0) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (uri.Host.length > 0) { */ case 15:
						_tuple$1 = domainToReverseLabels(uri.Host);
						ok = _tuple$1[1];
						/* */ if (!ok) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (!ok) { */ case 17:
							_r$5 = fmt.Errorf("x509: cannot parse URI %q: invalid domain", new sliceType$6([new $String(uriStr)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							$24r$1 = _r$5;
							$s = 20; case 20: return $24r$1;
						/* } */ case 18:
					/* } */ case 16:
					uris[0] = $append(uris[0], uri);
					$s = 6; continue;
				/* } else if (_1 === (7)) { */ case 5:
					_2 = data.$length;
					if ((_2 === (4)) || (_2 === (16))) {
						ipAddresses[0] = $append(ipAddresses[0], $convertSliceType(data, net.IP));
					} else {
						$s = -1; return errors.New("x509: cannot parse IP address of length " + strconv.Itoa(data.$length));
					}
				/* } */ case 6:
			case 1:
			$s = -1; return $ifaceNil;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, $24r$1, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, data, email, err$1, err$2, err$3, err$4, name, ok, tag, uri, uriStr, $s};return $f;
		}; })(dnsNames, emailAddresses, ipAddresses, uris)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$s = -1; return [dnsNames[0], emailAddresses[0], ipAddresses[0], uris[0], err];
		/* */ } return; } var $f = {$blk: parseSANExtension, $c: true, $r, _r, der, dnsNames, emailAddresses, err, ipAddresses, uris, $s};return $f;
	};
	parseExtKeyUsageExtension = function(der) {
		var _tuple, der, der$24ptr, eku, extKeyUsage, extKeyUsages, ok, unknownUsages;
		extKeyUsages = sliceType$22.nil;
		unknownUsages = sliceType$11.nil;
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1((der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))), 48)) {
			return [sliceType$22.nil, sliceType$11.nil, errors.New("x509: invalid extended key usages")];
		}
		while (true) {
			if (!(!der.Empty())) { break; }
			eku = [eku];
			eku[0] = asn1.ObjectIdentifier.nil;
			if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1ObjectIdentifier((eku.$ptr || (eku.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, eku))))) {
				return [sliceType$22.nil, sliceType$11.nil, errors.New("x509: invalid extended key usages")];
			}
			_tuple = extKeyUsageFromOID(eku[0]);
			extKeyUsage = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				extKeyUsages = $append(extKeyUsages, extKeyUsage);
			} else {
				unknownUsages = $append(unknownUsages, eku[0]);
			}
		}
		return [extKeyUsages, unknownUsages, $ifaceNil];
	};
	parseCertificatePoliciesExtension = function(der) {
		var cp, der, der$24ptr, oid, oids;
		oids = sliceType$11.nil;
		if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1((der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))), 48)) {
			return [sliceType$11.nil, errors.New("x509: invalid certificate policies")];
		}
		while (true) {
			if (!(!der.Empty())) { break; }
			cp = [cp];
			oid = [oid];
			cp[0] = cryptobyte.String.nil;
			if (!(der$24ptr || (der$24ptr = new ptrType$24(function() { return der; }, function($v) { der = $v; }))).ReadASN1((cp.$ptr || (cp.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, cp))), 48)) {
				return [sliceType$11.nil, errors.New("x509: invalid certificate policies")];
			}
			oid[0] = asn1.ObjectIdentifier.nil;
			if (!(cp.$ptr || (cp.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, cp))).ReadASN1ObjectIdentifier((oid.$ptr || (oid.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, oid))))) {
				return [sliceType$11.nil, errors.New("x509: invalid certificate policies")];
			}
			oids = $append(oids, oid[0]);
		}
		return [oids, $ifaceNil];
	};
	isValidIPMask = function(mask) {
		var _1, _i, _ref, b, mask, seenZero;
		seenZero = false;
		_ref = mask;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (seenZero) {
				if (!((b === 0))) {
					return false;
				}
				_i++;
				continue;
			}
			_1 = b;
			if ((_1 === (0)) || (_1 === (128)) || (_1 === (192)) || (_1 === (224)) || (_1 === (240)) || (_1 === (248)) || (_1 === (252)) || (_1 === (254))) {
				seenZero = true;
			} else if (_1 === (255)) {
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	parseNameConstraintsExtension = function(out, e) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, e, err, excluded, getValues, haveExcluded, havePermitted, out, outer, outer$24ptr, permitted, toplevel, unhandled, $s, $r, $c} = $restore(this, {out, e});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		excluded = [excluded];
		haveExcluded = [haveExcluded];
		havePermitted = [havePermitted];
		permitted = [permitted];
		toplevel = [toplevel];
		unhandled = [unhandled];
		unhandled[0] = false;
		err = $ifaceNil;
		outer = ($convertSliceType(e.Value, cryptobyte.String));
		_tmp = cryptobyte.String.nil;
		_tmp$1 = cryptobyte.String.nil;
		_tmp$2 = cryptobyte.String.nil;
		toplevel[0] = _tmp;
		permitted[0] = _tmp$1;
		excluded[0] = _tmp$2;
		_tmp$3 = false;
		_tmp$4 = false;
		havePermitted[0] = _tmp$3;
		haveExcluded[0] = _tmp$4;
		if (!(outer$24ptr || (outer$24ptr = new ptrType$24(function() { return outer; }, function($v) { outer = $v; }))).ReadASN1((toplevel.$ptr || (toplevel.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, toplevel))), 48) || !outer.Empty() || !(toplevel.$ptr || (toplevel.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, toplevel))).ReadOptionalASN1((permitted.$ptr || (permitted.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, permitted))), (havePermitted.$ptr || (havePermitted.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, havePermitted))), new asn1$1.Tag(new asn1$1.Tag(0).ContextSpecific()).Constructed()) || !(toplevel.$ptr || (toplevel.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, toplevel))).ReadOptionalASN1((excluded.$ptr || (excluded.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, excluded))), (haveExcluded.$ptr || (haveExcluded.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, haveExcluded))), new asn1$1.Tag(new asn1$1.Tag(1).ContextSpecific()).Constructed()) || !toplevel[0].Empty()) {
			_tmp$5 = false;
			_tmp$6 = errors.New("x509: invalid NameConstraints extension");
			unhandled[0] = _tmp$5;
			err = _tmp$6;
			$s = -1; return [unhandled[0], err];
		}
		if (!havePermitted[0] && !haveExcluded[0] || (permitted[0].$length === 0) && (excluded[0].$length === 0)) {
			_tmp$7 = false;
			_tmp$8 = errors.New("x509: empty name constraints extension");
			unhandled[0] = _tmp$7;
			err = _tmp$8;
			$s = -1; return [unhandled[0], err];
		}
		getValues = (function(excluded, haveExcluded, havePermitted, permitted, toplevel, unhandled) { return function $b(subtrees) {
			var {$24r, $24r$1, $24r$10, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$70, _tmp$71, _tmp$72, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, constraint, dnsNames, dnsTag, domain, domain$1, domain$2, emailTag, emails, err$1, err$2, err$3, err$4, ip, ipTag, ips, l, mask, ok, ok$1, ok$2, ok$3, seq, subtrees, subtrees$24ptr, tag, trimmedDomain, trimmedDomain$1, uriDomains, uriTag, value, $s, $r, $c} = $restore(this, {subtrees});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			dnsNames = sliceType$4.nil;
			ips = sliceType$28.nil;
			emails = sliceType$4.nil;
			uriDomains = sliceType$4.nil;
			err$1 = $ifaceNil;
			/* while (true) { */ case 1:
				/* if (!(!subtrees.Empty())) { break; } */ if(!(!subtrees.Empty())) { $s = 2; continue; }
				seq = [seq];
				tag = [tag];
				value = [value];
				_tmp$9 = cryptobyte.String.nil;
				_tmp$10 = cryptobyte.String.nil;
				seq[0] = _tmp$9;
				value[0] = _tmp$10;
				tag[0] = 0;
				/* */ if (!(subtrees$24ptr || (subtrees$24ptr = new ptrType$24(function() { return subtrees; }, function($v) { subtrees = $v; }))).ReadASN1((seq.$ptr || (seq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, seq))), 48) || !(seq.$ptr || (seq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, seq))).ReadAnyASN1((value.$ptr || (value.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))), (tag.$ptr || (tag.$ptr = new ptrType$25(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tag))))) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!(subtrees$24ptr || (subtrees$24ptr = new ptrType$24(function() { return subtrees; }, function($v) { subtrees = $v; }))).ReadASN1((seq.$ptr || (seq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, seq))), 48) || !(seq.$ptr || (seq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, seq))).ReadAnyASN1((value.$ptr || (value.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))), (tag.$ptr || (tag.$ptr = new ptrType$25(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tag))))) { */ case 3:
					_tmp$11 = sliceType$4.nil;
					_tmp$12 = sliceType$28.nil;
					_tmp$13 = sliceType$4.nil;
					_tmp$14 = sliceType$4.nil;
					_r = fmt.Errorf("x509: invalid NameConstraints extension", sliceType$6.nil); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp$15 = _r;
					dnsNames = _tmp$11;
					ips = _tmp$12;
					emails = _tmp$13;
					uriDomains = _tmp$14;
					err$1 = _tmp$15;
					$24r = [dnsNames, ips, emails, uriDomains, err$1];
					$s = 6; case 6: return $24r;
				/* } */ case 4:
				dnsTag = new asn1$1.Tag(2).ContextSpecific();
				emailTag = new asn1$1.Tag(1).ContextSpecific();
				ipTag = new asn1$1.Tag(7).ContextSpecific();
				uriTag = new asn1$1.Tag(6).ContextSpecific();
					_1 = tag[0];
					/* */ if (_1 === (dnsTag)) { $s = 8; continue; }
					/* */ if (_1 === (ipTag)) { $s = 9; continue; }
					/* */ if (_1 === (emailTag)) { $s = 10; continue; }
					/* */ if (_1 === (uriTag)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_1 === (dnsTag)) { */ case 8:
						domain = ($bytesToString(value[0]));
						_r$1 = isIA5String(domain); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						err$2 = _r$1;
						/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 15; continue; }
						/* */ $s = 16; continue;
						/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 15:
							_tmp$16 = sliceType$4.nil;
							_tmp$17 = sliceType$28.nil;
							_tmp$18 = sliceType$4.nil;
							_tmp$19 = sliceType$4.nil;
							_r$2 = err$2.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$3 = errors.New("x509: invalid constraint value: " + _r$2); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_tmp$20 = _r$3;
							dnsNames = _tmp$16;
							ips = _tmp$17;
							emails = _tmp$18;
							uriDomains = _tmp$19;
							err$1 = _tmp$20;
							$24r$1 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 19; case 19: return $24r$1;
						/* } */ case 16:
						trimmedDomain = domain;
						if (trimmedDomain.length > 0 && (trimmedDomain.charCodeAt(0) === 46)) {
							trimmedDomain = $substring(trimmedDomain, 1);
						}
						_tuple = domainToReverseLabels(trimmedDomain);
						ok = _tuple[1];
						/* */ if (!ok) { $s = 20; continue; }
						/* */ $s = 21; continue;
						/* if (!ok) { */ case 20:
							_tmp$21 = sliceType$4.nil;
							_tmp$22 = sliceType$28.nil;
							_tmp$23 = sliceType$4.nil;
							_tmp$24 = sliceType$4.nil;
							_r$4 = fmt.Errorf("x509: failed to parse dnsName constraint %q", new sliceType$6([new $String(domain)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_tmp$25 = _r$4;
							dnsNames = _tmp$21;
							ips = _tmp$22;
							emails = _tmp$23;
							uriDomains = _tmp$24;
							err$1 = _tmp$25;
							$24r$2 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 23; case 23: return $24r$2;
						/* } */ case 21:
						dnsNames = $append(dnsNames, domain);
						$s = 13; continue;
					/* } else if (_1 === (ipTag)) { */ case 9:
						l = value[0].$length;
						_tmp$26 = sliceType$1.nil;
						_tmp$27 = sliceType$1.nil;
						ip = _tmp$26;
						mask = _tmp$27;
							_2 = l;
							/* */ if (_2 === (8)) { $s = 25; continue; }
							/* */ if (_2 === (32)) { $s = 26; continue; }
							/* */ $s = 27; continue;
							/* if (_2 === (8)) { */ case 25:
								ip = $convertSliceType($subslice(value[0], 0, 4), sliceType$1);
								mask = $convertSliceType($subslice(value[0], 4), sliceType$1);
								$s = 28; continue;
							/* } else if (_2 === (32)) { */ case 26:
								ip = $convertSliceType($subslice(value[0], 0, 16), sliceType$1);
								mask = $convertSliceType($subslice(value[0], 16), sliceType$1);
								$s = 28; continue;
							/* } else { */ case 27:
								_tmp$28 = sliceType$4.nil;
								_tmp$29 = sliceType$28.nil;
								_tmp$30 = sliceType$4.nil;
								_tmp$31 = sliceType$4.nil;
								_r$5 = fmt.Errorf("x509: IP constraint contained value of length %d", new sliceType$6([new $Int(l)])); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
								_tmp$32 = _r$5;
								dnsNames = _tmp$28;
								ips = _tmp$29;
								emails = _tmp$30;
								uriDomains = _tmp$31;
								err$1 = _tmp$32;
								$24r$3 = [dnsNames, ips, emails, uriDomains, err$1];
								$s = 30; case 30: return $24r$3;
							/* } */ case 28:
						case 24:
						/* */ if (!isValidIPMask(mask)) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (!isValidIPMask(mask)) { */ case 31:
							_tmp$33 = sliceType$4.nil;
							_tmp$34 = sliceType$28.nil;
							_tmp$35 = sliceType$4.nil;
							_tmp$36 = sliceType$4.nil;
							_r$6 = fmt.Errorf("x509: IP constraint contained invalid mask %x", new sliceType$6([mask])); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_tmp$37 = _r$6;
							dnsNames = _tmp$33;
							ips = _tmp$34;
							emails = _tmp$35;
							uriDomains = _tmp$36;
							err$1 = _tmp$37;
							$24r$4 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 34; case 34: return $24r$4;
						/* } */ case 32:
						ips = $append(ips, new net.IPNet.ptr(($convertSliceType(ip, net.IP)), ($convertSliceType(mask, net.IPMask))));
						$s = 13; continue;
					/* } else if (_1 === (emailTag)) { */ case 10:
						constraint = ($bytesToString(value[0]));
						_r$7 = isIA5String(constraint); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						err$3 = _r$7;
						/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 36; continue; }
						/* */ $s = 37; continue;
						/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 36:
							_tmp$38 = sliceType$4.nil;
							_tmp$39 = sliceType$28.nil;
							_tmp$40 = sliceType$4.nil;
							_tmp$41 = sliceType$4.nil;
							_r$8 = err$3.Error(); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_r$9 = errors.New("x509: invalid constraint value: " + _r$8); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							_tmp$42 = _r$9;
							dnsNames = _tmp$38;
							ips = _tmp$39;
							emails = _tmp$40;
							uriDomains = _tmp$41;
							err$1 = _tmp$42;
							$24r$5 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 40; case 40: return $24r$5;
						/* } */ case 37:
						/* */ if (strings.Contains(constraint, "@")) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if (strings.Contains(constraint, "@")) { */ case 41:
							_tuple$1 = parseRFC2821Mailbox(constraint);
							ok$1 = _tuple$1[1];
							/* */ if (!ok$1) { $s = 44; continue; }
							/* */ $s = 45; continue;
							/* if (!ok$1) { */ case 44:
								_tmp$43 = sliceType$4.nil;
								_tmp$44 = sliceType$28.nil;
								_tmp$45 = sliceType$4.nil;
								_tmp$46 = sliceType$4.nil;
								_r$10 = fmt.Errorf("x509: failed to parse rfc822Name constraint %q", new sliceType$6([new $String(constraint)])); /* */ $s = 46; case 46: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
								_tmp$47 = _r$10;
								dnsNames = _tmp$43;
								ips = _tmp$44;
								emails = _tmp$45;
								uriDomains = _tmp$46;
								err$1 = _tmp$47;
								$24r$6 = [dnsNames, ips, emails, uriDomains, err$1];
								$s = 47; case 47: return $24r$6;
							/* } */ case 45:
							$s = 43; continue;
						/* } else { */ case 42:
							domain$1 = constraint;
							if (domain$1.length > 0 && (domain$1.charCodeAt(0) === 46)) {
								domain$1 = $substring(domain$1, 1);
							}
							_tuple$2 = domainToReverseLabels(domain$1);
							ok$2 = _tuple$2[1];
							/* */ if (!ok$2) { $s = 48; continue; }
							/* */ $s = 49; continue;
							/* if (!ok$2) { */ case 48:
								_tmp$48 = sliceType$4.nil;
								_tmp$49 = sliceType$28.nil;
								_tmp$50 = sliceType$4.nil;
								_tmp$51 = sliceType$4.nil;
								_r$11 = fmt.Errorf("x509: failed to parse rfc822Name constraint %q", new sliceType$6([new $String(constraint)])); /* */ $s = 50; case 50: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
								_tmp$52 = _r$11;
								dnsNames = _tmp$48;
								ips = _tmp$49;
								emails = _tmp$50;
								uriDomains = _tmp$51;
								err$1 = _tmp$52;
								$24r$7 = [dnsNames, ips, emails, uriDomains, err$1];
								$s = 51; case 51: return $24r$7;
							/* } */ case 49:
						/* } */ case 43:
						emails = $append(emails, constraint);
						$s = 13; continue;
					/* } else if (_1 === (uriTag)) { */ case 11:
						domain$2 = ($bytesToString(value[0]));
						_r$12 = isIA5String(domain$2); /* */ $s = 52; case 52: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						err$4 = _r$12;
						/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 53; continue; }
						/* */ $s = 54; continue;
						/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 53:
							_tmp$53 = sliceType$4.nil;
							_tmp$54 = sliceType$28.nil;
							_tmp$55 = sliceType$4.nil;
							_tmp$56 = sliceType$4.nil;
							_r$13 = err$4.Error(); /* */ $s = 55; case 55: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							_r$14 = errors.New("x509: invalid constraint value: " + _r$13); /* */ $s = 56; case 56: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							_tmp$57 = _r$14;
							dnsNames = _tmp$53;
							ips = _tmp$54;
							emails = _tmp$55;
							uriDomains = _tmp$56;
							err$1 = _tmp$57;
							$24r$8 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 57; case 57: return $24r$8;
						/* } */ case 54:
						/* */ if (!(net.ParseIP(domain$2) === net.IP.nil)) { $s = 58; continue; }
						/* */ $s = 59; continue;
						/* if (!(net.ParseIP(domain$2) === net.IP.nil)) { */ case 58:
							_tmp$58 = sliceType$4.nil;
							_tmp$59 = sliceType$28.nil;
							_tmp$60 = sliceType$4.nil;
							_tmp$61 = sliceType$4.nil;
							_r$15 = fmt.Errorf("x509: failed to parse URI constraint %q: cannot be IP address", new sliceType$6([new $String(domain$2)])); /* */ $s = 60; case 60: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_tmp$62 = _r$15;
							dnsNames = _tmp$58;
							ips = _tmp$59;
							emails = _tmp$60;
							uriDomains = _tmp$61;
							err$1 = _tmp$62;
							$24r$9 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 61; case 61: return $24r$9;
						/* } */ case 59:
						trimmedDomain$1 = domain$2;
						if (trimmedDomain$1.length > 0 && (trimmedDomain$1.charCodeAt(0) === 46)) {
							trimmedDomain$1 = $substring(trimmedDomain$1, 1);
						}
						_tuple$3 = domainToReverseLabels(trimmedDomain$1);
						ok$3 = _tuple$3[1];
						/* */ if (!ok$3) { $s = 62; continue; }
						/* */ $s = 63; continue;
						/* if (!ok$3) { */ case 62:
							_tmp$63 = sliceType$4.nil;
							_tmp$64 = sliceType$28.nil;
							_tmp$65 = sliceType$4.nil;
							_tmp$66 = sliceType$4.nil;
							_r$16 = fmt.Errorf("x509: failed to parse URI constraint %q", new sliceType$6([new $String(domain$2)])); /* */ $s = 64; case 64: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							_tmp$67 = _r$16;
							dnsNames = _tmp$63;
							ips = _tmp$64;
							emails = _tmp$65;
							uriDomains = _tmp$66;
							err$1 = _tmp$67;
							$24r$10 = [dnsNames, ips, emails, uriDomains, err$1];
							$s = 65; case 65: return $24r$10;
						/* } */ case 63:
						uriDomains = $append(uriDomains, domain$2);
						$s = 13; continue;
					/* } else { */ case 12:
						unhandled[0] = true;
					/* } */ case 13:
				case 7:
			$s = 1; continue;
			case 2:
			_tmp$68 = dnsNames;
			_tmp$69 = ips;
			_tmp$70 = emails;
			_tmp$71 = uriDomains;
			_tmp$72 = $ifaceNil;
			dnsNames = _tmp$68;
			ips = _tmp$69;
			emails = _tmp$70;
			uriDomains = _tmp$71;
			err$1 = _tmp$72;
			$s = -1; return [dnsNames, ips, emails, uriDomains, err$1];
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, $24r$1, $24r$10, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$70, _tmp$71, _tmp$72, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, constraint, dnsNames, dnsTag, domain, domain$1, domain$2, emailTag, emails, err$1, err$2, err$3, err$4, ip, ipTag, ips, l, mask, ok, ok$1, ok$2, ok$3, seq, subtrees, subtrees$24ptr, tag, trimmedDomain, trimmedDomain$1, uriDomains, uriTag, value, $s};return $f;
		}; })(excluded, haveExcluded, havePermitted, permitted, toplevel, unhandled);
		_r = getValues(permitted[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		out.PermittedDNSDomains = _tuple[0];
		out.PermittedIPRanges = _tuple[1];
		out.PermittedEmailAddresses = _tuple[2];
		out.PermittedURIDomains = _tuple[3];
		err = _tuple[4];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$9 = false;
			_tmp$10 = err;
			unhandled[0] = _tmp$9;
			err = _tmp$10;
			$s = -1; return [unhandled[0], err];
		}
		_r$1 = getValues(excluded[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		out.ExcludedDNSDomains = _tuple$1[0];
		out.ExcludedIPRanges = _tuple$1[1];
		out.ExcludedEmailAddresses = _tuple$1[2];
		out.ExcludedURIDomains = _tuple$1[3];
		err = _tuple$1[4];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$11 = false;
			_tmp$12 = err;
			unhandled[0] = _tmp$11;
			err = _tmp$12;
			$s = -1; return [unhandled[0], err];
		}
		out.PermittedDNSDomainsCritical = e.Critical;
		_tmp$13 = unhandled[0];
		_tmp$14 = $ifaceNil;
		unhandled[0] = _tmp$13;
		err = _tmp$14;
		$s = -1; return [unhandled[0], err];
		/* */ } return; } var $f = {$blk: parseNameConstraintsExtension, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, e, err, excluded, getValues, haveExcluded, havePermitted, out, outer, outer$24ptr, permitted, toplevel, unhandled, $s};return $f;
	};
	processExtensions = function(out) {
		var {_1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, aiaDER, akid, dpDER, dpNameDER, dpNamePresent, e, err, method, out, skid, unhandled, uri, val, val$1, val$2, val$24ptr, val$24ptr$1, val$3, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {out});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_ref = out.Extensions;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			akid = [akid];
			skid = [skid];
			val = [val];
			val$1 = [val$1];
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			unhandled = false;
			/* */ if ((e.Id.$length === 4) && ((x = e.Id, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 2) && ((x$1 = e.Id, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) === 5) && ((x$2 = e.Id, (2 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 2])) === 29)) { $s = 3; continue; }
			/* */ if (e.Id.Equal($convertSliceType(oidExtensionAuthorityInfoAccess, asn1.ObjectIdentifier))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((e.Id.$length === 4) && ((x = e.Id, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 2) && ((x$1 = e.Id, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) === 5) && ((x$2 = e.Id, (2 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 2])) === 29)) { */ case 3:
					_1 = (x$3 = e.Id, (3 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 3]));
					/* */ if (_1 === (15)) { $s = 8; continue; }
					/* */ if (_1 === (19)) { $s = 9; continue; }
					/* */ if (_1 === (17)) { $s = 10; continue; }
					/* */ if (_1 === (30)) { $s = 11; continue; }
					/* */ if (_1 === (31)) { $s = 12; continue; }
					/* */ if (_1 === (35)) { $s = 13; continue; }
					/* */ if (_1 === (37)) { $s = 14; continue; }
					/* */ if (_1 === (14)) { $s = 15; continue; }
					/* */ if (_1 === (32)) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (_1 === (15)) { */ case 8:
						_tuple = parseKeyUsageExtension($convertSliceType(e.Value, cryptobyte.String));
						out.KeyUsage = _tuple[0];
						err = _tuple[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						$s = 18; continue;
					/* } else if (_1 === (19)) { */ case 9:
						_r = parseBasicConstraintsExtension($convertSliceType(e.Value, cryptobyte.String)); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple$1 = _r;
						out.IsCA = _tuple$1[0];
						out.MaxPathLen = _tuple$1[1];
						err = _tuple$1[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						out.BasicConstraintsValid = true;
						out.MaxPathLenZero = out.MaxPathLen === 0;
						$s = 18; continue;
					/* } else if (_1 === (17)) { */ case 10:
						_r$1 = parseSANExtension($convertSliceType(e.Value, cryptobyte.String)); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$2 = _r$1;
						out.DNSNames = _tuple$2[0];
						out.EmailAddresses = _tuple$2[1];
						out.IPAddresses = _tuple$2[2];
						out.URIs = _tuple$2[3];
						err = _tuple$2[4];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						if ((out.DNSNames.$length === 0) && (out.EmailAddresses.$length === 0) && (out.IPAddresses.$length === 0) && (out.URIs.$length === 0)) {
							unhandled = true;
						}
						$s = 18; continue;
					/* } else if (_1 === (30)) { */ case 11:
						_r$2 = parseNameConstraintsExtension(out, $clone(e, pkix.Extension)); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$3 = _r$2;
						unhandled = _tuple$3[0];
						err = _tuple$3[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						$s = 18; continue;
					/* } else if (_1 === (31)) { */ case 12:
						val[0] = ($convertSliceType(e.Value, cryptobyte.String));
						if (!(val.$ptr || (val.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val))).ReadASN1((val.$ptr || (val.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val))), 48)) {
							$s = -1; return errors.New("x509: invalid CRL distribution points");
						}
						while (true) {
							if (!(!val[0].Empty())) { break; }
							dpDER = [dpDER];
							dpNameDER = [dpNameDER];
							dpNamePresent = [dpNamePresent];
							dpDER[0] = cryptobyte.String.nil;
							if (!(val.$ptr || (val.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val))).ReadASN1((dpDER.$ptr || (dpDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpDER))), 48)) {
								$s = -1; return errors.New("x509: invalid CRL distribution point");
							}
							dpNameDER[0] = cryptobyte.String.nil;
							dpNamePresent[0] = false;
							if (!(dpDER.$ptr || (dpDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpDER))).ReadOptionalASN1((dpNameDER.$ptr || (dpNameDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpNameDER))), (dpNamePresent.$ptr || (dpNamePresent.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpNamePresent))), new asn1$1.Tag(new asn1$1.Tag(0).Constructed()).ContextSpecific())) {
								$s = -1; return errors.New("x509: invalid CRL distribution point");
							}
							if (!dpNamePresent[0]) {
								continue;
							}
							if (!(dpNameDER.$ptr || (dpNameDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpNameDER))).ReadASN1((dpNameDER.$ptr || (dpNameDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpNameDER))), new asn1$1.Tag(new asn1$1.Tag(0).Constructed()).ContextSpecific())) {
								$s = -1; return errors.New("x509: invalid CRL distribution point");
							}
							while (true) {
								if (!(!dpNameDER[0].Empty())) { break; }
								uri = [uri];
								if (!dpNameDER[0].PeekASN1Tag(new asn1$1.Tag(6).ContextSpecific())) {
									break;
								}
								uri[0] = cryptobyte.String.nil;
								if (!(dpNameDER.$ptr || (dpNameDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dpNameDER))).ReadASN1((uri.$ptr || (uri.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, uri))), new asn1$1.Tag(6).ContextSpecific())) {
									$s = -1; return errors.New("x509: invalid CRL distribution point");
								}
								out.CRLDistributionPoints = $append(out.CRLDistributionPoints, ($bytesToString(uri[0])));
							}
						}
						$s = 18; continue;
					/* } else if (_1 === (35)) { */ case 13:
						val$2 = ($convertSliceType(e.Value, cryptobyte.String));
						akid[0] = cryptobyte.String.nil;
						if (!(val$24ptr || (val$24ptr = new ptrType$24(function() { return val$2; }, function($v) { val$2 = $v; }))).ReadASN1((akid.$ptr || (akid.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, akid))), 48)) {
							$s = -1; return errors.New("x509: invalid authority key identifier");
						}
						if (akid[0].PeekASN1Tag(new asn1$1.Tag(0).ContextSpecific())) {
							if (!(akid.$ptr || (akid.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, akid))).ReadASN1((akid.$ptr || (akid.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, akid))), new asn1$1.Tag(0).ContextSpecific())) {
								$s = -1; return errors.New("x509: invalid authority key identifier");
							}
							out.AuthorityKeyId = $convertSliceType(akid[0], sliceType$1);
						}
						$s = 18; continue;
					/* } else if (_1 === (37)) { */ case 14:
						_tuple$4 = parseExtKeyUsageExtension($convertSliceType(e.Value, cryptobyte.String));
						out.ExtKeyUsage = _tuple$4[0];
						out.UnknownExtKeyUsage = _tuple$4[1];
						err = _tuple$4[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						$s = 18; continue;
					/* } else if (_1 === (14)) { */ case 15:
						val$3 = ($convertSliceType(e.Value, cryptobyte.String));
						skid[0] = cryptobyte.String.nil;
						if (!(val$24ptr$1 || (val$24ptr$1 = new ptrType$24(function() { return val$3; }, function($v) { val$3 = $v; }))).ReadASN1((skid.$ptr || (skid.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, skid))), 4)) {
							$s = -1; return errors.New("x509: invalid subject key identifier");
						}
						out.SubjectKeyId = $convertSliceType(skid[0], sliceType$1);
						$s = 18; continue;
					/* } else if (_1 === (32)) { */ case 16:
						_tuple$5 = parseCertificatePoliciesExtension($convertSliceType(e.Value, cryptobyte.String));
						out.PolicyIdentifiers = _tuple$5[0];
						err = _tuple$5[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return err;
						}
						$s = 18; continue;
					/* } else { */ case 17:
						unhandled = true;
					/* } */ case 18:
				case 7:
				$s = 6; continue;
			/* } else if (e.Id.Equal($convertSliceType(oidExtensionAuthorityInfoAccess, asn1.ObjectIdentifier))) { */ case 4:
				val$1[0] = ($convertSliceType(e.Value, cryptobyte.String));
				if (!(val$1.$ptr || (val$1.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val$1))).ReadASN1((val$1.$ptr || (val$1.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val$1))), 48)) {
					$s = -1; return errors.New("x509: invalid authority info access");
				}
				while (true) {
					if (!(!val$1[0].Empty())) { break; }
					aiaDER = [aiaDER];
					method = [method];
					aiaDER[0] = cryptobyte.String.nil;
					if (!(val$1.$ptr || (val$1.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val$1))).ReadASN1((aiaDER.$ptr || (aiaDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aiaDER))), 48)) {
						$s = -1; return errors.New("x509: invalid authority info access");
					}
					method[0] = asn1.ObjectIdentifier.nil;
					if (!(aiaDER.$ptr || (aiaDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aiaDER))).ReadASN1ObjectIdentifier((method.$ptr || (method.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, method))))) {
						$s = -1; return errors.New("x509: invalid authority info access");
					}
					if (!aiaDER[0].PeekASN1Tag(new asn1$1.Tag(6).ContextSpecific())) {
						continue;
					}
					if (!(aiaDER.$ptr || (aiaDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aiaDER))).ReadASN1((aiaDER.$ptr || (aiaDER.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aiaDER))), new asn1$1.Tag(6).ContextSpecific())) {
						$s = -1; return errors.New("x509: invalid authority info access");
					}
					if (method[0].Equal(oidAuthorityInfoAccessOcsp)) {
						out.OCSPServer = $append(out.OCSPServer, ($bytesToString(aiaDER[0])));
					} else if (method[0].Equal(oidAuthorityInfoAccessIssuers)) {
						out.IssuingCertificateURL = $append(out.IssuingCertificateURL, ($bytesToString(aiaDER[0])));
					}
				}
				$s = 6; continue;
			/* } else { */ case 5:
				unhandled = true;
			/* } */ case 6:
			if (e.Critical && unhandled) {
				out.UnhandledCriticalExtensions = $append(out.UnhandledCriticalExtensions, e.Id);
			}
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: processExtensions, $c: true, $r, _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, aiaDER, akid, dpDER, dpNameDER, dpNamePresent, e, err, method, out, skid, unhandled, uri, val, val$1, val$2, val$24ptr, val$24ptr$1, val$3, x, x$1, x$2, x$3, $s};return $f;
	};
	parseCertificate = function(der) {
		var {_entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, cert, der, err, err$1, ext, extension, extensions, input, issuerRDNs, issuerSeq, oidStr, outerSigAISeq, pkAI, pkAISeq, present, seenExts, serial, sigAI, sigAISeq, signature, spk, spki, subjectRDNs, subjectSeq, tbs, validity$1, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		extensions = [extensions];
		input = [input];
		issuerSeq = [issuerSeq];
		outerSigAISeq = [outerSigAISeq];
		pkAISeq = [pkAISeq];
		present = [present];
		sigAISeq = [sigAISeq];
		signature = [signature];
		spk = [spk];
		spki = [spki];
		subjectSeq = [subjectSeq];
		tbs = [tbs];
		validity$1 = [validity$1];
		cert = new Certificate.ptr(sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, 0, 0, $ifaceNil, 0, ptrType$1.nil, new pkix.Name.ptr(sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, "", "", sliceType$15.nil, sliceType$15.nil), new pkix.Name.ptr(sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, "", "", sliceType$15.nil, sliceType$15.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$7.nil), 0, sliceType$8.nil, sliceType$8.nil, sliceType$11.nil, sliceType$22.nil, sliceType$11.nil, false, false, 0, false, sliceType$1.nil, sliceType$1.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$18.nil, sliceType$19.nil, false, sliceType$4.nil, sliceType$4.nil, sliceType$28.nil, sliceType$28.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$4.nil, sliceType$11.nil);
		input[0] = ($convertSliceType(der, cryptobyte.String));
		if (!(input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))).ReadASN1Element((input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed certificate")];
		}
		cert.Raw = $convertSliceType(input[0], sliceType$1);
		if (!(input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))).ReadASN1((input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed certificate")];
		}
		tbs[0] = cryptobyte.String.nil;
		if (!(input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))).ReadASN1Element((tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed tbs certificate")];
		}
		cert.RawTBSCertificate = $convertSliceType(tbs[0], sliceType$1);
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1((tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed tbs certificate")];
		}
		_r = (tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadOptionalASN1Integer((cert.$ptr_Version || (cert.$ptr_Version = new ptrType$16(function() { return this.$target.Version; }, function($v) { this.$target.Version = $v; }, cert))), new asn1$1.Tag(new asn1$1.Tag(0).Constructed()).ContextSpecific(), new $Int(0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed version")];
		/* } */ case 2:
		if (cert.Version < 0) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed version")];
		}
		cert.Version = cert.Version + (1) >> 0;
		if (cert.Version > 3) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: invalid version")];
		}
		serial = new big.Int.ptr(false, big.nat.nil);
		_r$1 = (tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1Integer(serial); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!_r$1) { */ case 4:
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed serial number")];
		/* } */ case 5:
		cert.SerialNumber = serial;
		sigAISeq[0] = cryptobyte.String.nil;
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1((sigAISeq.$ptr || (sigAISeq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, sigAISeq))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed signature algorithm identifier")];
		}
		outerSigAISeq[0] = cryptobyte.String.nil;
		if (!(input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))).ReadASN1((outerSigAISeq.$ptr || (outerSigAISeq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, outerSigAISeq))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed algorithm identifier")];
		}
		if (!bytes.Equal($convertSliceType(outerSigAISeq[0], sliceType$1), $convertSliceType(sigAISeq[0], sliceType$1))) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: inner and outer signature algorithm identifiers don't match")];
		}
		_tuple = parseAI(sigAISeq[0]);
		sigAI = $clone(_tuple[0], pkix.AlgorithmIdentifier);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		_r$2 = getSignatureAlgorithmFromAI($clone(sigAI, pkix.AlgorithmIdentifier)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		cert.SignatureAlgorithm = _r$2;
		issuerSeq[0] = cryptobyte.String.nil;
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1Element((issuerSeq.$ptr || (issuerSeq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, issuerSeq))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed issuer")];
		}
		cert.RawIssuer = $convertSliceType(issuerSeq[0], sliceType$1);
		_r$3 = parseName(issuerSeq[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		issuerRDNs = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		cert.Issuer.FillFromRDNSequence(issuerRDNs);
		validity$1[0] = cryptobyte.String.nil;
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1((validity$1.$ptr || (validity$1.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, validity$1))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed validity")];
		}
		_r$4 = parseValidity(validity$1[0]); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		time.Time.copy(cert.NotBefore, _tuple$2[0]);
		time.Time.copy(cert.NotAfter, _tuple$2[1]);
		err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		subjectSeq[0] = cryptobyte.String.nil;
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1Element((subjectSeq.$ptr || (subjectSeq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, subjectSeq))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed issuer")];
		}
		cert.RawSubject = $convertSliceType(subjectSeq[0], sliceType$1);
		_r$5 = parseName(subjectSeq[0]); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$3 = _r$5;
		subjectRDNs = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		cert.Subject.FillFromRDNSequence(subjectRDNs);
		spki[0] = cryptobyte.String.nil;
		if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadASN1Element((spki.$ptr || (spki.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, spki))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed spki")];
		}
		cert.RawSubjectPublicKeyInfo = $convertSliceType(spki[0], sliceType$1);
		if (!(spki.$ptr || (spki.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, spki))).ReadASN1((spki.$ptr || (spki.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, spki))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed spki")];
		}
		pkAISeq[0] = cryptobyte.String.nil;
		if (!(spki.$ptr || (spki.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, spki))).ReadASN1((pkAISeq.$ptr || (pkAISeq.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, pkAISeq))), 48)) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed public key algorithm identifier")];
		}
		_tuple$4 = parseAI(pkAISeq[0]);
		pkAI = $clone(_tuple$4[0], pkix.AlgorithmIdentifier);
		err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		cert.PublicKeyAlgorithm = getPublicKeyAlgorithmFromOID(pkAI.Algorithm);
		spk[0] = new asn1.BitString.ptr(sliceType$1.nil, 0);
		if (!(spki.$ptr || (spki.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, spki))).ReadASN1BitString(spk[0])) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed subjectPublicKey")];
		}
		_r$6 = parsePublicKey(cert.PublicKeyAlgorithm, new publicKeyInfo.ptr(asn1.RawContent.nil, $clone(pkAI, pkix.AlgorithmIdentifier), $clone(spk[0], asn1.BitString))); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$5 = _r$6;
		cert.PublicKey = _tuple$5[0];
		err = _tuple$5[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		/* */ if (cert.Version > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (cert.Version > 1) { */ case 12:
			if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).SkipOptionalASN1(new asn1$1.Tag(1).ContextSpecific())) {
				$s = -1; return [ptrType$4.nil, errors.New("x509: malformed issuerUniqueID")];
			}
			if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).SkipOptionalASN1(new asn1$1.Tag(2).ContextSpecific())) {
				$s = -1; return [ptrType$4.nil, errors.New("x509: malformed subjectUniqueID")];
			}
			/* */ if (cert.Version === 3) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (cert.Version === 3) { */ case 14:
				extensions[0] = cryptobyte.String.nil;
				present[0] = false;
				if (!(tbs.$ptr || (tbs.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, tbs))).ReadOptionalASN1((extensions.$ptr || (extensions.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, extensions))), (present.$ptr || (present.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, present))), new asn1$1.Tag(new asn1$1.Tag(3).Constructed()).ContextSpecific())) {
					$s = -1; return [ptrType$4.nil, errors.New("x509: malformed extensions")];
				}
				/* */ if (present[0]) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (present[0]) { */ case 16:
					seenExts = new $global.Map();
					if (!(extensions.$ptr || (extensions.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, extensions))).ReadASN1((extensions.$ptr || (extensions.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, extensions))), 48)) {
						$s = -1; return [ptrType$4.nil, errors.New("x509: malformed extensions")];
					}
					while (true) {
						if (!(!extensions[0].Empty())) { break; }
						extension = [extension];
						extension[0] = cryptobyte.String.nil;
						if (!(extensions.$ptr || (extensions.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, extensions))).ReadASN1((extension.$ptr || (extension.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, extension))), 48)) {
							$s = -1; return [ptrType$4.nil, errors.New("x509: malformed extension")];
						}
						_tuple$6 = parseExtension(extension[0]);
						ext = $clone(_tuple$6[0], pkix.Extension);
						err$1 = _tuple$6[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$s = -1; return [ptrType$4.nil, err$1];
						}
						oidStr = ext.Id.String();
						if ((_entry = $mapIndex(seenExts,$String.keyFor(oidStr)), _entry !== undefined ? _entry.v : false)) {
							$s = -1; return [ptrType$4.nil, errors.New("x509: certificate contains duplicate extensions")];
						}
						_key = oidStr; (seenExts || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: true });
						cert.Extensions = $append(cert.Extensions, ext);
					}
					_r$7 = processExtensions(cert); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					err = _r$7;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [ptrType$4.nil, err];
					}
				/* } */ case 17:
			/* } */ case 15:
		/* } */ case 13:
		signature[0] = new asn1.BitString.ptr(sliceType$1.nil, 0);
		if (!(input.$ptr || (input.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, input))).ReadASN1BitString(signature[0])) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: malformed signature")];
		}
		cert.Signature = $clone(signature[0], asn1.BitString).RightAlign();
		$s = -1; return [cert, $ifaceNil];
		/* */ } return; } var $f = {$blk: parseCertificate, $c: true, $r, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, cert, der, err, err$1, ext, extension, extensions, input, issuerRDNs, issuerSeq, oidStr, outerSigAISeq, pkAI, pkAISeq, present, seenExts, serial, sigAI, sigAISeq, signature, spk, spki, subjectRDNs, subjectSeq, tbs, validity$1, $s};return $f;
	};
	ParseCertificate = function(der) {
		var {_r, _tuple, cert, der, err, $s, $r, $c} = $restore(this, {der});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = parseCertificate(der); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cert = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$4.nil, err];
		}
		if (!((der.$length === cert.Raw.$length))) {
			$s = -1; return [ptrType$4.nil, errors.New("x509: trailing data")];
		}
		$s = -1; return [cert, err];
		/* */ } return; } var $f = {$blk: ParseCertificate, $c: true, $r, _r, _tuple, cert, der, err, $s};return $f;
	};
	$pkg.ParseCertificate = ParseCertificate;
	boringAllowCert = function(c) {
		var c;
		return true;
	};
	NewCertPool = function() {
		return new CertPool.ptr(new $global.Map(), sliceType$29.nil, new $global.Map(), false);
	};
	$pkg.NewCertPool = NewCertPool;
	CertPool.ptr.prototype.len = function() {
		var s;
		s = this;
		if (s === ptrType.nil) {
			return 0;
		}
		return s.lazyCerts.$length;
	};
	CertPool.prototype.len = function() { return this.$val.len(); };
	CertPool.ptr.prototype.cert = function(n) {
		var {$24r, _r, n, s, x, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r = (x = s.lazyCerts, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n])).getCert(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: CertPool.ptr.prototype.cert, $c: true, $r, $24r, _r, n, s, x, $s};return $f;
	};
	CertPool.prototype.cert = function(n) { return this.$val.cert(n); };
	CertPool.ptr.prototype.Clone = function() {
		var _entry, _entry$1, _i, _i$1, _key, _key$1, _key$2, _key$3, _keys, _keys$1, _ref, _ref$1, _size, _size$1, indexes, k, k$1, p, s, v, x, x$1;
		s = this;
		p = new CertPool.ptr((x = (s.byName ? s.byName.size : 0), ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : new $global.Map())), $makeSlice(sliceType$29, s.lazyCerts.$length), (x$1 = (s.haveSum ? s.haveSum.size : 0), ((x$1 < 0 || x$1 > 2147483647) ? $throwRuntimeError("makemap: size out of range") : new $global.Map())), s.systemPool);
		_ref = s.byName;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			indexes = $makeSlice(sliceType$3, v.$length);
			$copySlice(indexes, v);
			_key$1 = k; (p.byName || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$1), { k: _key$1, v: indexes });
			_i++;
		}
		_ref$1 = s.haveSum;
		_i$1 = 0;
		_keys$1 = _ref$1 ? _ref$1.keys() : undefined;
		_size$1 = _ref$1 ? _ref$1.size : 0;
		while (true) {
			if (!(_i$1 < _size$1)) { break; }
			_key$2 = _keys$1.next().value;
			_entry$1 = _ref$1.get(_key$2);
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			k$1 = $clone(_entry$1.k, sum224);
			_key$3 = $clone(k$1, sum224); (p.haveSum || $throwRuntimeError("assignment to entry in nil map")).set(sum224.keyFor(_key$3), { k: _key$3, v: true });
			_i$1++;
		}
		$copySlice(p.lazyCerts, s.lazyCerts);
		return p;
	};
	CertPool.prototype.Clone = function() { return this.$val.Clone(); };
	CertPool.ptr.prototype.findPotentialParents = function(cert) {
		var {_entry, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tuple, c, candidate, candidates, cert, err, found, kidMatch, matchingKeyID, mismatchKeyID, oneKeyID, s, $s, $r, $c} = $restore(this, {cert});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		if (s === ptrType.nil) {
			$s = -1; return sliceType$20.nil;
		}
		_tmp = sliceType$20.nil;
		_tmp$1 = sliceType$20.nil;
		_tmp$2 = sliceType$20.nil;
		matchingKeyID = _tmp;
		oneKeyID = _tmp$1;
		mismatchKeyID = _tmp$2;
		_ref = (_entry = $mapIndex(s.byName,$String.keyFor(($bytesToString(cert.RawIssuer)))), _entry !== undefined ? _entry.v : sliceType$3.nil);
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = s.cert(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			candidate = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			kidMatch = bytes.Equal(candidate.SubjectKeyId, cert.AuthorityKeyId);
			if (kidMatch) {
				matchingKeyID = $append(matchingKeyID, candidate);
			} else if (((candidate.SubjectKeyId.$length === 0) && cert.AuthorityKeyId.$length > 0) || (candidate.SubjectKeyId.$length > 0 && (cert.AuthorityKeyId.$length === 0))) {
				oneKeyID = $append(oneKeyID, candidate);
			} else {
				mismatchKeyID = $append(mismatchKeyID, candidate);
			}
			_i++;
		$s = 1; continue;
		case 2:
		found = (matchingKeyID.$length + oneKeyID.$length >> 0) + mismatchKeyID.$length >> 0;
		if (found === 0) {
			$s = -1; return sliceType$20.nil;
		}
		candidates = $makeSlice(sliceType$20, 0, found);
		candidates = $appendSlice(candidates, matchingKeyID);
		candidates = $appendSlice(candidates, oneKeyID);
		candidates = $appendSlice(candidates, mismatchKeyID);
		$s = -1; return candidates;
		/* */ } return; } var $f = {$blk: CertPool.ptr.prototype.findPotentialParents, $c: true, $r, _entry, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tuple, c, candidate, candidates, cert, err, found, kidMatch, matchingKeyID, mismatchKeyID, oneKeyID, s, $s};return $f;
	};
	CertPool.prototype.findPotentialParents = function(cert) { return this.$val.findPotentialParents(cert); };
	CertPool.ptr.prototype.contains = function(cert) {
		var _entry, cert, s;
		s = this;
		if (s === ptrType.nil) {
			return false;
		}
		return (_entry = $mapIndex(s.haveSum,sum224.keyFor(sha256.Sum224(cert.Raw))), _entry !== undefined ? _entry.v : false);
	};
	CertPool.prototype.contains = function(cert) { return this.$val.contains(cert); };
	CertPool.ptr.prototype.AddCert = function(cert) {
		var cert, s;
		s = this;
		if (cert === ptrType$4.nil) {
			$panic(new $String("adding nil Certificate to CertPool"));
		}
		s.addCertFunc($clone(sha256.Sum224(cert.Raw), sum224), ($bytesToString(cert.RawSubject)), (function() {
			return [cert, $ifaceNil];
		}));
	};
	CertPool.prototype.AddCert = function(cert) { return this.$val.AddCert(cert); };
	CertPool.ptr.prototype.addCertFunc = function(rawSum224, rawSubject, getCert) {
		var _entry, _entry$1, _key, _key$1, getCert, rawSubject, rawSum224, s;
		s = this;
		if (getCert === $throwNilPointerError) {
			$panic(new $String("getCert can't be nil"));
		}
		if ((_entry = $mapIndex(s.haveSum,sum224.keyFor(rawSum224)), _entry !== undefined ? _entry.v : false)) {
			return;
		}
		_key = $clone(rawSum224, sum224); (s.haveSum || $throwRuntimeError("assignment to entry in nil map")).set(sum224.keyFor(_key), { k: _key, v: true });
		s.lazyCerts = $append(s.lazyCerts, new lazyCert.ptr((new sliceType$1($stringToBytes(rawSubject))), getCert));
		_key$1 = rawSubject; (s.byName || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$1), { k: _key$1, v: $append((_entry$1 = $mapIndex(s.byName,$String.keyFor(rawSubject)), _entry$1 !== undefined ? _entry$1.v : sliceType$3.nil), s.lazyCerts.$length - 1 >> 0) });
	};
	CertPool.prototype.addCertFunc = function(rawSum224, rawSubject, getCert) { return this.$val.addCertFunc(rawSum224, rawSubject, getCert); };
	CertPool.ptr.prototype.AppendCertsFromPEM = function(pemCerts) {
		var {_r, _r$1, _tuple, _tuple$1, block, cert, certBytes, err, lazyCert$1, ok, pemCerts, s, $s, $r, $c} = $restore(this, {pemCerts});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ok = false;
		s = this;
		/* while (true) { */ case 1:
			/* if (!(pemCerts.$length > 0)) { break; } */ if(!(pemCerts.$length > 0)) { $s = 2; continue; }
			certBytes = [certBytes];
			lazyCert$1 = [lazyCert$1];
			block = ptrType$8.nil;
			_r = pem.Decode(pemCerts); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			block = _tuple[0];
			pemCerts = _tuple[1];
			if (block === ptrType$8.nil) {
				/* break; */ $s = 2; continue;
			}
			if (!(block.Type === "CERTIFICATE") || !(((block.Headers ? block.Headers.size : 0) === 0))) {
				/* continue; */ $s = 1; continue;
			}
			certBytes[0] = block.Bytes;
			_r$1 = ParseCertificate(certBytes[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			cert = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* continue; */ $s = 1; continue;
			}
			lazyCert$1[0] = new structType$3.ptr(new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0)), ptrType$4.nil);
			s.addCertFunc($clone(sha256.Sum224(cert.Raw), sum224), ($bytesToString(cert.RawSubject)), (function(certBytes, lazyCert$1) { return function $b() {
				var {$s, $r, $c} = $restore(this, {});
				/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				$r = lazyCert$1[0].Once.Do((function(certBytes, lazyCert$1) { return function $b() {
					var {_r$2, _tuple$2, $s, $r, $c} = $restore(this, {});
					/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
					_r$2 = ParseCertificate(certBytes[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					lazyCert$1[0].v = _tuple$2[0];
					certBytes[0] = sliceType$1.nil;
					$s = -1; return;
					/* */ } return; } var $f = {$blk: $b, $c: true, $r, _r$2, _tuple$2, $s};return $f;
				}; })(certBytes, lazyCert$1)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [lazyCert$1[0].v, $ifaceNil];
				/* */ } return; } var $f = {$blk: $b, $c: true, $r, $s};return $f;
			}; })(certBytes, lazyCert$1));
			ok = true;
		$s = 1; continue;
		case 2:
		ok = ok;
		$s = -1; return ok;
		/* */ } return; } var $f = {$blk: CertPool.ptr.prototype.AppendCertsFromPEM, $c: true, $r, _r, _r$1, _tuple, _tuple$1, block, cert, certBytes, err, lazyCert$1, ok, pemCerts, s, $s};return $f;
	};
	CertPool.prototype.AppendCertsFromPEM = function(pemCerts) { return this.$val.AppendCertsFromPEM(pemCerts); };
	CertPool.ptr.prototype.Subjects = function() {
		var _i, _ref, i, lc, res, s;
		s = this;
		res = $makeSlice(sliceType$30, s.len());
		_ref = s.lazyCerts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			lc = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), lazyCert);
			((i < 0 || i >= res.$length) ? ($throwRuntimeError("index out of range"), undefined) : res.$array[res.$offset + i] = lc.rawSubject);
			_i++;
		}
		return res;
	};
	CertPool.prototype.Subjects = function() { return this.$val.Subjects(); };
	CertPool.ptr.prototype.Equal = function(other) {
		var _entry, _entry$1, _i, _key, _keys, _ref, _size, h, other, s;
		s = this;
		if (s === ptrType.nil || other === ptrType.nil) {
			return s === other;
		}
		if (!(s.systemPool === other.systemPool) || !(((s.haveSum ? s.haveSum.size : 0) === (other.haveSum ? other.haveSum.size : 0)))) {
			return false;
		}
		_ref = s.haveSum;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				continue;
			}
			h = $clone(_entry.k, sum224);
			if (!(_entry$1 = $mapIndex(other.haveSum,sum224.keyFor(h)), _entry$1 !== undefined ? _entry$1.v : false)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	CertPool.prototype.Equal = function(other) { return this.$val.Equal(other); };
	SignatureAlgorithm.methods = [{prop: "isRSAPSS", name: "isRSAPSS", pkg: "crypto/x509", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	PublicKeyAlgorithm.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$4], [$Bool], false)}, {prop: "hasSANExtension", name: "hasSANExtension", pkg: "crypto/x509", typ: $funcType([], [$Bool], false)}, {prop: "CheckSignatureFrom", name: "CheckSignatureFrom", pkg: "", typ: $funcType([ptrType$4], [$error], false)}, {prop: "CheckSignature", name: "CheckSignature", pkg: "", typ: $funcType([SignatureAlgorithm, sliceType$1, sliceType$1], [$error], false)}, {prop: "hasNameConstraints", name: "hasNameConstraints", pkg: "crypto/x509", typ: $funcType([], [$Bool], false)}, {prop: "getSANExtension", name: "getSANExtension", pkg: "crypto/x509", typ: $funcType([], [sliceType$1], false)}, {prop: "CheckCRLSignature", name: "CheckCRLSignature", pkg: "", typ: $funcType([ptrType$9], [$error], false)}, {prop: "CreateCRL", name: "CreateCRL", pkg: "", typ: $funcType([io.Reader, $emptyInterface, sliceType$13, time.Time, time.Time], [sliceType$1, $error], false)}, {prop: "checkNameConstraints", name: "checkNameConstraints", pkg: "crypto/x509", typ: $funcType([ptrType$16, $Int, $String, $String, $emptyInterface, funcType, $emptyInterface, $emptyInterface], [$error], false)}, {prop: "isValid", name: "isValid", pkg: "crypto/x509", typ: $funcType([$Int, sliceType$20, ptrType$26], [$error], false)}, {prop: "Verify", name: "Verify", pkg: "", typ: $funcType([VerifyOptions], [sliceType$21, $error], false)}, {prop: "buildChains", name: "buildChains", pkg: "crypto/x509", typ: $funcType([sliceType$20, ptrType$16, ptrType$26], [sliceType$21, $error], false)}, {prop: "VerifyHostname", name: "VerifyHostname", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "systemVerify", name: "systemVerify", pkg: "crypto/x509", typ: $funcType([ptrType$26], [sliceType$21, $error], false)}];
	InsecureAlgorithmError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ConstraintViolationError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnhandledCriticalExtension.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	CertificateInvalidError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	HostnameError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnknownAuthorityError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	SystemRootsError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "len", name: "len", pkg: "crypto/x509", typ: $funcType([], [$Int], false)}, {prop: "cert", name: "cert", pkg: "crypto/x509", typ: $funcType([$Int], [ptrType$4, $error], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "findPotentialParents", name: "findPotentialParents", pkg: "crypto/x509", typ: $funcType([ptrType$4], [sliceType$20], false)}, {prop: "contains", name: "contains", pkg: "crypto/x509", typ: $funcType([ptrType$4], [$Bool], false)}, {prop: "AddCert", name: "AddCert", pkg: "", typ: $funcType([ptrType$4], [], false)}, {prop: "addCertFunc", name: "addCertFunc", pkg: "crypto/x509", typ: $funcType([sum224, $String, funcType$2], [], false)}, {prop: "AppendCertsFromPEM", name: "AppendCertsFromPEM", pkg: "", typ: $funcType([sliceType$1], [$Bool], false)}, {prop: "Subjects", name: "Subjects", pkg: "", typ: $funcType([], [sliceType$30], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType], [$Bool], false)}];
	certificate.init("", [{prop: "Raw", name: "Raw", embedded: false, exported: true, typ: asn1.RawContent, tag: ""}, {prop: "TBSCertificate", name: "TBSCertificate", embedded: false, exported: true, typ: tbsCertificate, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", embedded: false, exported: true, typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "SignatureValue", name: "SignatureValue", embedded: false, exported: true, typ: asn1.BitString, tag: ""}]);
	tbsCertificate.init("", [{prop: "Raw", name: "Raw", embedded: false, exported: true, typ: asn1.RawContent, tag: ""}, {prop: "Version", name: "Version", embedded: false, exported: true, typ: $Int, tag: "asn1:\"optional,explicit,default:0,tag:0\""}, {prop: "SerialNumber", name: "SerialNumber", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", embedded: false, exported: true, typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "Issuer", name: "Issuer", embedded: false, exported: true, typ: asn1.RawValue, tag: ""}, {prop: "Validity", name: "Validity", embedded: false, exported: true, typ: validity, tag: ""}, {prop: "Subject", name: "Subject", embedded: false, exported: true, typ: asn1.RawValue, tag: ""}, {prop: "PublicKey", name: "PublicKey", embedded: false, exported: true, typ: publicKeyInfo, tag: ""}, {prop: "UniqueId", name: "UniqueId", embedded: false, exported: true, typ: asn1.BitString, tag: "asn1:\"optional,tag:1\""}, {prop: "SubjectUniqueId", name: "SubjectUniqueId", embedded: false, exported: true, typ: asn1.BitString, tag: "asn1:\"optional,tag:2\""}, {prop: "Extensions", name: "Extensions", embedded: false, exported: true, typ: sliceType$8, tag: "asn1:\"omitempty,optional,explicit,tag:3\""}]);
	validity.init("", [{prop: "NotBefore", name: "NotBefore", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "NotAfter", name: "NotAfter", embedded: false, exported: true, typ: time.Time, tag: ""}]);
	publicKeyInfo.init("", [{prop: "Raw", name: "Raw", embedded: false, exported: true, typ: asn1.RawContent, tag: ""}, {prop: "Algorithm", name: "Algorithm", embedded: false, exported: true, typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "PublicKey", name: "PublicKey", embedded: false, exported: true, typ: asn1.BitString, tag: ""}]);
	authKeyId.init("", [{prop: "Id", name: "Id", embedded: false, exported: true, typ: sliceType$1, tag: "asn1:\"optional,tag:0\""}]);
	pssParameters.init("", [{prop: "Hash", name: "Hash", embedded: false, exported: true, typ: pkix.AlgorithmIdentifier, tag: "asn1:\"explicit,tag:0\""}, {prop: "MGF", name: "MGF", embedded: false, exported: true, typ: pkix.AlgorithmIdentifier, tag: "asn1:\"explicit,tag:1\""}, {prop: "SaltLength", name: "SaltLength", embedded: false, exported: true, typ: $Int, tag: "asn1:\"explicit,tag:2\""}, {prop: "TrailerField", name: "TrailerField", embedded: false, exported: true, typ: $Int, tag: "asn1:\"optional,explicit,tag:3,default:1\""}]);
	Certificate.init("", [{prop: "Raw", name: "Raw", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "RawTBSCertificate", name: "RawTBSCertificate", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "RawSubjectPublicKeyInfo", name: "RawSubjectPublicKeyInfo", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "RawSubject", name: "RawSubject", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "RawIssuer", name: "RawIssuer", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Signature", name: "Signature", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", embedded: false, exported: true, typ: SignatureAlgorithm, tag: ""}, {prop: "PublicKeyAlgorithm", name: "PublicKeyAlgorithm", embedded: false, exported: true, typ: PublicKeyAlgorithm, tag: ""}, {prop: "PublicKey", name: "PublicKey", embedded: false, exported: true, typ: $emptyInterface, tag: ""}, {prop: "Version", name: "Version", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "SerialNumber", name: "SerialNumber", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Issuer", name: "Issuer", embedded: false, exported: true, typ: pkix.Name, tag: ""}, {prop: "Subject", name: "Subject", embedded: false, exported: true, typ: pkix.Name, tag: ""}, {prop: "NotBefore", name: "NotBefore", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "NotAfter", name: "NotAfter", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "KeyUsage", name: "KeyUsage", embedded: false, exported: true, typ: KeyUsage, tag: ""}, {prop: "Extensions", name: "Extensions", embedded: false, exported: true, typ: sliceType$8, tag: ""}, {prop: "ExtraExtensions", name: "ExtraExtensions", embedded: false, exported: true, typ: sliceType$8, tag: ""}, {prop: "UnhandledCriticalExtensions", name: "UnhandledCriticalExtensions", embedded: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "ExtKeyUsage", name: "ExtKeyUsage", embedded: false, exported: true, typ: sliceType$22, tag: ""}, {prop: "UnknownExtKeyUsage", name: "UnknownExtKeyUsage", embedded: false, exported: true, typ: sliceType$11, tag: ""}, {prop: "BasicConstraintsValid", name: "BasicConstraintsValid", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "IsCA", name: "IsCA", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "MaxPathLen", name: "MaxPathLen", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "MaxPathLenZero", name: "MaxPathLenZero", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "SubjectKeyId", name: "SubjectKeyId", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "AuthorityKeyId", name: "AuthorityKeyId", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "OCSPServer", name: "OCSPServer", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "IssuingCertificateURL", name: "IssuingCertificateURL", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "DNSNames", name: "DNSNames", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "EmailAddresses", name: "EmailAddresses", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "IPAddresses", name: "IPAddresses", embedded: false, exported: true, typ: sliceType$18, tag: ""}, {prop: "URIs", name: "URIs", embedded: false, exported: true, typ: sliceType$19, tag: ""}, {prop: "PermittedDNSDomainsCritical", name: "PermittedDNSDomainsCritical", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "PermittedDNSDomains", name: "PermittedDNSDomains", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "ExcludedDNSDomains", name: "ExcludedDNSDomains", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "PermittedIPRanges", name: "PermittedIPRanges", embedded: false, exported: true, typ: sliceType$28, tag: ""}, {prop: "ExcludedIPRanges", name: "ExcludedIPRanges", embedded: false, exported: true, typ: sliceType$28, tag: ""}, {prop: "PermittedEmailAddresses", name: "PermittedEmailAddresses", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "ExcludedEmailAddresses", name: "ExcludedEmailAddresses", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "PermittedURIDomains", name: "PermittedURIDomains", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "ExcludedURIDomains", name: "ExcludedURIDomains", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "CRLDistributionPoints", name: "CRLDistributionPoints", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "PolicyIdentifiers", name: "PolicyIdentifiers", embedded: false, exported: true, typ: sliceType$11, tag: ""}]);
	ConstraintViolationError.init("", []);
	UnhandledCriticalExtension.init("", []);
	basicConstraints.init("", [{prop: "IsCA", name: "IsCA", embedded: false, exported: true, typ: $Bool, tag: "asn1:\"optional\""}, {prop: "MaxPathLen", name: "MaxPathLen", embedded: false, exported: true, typ: $Int, tag: "asn1:\"optional,default:-1\""}]);
	policyInformation.init("", [{prop: "Policy", name: "Policy", embedded: false, exported: true, typ: asn1.ObjectIdentifier, tag: ""}]);
	authorityInfoAccess.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Location", name: "Location", embedded: false, exported: true, typ: asn1.RawValue, tag: ""}]);
	distributionPoint.init("", [{prop: "DistributionPoint", name: "DistributionPoint", embedded: false, exported: true, typ: distributionPointName, tag: "asn1:\"optional,tag:0\""}, {prop: "Reason", name: "Reason", embedded: false, exported: true, typ: asn1.BitString, tag: "asn1:\"optional,tag:1\""}, {prop: "CRLIssuer", name: "CRLIssuer", embedded: false, exported: true, typ: asn1.RawValue, tag: "asn1:\"optional,tag:2\""}]);
	distributionPointName.init("", [{prop: "FullName", name: "FullName", embedded: false, exported: true, typ: sliceType$7, tag: "asn1:\"optional,tag:0\""}, {prop: "RelativeName", name: "RelativeName", embedded: false, exported: true, typ: pkix.RDNSequence, tag: "asn1:\"optional,tag:1\""}]);
	CertificateInvalidError.init("", [{prop: "Cert", name: "Cert", embedded: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Reason", name: "Reason", embedded: false, exported: true, typ: InvalidReason, tag: ""}, {prop: "Detail", name: "Detail", embedded: false, exported: true, typ: $String, tag: ""}]);
	HostnameError.init("", [{prop: "Certificate", name: "Certificate", embedded: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Host", name: "Host", embedded: false, exported: true, typ: $String, tag: ""}]);
	UnknownAuthorityError.init("crypto/x509", [{prop: "Cert", name: "Cert", embedded: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "hintErr", name: "hintErr", embedded: false, exported: false, typ: $error, tag: ""}, {prop: "hintCert", name: "hintCert", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
	SystemRootsError.init("", [{prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	VerifyOptions.init("", [{prop: "DNSName", name: "DNSName", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Intermediates", name: "Intermediates", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "Roots", name: "Roots", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "CurrentTime", name: "CurrentTime", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "KeyUsages", name: "KeyUsages", embedded: false, exported: true, typ: sliceType$22, tag: ""}, {prop: "MaxConstraintComparisions", name: "MaxConstraintComparisions", embedded: false, exported: true, typ: $Int, tag: ""}]);
	rfc2821Mailbox.init("crypto/x509", [{prop: "local", name: "local", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "domain", name: "domain", embedded: false, exported: false, typ: $String, tag: ""}]);
	pkcs1PrivateKey.init("", [{prop: "Version", name: "Version", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "N", name: "N", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "E", name: "E", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "D", name: "D", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "P", name: "P", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Q", name: "Q", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Dp", name: "Dp", embedded: false, exported: true, typ: ptrType$1, tag: "asn1:\"optional\""}, {prop: "Dq", name: "Dq", embedded: false, exported: true, typ: ptrType$1, tag: "asn1:\"optional\""}, {prop: "Qinv", name: "Qinv", embedded: false, exported: true, typ: ptrType$1, tag: "asn1:\"optional\""}, {prop: "AdditionalPrimes", name: "AdditionalPrimes", embedded: false, exported: true, typ: sliceType$23, tag: "asn1:\"optional,omitempty\""}]);
	pkcs1AdditionalRSAPrime.init("", [{prop: "Prime", name: "Prime", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Exp", name: "Exp", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Coeff", name: "Coeff", embedded: false, exported: true, typ: ptrType$1, tag: ""}]);
	pkcs1PublicKey.init("", [{prop: "N", name: "N", embedded: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "E", name: "E", embedded: false, exported: true, typ: $Int, tag: ""}]);
	sum224.init($Uint8, 28);
	CertPool.init("crypto/x509", [{prop: "byName", name: "byName", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "lazyCerts", name: "lazyCerts", embedded: false, exported: false, typ: sliceType$29, tag: ""}, {prop: "haveSum", name: "haveSum", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "systemPool", name: "systemPool", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	lazyCert.init("crypto/x509", [{prop: "rawSubject", name: "rawSubject", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "getCert", name: "getCert", embedded: false, exported: false, typ: funcType$2, tag: ""}]);
	privateKey.init([{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PublicKey], [$Bool], false)}]);
	pubKeyEqual.init([{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([crypto.PublicKey], [$Bool], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = aes.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cipher.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = des.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dsa.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ecdsa.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ed25519.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elliptic.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = md5.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rsa.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha1.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha256.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha512.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pkix.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pem.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = godebug.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fs.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cryptobyte.$init(); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1$1.$init(); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		once = new sync.Once.ptr(0, new sync.Mutex.ptr(0, 0));
		systemRoots = ptrType.nil;
		systemRootsErr = $ifaceNil;
		publicKeyAlgoName = $toNativeArray($kindString, ["", "RSA", "DSA", "ECDSA", "Ed25519"]);
		oidSignatureMD2WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 2]);
		oidSignatureMD5WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 4]);
		oidSignatureSHA1WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 5]);
		oidSignatureSHA256WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 11]);
		oidSignatureSHA384WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 12]);
		oidSignatureSHA512WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 13]);
		oidSignatureRSAPSS = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 10]);
		oidSignatureDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 3]);
		oidSignatureDSAWithSHA256 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 3, 4, 3, 2]);
		oidSignatureECDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 1]);
		oidSignatureECDSAWithSHA256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 2]);
		oidSignatureECDSAWithSHA384 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 3]);
		oidSignatureECDSAWithSHA512 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 4]);
		oidSignatureEd25519 = new asn1.ObjectIdentifier([1, 3, 101, 112]);
		oidSHA256 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 3, 4, 2, 1]);
		oidSHA384 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 3, 4, 2, 2]);
		oidSHA512 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 3, 4, 2, 3]);
		oidMGF1 = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 8]);
		oidISOSignatureSHA1WithRSA = new asn1.ObjectIdentifier([1, 3, 14, 3, 2, 29]);
		signatureAlgorithmDetails = new sliceType([$clone(new structType.ptr(1, "MD2-RSA", oidSignatureMD2WithRSA, 1, 0), structType), $clone(new structType.ptr(2, "MD5-RSA", oidSignatureMD5WithRSA, 1, 2), structType), $clone(new structType.ptr(3, "SHA1-RSA", oidSignatureSHA1WithRSA, 1, 3), structType), $clone(new structType.ptr(3, "SHA1-RSA", oidISOSignatureSHA1WithRSA, 1, 3), structType), $clone(new structType.ptr(4, "SHA256-RSA", oidSignatureSHA256WithRSA, 1, 5), structType), $clone(new structType.ptr(5, "SHA384-RSA", oidSignatureSHA384WithRSA, 1, 6), structType), $clone(new structType.ptr(6, "SHA512-RSA", oidSignatureSHA512WithRSA, 1, 7), structType), $clone(new structType.ptr(13, "SHA256-RSAPSS", oidSignatureRSAPSS, 1, 5), structType), $clone(new structType.ptr(14, "SHA384-RSAPSS", oidSignatureRSAPSS, 1, 6), structType), $clone(new structType.ptr(15, "SHA512-RSAPSS", oidSignatureRSAPSS, 1, 7), structType), $clone(new structType.ptr(7, "DSA-SHA1", oidSignatureDSAWithSHA1, 2, 3), structType), $clone(new structType.ptr(8, "DSA-SHA256", oidSignatureDSAWithSHA256, 2, 5), structType), $clone(new structType.ptr(9, "ECDSA-SHA1", oidSignatureECDSAWithSHA1, 3, 3), structType), $clone(new structType.ptr(10, "ECDSA-SHA256", oidSignatureECDSAWithSHA256, 3, 5), structType), $clone(new structType.ptr(11, "ECDSA-SHA384", oidSignatureECDSAWithSHA384, 3, 6), structType), $clone(new structType.ptr(12, "ECDSA-SHA512", oidSignatureECDSAWithSHA512, 3, 7), structType), $clone(new structType.ptr(16, "Ed25519", oidSignatureEd25519, 4, 0), structType)]);
		hashToPSSParameters = $makeMap(crypto.Hash.keyFor, [{ k: 5, v: $clone(new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, new sliceType$1([48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 162, 3, 2, 1, 32])), asn1.RawValue) }, { k: 6, v: $clone(new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, new sliceType$1([48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 162, 3, 2, 1, 48])), asn1.RawValue) }, { k: 7, v: $clone(new asn1.RawValue.ptr(0, 0, false, sliceType$1.nil, new sliceType$1([48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 162, 3, 2, 1, 64])), asn1.RawValue) }]);
		oidPublicKeyRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 1]);
		oidPublicKeyDSA = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 1]);
		oidPublicKeyECDSA = new asn1.ObjectIdentifier([1, 2, 840, 10045, 2, 1]);
		oidPublicKeyEd25519 = oidSignatureEd25519;
		oidNamedCurveP224 = new asn1.ObjectIdentifier([1, 3, 132, 0, 33]);
		oidNamedCurveP256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 3, 1, 7]);
		oidNamedCurveP384 = new asn1.ObjectIdentifier([1, 3, 132, 0, 34]);
		oidNamedCurveP521 = new asn1.ObjectIdentifier([1, 3, 132, 0, 35]);
		oidExtKeyUsageAny = new asn1.ObjectIdentifier([2, 5, 29, 37, 0]);
		oidExtKeyUsageServerAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 1]);
		oidExtKeyUsageClientAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 2]);
		oidExtKeyUsageCodeSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 3]);
		oidExtKeyUsageEmailProtection = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 4]);
		oidExtKeyUsageIPSECEndSystem = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 5]);
		oidExtKeyUsageIPSECTunnel = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 6]);
		oidExtKeyUsageIPSECUser = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 7]);
		oidExtKeyUsageTimeStamping = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 8]);
		oidExtKeyUsageOCSPSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 9]);
		oidExtKeyUsageMicrosoftServerGatedCrypto = new asn1.ObjectIdentifier([1, 3, 6, 1, 4, 1, 311, 10, 3, 3]);
		oidExtKeyUsageNetscapeServerGatedCrypto = new asn1.ObjectIdentifier([2, 16, 840, 1, 113730, 4, 1]);
		oidExtKeyUsageMicrosoftCommercialCodeSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 4, 1, 311, 2, 1, 22]);
		oidExtKeyUsageMicrosoftKernelCodeSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 4, 1, 311, 61, 1, 1]);
		extKeyUsageOIDs = new sliceType$2([$clone(new structType$1.ptr(0, oidExtKeyUsageAny), structType$1), $clone(new structType$1.ptr(1, oidExtKeyUsageServerAuth), structType$1), $clone(new structType$1.ptr(2, oidExtKeyUsageClientAuth), structType$1), $clone(new structType$1.ptr(3, oidExtKeyUsageCodeSigning), structType$1), $clone(new structType$1.ptr(4, oidExtKeyUsageEmailProtection), structType$1), $clone(new structType$1.ptr(5, oidExtKeyUsageIPSECEndSystem), structType$1), $clone(new structType$1.ptr(6, oidExtKeyUsageIPSECTunnel), structType$1), $clone(new structType$1.ptr(7, oidExtKeyUsageIPSECUser), structType$1), $clone(new structType$1.ptr(8, oidExtKeyUsageTimeStamping), structType$1), $clone(new structType$1.ptr(9, oidExtKeyUsageOCSPSigning), structType$1), $clone(new structType$1.ptr(10, oidExtKeyUsageMicrosoftServerGatedCrypto), structType$1), $clone(new structType$1.ptr(11, oidExtKeyUsageNetscapeServerGatedCrypto), structType$1), $clone(new structType$1.ptr(12, oidExtKeyUsageMicrosoftCommercialCodeSigning), structType$1), $clone(new structType$1.ptr(13, oidExtKeyUsageMicrosoftKernelCodeSigning), structType$1)]);
		$pkg.ErrUnsupportedAlgorithm = errors.New("x509: cannot verify signature: algorithm unimplemented");
		oidExtensionSubjectKeyId = new sliceType$3([2, 5, 29, 14]);
		oidExtensionKeyUsage = new sliceType$3([2, 5, 29, 15]);
		oidExtensionExtendedKeyUsage = new sliceType$3([2, 5, 29, 37]);
		oidExtensionAuthorityKeyId = new sliceType$3([2, 5, 29, 35]);
		oidExtensionBasicConstraints = new sliceType$3([2, 5, 29, 19]);
		oidExtensionSubjectAltName = new sliceType$3([2, 5, 29, 17]);
		oidExtensionCertificatePolicies = new sliceType$3([2, 5, 29, 32]);
		oidExtensionNameConstraints = new sliceType$3([2, 5, 29, 30]);
		oidExtensionCRLDistributionPoints = new sliceType$3([2, 5, 29, 31]);
		oidExtensionAuthorityInfoAccess = new sliceType$3([1, 3, 6, 1, 5, 5, 7, 1, 1]);
		oidAuthorityInfoAccessOcsp = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 1]);
		oidAuthorityInfoAccessIssuers = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 2]);
		emptyASN1Subject = new sliceType$1([48, 0]);
		errNotParsed = errors.New("x509: missing ASN.1 contents; use ParseCertificate");
		certFiles = new sliceType$4([]);
		certDirectories = new sliceType$4([]);
		$pkg.IncorrectPasswordError = errors.New("x509: decryption password incorrect");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, rand, rsa, x509, pkix, pem, js, big, time, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$1, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType$2, sliceType$7, ptrType$3, sliceType$8, mapType, main, generitiCert;
	rand = $packages["crypto/rand"];
	rsa = $packages["crypto/rsa"];
	x509 = $packages["crypto/x509"];
	pkix = $packages["crypto/x509/pkix"];
	pem = $packages["encoding/pem"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	big = $packages["math/big"];
	time = $packages["time"];
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(big.Int);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType(pkix.AttributeTypeAndValue);
	ptrType$1 = $ptrType(time.Location);
	sliceType$3 = $sliceType(pkix.Extension);
	sliceType$4 = $sliceType($packages["encoding/asn1"].ObjectIdentifier);
	sliceType$5 = $sliceType(x509.ExtKeyUsage);
	sliceType$6 = $sliceType($packages["net"].IP);
	ptrType$2 = $ptrType($packages["net/url"].URL);
	sliceType$7 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType($packages["net"].IPNet);
	sliceType$8 = $sliceType(ptrType$3);
	mapType = $mapType($String, $emptyInterface);
	main = function() {
		$module.exports.generitiCert = js.MakeFunc(generitiCert);
	};
	generitiCert = function(this$1, arguments$1) {
		var {$24r, $24r$1, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, arguments$1, certPEM, derBytes, err, privateKey, privateKeyPEM, template, this$1, $s, $r, $c} = $restore(this, {this$1, arguments$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		template = [template];
		_r = rsa.GenerateKey(rand.Reader, 2048); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		privateKey = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = err.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = new $String(_r$1);
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$2 = time.Now(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, time.Time).Unix(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = big.NewInt(_r$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = time.Now(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = time.Now(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = $clone(_r$6, time.Time).AddDate(1, 0, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		template[0] = new x509.Certificate.ptr(sliceType.nil, sliceType.nil, sliceType.nil, sliceType.nil, sliceType.nil, sliceType.nil, 0, 0, $ifaceNil, 0, _r$4, new pkix.Name.ptr(sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, "", "", sliceType$2.nil, sliceType$2.nil), $clone(new pkix.Name.ptr(sliceType$1.nil, new sliceType$1(["SPRD"]), new sliceType$1(["SPRD"]), sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, "", "localhost", sliceType$2.nil, sliceType$2.nil), pkix.Name), $clone(_r$5, time.Time), $clone(_r$7, time.Time), 5, sliceType$3.nil, sliceType$3.nil, sliceType$4.nil, new sliceType$5([1]), sliceType$4.nil, true, false, 0, false, sliceType.nil, sliceType.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$6.nil, sliceType$7.nil, false, sliceType$1.nil, sliceType$1.nil, sliceType$8.nil, sliceType$8.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, sliceType$4.nil);
		_r$8 = x509.CreateCertificate(rand.Reader, template[0], template[0], privateKey.PublicKey, privateKey); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$1 = _r$8;
		derBytes = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:
			_r$9 = err.Error(); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$24r$1 = new $String(_r$9);
			$s = 16; case 16: return $24r$1;
		/* } */ case 14:
		_r$10 = pem.EncodeToMemory(new pem.Block.ptr("CERTIFICATE", false, derBytes)); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		certPEM = _r$10;
		_r$11 = x509.MarshalPKCS1PrivateKey(privateKey); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$12 = pem.EncodeToMemory(new pem.Block.ptr("RSA PRIVATE KEY", false, _r$11)); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		privateKeyPEM = _r$12;
		$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "certificate", v: new $String(($bytesToString(certPEM))) }, { k: "privateKey", v: new $String(($bytesToString(privateKeyPEM))) }]));
		/* */ } return; } var $f = {$blk: generitiCert, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, arguments$1, certPEM, derBytes, err, privateKey, privateKeyPEM, template, this$1, $s};return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = rand.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rsa.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = x509.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pkix.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pem.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($pkg === $mainPkg) {
			main();
			$mainFinished = true;
		}
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
$initAllLinknames();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=main.js.map
